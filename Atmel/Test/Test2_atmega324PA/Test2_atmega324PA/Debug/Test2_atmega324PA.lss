
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001b10  00001ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000262  00800104  00800104  00001ba8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001eba  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098e  00000000  00000000  00003cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aeb  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007d8  00000000  00000000  0000513c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000987  00000000  00000000  00005914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fe9  00000000  00000000  0000629b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00008284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 e1       	ldi	r30, 0x10	; 16
      90:	fb e1       	ldi	r31, 0x1B	; 27
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 30       	cpi	r26, 0x04	; 4
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a4 e0       	ldi	r26, 0x04	; 4
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 36       	cpi	r26, 0x66	; 102
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 40 01 	call	0x280	; 0x280 <main>
      b2:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initAll>:

int bune =0; //teste


void initAll(){
	initUSART1(9600);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 9f 07 	call	0xf3e	; 0xf3e <initUSART1>
	initTimer0();
      c2:	0e 94 b9 03 	call	0x772	; 0x772 <initTimer0>
	initTimer1();
      c6:	0e 94 35 0a 	call	0x146a	; 0x146a <initTimer1>
	initTimer2();
      ca:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <initTimer2>
	initSensors();
      ce:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <initSensors>
      d2:	08 95       	ret

000000d4 <executeCommands>:
	}
	
}


void executeCommands(){
      d4:	bf 92       	push	r11
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	61 97       	sbiw	r28, 0x11	; 17
      ec:	0f b6       	in	r0, 0x3f	; 63
      ee:	f8 94       	cli
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	0f be       	out	0x3f, r0	; 63
      f4:	cd bf       	out	0x3d, r28	; 61
		//startUltrasonicMeasure();
	int8_t s;
	command lastcmd = getLastCommand(&s);
      f6:	ce 01       	movw	r24, r28
      f8:	01 96       	adiw	r24, 0x01	; 1
      fa:	0e 94 df 08 	call	0x11be	; 0x11be <getLastCommand>
      fe:	d3 2e       	mov	r13, r19
     100:	c4 2e       	mov	r12, r20
     102:	2a 83       	std	Y+2, r18	; 0x02
     104:	3b 83       	std	Y+3, r19	; 0x03
     106:	4c 83       	std	Y+4, r20	; 0x04
     108:	5d 83       	std	Y+5, r21	; 0x05
     10a:	6e 83       	std	Y+6, r22	; 0x06
     10c:	7f 83       	std	Y+7, r23	; 0x07
     10e:	88 87       	std	Y+8, r24	; 0x08
     110:	ed 80       	ldd	r14, Y+5	; 0x05
     112:	fe 80       	ldd	r15, Y+6	; 0x06
	if(s==1){
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	09 f0       	breq	.+2      	; 0x11c <executeCommands+0x48>
     11a:	43 c0       	rjmp	.+134    	; 0x1a2 <executeCommands+0xce>
		//CHECK CRC
		
		if(lastcmd.time){
     11c:	e1 14       	cp	r14, r1
     11e:	f1 04       	cpc	r15, r1
     120:	11 f1       	breq	.+68     	; 0x166 <executeCommands+0x92>
					
				isAutonomous = 0;	
     122:	10 92 09 01 	sts	0x0109, r1
     126:	10 92 08 01 	sts	0x0108, r1
				response resp;
				resp.header = lastcmd.header;
     12a:	02 2f       	mov	r16, r18
     12c:	29 87       	std	Y+9, r18	; 0x09
				resp.sensorInfo[0]=2;
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	8a 87       	std	Y+10, r24	; 0x0a
				resp.sensorInfo[1]=3;
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	8b 87       	std	Y+11, r24	; 0x0b
				resp.time=lastcmd.time;
     136:	7e 2d       	mov	r23, r14
     138:	f9 8a       	std	Y+17, r15	; 0x11
     13a:	e8 8a       	std	Y+16, r14	; 0x10
				sendResponse(resp);
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	23 e0       	ldi	r18, 0x03	; 3
     140:	3c 85       	ldd	r19, Y+12	; 0x0c
     142:	4d 85       	ldd	r20, Y+13	; 0x0d
     144:	5e 85       	ldd	r21, Y+14	; 0x0e
     146:	6f 85       	ldd	r22, Y+15	; 0x0f
     148:	89 89       	ldd	r24, Y+17	; 0x11
     14a:	0e 94 32 08 	call	0x1064	; 0x1064 <sendResponse>
				
			if(lastcmd.right!=0){
     14e:	dd 20       	and	r13, r13
     150:	29 f0       	breq	.+10     	; 0x15c <executeCommands+0x88>
				driveRightForTime(lastcmd.right, lastcmd.time);
     152:	b7 01       	movw	r22, r14
     154:	8d 2d       	mov	r24, r13
     156:	0e 94 78 02 	call	0x4f0	; 0x4f0 <driveRightForTime>
     15a:	23 c0       	rjmp	.+70     	; 0x1a2 <executeCommands+0xce>
			}else{
				driveForwardForTime(lastcmd.forward, lastcmd.time);
     15c:	b7 01       	movw	r22, r14
     15e:	8c 2d       	mov	r24, r12
     160:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <driveForwardForTime>
     164:	1e c0       	rjmp	.+60     	; 0x1a2 <executeCommands+0xce>
			}
			
		}else{
			isAutonomous=1;
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	30 93 09 01 	sts	0x0109, r19
     16e:	20 93 08 01 	sts	0x0108, r18
			car_speed = lastcmd.forward;
     172:	c0 92 04 01 	sts	0x0104, r12
			changePwm_MotorLB(car_speed);
     176:	80 91 04 01 	lds	r24, 0x0104
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <changePwm_MotorLB>
			changePwm_MotorRB(car_speed);
     180:	80 91 04 01 	lds	r24, 0x0104
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 8f 01 	call	0x31e	; 0x31e <changePwm_MotorRB>
			changePwm_MotorLF(car_speed);
     18a:	80 91 04 01 	lds	r24, 0x0104
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 49 01 	call	0x292	; 0x292 <changePwm_MotorLF>
			changePwm_MotorRF(car_speed);
     194:	80 91 04 01 	lds	r24, 0x0104
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 77 01 	call	0x2ee	; 0x2ee <changePwm_MotorRF>
			reverse();
     19e:	0e 94 de 02 	call	0x5bc	; 0x5bc <reverse>
		}

	}
	
		
			if(isAutonomous){
     1a2:	80 91 08 01 	lds	r24, 0x0108
     1a6:	90 91 09 01 	lds	r25, 0x0109
     1aa:	89 2b       	or	r24, r25
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <executeCommands+0xdc>
     1ae:	58 c0       	rjmp	.+176    	; 0x260 <executeCommands+0x18c>
			cm_IR = getInfraredRightDistance();
     1b0:	0e 94 02 04 	call	0x804	; 0x804 <getInfraredRightDistance>
     1b4:	80 93 07 01 	sts	0x0107, r24
			mm_US = getAverageUltrasonicValue(3);
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	0e 94 22 04 	call	0x844	; 0x844 <getAverageUltrasonicValue>
     1be:	90 93 06 01 	sts	0x0106, r25
     1c2:	80 93 05 01 	sts	0x0105, r24
							
			if(cm_IR<20 && (turning >> 1 == 0)){
     1c6:	80 91 07 01 	lds	r24, 0x0107
     1ca:	84 31       	cpi	r24, 0x14	; 20
     1cc:	a0 f4       	brcc	.+40     	; 0x1f6 <executeCommands+0x122>
     1ce:	80 91 0a 01 	lds	r24, 0x010A
     1d2:	90 91 0b 01 	lds	r25, 0x010B
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	89 2b       	or	r24, r25
     1dc:	61 f4       	brne	.+24     	; 0x1f6 <executeCommands+0x122>
				//turnRight_90degrees();
				turnLeft();
     1de:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <turnLeft>
				turning|=1<<1;
     1e2:	80 91 0a 01 	lds	r24, 0x010A
     1e6:	90 91 0b 01 	lds	r25, 0x010B
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	90 93 0b 01 	sts	0x010B, r25
     1f0:	80 93 0a 01 	sts	0x010A, r24
     1f4:	35 c0       	rjmp	.+106    	; 0x260 <executeCommands+0x18c>
				//breakAll();
				}else if((turning >> 1 == 1) && cm_IR>=20){
     1f6:	80 91 0a 01 	lds	r24, 0x010A
     1fa:	90 91 0b 01 	lds	r25, 0x010B
     1fe:	9c 01       	movw	r18, r24
     200:	35 95       	asr	r19
     202:	27 95       	ror	r18
     204:	21 30       	cpi	r18, 0x01	; 1
     206:	31 05       	cpc	r19, r1
     208:	71 f4       	brne	.+28     	; 0x226 <executeCommands+0x152>
     20a:	20 91 07 01 	lds	r18, 0x0107
     20e:	24 31       	cpi	r18, 0x14	; 20
     210:	50 f0       	brcs	.+20     	; 0x226 <executeCommands+0x152>
				turning&= ~(1<<1);
     212:	8d 7f       	andi	r24, 0xFD	; 253
     214:	90 93 0b 01 	sts	0x010B, r25
     218:	80 93 0a 01 	sts	0x010A, r24
				stopTurning();
     21c:	0e 94 c4 02 	call	0x588	; 0x588 <stopTurning>
				reverse();
     220:	0e 94 de 02 	call	0x5bc	; 0x5bc <reverse>
     224:	1d c0       	rjmp	.+58     	; 0x260 <executeCommands+0x18c>
				
			}else if(mm_US<250 && ((turning & 1) == 0)){
     226:	20 91 05 01 	lds	r18, 0x0105
     22a:	30 91 06 01 	lds	r19, 0x0106
     22e:	2a 3f       	cpi	r18, 0xFA	; 250
     230:	31 05       	cpc	r19, r1
     232:	40 f4       	brcc	.+16     	; 0x244 <executeCommands+0x170>
     234:	80 fd       	sbrc	r24, 0
     236:	08 c0       	rjmp	.+16     	; 0x248 <executeCommands+0x174>
				//turnRight_90degrees();
			//	turnLeft();
				turning|=1;
     238:	81 60       	ori	r24, 0x01	; 1
     23a:	90 93 0b 01 	sts	0x010B, r25
     23e:	80 93 0a 01 	sts	0x010A, r24
     242:	0e c0       	rjmp	.+28     	; 0x260 <executeCommands+0x18c>
				//breakAll();
				}else if(((turning &1) ==1) && mm_US>=250){
     244:	80 ff       	sbrs	r24, 0
     246:	0c c0       	rjmp	.+24     	; 0x260 <executeCommands+0x18c>
     248:	20 91 05 01 	lds	r18, 0x0105
     24c:	30 91 06 01 	lds	r19, 0x0106
     250:	2a 3f       	cpi	r18, 0xFA	; 250
     252:	31 05       	cpc	r19, r1
     254:	28 f0       	brcs	.+10     	; 0x260 <executeCommands+0x18c>
				turning&=~1;
     256:	8e 7f       	andi	r24, 0xFE	; 254
     258:	90 93 0b 01 	sts	0x010B, r25
     25c:	80 93 0a 01 	sts	0x010A, r24



		}
	
     260:	61 96       	adiw	r28, 0x11	; 17
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	08 95       	ret

00000280 <main>:


int main(void)
{
	
	initAll();
     280:	0e 94 5d 00 	call	0xba	; 0xba <initAll>
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
     284:	0f 9a       	sbi	0x01, 7	; 1
	
	sei();
     286:	78 94       	sei

	breakAll();
     288:	0e 94 b2 03 	call	0x764	; 0x764 <breakAll>
		
	
	while(1)
	{
		executeCommands();		
     28c:	0e 94 6a 00 	call	0xd4	; 0xd4 <executeCommands>
     290:	fd cf       	rjmp	.-6      	; 0x28c <main+0xc>

00000292 <changePwm_MotorLF>:
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     292:	bc 01       	movw	r22, r24
     294:	88 27       	eor	r24, r24
     296:	77 fd       	sbrc	r23, 7
     298:	80 95       	com	r24
     29a:	98 2f       	mov	r25, r24
     29c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	48 ec       	ldi	r20, 0xC8	; 200
     2a6:	52 e4       	ldi	r21, 0x42	; 66
     2a8:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	4f e7       	ldi	r20, 0x7F	; 127
     2b2:	53 e4       	ldi	r21, 0x43	; 67
     2b4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     2b8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     2bc:	67 bd       	out	0x27, r22	; 39
     2be:	08 95       	ret

000002c0 <changePwm_MotorLB>:
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     2c0:	bc 01       	movw	r22, r24
     2c2:	88 27       	eor	r24, r24
     2c4:	77 fd       	sbrc	r23, 7
     2c6:	80 95       	com	r24
     2c8:	98 2f       	mov	r25, r24
     2ca:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	48 ec       	ldi	r20, 0xC8	; 200
     2d4:	52 e4       	ldi	r21, 0x42	; 66
     2d6:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	4f e7       	ldi	r20, 0x7F	; 127
     2e0:	53 e4       	ldi	r21, 0x43	; 67
     2e2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     2e6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     2ea:	68 bd       	out	0x28, r22	; 40
     2ec:	08 95       	ret

000002ee <changePwm_MotorRF>:
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     2ee:	bc 01       	movw	r22, r24
     2f0:	88 27       	eor	r24, r24
     2f2:	77 fd       	sbrc	r23, 7
     2f4:	80 95       	com	r24
     2f6:	98 2f       	mov	r25, r24
     2f8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	48 ec       	ldi	r20, 0xC8	; 200
     302:	52 e4       	ldi	r21, 0x42	; 66
     304:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	4f e7       	ldi	r20, 0x7F	; 127
     30e:	53 e4       	ldi	r21, 0x43	; 67
     310:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     314:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     318:	60 93 b3 00 	sts	0x00B3, r22
     31c:	08 95       	ret

0000031e <changePwm_MotorRB>:
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     31e:	bc 01       	movw	r22, r24
     320:	88 27       	eor	r24, r24
     322:	77 fd       	sbrc	r23, 7
     324:	80 95       	com	r24
     326:	98 2f       	mov	r25, r24
     328:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	48 ec       	ldi	r20, 0xC8	; 200
     332:	52 e4       	ldi	r21, 0x42	; 66
     334:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	4f e7       	ldi	r20, 0x7F	; 127
     33e:	53 e4       	ldi	r21, 0x43	; 67
     340:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     344:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     348:	60 93 b4 00 	sts	0x00B4, r22
     34c:	08 95       	ret

0000034e <driveBackwardForTime>:
		executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
	}	
	
}

void driveBackwardForTime(uint8_t pwm, uint16_t time){
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	2a 97       	sbiw	r28, 0x0a	; 10
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
	
		//check if it is a negative number and if it is call the complementary function
		if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     36e:	88 23       	and	r24, r24
     370:	24 f4       	brge	.+8      	; 0x37a <driveBackwardForTime+0x2c>
			//it is a negative pwm
			int8_t pwm_signed = pwm;
			pwm_signed = -pwm_signed;
			driveForwardForTime(pwm_signed, time);
     372:	81 95       	neg	r24
     374:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <driveForwardForTime>
     378:	1e c0       	rjmp	.+60     	; 0x3b6 <driveBackwardForTime+0x68>
		}
		else
		{
			int16_t arg1[3];
			int16_t arg2[]= {0, 0};
     37a:	18 86       	std	Y+8, r1	; 0x08
     37c:	1f 82       	std	Y+7, r1	; 0x07
     37e:	1a 86       	std	Y+10, r1	; 0x0a
     380:	19 86       	std	Y+9, r1	; 0x09
			
			// the pwm is for backward but expressed like forward
			// it must be reversed
			
			int8_t pwm_signed = pwm;
			pwm_signed = -pwm_signed;
     382:	81 95       	neg	r24
			//change back to unsigned so that the bit operations work properly
			pwm = pwm_signed;
			
			arg1[0] = pwm;
     384:	90 e0       	ldi	r25, 0x00	; 0
			arg1[0] |= pwm << 8;
     386:	38 2f       	mov	r19, r24
     388:	22 27       	eor	r18, r18
     38a:	82 2b       	or	r24, r18
     38c:	93 2b       	or	r25, r19
     38e:	9a 83       	std	Y+2, r25	; 0x02
     390:	89 83       	std	Y+1, r24	; 0x01
			arg1[1] = pwm;
			arg1[1] |= pwm << 8;
     392:	9c 83       	std	Y+4, r25	; 0x04
     394:	8b 83       	std	Y+3, r24	; 0x03
			
			executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
     396:	6b 01       	movw	r12, r22
     398:	ce 01       	movw	r24, r28
     39a:	07 96       	adiw	r24, 0x07	; 7
     39c:	7c 01       	movw	r14, r24
     39e:	02 e0       	ldi	r16, 0x02	; 2
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	9e 01       	movw	r18, r28
     3a4:	2f 5f       	subi	r18, 0xFF	; 255
     3a6:	3f 4f       	sbci	r19, 0xFF	; 255
     3a8:	42 e0       	ldi	r20, 0x02	; 2
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	67 ee       	ldi	r22, 0xE7	; 231
     3ae:	72 e0       	ldi	r23, 0x02	; 2
     3b0:	cb 01       	movw	r24, r22
     3b2:	0e 94 ef 09 	call	0x13de	; 0x13de <executeCommandForTime>
		}
	
	
}
     3b6:	2a 96       	adiw	r28, 0x0a	; 10
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
     3ce:	df 90       	pop	r13
     3d0:	cf 90       	pop	r12
     3d2:	08 95       	ret

000003d4 <driveForwardForTime>:
	executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
	}
	
}

void driveForwardForTime(uint8_t pwm, uint16_t time){
     3d4:	cf 92       	push	r12
     3d6:	df 92       	push	r13
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	2a 97       	sbiw	r28, 0x0a	; 10
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     3f4:	88 23       	and	r24, r24
     3f6:	24 f4       	brge	.+8      	; 0x400 <driveForwardForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		driveBackwardForTime(pwm_signed, time);
     3f8:	81 95       	neg	r24
     3fa:	0e 94 a7 01 	call	0x34e	; 0x34e <driveBackwardForTime>
     3fe:	1d c0       	rjmp	.+58     	; 0x43a <driveForwardForTime+0x66>
	} 
	else
	{
		int16_t arg1[3];
		int16_t arg2[]= {0, 0};
     400:	18 86       	std	Y+8, r1	; 0x08
     402:	1f 82       	std	Y+7, r1	; 0x07
     404:	1a 86       	std	Y+10, r1	; 0x0a
     406:	19 86       	std	Y+9, r1	; 0x09
		
		arg1[0] = pwm;
     408:	90 e0       	ldi	r25, 0x00	; 0
		arg1[0] |= pwm << 8;
     40a:	38 2f       	mov	r19, r24
     40c:	22 27       	eor	r18, r18
     40e:	82 2b       	or	r24, r18
     410:	93 2b       	or	r25, r19
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
		arg1[1] = pwm;
		arg1[1] |= pwm << 8;
     416:	9c 83       	std	Y+4, r25	; 0x04
     418:	8b 83       	std	Y+3, r24	; 0x03

		executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
     41a:	6b 01       	movw	r12, r22
     41c:	ce 01       	movw	r24, r28
     41e:	07 96       	adiw	r24, 0x07	; 7
     420:	7c 01       	movw	r14, r24
     422:	02 e0       	ldi	r16, 0x02	; 2
     424:	10 e0       	ldi	r17, 0x00	; 0
     426:	9e 01       	movw	r18, r28
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	42 e0       	ldi	r20, 0x02	; 2
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	67 ee       	ldi	r22, 0xE7	; 231
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	cb 01       	movw	r24, r22
     436:	0e 94 ef 09 	call	0x13de	; 0x13de <executeCommandForTime>
	}	
	
}
     43a:	2a 96       	adiw	r28, 0x0a	; 10
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	08 95       	ret

00000458 <driveLeftForTime>:
	
}



void driveLeftForTime(uint8_t pwm, uint16_t time){
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	2a 97       	sbiw	r28, 0x0a	; 10
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     478:	88 23       	and	r24, r24
     47a:	24 f4       	brge	.+8      	; 0x484 <driveLeftForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		
		driveRightForTime(pwm_signed, time);
     47c:	81 95       	neg	r24
     47e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <driveRightForTime>
     482:	27 c0       	rjmp	.+78     	; 0x4d2 <driveLeftForTime+0x7a>
		
		}else{
		
		int16_t arg1[] = {0x5050, 0xB0B0};
     484:	20 e5       	ldi	r18, 0x50	; 80
     486:	30 e5       	ldi	r19, 0x50	; 80
     488:	38 87       	std	Y+8, r19	; 0x08
     48a:	2f 83       	std	Y+7, r18	; 0x07
     48c:	20 eb       	ldi	r18, 0xB0	; 176
     48e:	30 eb       	ldi	r19, 0xB0	; 176
     490:	3a 87       	std	Y+10, r19	; 0x0a
     492:	29 87       	std	Y+9, r18	; 0x09
		int16_t arg2[3];
		
		arg2[0] = pwm;
     494:	90 e0       	ldi	r25, 0x00	; 0
		arg2[0] |= pwm << 8;
     496:	38 2f       	mov	r19, r24
     498:	22 27       	eor	r18, r18
     49a:	82 2b       	or	r24, r18
     49c:	93 2b       	or	r25, r19
     49e:	9a 83       	std	Y+2, r25	; 0x02
     4a0:	89 83       	std	Y+1, r24	; 0x01
		arg2[1] = pwm;
		arg2[1] |= pwm << 8;
     4a2:	9c 83       	std	Y+4, r25	; 0x04
     4a4:	8b 83       	std	Y+3, r24	; 0x03

		arg2[2] = time;
     4a6:	7e 83       	std	Y+6, r23	; 0x06
     4a8:	6d 83       	std	Y+5, r22	; 0x05
		
		executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
     4aa:	0f 2e       	mov	r0, r31
     4ac:	fc e8       	ldi	r31, 0x8C	; 140
     4ae:	cf 2e       	mov	r12, r31
     4b0:	d1 2c       	mov	r13, r1
     4b2:	f0 2d       	mov	r31, r0
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	7c 01       	movw	r14, r24
     4ba:	03 e0       	ldi	r16, 0x03	; 3
     4bc:	10 e0       	ldi	r17, 0x00	; 0
     4be:	9e 01       	movw	r18, r28
     4c0:	29 5f       	subi	r18, 0xF9	; 249
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	42 e0       	ldi	r20, 0x02	; 2
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	67 ee       	ldi	r22, 0xE7	; 231
     4ca:	72 e0       	ldi	r23, 0x02	; 2
     4cc:	cb 01       	movw	r24, r22
     4ce:	0e 94 ef 09 	call	0x13de	; 0x13de <executeCommandForTime>
	}
	
}
     4d2:	2a 96       	adiw	r28, 0x0a	; 10
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	08 95       	ret

000004f0 <driveRightForTime>:

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
}
	 
void driveRightForTime(uint8_t pwm, uint16_t time){
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	2a 97       	sbiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
	
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){ 
     510:	88 23       	and	r24, r24
     512:	24 f4       	brge	.+8      	; 0x51c <driveRightForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		
		driveLeftForTime(pwm_signed, time);
     514:	81 95       	neg	r24
     516:	0e 94 2c 02 	call	0x458	; 0x458 <driveLeftForTime>
     51a:	27 c0       	rjmp	.+78     	; 0x56a <driveRightForTime+0x7a>
		
	}else{
	
	int16_t arg1[] = {0xB0B0, 0x5050};
     51c:	20 eb       	ldi	r18, 0xB0	; 176
     51e:	30 eb       	ldi	r19, 0xB0	; 176
     520:	38 87       	std	Y+8, r19	; 0x08
     522:	2f 83       	std	Y+7, r18	; 0x07
     524:	20 e5       	ldi	r18, 0x50	; 80
     526:	30 e5       	ldi	r19, 0x50	; 80
     528:	3a 87       	std	Y+10, r19	; 0x0a
     52a:	29 87       	std	Y+9, r18	; 0x09
	int16_t arg2[3];	
	
	arg2[0] = pwm;
     52c:	90 e0       	ldi	r25, 0x00	; 0
	arg2[0] |= pwm << 8;	
     52e:	38 2f       	mov	r19, r24
     530:	22 27       	eor	r18, r18
     532:	82 2b       	or	r24, r18
     534:	93 2b       	or	r25, r19
     536:	9a 83       	std	Y+2, r25	; 0x02
     538:	89 83       	std	Y+1, r24	; 0x01
	arg2[1] = pwm;
	arg2[1] |= pwm << 8;	
     53a:	9c 83       	std	Y+4, r25	; 0x04
     53c:	8b 83       	std	Y+3, r24	; 0x03

	arg2[2] = time;
     53e:	7e 83       	std	Y+6, r23	; 0x06
     540:	6d 83       	std	Y+5, r22	; 0x05

	executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
     542:	0f 2e       	mov	r0, r31
     544:	fc e8       	ldi	r31, 0x8C	; 140
     546:	cf 2e       	mov	r12, r31
     548:	d1 2c       	mov	r13, r1
     54a:	f0 2d       	mov	r31, r0
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	7c 01       	movw	r14, r24
     552:	03 e0       	ldi	r16, 0x03	; 3
     554:	10 e0       	ldi	r17, 0x00	; 0
     556:	9e 01       	movw	r18, r28
     558:	29 5f       	subi	r18, 0xF9	; 249
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	42 e0       	ldi	r20, 0x02	; 2
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	67 ee       	ldi	r22, 0xE7	; 231
     562:	72 e0       	ldi	r23, 0x02	; 2
     564:	cb 01       	movw	r24, r22
     566:	0e 94 ef 09 	call	0x13de	; 0x13de <executeCommandForTime>
	}
	
}
     56a:	2a 96       	adiw	r28, 0x0a	; 10
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	ff 90       	pop	r15
     580:	ef 90       	pop	r14
     582:	df 90       	pop	r13
     584:	cf 90       	pop	r12
     586:	08 95       	ret

00000588 <stopTurning>:
}


void stopTurning(){
		//setez directia initiala
		MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     588:	29 9a       	sbi	0x05, 1	; 5
		MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     58a:	28 98       	cbi	0x05, 0	; 5
		MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     58c:	2d 9a       	sbi	0x05, 5	; 5
		MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     58e:	2a 98       	cbi	0x05, 2	; 5
		
		
		MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     590:	47 9a       	sbi	0x08, 7	; 8
		MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     592:	46 98       	cbi	0x08, 6	; 8
		MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     594:	41 9a       	sbi	0x08, 1	; 8
		MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);
     596:	40 98       	cbi	0x08, 0	; 8
     598:	08 95       	ret

0000059a <changeMotorDirectionLF>:
	changeMotorDirectionRF();
}


void changeMotorDirectionLF(){
	MOTOR_LF_DIR_PIN1 |= (1<<MOTOR_LF_DIR_PIN1x);
     59a:	18 9a       	sbi	0x03, 0	; 3
	MOTOR_LF_DIR_PIN2 |= (1<<MOTOR_LF_DIR_PIN2x);
     59c:	19 9a       	sbi	0x03, 1	; 3
     59e:	08 95       	ret

000005a0 <changeMotorDirectionLB>:
}
	
void changeMotorDirectionLB(){
	MOTOR_LB_DIR_PIN1 |= (1<<MOTOR_LB_DIR_PIN1x);
     5a0:	1a 9a       	sbi	0x03, 2	; 3
	MOTOR_LB_DIR_PIN2 |= (1<<MOTOR_LB_DIR_PIN2x);
     5a2:	1d 9a       	sbi	0x03, 5	; 3
     5a4:	08 95       	ret

000005a6 <turnLeft>:
	
}


void turnLeft(){
	changeMotorDirectionLB();
     5a6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <changeMotorDirectionLB>
	changeMotorDirectionLF();
     5aa:	0e 94 cd 02 	call	0x59a	; 0x59a <changeMotorDirectionLF>
     5ae:	08 95       	ret

000005b0 <changeMotorDirectionRF>:
	MOTOR_LB_DIR_PIN1 |= (1<<MOTOR_LB_DIR_PIN1x);
	MOTOR_LB_DIR_PIN2 |= (1<<MOTOR_LB_DIR_PIN2x);
}
	  
void changeMotorDirectionRF(){
	MOTOR_RF_DIR_PIN1 |= (1<<MOTOR_RF_DIR_PIN1x);	
     5b0:	36 9a       	sbi	0x06, 6	; 6
	MOTOR_RF_DIR_PIN2 |= (1<<MOTOR_RF_DIR_PIN2x);
     5b2:	37 9a       	sbi	0x06, 7	; 6
     5b4:	08 95       	ret

000005b6 <changeMotorDirectionRB>:
}
	 
void changeMotorDirectionRB(){
	MOTOR_RB_DIR_PIN1 |= (1<<MOTOR_RB_DIR_PIN1x);
     5b6:	30 9a       	sbi	0x06, 0	; 6
	MOTOR_RB_DIR_PIN2 |= (1<<MOTOR_RB_DIR_PIN2x);
     5b8:	31 9a       	sbi	0x06, 1	; 6
     5ba:	08 95       	ret

000005bc <reverse>:
	
	
}

void reverse(){
	changeMotorDirectionLB();
     5bc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <changeMotorDirectionLB>
	changeMotorDirectionLF();
     5c0:	0e 94 cd 02 	call	0x59a	; 0x59a <changeMotorDirectionLF>
	changeMotorDirectionRB();
     5c4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <changeMotorDirectionRB>
	changeMotorDirectionRF();
     5c8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <changeMotorDirectionRF>
     5cc:	08 95       	ret

000005ce <move>:
}

void move(uint16_t argc, int16_t* argv){
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	28 97       	sbiw	r28, 0x08	; 8
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	8b 01       	movw	r16, r22
	
	if(argc == 2){
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	91 05       	cpc	r25, r1
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <move+0x2a>
     5f6:	87 c0       	rjmp	.+270    	; 0x706 <move+0x138>
	//setez directia initiala
	MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     5f8:	29 9a       	sbi	0x05, 1	; 5
	MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     5fa:	28 98       	cbi	0x05, 0	; 5
	MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     5fc:	2d 9a       	sbi	0x05, 5	; 5
	MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     5fe:	2a 98       	cbi	0x05, 2	; 5
	
	
	MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     600:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     602:	46 98       	cbi	0x08, 6	; 8
	MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     604:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);
     606:	40 98       	cbi	0x08, 0	; 8
	

	
	int8_t d;
	
	d = argv[0] >> 8;
     608:	fb 01       	movw	r30, r22
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	d8 2e       	mov	r13, r24
	
	if (d < 0){
     60e:	88 23       	and	r24, r24
     610:	1c f4       	brge	.+6      	; 0x618 <move+0x4a>
		d=-d;
     612:	d1 94       	neg	r13
		changeMotorDirectionLF();
     614:	0e 94 cd 02 	call	0x59a	; 0x59a <changeMotorDirectionLF>
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     618:	6d 2d       	mov	r22, r13
     61a:	77 27       	eor	r23, r23
     61c:	67 fd       	sbrc	r22, 7
     61e:	70 95       	com	r23
     620:	87 2f       	mov	r24, r23
     622:	97 2f       	mov	r25, r23
     624:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	48 ec       	ldi	r20, 0xC8	; 200
     62e:	52 e4       	ldi	r21, 0x42	; 66
     630:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	4f e7       	ldi	r20, 0x7F	; 127
     63a:	53 e4       	ldi	r21, 0x43	; 67
     63c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     640:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     644:	67 bd       	out	0x27, r22	; 39
		changeMotorDirectionLF();
	}
	changePwm_MotorLF(d);
	
	
	d = argv[0] & 0xff;
     646:	f8 01       	movw	r30, r16
     648:	80 81       	ld	r24, Z
     64a:	d8 2e       	mov	r13, r24
	
	if (d < 0){
     64c:	88 23       	and	r24, r24
     64e:	1c f4       	brge	.+6      	; 0x656 <move+0x88>
		d=-d;
     650:	d1 94       	neg	r13
		changeMotorDirectionLB();
     652:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <changeMotorDirectionLB>
void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     656:	6d 2d       	mov	r22, r13
     658:	77 27       	eor	r23, r23
     65a:	67 fd       	sbrc	r22, 7
     65c:	70 95       	com	r23
     65e:	87 2f       	mov	r24, r23
     660:	97 2f       	mov	r25, r23
     662:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	48 ec       	ldi	r20, 0xC8	; 200
     66c:	52 e4       	ldi	r21, 0x42	; 66
     66e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	4f e7       	ldi	r20, 0x7F	; 127
     678:	53 e4       	ldi	r21, 0x43	; 67
     67a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     67e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     682:	68 bd       	out	0x28, r22	; 40
		d=-d;
		changeMotorDirectionLB();
	}
	changePwm_MotorLB(d);

	d = argv[1] >> 8;
     684:	f8 01       	movw	r30, r16
     686:	83 81       	ldd	r24, Z+3	; 0x03
     688:	d8 2e       	mov	r13, r24
	if (d < 0){
     68a:	88 23       	and	r24, r24
     68c:	1c f4       	brge	.+6      	; 0x694 <move+0xc6>
		d=-d;
     68e:	d1 94       	neg	r13
		changeMotorDirectionRF();
     690:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <changeMotorDirectionRF>
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     694:	6d 2d       	mov	r22, r13
     696:	77 27       	eor	r23, r23
     698:	67 fd       	sbrc	r22, 7
     69a:	70 95       	com	r23
     69c:	87 2f       	mov	r24, r23
     69e:	97 2f       	mov	r25, r23
     6a0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	48 ec       	ldi	r20, 0xC8	; 200
     6aa:	52 e4       	ldi	r21, 0x42	; 66
     6ac:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	4f e7       	ldi	r20, 0x7F	; 127
     6b6:	53 e4       	ldi	r21, 0x43	; 67
     6b8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     6bc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     6c0:	60 93 b3 00 	sts	0x00B3, r22
		d=-d;
		changeMotorDirectionRF();
	}
	changePwm_MotorRF(d);
	
	d = argv[1] & 0xff;
     6c4:	f8 01       	movw	r30, r16
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	18 2f       	mov	r17, r24
	
	if (d < 0){
     6ca:	88 23       	and	r24, r24
     6cc:	1c f4       	brge	.+6      	; 0x6d4 <move+0x106>
		d=-d;
     6ce:	11 95       	neg	r17
		changeMotorDirectionRB();
     6d0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <changeMotorDirectionRB>
void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     6d4:	61 2f       	mov	r22, r17
     6d6:	77 27       	eor	r23, r23
     6d8:	67 fd       	sbrc	r22, 7
     6da:	70 95       	com	r23
     6dc:	87 2f       	mov	r24, r23
     6de:	97 2f       	mov	r25, r23
     6e0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	48 ec       	ldi	r20, 0xC8	; 200
     6ea:	52 e4       	ldi	r21, 0x42	; 66
     6ec:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	4f e7       	ldi	r20, 0x7F	; 127
     6f6:	53 e4       	ldi	r21, 0x43	; 67
     6f8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     6fc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     700:	60 93 b4 00 	sts	0x00B4, r22
     704:	20 c0       	rjmp	.+64     	; 0x746 <move+0x178>
	if (d < 0){
		d=-d;
		changeMotorDirectionRB();
	}	
	changePwm_MotorRB(d);
	}else if (argc == 3){
     706:	03 97       	sbiw	r24, 0x03	; 3
     708:	f1 f4       	brne	.+60     	; 0x746 <move+0x178>
		
	int16_t arg1[2];
	arg1[0] = argv[0];
     70a:	fb 01       	movw	r30, r22
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	9e 83       	std	Y+6, r25	; 0x06
     712:	8d 83       	std	Y+5, r24	; 0x05
	arg1[1] = argv[1];
     714:	82 81       	ldd	r24, Z+2	; 0x02
     716:	93 81       	ldd	r25, Z+3	; 0x03
     718:	98 87       	std	Y+8, r25	; 0x08
     71a:	8f 83       	std	Y+7, r24	; 0x07
	
	int16_t arg2[] = {0, 0};
     71c:	1a 82       	std	Y+2, r1	; 0x02
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	1c 82       	std	Y+4, r1	; 0x04
     722:	1b 82       	std	Y+3, r1	; 0x03
	executeCommandForTime(&move, &move, 2, arg1,2, arg2,argv[2]);
     724:	c4 80       	ldd	r12, Z+4	; 0x04
     726:	d5 80       	ldd	r13, Z+5	; 0x05
     728:	ce 01       	movw	r24, r28
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	7c 01       	movw	r14, r24
     72e:	02 e0       	ldi	r16, 0x02	; 2
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	9e 01       	movw	r18, r28
     734:	2b 5f       	subi	r18, 0xFB	; 251
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	42 e0       	ldi	r20, 0x02	; 2
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	67 ee       	ldi	r22, 0xE7	; 231
     73e:	72 e0       	ldi	r23, 0x02	; 2
     740:	cb 01       	movw	r24, r22
     742:	0e 94 ef 09 	call	0x13de	; 0x13de <executeCommandForTime>
	
		
	}
	
}
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	08 95       	ret

00000764 <breakAll>:
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     764:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     766:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     768:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     76c:	10 92 b4 00 	sts	0x00B4, r1
     770:	08 95       	ret

00000772 <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LF_DIR_DDR1 |= (1<<MOTOR_LF_DIR_PIN1x);
     772:	20 9a       	sbi	0x04, 0	; 4
	MOTOR_LF_DIR_DDR2 |= (1<<MOTOR_LF_DIR_PIN2x);
     774:	21 9a       	sbi	0x04, 1	; 4
	MOTOR_LB_DIR_DDR1 |= (1<<MOTOR_LB_DIR_PIN1x);
     776:	22 9a       	sbi	0x04, 2	; 4
	MOTOR_LB_DIR_DDR2 |= (1<<MOTOR_LB_DIR_PIN1x);
     778:	22 9a       	sbi	0x04, 2	; 4
	
	//setez directia initiala
	MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     77a:	29 9a       	sbi	0x05, 1	; 5
	MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     77c:	28 98       	cbi	0x05, 0	; 5
	MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     77e:	2d 9a       	sbi	0x05, 5	; 5
	MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     780:	2a 98       	cbi	0x05, 2	; 5
	
	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     782:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     784:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     786:	84 b5       	in	r24, 0x24	; 36
     788:	80 68       	ori	r24, 0x80	; 128
     78a:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     78c:	84 b5       	in	r24, 0x24	; 36
     78e:	8f 7b       	andi	r24, 0xBF	; 191
     790:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     792:	84 b5       	in	r24, 0x24	; 36
     794:	80 62       	ori	r24, 0x20	; 32
     796:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     798:	84 b5       	in	r24, 0x24	; 36
     79a:	8f 7e       	andi	r24, 0xEF	; 239
     79c:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     79e:	84 b5       	in	r24, 0x24	; 36
     7a0:	83 60       	ori	r24, 0x03	; 3
     7a2:	84 bd       	out	0x24, r24	; 36
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     7a4:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     7a6:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
     7a8:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	85 bd       	out	0x25, r24	; 37
     7ae:	08 95       	ret

000007b0 <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RF_DIR_DDR1 |= (1<<MOTOR_RF_DIR_PIN1x);
     7b0:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RF_DIR_DDR2 |= (1<<MOTOR_RF_DIR_PIN2x);
     7b2:	3f 9a       	sbi	0x07, 7	; 7
	MOTOR_RB_DIR_DDR1 |= (1<<MOTOR_RB_DIR_PIN1x);
     7b4:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_RB_DIR_DDR2 |= (1<<MOTOR_RB_DIR_PIN2x);
     7b6:	39 9a       	sbi	0x07, 1	; 7
	
	//setez directia initiala
	MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     7b8:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     7ba:	46 98       	cbi	0x08, 6	; 8
	MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     7bc:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);	
     7be:	40 98       	cbi	0x08, 0	; 8
	
	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     7c0:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     7c2:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     7c4:	e0 eb       	ldi	r30, 0xB0	; 176
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	80 68       	ori	r24, 0x80	; 128
     7cc:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     7ce:	80 81       	ld	r24, Z
     7d0:	8f 7b       	andi	r24, 0xBF	; 191
     7d2:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     7d4:	80 81       	ld	r24, Z
     7d6:	80 62       	ori	r24, 0x20	; 32
     7d8:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     7da:	80 81       	ld	r24, Z
     7dc:	8f 7e       	andi	r24, 0xEF	; 239
     7de:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     7e0:	80 81       	ld	r24, Z
     7e2:	83 60       	ori	r24, 0x03	; 3
     7e4:	80 83       	st	Z, r24
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     7e6:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     7ea:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
     7ee:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     7f2:	e1 eb       	ldi	r30, 0xB1	; 177
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	8c 7f       	andi	r24, 0xFC	; 252
     7fa:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     7fc:	80 81       	ld	r24, Z
     7fe:	84 60       	ori	r24, 0x04	; 4
     800:	80 83       	st	Z, r24
     802:	08 95       	ret

00000804 <getInfraredRightDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+NO_OF_IR_SENSORS];
     804:	20 91 42 01 	lds	r18, 0x0142
     808:	80 91 43 01 	lds	r24, 0x0143
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	a0 e0       	ldi	r26, 0x00	; 0
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	82 0f       	add	r24, r18
     814:	91 1d       	adc	r25, r1
     816:	a1 1d       	adc	r26, r1
     818:	b1 1d       	adc	r27, r1
     81a:	20 91 44 01 	lds	r18, 0x0144
     81e:	82 0f       	add	r24, r18
     820:	91 1d       	adc	r25, r1
     822:	a1 1d       	adc	r26, r1
     824:	b1 1d       	adc	r27, r1
     826:	20 91 45 01 	lds	r18, 0x0145
     82a:	82 0f       	add	r24, r18
     82c:	91 1d       	adc	r25, r1
     82e:	a1 1d       	adc	r26, r1
     830:	b1 1d       	adc	r27, r1
	}

	return avreage/MAX_INFRARED_VALUES;
     832:	b6 95       	lsr	r27
     834:	a7 95       	ror	r26
     836:	97 95       	ror	r25
     838:	87 95       	ror	r24
     83a:	b6 95       	lsr	r27
     83c:	a7 95       	ror	r26
     83e:	97 95       	ror	r25
     840:	87 95       	ror	r24
}
     842:	08 95       	ret

00000844 <getAverageUltrasonicValue>:

uint16_t getLastUltrasonicValue(){
	return UltraSonicValues[US_pos_in_buffer-1];//because it is always the next position
}

uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
     844:	cf 93       	push	r28
     846:	38 2f       	mov	r19, r24
     848:	81 31       	cpi	r24, 0x11	; 17
     84a:	08 f0       	brcs	.+2      	; 0x84e <getAverageUltrasonicValue+0xa>
     84c:	30 e1       	ldi	r19, 0x10	; 16
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     84e:	33 23       	and	r19, r19
     850:	a9 f1       	breq	.+106    	; 0x8bc <getAverageUltrasonicValue+0x78>
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     856:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	cb 01       	movw	r24, r22
     85e:	a0 e1       	ldi	r26, 0x10	; 16
     860:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
	{
		uint16_t aux;
		if(US_pos_in_buffer-i >= 0){ 
     862:	e0 91 0d 01 	lds	r30, 0x010D
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	e4 1b       	sub	r30, r20
     86a:	f5 0b       	sbc	r31, r21
     86c:	6a f0       	brmi	.+26     	; 0x888 <getAverageUltrasonicValue+0x44>
			aux = UltraSonicValues[US_pos_in_buffer-i];
     86e:	e0 91 0d 01 	lds	r30, 0x010D
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	e4 1b       	sub	r30, r20
     876:	f5 0b       	sbc	r31, r21
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	e2 5e       	subi	r30, 0xE2	; 226
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	01 90       	ld	r0, Z+
     882:	f0 81       	ld	r31, Z
     884:	e0 2d       	mov	r30, r0
     886:	0e c0       	rjmp	.+28     	; 0x8a4 <getAverageUltrasonicValue+0x60>
		}else{// rap around
			aux = UltraSonicValues[MAX_ULTRASONIC_VALUES - i + US_pos_in_buffer];
     888:	c0 91 0d 01 	lds	r28, 0x010D
     88c:	fd 01       	movw	r30, r26
     88e:	e4 1b       	sub	r30, r20
     890:	f5 0b       	sbc	r31, r21
     892:	ec 0f       	add	r30, r28
     894:	f1 1d       	adc	r31, r1
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	e2 5e       	subi	r30, 0xE2	; 226
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	01 90       	ld	r0, Z+
     8a0:	f0 81       	ld	r31, Z
     8a2:	e0 2d       	mov	r30, r0
		}
		
		averrage += aux;
     8a4:	6e 0f       	add	r22, r30
     8a6:	7f 1f       	adc	r23, r31
     8a8:	81 1d       	adc	r24, r1
     8aa:	91 1d       	adc	r25, r1
		
		if(aux){ // only if the value is nonzero
     8ac:	ef 2b       	or	r30, r31
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <getAverageUltrasonicValue+0x6e>
			good_vals++;
     8b0:	2f 5f       	subi	r18, 0xFF	; 255
     8b2:	4f 5f       	subi	r20, 0xFF	; 255
     8b4:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     8b6:	43 17       	cp	r20, r19
     8b8:	a0 f2       	brcs	.-88     	; 0x862 <getAverageUltrasonicValue+0x1e>
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <getAverageUltrasonicValue+0x80>
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     8bc:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	cb 01       	movw	r24, r22
			good_vals++;
		}
		
	}
	
	averrage /= good_vals; //it may be better to round it up to the nearest
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__udivmodsi4>
	
	return averrage;
}
     8ce:	c9 01       	movw	r24, r18
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	9c 01       	movw	r18, r24
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0;
     8de:	fa 01       	movw	r30, r20
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e2 5e       	subi	r30, 0xE2	; 226
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	11 82       	std	Z+1, r1	; 0x01
     8ea:	10 82       	st	Z, r1
     8ec:	4f 5f       	subi	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     8f0:	40 31       	cpi	r20, 0x10	; 16
     8f2:	51 05       	cpc	r21, r1
     8f4:	a1 f7       	brne	.-24     	; 0x8de <initUSART0+0xa>
		UltraSonicValues[i] = 0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     8f6:	10 92 4e 01 	sts	0x014E, r1
     8fa:	10 92 4f 01 	sts	0x014F, r1
     8fe:	10 92 50 01 	sts	0x0150, r1
     902:	10 92 51 01 	sts	0x0151, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     906:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     908:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     90a:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     90c:	c2 ec       	ldi	r28, 0xC2	; 194
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	88 81       	ld	r24, Y
     912:	8f 73       	andi	r24, 0x3F	; 63
     914:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     916:	e0 ec       	ldi	r30, 0xC0	; 192
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	8d 7f       	andi	r24, 0xFD	; 253
     91e:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     920:	c9 01       	movw	r24, r18
     922:	aa 27       	eor	r26, r26
     924:	97 fd       	sbrc	r25, 7
     926:	a0 95       	com	r26
     928:	ba 2f       	mov	r27, r26
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	aa 1f       	adc	r26, r26
     938:	bb 1f       	adc	r27, r27
     93a:	9c 01       	movw	r18, r24
     93c:	ad 01       	movw	r20, r26
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	44 1f       	adc	r20, r20
     944:	55 1f       	adc	r21, r21
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	44 1f       	adc	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	72 e1       	ldi	r23, 0x12	; 18
     952:	8a e7       	ldi	r24, 0x7A	; 122
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodsi4>
     95a:	ca 01       	movw	r24, r20
     95c:	b9 01       	movw	r22, r18
     95e:	61 50       	subi	r22, 0x01	; 1
     960:	71 09       	sbc	r23, r1
     962:	81 09       	sbc	r24, r1
     964:	91 09       	sbc	r25, r1
     966:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     96a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     96e:	27 2f       	mov	r18, r23
     970:	33 27       	eor	r19, r19
     972:	27 fd       	sbrc	r18, 7
     974:	3a 95       	dec	r19
     976:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     97a:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     97e:	e1 ec       	ldi	r30, 0xC1	; 193
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 e1       	ldi	r24, 0x10	; 16
     984:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     986:	88 81       	ld	r24, Y
     988:	86 60       	ori	r24, 0x06	; 6
     98a:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     98c:	80 81       	ld	r24, Z
     98e:	8b 7f       	andi	r24, 0xFB	; 251
     990:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     992:	88 81       	ld	r24, Y
     994:	87 7f       	andi	r24, 0xF7	; 247
     996:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     998:	88 81       	ld	r24, Y
     99a:	8f 7c       	andi	r24, 0xCF	; 207
     99c:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     99e:	80 81       	ld	r24, Z
     9a0:	80 68       	ori	r24, 0x80	; 128
     9a2:	80 83       	st	Z, r24
	
		
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <initADC>:

void  initADC(void)
{

	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC0D) | (1<<ADC1D) | (1<<ADC2D) | (1<<ADC3D) ;
     9aa:	ee e7       	ldi	r30, 0x7E	; 126
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	8f 60       	ori	r24, 0x0F	; 15
     9b2:	80 83       	st	Z, r24

	//set Vref to Vcc, va trebui sa fie referinta externa !!
	ADMUX |= (1<<REFS0);
     9b4:	ec e7       	ldi	r30, 0x7C	; 124
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	80 64       	ori	r24, 0x40	; 64
     9bc:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     9be:	80 81       	ld	r24, Z
     9c0:	8f 77       	andi	r24, 0x7F	; 127
     9c2:	80 83       	st	Z, r24
	
	//select ADC0
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     9c4:	80 81       	ld	r24, Z
     9c6:	80 7e       	andi	r24, 0xE0	; 224
     9c8:	80 83       	st	Z, r24
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     9ca:	ea e7       	ldi	r30, 0x7A	; 122
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	88 60       	ori	r24, 0x08	; 8
     9d2:	80 83       	st	Z, r24
	
	
	//enable the ADC
	ADCSRA |= (1<<ADEN);
     9d4:	80 81       	ld	r24, Z
     9d6:	80 68       	ori	r24, 0x80	; 128
     9d8:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     9da:	80 81       	ld	r24, Z
     9dc:	87 60       	ori	r24, 0x07	; 7
     9de:	80 83       	st	Z, r24
	//select free running mode
	//ADCSRB &= ~( (1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2) );


	//start conversion
	ADCSRA |= (1<<ADSC);
     9e0:	80 81       	ld	r24, Z
     9e2:	80 64       	ori	r24, 0x40	; 64
     9e4:	80 83       	st	Z, r24
     9e6:	08 95       	ret

000009e8 <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     9e8:	08 98       	cbi	0x01, 0	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     9ea:	09 98       	cbi	0x01, 1	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     9ec:	0a 98       	cbi	0x01, 2	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     9ee:	0b 98       	cbi	0x01, 3	; 1
	
	initADC();
     9f0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <initADC>
	initUSART0(9600);
     9f4:	80 e8       	ldi	r24, 0x80	; 128
     9f6:	95 e2       	ldi	r25, 0x25	; 37
     9f8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <initUSART0>
     9fc:	08 95       	ret

000009fe <__vector_24>:
	//start conversion
	ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     a24:	60 91 78 00 	lds	r22, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     a28:	80 91 79 00 	lds	r24, 0x0079
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	78 2b       	or	r23, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     a30:	60 31       	cpi	r22, 0x10	; 16
     a32:	71 05       	cpc	r23, r1
     a34:	10 f4       	brcc	.+4      	; 0xa3a <__vector_24+0x3c>
     a36:	60 e1       	ldi	r22, 0x10	; 16
     a38:	70 e0       	ldi	r23, 0x00	; 0
		distance = 30.0;
	}
	*/
		
		//dont forget to set IR_pos_in_buffer = 0 when changing the active sensor
		int pos_in_buff = (activeInfraredSensor * NO_OF_IR_SENSORS) + IR_pos_in_buffer; //(IR_pos_in_buffer&MAX_INFRARED_VALUES_MSK) 
     a3a:	80 91 12 01 	lds	r24, 0x0112
     a3e:	c0 91 11 01 	lds	r28, 0x0111
     a42:	d0 e0       	ldi	r29, 0x00	; 0
     a44:	94 e0       	ldi	r25, 0x04	; 4
     a46:	89 9f       	mul	r24, r25
     a48:	c0 0d       	add	r28, r0
     a4a:	d1 1d       	adc	r29, r1
     a4c:	11 24       	eor	r1, r1
		InfraredValues[pos_in_buff] = floor((2076.0 / (theTenBitResult - 11.0)) + 0.5);
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e3       	ldi	r20, 0x30	; 48
     a5c:	51 e4       	ldi	r21, 0x41	; 65
     a5e:	0e 94 ce 0a 	call	0x159c	; 0x159c <__subsf3>
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 ec       	ldi	r23, 0xC0	; 192
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	95 e4       	ldi	r25, 0x45	; 69
     a6e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	5f e3       	ldi	r21, 0x3F	; 63
     a7a:	0e 94 cf 0a 	call	0x159e	; 0x159e <__addsf3>
     a7e:	0e 94 04 0c 	call	0x1808	; 0x1808 <floor>
     a82:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
     a86:	fe 01       	movw	r30, r28
     a88:	e2 5c       	subi	r30, 0xC2	; 194
     a8a:	fe 4f       	sbci	r31, 0xFE	; 254
     a8c:	60 83       	st	Z, r22
		
		//under lower limit
		if (InfraredValues[pos_in_buff] < 4)
     a8e:	80 81       	ld	r24, Z
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	28 f4       	brcc	.+10     	; 0xa9e <__vector_24+0xa0>
		{
			InfraredValues[pos_in_buff] = 4;
     a94:	84 e0       	ldi	r24, 0x04	; 4
     a96:	fe 01       	movw	r30, r28
     a98:	e2 5c       	subi	r30, 0xC2	; 194
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	80 83       	st	Z, r24
		}
		
		//above upper limit
		if (InfraredValues[pos_in_buff] > 30)
     a9e:	fe 01       	movw	r30, r28
     aa0:	e2 5c       	subi	r30, 0xC2	; 194
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	80 81       	ld	r24, Z
     aa6:	8f 31       	cpi	r24, 0x1F	; 31
     aa8:	10 f0       	brcs	.+4      	; 0xaae <__vector_24+0xb0>
		{
			
			InfraredValues[pos_in_buff] = 30;
     aaa:	8e e1       	ldi	r24, 0x1E	; 30
     aac:	80 83       	st	Z, r24
		}
	
	
	IR_pos_in_buffer++;
     aae:	80 91 11 01 	lds	r24, 0x0111
     ab2:	8f 5f       	subi	r24, 0xFF	; 255
     ab4:	80 93 11 01 	sts	0x0111, r24
	
	if (IR_pos_in_buffer == MAX_INFRARED_VALUES)
     ab8:	80 91 11 01 	lds	r24, 0x0111
     abc:	84 30       	cpi	r24, 0x04	; 4
     abe:	39 f4       	brne	.+14     	; 0xace <__vector_24+0xd0>
	{
		IR_pos_in_buffer = 0;
     ac0:	10 92 11 01 	sts	0x0111, r1
		activeInfraredSensor++;
     ac4:	80 91 12 01 	lds	r24, 0x0112
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	80 93 12 01 	sts	0x0112, r24
	}
	
	if (activeInfraredSensor == NO_OF_IR_SENSORS)
     ace:	80 91 12 01 	lds	r24, 0x0112
     ad2:	84 30       	cpi	r24, 0x04	; 4
     ad4:	11 f4       	brne	.+4      	; 0xada <__vector_24+0xdc>
	{
		activeInfraredSensor = 0;
     ad6:	10 92 12 01 	sts	0x0112, r1
	}
	
	//if the sensors are connected starting with pin 4, then add 4 as a offset
	
	//clear the MUX bits first
	ADMUX &= 0xF0;
     ada:	ec e7       	ldi	r30, 0x7C	; 124
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	80 7f       	andi	r24, 0xF0	; 240
     ae2:	80 83       	st	Z, r24
	
	
	//select the sensor
	ADMUX |= activeInfraredSensor; //+offset
     ae4:	80 81       	ld	r24, Z
     ae6:	90 91 12 01 	lds	r25, 0x0112
     aea:	89 2b       	or	r24, r25
     aec:	80 83       	st	Z, r24
	
	//start a new conversion
	ADCSRA |= 1<<ADSC;
     aee:	ea e7       	ldi	r30, 0x7A	; 122
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	80 64       	ori	r24, 0x40	; 64
     af6:	80 83       	st	Z, r24
}
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f 90       	pop	r0
     b1a:	1f 90       	pop	r1
     b1c:	18 95       	reti

00000b1e <__vector_20>:

ISR(USART0_RX_vect){
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	0f 92       	push	r0
     b26:	11 24       	eor	r1, r1
     b28:	4f 92       	push	r4
     b2a:	5f 92       	push	r5
     b2c:	7f 92       	push	r7
     b2e:	8f 92       	push	r8
     b30:	9f 92       	push	r9
     b32:	af 92       	push	r10
     b34:	bf 92       	push	r11
     b36:	cf 92       	push	r12
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	1f 93       	push	r17
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31


	uint8_t data;
	data = UDR0;
     b5a:	10 91 c6 00 	lds	r17, 0x00C6
	
	if(data == 0x52){ //start of data
     b5e:	12 35       	cpi	r17, 0x52	; 82
     b60:	39 f4       	brne	.+14     	; 0xb70 <__vector_20+0x52>
		ultrasonicDataPack[0] = 'R';
     b62:	82 e5       	ldi	r24, 0x52	; 82
     b64:	80 93 4e 01 	sts	0x014E, r24
		US_data_part_no=1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 0e 01 	sts	0x010E, r24
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__vector_20+0x19c>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     b70:	80 91 4e 01 	lds	r24, 0x014E
     b74:	82 35       	cpi	r24, 0x52	; 82
     b76:	09 f0       	breq	.+2      	; 0xb7a <__vector_20+0x5c>
     b78:	7c c0       	rjmp	.+248    	; 0xc72 <__vector_20+0x154>
     b7a:	80 91 0e 01 	lds	r24, 0x010E
     b7e:	84 30       	cpi	r24, 0x04	; 4
     b80:	09 f0       	breq	.+2      	; 0xb84 <__vector_20+0x66>
     b82:	77 c0       	rjmp	.+238    	; 0xc72 <__vector_20+0x154>
     b84:	1d 30       	cpi	r17, 0x0D	; 13
     b86:	09 f0       	breq	.+2      	; 0xb8a <__vector_20+0x6c>
     b88:	74 c0       	rjmp	.+232    	; 0xc72 <__vector_20+0x154>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     b8a:	0f 2e       	mov	r0, r31
     b8c:	ff e4       	ldi	r31, 0x4F	; 79
     b8e:	ef 2e       	mov	r14, r31
     b90:	f1 e0       	ldi	r31, 0x01	; 1
     b92:	ff 2e       	mov	r15, r31
     b94:	f0 2d       	mov	r31, r0
     b96:	f7 01       	movw	r30, r14
     b98:	60 81       	ld	r22, Z
     b9a:	0f 2e       	mov	r0, r31
     b9c:	f0 e5       	ldi	r31, 0x50	; 80
     b9e:	4f 2e       	mov	r4, r31
     ba0:	f1 e0       	ldi	r31, 0x01	; 1
     ba2:	5f 2e       	mov	r5, r31
     ba4:	f0 2d       	mov	r31, r0
     ba6:	f2 01       	movw	r30, r4
     ba8:	70 80       	ld	r7, Z
     baa:	c1 e5       	ldi	r28, 0x51	; 81
     bac:	d1 e0       	ldi	r29, 0x01	; 1
     bae:	c8 80       	ld	r12, Y
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	48 ec       	ldi	r20, 0xC8	; 200
     bc0:	52 e4       	ldi	r21, 0x42	; 66
     bc2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     bc6:	4b 01       	movw	r8, r22
     bc8:	5c 01       	movw	r10, r24
     bca:	67 2d       	mov	r22, r7
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	c5 01       	movw	r24, r10
     be8:	b4 01       	movw	r22, r8
     bea:	0e 94 cf 0a 	call	0x159e	; 0x159e <__addsf3>
     bee:	4b 01       	movw	r8, r22
     bf0:	5c 01       	movw	r10, r24
     bf2:	6c 2d       	mov	r22, r12
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	c5 01       	movw	r24, r10
     c04:	b4 01       	movw	r22, r8
     c06:	0e 94 cf 0a 	call	0x159e	; 0x159e <__addsf3>
			//transform from inch to mm
			val *= 25.4;
     c0a:	23 e3       	ldi	r18, 0x33	; 51
     c0c:	33 e3       	ldi	r19, 0x33	; 51
     c0e:	4b ec       	ldi	r20, 0xCB	; 203
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3>
			uint16_t mm = floor(val+0.5); // round to the nearest
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	5f e3       	ldi	r21, 0x3F	; 63
     c1e:	0e 94 cf 0a 	call	0x159e	; 0x159e <__addsf3>
     c22:	0e 94 04 0c 	call	0x1808	; 0x1808 <floor>
     c26:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fixunssfsi>
			UltraSonicValues[US_pos_in_buffer] = mm; 
     c2a:	e0 91 0d 01 	lds	r30, 0x010D
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	e2 5e       	subi	r30, 0xE2	; 226
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	71 83       	std	Z+1, r23	; 0x01
     c3a:	60 83       	st	Z, r22
			lastUSonicValue = mm;
     c3c:	70 93 10 01 	sts	0x0110, r23
     c40:	60 93 0f 01 	sts	0x010F, r22
			US_pos_in_buffer++;
     c44:	80 91 0d 01 	lds	r24, 0x010D
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 0d 01 	sts	0x010D, r24

			US_pos_in_buffer &= MAX_ULTRASONIC_VALUES_MSK;
     c4e:	80 91 0d 01 	lds	r24, 0x010D
     c52:	8f 70       	andi	r24, 0x0F	; 15
     c54:	80 93 0d 01 	sts	0x010D, r24
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     c58:	10 92 4e 01 	sts	0x014E, r1
     c5c:	f7 01       	movw	r30, r14
     c5e:	10 82       	st	Z, r1
     c60:	f2 01       	movw	r30, r4
     c62:	10 82       	st	Z, r1
     c64:	18 82       	st	Y, r1
				}
				US_data_part_no=0;
     c66:	10 92 0e 01 	sts	0x010E, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     c6a:	80 91 0c 01 	lds	r24, 0x010C
     c6e:	81 11       	cpse	r24, r1
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     c70:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     c72:	80 91 0e 01 	lds	r24, 0x010E
     c76:	84 30       	cpi	r24, 0x04	; 4
     c78:	50 f0       	brcs	.+20     	; 0xc8e <__vector_20+0x170>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     c7a:	10 92 4e 01 	sts	0x014E, r1
     c7e:	10 92 4f 01 	sts	0x014F, r1
     c82:	10 92 50 01 	sts	0x0150, r1
     c86:	10 92 51 01 	sts	0x0151, r1
			}
			US_data_part_no=0;
     c8a:	10 92 0e 01 	sts	0x010E, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     c8e:	80 91 4e 01 	lds	r24, 0x014E
     c92:	82 35       	cpi	r24, 0x52	; 82
     c94:	91 f4       	brne	.+36     	; 0xcba <__vector_20+0x19c>
			if (isdigit(data))
     c96:	81 2f       	mov	r24, r17
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	c0 97       	sbiw	r24, 0x30	; 48
     c9c:	0a 97       	sbiw	r24, 0x0a	; 10
     c9e:	68 f4       	brcc	.+26     	; 0xcba <__vector_20+0x19c>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     ca0:	e0 91 0e 01 	lds	r30, 0x010E
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 ed       	ldi	r24, 0xD0	; 208
     ca8:	81 0f       	add	r24, r17
     caa:	e2 5b       	subi	r30, 0xB2	; 178
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	80 83       	st	Z, r24
				US_data_part_no++;
     cb0:	80 91 0e 01 	lds	r24, 0x010E
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	80 93 0e 01 	sts	0x010E, r24
			
		}
				
	}

}
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	bf 91       	pop	r27
     cc4:	af 91       	pop	r26
     cc6:	9f 91       	pop	r25
     cc8:	8f 91       	pop	r24
     cca:	7f 91       	pop	r23
     ccc:	6f 91       	pop	r22
     cce:	5f 91       	pop	r21
     cd0:	4f 91       	pop	r20
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	1f 91       	pop	r17
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	7f 90       	pop	r7
     ce8:	5f 90       	pop	r5
     cea:	4f 90       	pop	r4
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	0f 90       	pop	r0
     cf2:	1f 90       	pop	r1
     cf4:	18 95       	reti

00000cf6 <checkPackIsFullLength>:
}

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
     cf6:	28 2f       	mov	r18, r24
     cf8:	2f 77       	andi	r18, 0x7F	; 127
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	f9 01       	movw	r30, r18
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	ee 5a       	subi	r30, 0xAE	; 174
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	9f 3f       	cpi	r25, 0xFF	; 255
     d0a:	b1 f1       	breq	.+108    	; 0xd78 <checkPackIsFullLength+0x82>
		return 0;
	}else{
		pc_no = rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no;
     d0c:	f9 01       	movw	r30, r18
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	ee 5a       	subi	r30, 0xAE	; 174
     d14:	fe 4f       	sbci	r31, 0xFE	; 254
     d16:	61 81       	ldd	r22, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	41 81       	ldd	r20, Z+1	; 0x01
     d1c:	4f 3f       	cpi	r20, 0xFF	; 255
     d1e:	71 f1       	breq	.+92     	; 0xd7c <checkPackIsFullLength+0x86>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     d20:	f9 01       	movw	r30, r18
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ee 5a       	subi	r30, 0xAE	; 174
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	41 81       	ldd	r20, Z+1	; 0x01
     d2c:	55 27       	eor	r21, r21
     d2e:	47 fd       	sbrc	r20, 7
     d30:	50 95       	com	r21
     d32:	26 2f       	mov	r18, r22
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	42 17       	cp	r20, r18
     d38:	53 07       	cpc	r21, r19
     d3a:	11 f5       	brne	.+68     	; 0xd80 <checkPackIsFullLength+0x8a>
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	66 e0       	ldi	r22, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
     d40:	9c 01       	movw	r18, r24
     d42:	2f 77       	andi	r18, 0x7F	; 127
     d44:	33 27       	eor	r19, r19
     d46:	f9 01       	movw	r30, r18
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	ee 5a       	subi	r30, 0xAE	; 174
     d4e:	fe 4f       	sbci	r31, 0xFE	; 254
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	7f 3f       	cpi	r23, 0xFF	; 255
     d54:	b9 f0       	breq	.+46     	; 0xd84 <checkPackIsFullLength+0x8e>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     d56:	f9 01       	movw	r30, r18
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	ee 5a       	subi	r30, 0xAE	; 174
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	21 81       	ldd	r18, Z+1	; 0x01
     d62:	33 27       	eor	r19, r19
     d64:	27 fd       	sbrc	r18, 7
     d66:	30 95       	com	r19
     d68:	24 17       	cp	r18, r20
     d6a:	35 07       	cpc	r19, r21
     d6c:	69 f4       	brne	.+26     	; 0xd88 <checkPackIsFullLength+0x92>
     d6e:	61 50       	subi	r22, 0x01	; 1
     d70:	01 96       	adiw	r24, 0x01	; 1
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     d72:	61 11       	cpse	r22, r1
     d74:	e5 cf       	rjmp	.-54     	; 0xd40 <checkPackIsFullLength+0x4a>
     d76:	0a c0       	rjmp	.+20     	; 0xd8c <checkPackIsFullLength+0x96>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
		return 0;
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	08 95       	ret
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
			return 0;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	08 95       	ret
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	08 95       	ret
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	08 95       	ret
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	08 95       	ret
		}
	}
	return 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
}
     d8e:	08 95       	ret

00000d90 <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     d90:	cf 92       	push	r12
     d92:	df 92       	push	r13
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	27 97       	sbiw	r28, 0x07	; 7
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
	
	
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
     db0:	e0 91 15 01 	lds	r30, 0x0115
     db4:	ef 77       	andi	r30, 0x7F	; 127
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	ee 5a       	subi	r30, 0xAE	; 174
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
     dc2:	e0 91 15 01 	lds	r30, 0x0115
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	31 96       	adiw	r30, 0x01	; 1
     dca:	ef 77       	andi	r30, 0x7F	; 127
     dcc:	ff 27       	eor	r31, r31
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	ee 5a       	subi	r30, 0xAE	; 174
     dd4:	fe 4f       	sbci	r31, 0xFE	; 254
     dd6:	30 81       	ld	r19, Z
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
     dd8:	e0 91 15 01 	lds	r30, 0x0115
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	32 96       	adiw	r30, 0x02	; 2
     de0:	ef 77       	andi	r30, 0x7F	; 127
     de2:	ff 27       	eor	r31, r31
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	ee 5a       	subi	r30, 0xAE	; 174
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	40 81       	ld	r20, Z
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     dee:	e0 91 15 01 	lds	r30, 0x0115
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	33 96       	adiw	r30, 0x03	; 3
     df6:	ef 77       	andi	r30, 0x7F	; 127
     df8:	ff 27       	eor	r31, r31
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	ee 5a       	subi	r30, 0xAE	; 174
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	80 81       	ld	r24, Z
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     e04:	e0 91 15 01 	lds	r30, 0x0115
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	34 96       	adiw	r30, 0x04	; 4
     e0c:	ef 77       	andi	r30, 0x7F	; 127
     e0e:	ff 27       	eor	r31, r31
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	ee 5a       	subi	r30, 0xAE	; 174
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	e0 80       	ld	r14, Z
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     e1a:	f1 2c       	mov	r15, r1
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     e1c:	f8 2a       	or	r15, r24
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     e1e:	e0 91 15 01 	lds	r30, 0x0115
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	35 96       	adiw	r30, 0x05	; 5
     e26:	ef 77       	andi	r30, 0x7F	; 127
     e28:	ff 27       	eor	r31, r31
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	ee 5a       	subi	r30, 0xAE	; 174
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	80 81       	ld	r24, Z
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     e34:	e0 91 15 01 	lds	r30, 0x0115
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	36 96       	adiw	r30, 0x06	; 6
     e3c:	ef 77       	andi	r30, 0x7F	; 127
     e3e:	ff 27       	eor	r31, r31
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	ee 5a       	subi	r30, 0xAE	; 174
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
     e48:	00 81       	ld	r16, Z
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     e4a:	10 e0       	ldi	r17, 0x00	; 0
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     e4c:	18 2b       	or	r17, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
	//sendResponse( rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data);
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
     e52:	ef ef       	ldi	r30, 0xFF	; 255
     e54:	ff ef       	ldi	r31, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     e56:	5f ef       	ldi	r21, 0xFF	; 255

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
     e58:	a0 91 15 01 	lds	r26, 0x0115
     e5c:	6c 01       	movw	r12, r24
     e5e:	ca 0e       	add	r12, r26
     e60:	d1 1c       	adc	r13, r1
     e62:	d6 01       	movw	r26, r12
     e64:	af 77       	andi	r26, 0x7F	; 127
     e66:	bb 27       	eor	r27, r27
     e68:	aa 0f       	add	r26, r26
     e6a:	bb 1f       	adc	r27, r27
     e6c:	ae 5a       	subi	r26, 0xAE	; 174
     e6e:	be 4f       	sbci	r27, 0xFE	; 254
     e70:	ac 91       	ld	r26, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     e72:	ea 27       	eor	r30, r26
     e74:	ae 2f       	mov	r26, r30
     e76:	a2 95       	swap	r26
     e78:	ae 27       	eor	r26, r30
     e7a:	0a 2e       	mov	r0, r26
     e7c:	a6 95       	lsr	r26
     e7e:	a6 95       	lsr	r26
     e80:	a0 25       	eor	r26, r0
     e82:	0a 2e       	mov	r0, r26
     e84:	a6 95       	lsr	r26
     e86:	a0 25       	eor	r26, r0
     e88:	a7 70       	andi	r26, 0x07	; 7
     e8a:	0e 2e       	mov	r0, r30
     e8c:	ef 2f       	mov	r30, r31
     e8e:	a6 95       	lsr	r26
     e90:	07 94       	ror	r0
     e92:	a7 95       	ror	r26
     e94:	f0 2d       	mov	r31, r0
     e96:	ea 27       	eor	r30, r26
     e98:	06 94       	lsr	r0
     e9a:	a7 95       	ror	r26
     e9c:	f0 25       	eor	r31, r0
     e9e:	ea 27       	eor	r30, r26
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     ea0:	a0 91 15 01 	lds	r26, 0x0115
     ea4:	6c 01       	movw	r12, r24
     ea6:	ca 0e       	add	r12, r26
     ea8:	d1 1c       	adc	r13, r1
     eaa:	d6 01       	movw	r26, r12
     eac:	af 77       	andi	r26, 0x7F	; 127
     eae:	bb 27       	eor	r27, r27
     eb0:	aa 0f       	add	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	ae 5a       	subi	r26, 0xAE	; 174
     eb6:	be 4f       	sbci	r27, 0xFE	; 254
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	5c 93       	st	X, r21
     ebc:	01 96       	adiw	r24, 0x01	; 1
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     ebe:	87 30       	cpi	r24, 0x07	; 7
     ec0:	91 05       	cpc	r25, r1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <fetchCommand+0x136>
     ec4:	c9 cf       	rjmp	.-110    	; 0xe58 <fetchCommand+0xc8>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
	}
	
	if (crc == 0){
     ec6:	ef 2b       	or	r30, r31
     ec8:	21 f4       	brne	.+8      	; 0xed2 <fetchCommand+0x142>
		*CRC_correct = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	fb 01       	movw	r30, r22
     ece:	80 83       	st	Z, r24
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <fetchCommand+0x146>
		}else{
		*CRC_correct = 0;
     ed2:	fb 01       	movw	r30, r22
     ed4:	10 82       	st	Z, r1
	}
	
	return comm;
     ed6:	fd 82       	std	Y+5, r15	; 0x05
     ed8:	ec 82       	std	Y+4, r14	; 0x04
     eda:	1f 83       	std	Y+7, r17	; 0x07
     edc:	0e 83       	std	Y+6, r16	; 0x06
     ede:	5e 2d       	mov	r21, r14
     ee0:	6d 81       	ldd	r22, Y+5	; 0x05
     ee2:	70 2f       	mov	r23, r16
}
     ee4:	8f 81       	ldd	r24, Y+7	; 0x07
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	27 96       	adiw	r28, 0x07	; 7
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	08 95       	ret

00000f06 <__clearBuffers>:
	}
	
}

void __clearBuffers(){
		for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
			rxBuffer[i].pack_no =-1;
     f0a:	2f ef       	ldi	r18, 0xFF	; 255
     f0c:	fc 01       	movw	r30, r24
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	df 01       	movw	r26, r30
     f14:	ae 5a       	subi	r26, 0xAE	; 174
     f16:	be 4f       	sbci	r27, 0xFE	; 254
     f18:	11 96       	adiw	r26, 0x01	; 1
     f1a:	2c 93       	st	X, r18
			txBuffer[i].pack_no =-1;
     f1c:	ee 5a       	subi	r30, 0xAE	; 174
     f1e:	fd 4f       	sbci	r31, 0xFD	; 253
     f20:	21 83       	std	Z+1, r18	; 0x01
			txBuffer[i].data =0;
     f22:	10 82       	st	Z, r1
	}
	
}

void __clearBuffers(){
		for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	80 38       	cpi	r24, 0x80	; 128
     f28:	91 05       	cpc	r25, r1
     f2a:	81 f7       	brne	.-32     	; 0xf0c <__clearBuffers+0x6>
			rxBuffer[i].pack_no =-1;
			txBuffer[i].pack_no =-1;
			txBuffer[i].data =0;
		}
		txWritePos = 0;
     f2c:	10 92 13 01 	sts	0x0113, r1
		txReadPos = 0;
     f30:	10 92 14 01 	sts	0x0114, r1
		rxReadPos = 0;
     f34:	10 92 19 01 	sts	0x0119, r1
		rxWritePos = 0;
     f38:	10 92 18 01 	sts	0x0118, r1
     f3c:	08 95       	ret

00000f3e <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	8c 01       	movw	r16, r24
		
		///TEST////
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}*/
	__clearBuffers();
     f48:	0e 94 83 07 	call	0xf06	; 0xf06 <__clearBuffers>
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
     f4c:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
     f4e:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
     f50:	ca ec       	ldi	r28, 0xCA	; 202
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	88 81       	ld	r24, Y
     f56:	8f 73       	andi	r24, 0x3F	; 63
     f58:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
     f5a:	e8 ec       	ldi	r30, 0xC8	; 200
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8d 7f       	andi	r24, 0xFD	; 253
     f62:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     f64:	c8 01       	movw	r24, r16
     f66:	aa 27       	eor	r26, r26
     f68:	97 fd       	sbrc	r25, 7
     f6a:	a0 95       	com	r26
     f6c:	ba 2f       	mov	r27, r26
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	aa 1f       	adc	r26, r26
     f74:	bb 1f       	adc	r27, r27
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	aa 1f       	adc	r26, r26
     f7c:	bb 1f       	adc	r27, r27
     f7e:	9c 01       	movw	r18, r24
     f80:	ad 01       	movw	r20, r26
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	44 1f       	adc	r20, r20
     f88:	55 1f       	adc	r21, r21
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	44 1f       	adc	r20, r20
     f90:	55 1f       	adc	r21, r21
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	72 e1       	ldi	r23, 0x12	; 18
     f96:	8a e7       	ldi	r24, 0x7A	; 122
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodsi4>
     f9e:	ca 01       	movw	r24, r20
     fa0:	b9 01       	movw	r22, r18
     fa2:	61 50       	subi	r22, 0x01	; 1
     fa4:	71 09       	sbc	r23, r1
     fa6:	81 09       	sbc	r24, r1
     fa8:	91 09       	sbc	r25, r1
     faa:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     fae:	0e 94 a8 0c 	call	0x1950	; 0x1950 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
     fb2:	27 2f       	mov	r18, r23
     fb4:	33 27       	eor	r19, r19
     fb6:	27 fd       	sbrc	r18, 7
     fb8:	3a 95       	dec	r19
     fba:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
     fbe:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     fc2:	e9 ec       	ldi	r30, 0xC9	; 201
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	88 e1       	ldi	r24, 0x18	; 24
     fc8:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
     fca:	88 81       	ld	r24, Y
     fcc:	86 60       	ori	r24, 0x06	; 6
     fce:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
     fd0:	80 81       	ld	r24, Z
     fd2:	8b 7f       	andi	r24, 0xFB	; 251
     fd4:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
     fd6:	88 81       	ld	r24, Y
     fd8:	87 7f       	andi	r24, 0xF7	; 247
     fda:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
     fdc:	88 81       	ld	r24, Y
     fde:	8f 7c       	andi	r24, 0xCF	; 207
     fe0:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
     fe2:	80 81       	ld	r24, Z
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
     fe8:	80 81       	ld	r24, Z
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	80 83       	st	Z, r24
	
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <__tryToSend>:
	
}

//this is used to send data so that USART1_TX_vect can be triggered
void __tryToSend(){ 
	if (UCSR1A & (1<<UDRE1)) //if data register is empty send a byte
     ff8:	80 91 c8 00 	lds	r24, 0x00C8
     ffc:	85 ff       	sbrs	r24, 5
     ffe:	31 c0       	rjmp	.+98     	; 0x1062 <__tryToSend+0x6a>
	{
		cli();
    1000:	f8 94       	cli
		if(txBuffer[txReadPos].pack_no != -1){
    1002:	e0 91 14 01 	lds	r30, 0x0114
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	ee 5a       	subi	r30, 0xAE	; 174
    100e:	fd 4f       	sbci	r31, 0xFD	; 253
    1010:	81 81       	ldd	r24, Z+1	; 0x01
    1012:	8f 3f       	cpi	r24, 0xFF	; 255
    1014:	29 f1       	breq	.+74     	; 0x1060 <__tryToSend+0x68>
				UDR1 = txBuffer[txReadPos].data;
    1016:	e0 91 14 01 	lds	r30, 0x0114
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	ee 5a       	subi	r30, 0xAE	; 174
    1022:	fd 4f       	sbci	r31, 0xFD	; 253
    1024:	80 81       	ld	r24, Z
    1026:	80 93 ce 00 	sts	0x00CE, r24
				txBuffer[txReadPos].pack_no = -1;
    102a:	e0 91 14 01 	lds	r30, 0x0114
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	ee 5a       	subi	r30, 0xAE	; 174
    1036:	fd 4f       	sbci	r31, 0xFD	; 253
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	81 83       	std	Z+1, r24	; 0x01
				txBuffer[txReadPos].data = 0;
    103c:	e0 91 14 01 	lds	r30, 0x0114
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	ee 5a       	subi	r30, 0xAE	; 174
    1048:	fd 4f       	sbci	r31, 0xFD	; 253
    104a:	10 82       	st	Z, r1
				txReadPos++;
    104c:	80 91 14 01 	lds	r24, 0x0114
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	80 93 14 01 	sts	0x0114, r24
				txReadPos &= TX_BUFFER_SIZE_MSK;
    1056:	80 91 14 01 	lds	r24, 0x0114
    105a:	8f 77       	andi	r24, 0x7F	; 127
    105c:	80 93 14 01 	sts	0x0114, r24
				if(txReadPos >= TX_BUFFER_SIZE){
					txReadPos=0;
				}
				*/
		}
		sei();
    1060:	78 94       	sei
    1062:	08 95       	ret

00001064 <sendResponse>:
	}
	
	return comm;
}

void sendResponse(response r){
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	29 97       	sbiw	r28, 0x09	; 9
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	09 83       	std	Y+1, r16	; 0x01
    107e:	1a 83       	std	Y+2, r17	; 0x02
    1080:	2b 83       	std	Y+3, r18	; 0x03
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	4d 83       	std	Y+5, r20	; 0x05
    1086:	5e 83       	std	Y+6, r21	; 0x06
    1088:	6f 83       	std	Y+7, r22	; 0x07
    108a:	97 2f       	mov	r25, r23
    108c:	78 87       	std	Y+8, r23	; 0x08
    108e:	89 87       	std	Y+9, r24	; 0x09
	
	int8_t header = r.header;
	uint16_t i = txWritePos;
    1090:	e0 91 13 01 	lds	r30, 0x0113
    1094:	4e 2f       	mov	r20, r30
    1096:	50 e0       	ldi	r21, 0x00	; 0
	
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = header;
    1098:	ef 77       	andi	r30, 0x7F	; 127
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	ee 5a       	subi	r30, 0xAE	; 174
    10a2:	fd 4f       	sbci	r31, 0xFD	; 253
    10a4:	00 83       	st	Z, r16
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    10a6:	01 83       	std	Z+1, r16	; 0x01
	i++;
    10a8:	fa 01       	movw	r30, r20
    10aa:	31 96       	adiw	r30, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
    10ac:	ef 77       	andi	r30, 0x7F	; 127
    10ae:	ff 27       	eor	r31, r31
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	ee 5a       	subi	r30, 0xAE	; 174
    10b6:	fd 4f       	sbci	r31, 0xFD	; 253
    10b8:	26 e0       	ldi	r18, 0x06	; 6
    10ba:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    10bc:	01 83       	std	Z+1, r16	; 0x01
	i++;
    10be:	9a 01       	movw	r18, r20
    10c0:	2e 5f       	subi	r18, 0xFE	; 254
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	fe 01       	movw	r30, r28
    10c6:	32 96       	adiw	r30, 0x02	; 2
    10c8:	be 01       	movw	r22, r28
    10ca:	68 5f       	subi	r22, 0xF8	; 248
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
    10ce:	d9 01       	movw	r26, r18
    10d0:	af 77       	andi	r26, 0x7F	; 127
    10d2:	bb 27       	eor	r27, r27
    10d4:	11 91       	ld	r17, Z+
    10d6:	aa 0f       	add	r26, r26
    10d8:	bb 1f       	adc	r27, r27
    10da:	ae 5a       	subi	r26, 0xAE	; 174
    10dc:	bd 4f       	sbci	r27, 0xFD	; 253
    10de:	1c 93       	st	X, r17
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    10e0:	11 96       	adiw	r26, 0x01	; 1
    10e2:	0c 93       	st	X, r16
		i++;
    10e4:	2f 5f       	subi	r18, 0xFF	; 255
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
	i++;
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
    10e8:	e6 17       	cp	r30, r22
    10ea:	f7 07       	cpc	r31, r23
    10ec:	81 f7       	brne	.-32     	; 0x10ce <sendResponse+0x6a>
    10ee:	fa 01       	movw	r30, r20
    10f0:	38 96       	adiw	r30, 0x08	; 8
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
		i++;
	}
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time >> 8); // first 8 bits
    10f2:	ef 77       	andi	r30, 0x7F	; 127
    10f4:	ff 27       	eor	r31, r31
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	ee 5a       	subi	r30, 0xAE	; 174
    10fc:	fd 4f       	sbci	r31, 0xFD	; 253
    10fe:	80 83       	st	Z, r24
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1100:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1102:	fa 01       	movw	r30, r20
    1104:	39 96       	adiw	r30, 0x09	; 9
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time & 0xFF); // next 8 bits
    1106:	ef 77       	andi	r30, 0x7F	; 127
    1108:	ff 27       	eor	r31, r31
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	ee 5a       	subi	r30, 0xAE	; 174
    1110:	fd 4f       	sbci	r31, 0xFD	; 253
    1112:	90 83       	st	Z, r25
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1114:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1116:	ba 01       	movw	r22, r20
    1118:	66 5f       	subi	r22, 0xF6	; 246
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
    1120:	2f ef       	ldi	r18, 0xFF	; 255
    1122:	3f ef       	ldi	r19, 0xFF	; 255
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
    1124:	e0 91 13 01 	lds	r30, 0x0113
    1128:	dc 01       	movw	r26, r24
    112a:	ae 0f       	add	r26, r30
    112c:	b1 1d       	adc	r27, r1
    112e:	fd 01       	movw	r30, r26
    1130:	ef 77       	andi	r30, 0x7F	; 127
    1132:	ff 27       	eor	r31, r31
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	ee 5a       	subi	r30, 0xAE	; 174
    113a:	fd 4f       	sbci	r31, 0xFD	; 253
    113c:	e0 81       	ld	r30, Z
    113e:	2e 27       	eor	r18, r30
    1140:	e2 2f       	mov	r30, r18
    1142:	e2 95       	swap	r30
    1144:	e2 27       	eor	r30, r18
    1146:	0e 2e       	mov	r0, r30
    1148:	e6 95       	lsr	r30
    114a:	e6 95       	lsr	r30
    114c:	e0 25       	eor	r30, r0
    114e:	0e 2e       	mov	r0, r30
    1150:	e6 95       	lsr	r30
    1152:	e0 25       	eor	r30, r0
    1154:	e7 70       	andi	r30, 0x07	; 7
    1156:	02 2e       	mov	r0, r18
    1158:	23 2f       	mov	r18, r19
    115a:	e6 95       	lsr	r30
    115c:	07 94       	ror	r0
    115e:	e7 95       	ror	r30
    1160:	30 2d       	mov	r19, r0
    1162:	2e 27       	eor	r18, r30
    1164:	06 94       	lsr	r0
    1166:	e7 95       	ror	r30
    1168:	30 25       	eor	r19, r0
    116a:	2e 27       	eor	r18, r30
    116c:	01 96       	adiw	r24, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
    116e:	8a 30       	cpi	r24, 0x0A	; 10
    1170:	91 05       	cpc	r25, r1
    1172:	c1 f6       	brne	.-80     	; 0x1124 <sendResponse+0xc0>
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
	}
	
	//send CRC in reverse order!
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc & 0xFF); // last 8 bits
    1174:	fb 01       	movw	r30, r22
    1176:	ef 77       	andi	r30, 0x7F	; 127
    1178:	ff 27       	eor	r31, r31
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	ee 5a       	subi	r30, 0xAE	; 174
    1180:	fd 4f       	sbci	r31, 0xFD	; 253
    1182:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1184:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1186:	fa 01       	movw	r30, r20
    1188:	3b 96       	adiw	r30, 0x0b	; 11
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc >> 8); // first 8 bits
    118a:	ef 77       	andi	r30, 0x7F	; 127
    118c:	ff 27       	eor	r31, r31
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	ee 5a       	subi	r30, 0xAE	; 174
    1194:	fd 4f       	sbci	r31, 0xFD	; 253
    1196:	30 83       	st	Z, r19
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1198:	01 83       	std	Z+1, r16	; 0x01
	i++;
    119a:	44 5f       	subi	r20, 0xF4	; 244
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
	txWritePos = i & TX_BUFFER_SIZE_MSK;
    119e:	4f 77       	andi	r20, 0x7F	; 127
    11a0:	40 93 13 01 	sts	0x0113, r20
	
	__tryToSend();
    11a4:	0e 94 fc 07 	call	0xff8	; 0xff8 <__tryToSend>
}
    11a8:	29 96       	adiw	r28, 0x09	; 9
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <getLastCommand>:
		}
		sei();
	}
}

command getLastCommand(int8_t *success){
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	2f 97       	sbiw	r28, 0x0f	; 15
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
    11d8:	fe 01       	movw	r30, r28
    11da:	38 96       	adiw	r30, 0x08	; 8
    11dc:	87 e0       	ldi	r24, 0x07	; 7
    11de:	df 01       	movw	r26, r30
    11e0:	1d 92       	st	X+, r1
    11e2:	8a 95       	dec	r24
    11e4:	e9 f7       	brne	.-6      	; 0x11e0 <getLastCommand+0x22>
	*success = 0;
    11e6:	f8 01       	movw	r30, r16
    11e8:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
    11ea:	80 91 15 01 	lds	r24, 0x0115
    11ee:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <checkPackIsFullLength>
    11f2:	88 23       	and	r24, r24
    11f4:	c9 f0       	breq	.+50     	; 0x1228 <getLastCommand+0x6a>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
    11f6:	80 91 15 01 	lds	r24, 0x0115
    11fa:	be 01       	movw	r22, r28
    11fc:	61 5f       	subi	r22, 0xF1	; 241
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	0e 94 c8 06 	call	0xd90	; 0xd90 <fetchCommand>
    1204:	28 87       	std	Y+8, r18	; 0x08
    1206:	39 87       	std	Y+9, r19	; 0x09
    1208:	4a 87       	std	Y+10, r20	; 0x0a
    120a:	5b 87       	std	Y+11, r21	; 0x0b
    120c:	6c 87       	std	Y+12, r22	; 0x0c
    120e:	7d 87       	std	Y+13, r23	; 0x0d
    1210:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
    1212:	8f 85       	ldd	r24, Y+15	; 0x0f
    1214:	88 23       	and	r24, r24
    1216:	21 f0       	breq	.+8      	; 0x1220 <getLastCommand+0x62>
		{
			*success=1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	d8 01       	movw	r26, r16
    121c:	8c 93       	st	X, r24
    121e:	2b c0       	rjmp	.+86     	; 0x1276 <getLastCommand+0xb8>
		}else{
			*success=2;
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	f8 01       	movw	r30, r16
    1224:	80 83       	st	Z, r24
    1226:	27 c0       	rjmp	.+78     	; 0x1276 <getLastCommand+0xb8>
		
	}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
		
		
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE) 
    1228:	80 91 15 01 	lds	r24, 0x0115
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	07 97       	sbiw	r24, 0x07	; 7
    1230:	80 38       	cpi	r24, 0x80	; 128
    1232:	91 05       	cpc	r25, r1
    1234:	04 f5       	brge	.+64     	; 0x1276 <getLastCommand+0xb8>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
    1236:	80 91 15 01 	lds	r24, 0x0115
    123a:	87 50       	subi	r24, 0x07	; 7
    123c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <checkPackIsFullLength>
    1240:	88 23       	and	r24, r24
    1242:	c9 f0       	breq	.+50     	; 0x1276 <getLastCommand+0xb8>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
    1244:	80 91 15 01 	lds	r24, 0x0115
    1248:	be 01       	movw	r22, r28
    124a:	61 5f       	subi	r22, 0xF1	; 241
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	87 50       	subi	r24, 0x07	; 7
    1250:	0e 94 c8 06 	call	0xd90	; 0xd90 <fetchCommand>
    1254:	28 87       	std	Y+8, r18	; 0x08
    1256:	39 87       	std	Y+9, r19	; 0x09
    1258:	4a 87       	std	Y+10, r20	; 0x0a
    125a:	5b 87       	std	Y+11, r21	; 0x0b
    125c:	6c 87       	std	Y+12, r22	; 0x0c
    125e:	7d 87       	std	Y+13, r23	; 0x0d
    1260:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
    1262:	8f 85       	ldd	r24, Y+15	; 0x0f
    1264:	88 23       	and	r24, r24
    1266:	21 f0       	breq	.+8      	; 0x1270 <getLastCommand+0xb2>
			{
				*success=1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	d8 01       	movw	r26, r16
    126c:	8c 93       	st	X, r24
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <getLastCommand+0xb8>
				}else{
				*success=2;
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	f8 01       	movw	r30, r16
    1274:	80 83       	st	Z, r24
		
		}
	}
	
	
	return cmd;
    1276:	87 e0       	ldi	r24, 0x07	; 7
    1278:	fe 01       	movw	r30, r28
    127a:	38 96       	adiw	r30, 0x08	; 8
    127c:	de 01       	movw	r26, r28
    127e:	11 96       	adiw	r26, 0x01	; 1
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	8a 95       	dec	r24
    1286:	e1 f7       	brne	.-8      	; 0x1280 <getLastCommand+0xc2>
    1288:	29 81       	ldd	r18, Y+1	; 0x01
    128a:	3a 81       	ldd	r19, Y+2	; 0x02
    128c:	4b 81       	ldd	r20, Y+3	; 0x03
    128e:	5c 81       	ldd	r21, Y+4	; 0x04
    1290:	6d 81       	ldd	r22, Y+5	; 0x05
    1292:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	2f 96       	adiw	r28, 0x0f	; 15
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <__vector_28>:
	
	return ret;
}
*/

ISR(USART1_RX_vect){
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	8f 93       	push	r24
    12ba:	9f 93       	push	r25
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
	
	uint8_t data = UDR1;
    12c0:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
    12c4:	90 91 17 01 	lds	r25, 0x0117
    12c8:	91 11       	cpse	r25, r1
    12ca:	1a c0       	rjmp	.+52     	; 0x1300 <__vector_28+0x52>
		rxBuffer[rxWritePos].pack_no = data; //numai primi 7 biti
    12cc:	e0 91 18 01 	lds	r30, 0x0118
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	ee 5a       	subi	r30, 0xAE	; 174
    12d8:	fe 4f       	sbci	r31, 0xFE	; 254
    12da:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
    12dc:	e0 91 18 01 	lds	r30, 0x0118
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	ee 5a       	subi	r30, 0xAE	; 174
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	80 83       	st	Z, r24
		packStarted = 1;
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	90 93 17 01 	sts	0x0117, r25
		lastPackNo = data;
    12f2:	80 93 16 01 	sts	0x0116, r24
		lastPackPosInBuff = rxWritePos; 
    12f6:	80 91 18 01 	lds	r24, 0x0118
    12fa:	80 93 15 01 	sts	0x0115, r24
    12fe:	1d c0       	rjmp	.+58     	; 0x133a <__vector_28+0x8c>
	}else{
		
		rxBuffer[rxWritePos].pack_no = lastPackNo;
    1300:	e0 91 18 01 	lds	r30, 0x0118
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	90 91 16 01 	lds	r25, 0x0116
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	ee 5a       	subi	r30, 0xAE	; 174
    1310:	fe 4f       	sbci	r31, 0xFE	; 254
    1312:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
    1314:	e0 91 18 01 	lds	r30, 0x0118
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	ee 5a       	subi	r30, 0xAE	; 174
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
    1322:	80 83       	st	Z, r24
		packStarted++ ;
    1324:	80 91 17 01 	lds	r24, 0x0117
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	80 93 17 01 	sts	0x0117, r24
		
		if(packStarted == COMMAND_SIZE){
    132e:	80 91 17 01 	lds	r24, 0x0117
    1332:	87 30       	cpi	r24, 0x07	; 7
    1334:	11 f4       	brne	.+4      	; 0x133a <__vector_28+0x8c>
			packStarted = 0;
    1336:	10 92 17 01 	sts	0x0117, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
    133a:	80 91 18 01 	lds	r24, 0x0118
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	80 93 18 01 	sts	0x0118, r24
	rxWritePos &= RX_BUFFER_SIZE_MSK;
    1344:	80 91 18 01 	lds	r24, 0x0118
    1348:	8f 77       	andi	r24, 0x7F	; 127
    134a:	80 93 18 01 	sts	0x0118, r24
			rxWritePos = 0;
	}*/
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	9f 91       	pop	r25
    1354:	8f 91       	pop	r24
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <__vector_30>:

ISR(USART1_TX_vect){
    1360:	1f 92       	push	r1
    1362:	0f 92       	push	r0
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	0f 92       	push	r0
    1368:	11 24       	eor	r1, r1
    136a:	8f 93       	push	r24
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
    1370:	e0 91 14 01 	lds	r30, 0x0114
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	ee 0f       	add	r30, r30
    1378:	ff 1f       	adc	r31, r31
    137a:	ee 5a       	subi	r30, 0xAE	; 174
    137c:	fd 4f       	sbci	r31, 0xFD	; 253
    137e:	81 81       	ldd	r24, Z+1	; 0x01
    1380:	8f 3f       	cpi	r24, 0xFF	; 255
    1382:	29 f1       	breq	.+74     	; 0x13ce <__vector_30+0x6e>
	UDR1 =  txBuffer[txReadPos].data;
    1384:	e0 91 14 01 	lds	r30, 0x0114
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	ee 5a       	subi	r30, 0xAE	; 174
    1390:	fd 4f       	sbci	r31, 0xFD	; 253
    1392:	80 81       	ld	r24, Z
    1394:	80 93 ce 00 	sts	0x00CE, r24
	txBuffer[txReadPos].data =0;
    1398:	e0 91 14 01 	lds	r30, 0x0114
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	ee 5a       	subi	r30, 0xAE	; 174
    13a4:	fd 4f       	sbci	r31, 0xFD	; 253
    13a6:	10 82       	st	Z, r1
	txBuffer[txReadPos].pack_no =-1;
    13a8:	e0 91 14 01 	lds	r30, 0x0114
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	ee 5a       	subi	r30, 0xAE	; 174
    13b4:	fd 4f       	sbci	r31, 0xFD	; 253
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	81 83       	std	Z+1, r24	; 0x01
	txReadPos++;
    13ba:	80 91 14 01 	lds	r24, 0x0114
    13be:	8f 5f       	subi	r24, 0xFF	; 255
    13c0:	80 93 14 01 	sts	0x0114, r24
	txReadPos &= TX_BUFFER_SIZE_MSK;
    13c4:	80 91 14 01 	lds	r24, 0x0114
    13c8:	8f 77       	andi	r24, 0x7F	; 127
    13ca:	80 93 14 01 	sts	0x0114, r24
			txReadPos =0;
		}
		*/
	}
	
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	8f 91       	pop	r24
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <executeCommandForTime>:
volatile uint32_t ticks = 99999;
volatile uint16_t lastCOMPARE = 0;


void executeCommandForTime(void (*startF) (uint16_t, int16_t*), void (*stopF) (uint16_t, int16_t*), 
uint16_t argc_start, int16_t* argv_start, uint16_t argc_stop, int16_t* argv_stop, uint16_t time){
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	5c 01       	movw	r10, r24
    13f4:	ca 01       	movw	r24, r20
    13f6:	a9 01       	movw	r20, r18
	//init timer


	cli();
    13f8:	f8 94       	cli
	stopFunction = stopF;
    13fa:	70 93 1d 01 	sts	0x011D, r23
    13fe:	60 93 1c 01 	sts	0x011C, r22
	argc2 = argc_stop;
    1402:	10 93 1b 01 	sts	0x011B, r17
    1406:	00 93 1a 01 	sts	0x011A, r16
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
    140a:	01 15       	cp	r16, r1
    140c:	11 05       	cpc	r17, r1
    140e:	91 f0       	breq	.+36     	; 0x1434 <executeCommandForTime+0x56>
    1410:	ce 2d       	mov	r28, r14
    1412:	df 2d       	mov	r29, r15
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	b0 e0       	ldi	r27, 0x00	; 0
		argv2[i] = argv_stop[i];
    1418:	69 91       	ld	r22, Y+
    141a:	79 91       	ld	r23, Y+
    141c:	9d 01       	movw	r18, r26
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	f9 01       	movw	r30, r18
    1424:	ee 5a       	subi	r30, 0xAE	; 174
    1426:	fc 4f       	sbci	r31, 0xFC	; 252
    1428:	71 83       	std	Z+1, r23	; 0x01
    142a:	60 83       	st	Z, r22


	cli();
	stopFunction = stopF;
	argc2 = argc_stop;
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	a0 17       	cp	r26, r16
    1430:	b1 07       	cpc	r27, r17
    1432:	91 f7       	brne	.-28     	; 0x1418 <executeCommandForTime+0x3a>
	//TCCR1B &= ~((1<<CS10) | (1<<CS11));

//	sei();		
	
	//call start function
	ticks = time;
    1434:	86 01       	movw	r16, r12
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	00 93 00 01 	sts	0x0100, r16
    143e:	10 93 01 01 	sts	0x0101, r17
    1442:	20 93 02 01 	sts	0x0102, r18
    1446:	30 93 03 01 	sts	0x0103, r19
	startF(argc_start, argv_start);
    144a:	ba 01       	movw	r22, r20
    144c:	f5 01       	movw	r30, r10
    144e:	09 95       	icall
	LED_CMD_PORT |= (1<<LED_CMD_PINx);
    1450:	17 9a       	sbi	0x02, 7	; 2
	sei();
    1452:	78 94       	sei
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	bf 90       	pop	r11
    1466:	af 90       	pop	r10
    1468:	08 95       	ret

0000146a <initTimer1>:

void initTimer1()
{
	//Normal port operation, OC1A/OC1B disconnected.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1A0));	
    146a:	e0 e8       	ldi	r30, 0x80	; 128
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8f 71       	andi	r24, 0x1F	; 31
    1472:	80 83       	st	Z, r24
	
	//Timer/Counter mode of operation: CTC, TOP = OCR1A, Update of OCR1x at Immediate TOVn flag set on MAX
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11));
    1474:	80 81       	ld	r24, Z
    1476:	8c 7f       	andi	r24, 0xFC	; 252
    1478:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
    147a:	e1 e8       	ldi	r30, 0x81	; 129
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	88 60       	ori	r24, 0x08	; 8
    1482:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
    1484:	80 81       	ld	r24, Z
    1486:	8f 7e       	andi	r24, 0xEF	; 239
    1488:	80 83       	st	Z, r24
	
	// Clock Select: clk/64 prescaler
	TCCR1B &= ~((1<<CS12));
    148a:	80 81       	ld	r24, Z
    148c:	8b 7f       	andi	r24, 0xFB	; 251
    148e:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10) | (1<<CS11);
    1490:	80 81       	ld	r24, Z
    1492:	83 60       	ori	r24, 0x03	; 3
    1494:	80 83       	st	Z, r24
	
	
	
	// reset counter
	TCNT1 = 0;
    1496:	10 92 85 00 	sts	0x0085, r1
    149a:	10 92 84 00 	sts	0x0084, r1
	// disable compare for the moment
	//OCR1A = 0;
	//OCR1B = 0;
	
	//set OCR1A for 1 ms interrupts
	OCR1A = ((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*10L;
    149e:	82 ee       	ldi	r24, 0xE2	; 226
    14a0:	94 e0       	ldi	r25, 0x04	; 4
    14a2:	90 93 89 00 	sts	0x0089, r25
    14a6:	80 93 88 00 	sts	0x0088, r24
	
	//enable Output Compare A Match Interrupt Enable
	TIMSK1 |= (1<<OCIE1A);// (1<<OCIE1B) | (1<<OCIE1A);
    14aa:	ef e6       	ldi	r30, 0x6F	; 111
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	82 60       	ori	r24, 0x02	; 2
    14b2:	80 83       	st	Z, r24
    14b4:	08 95       	ret

000014b6 <__vector_13>:
	
}

ISR(TIMER1_COMPA_vect){
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	11 24       	eor	r1, r1
    14c0:	2f 93       	push	r18
    14c2:	3f 93       	push	r19
    14c4:	4f 93       	push	r20
    14c6:	5f 93       	push	r21
    14c8:	6f 93       	push	r22
    14ca:	7f 93       	push	r23
    14cc:	8f 93       	push	r24
    14ce:	9f 93       	push	r25
    14d0:	af 93       	push	r26
    14d2:	bf 93       	push	r27
    14d4:	ef 93       	push	r30
    14d6:	ff 93       	push	r31
		
	//	LED_CMD_PIN |= (1<<LED_CMD_PINx);
		
		if(ticks && ticks != 99999){
    14d8:	80 91 00 01 	lds	r24, 0x0100
    14dc:	90 91 01 01 	lds	r25, 0x0101
    14e0:	a0 91 02 01 	lds	r26, 0x0102
    14e4:	b0 91 03 01 	lds	r27, 0x0103
    14e8:	89 2b       	or	r24, r25
    14ea:	8a 2b       	or	r24, r26
    14ec:	8b 2b       	or	r24, r27
    14ee:	09 f1       	breq	.+66     	; 0x1532 <__vector_13+0x7c>
    14f0:	80 91 00 01 	lds	r24, 0x0100
    14f4:	90 91 01 01 	lds	r25, 0x0101
    14f8:	a0 91 02 01 	lds	r26, 0x0102
    14fc:	b0 91 03 01 	lds	r27, 0x0103
    1500:	8f 39       	cpi	r24, 0x9F	; 159
    1502:	96 48       	sbci	r25, 0x86	; 134
    1504:	a1 40       	sbci	r26, 0x01	; 1
    1506:	b1 05       	cpc	r27, r1
    1508:	a1 f0       	breq	.+40     	; 0x1532 <__vector_13+0x7c>
			ticks--;
    150a:	80 91 00 01 	lds	r24, 0x0100
    150e:	90 91 01 01 	lds	r25, 0x0101
    1512:	a0 91 02 01 	lds	r26, 0x0102
    1516:	b0 91 03 01 	lds	r27, 0x0103
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	a1 09       	sbc	r26, r1
    151e:	b1 09       	sbc	r27, r1
    1520:	80 93 00 01 	sts	0x0100, r24
    1524:	90 93 01 01 	sts	0x0101, r25
    1528:	a0 93 02 01 	sts	0x0102, r26
    152c:	b0 93 03 01 	sts	0x0103, r27
    1530:	24 c0       	rjmp	.+72     	; 0x157a <__vector_13+0xc4>
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
		}else if(ticks == 0){
    1532:	80 91 00 01 	lds	r24, 0x0100
    1536:	90 91 01 01 	lds	r25, 0x0101
    153a:	a0 91 02 01 	lds	r26, 0x0102
    153e:	b0 91 03 01 	lds	r27, 0x0103
    1542:	89 2b       	or	r24, r25
    1544:	8a 2b       	or	r24, r26
    1546:	8b 2b       	or	r24, r27
    1548:	c1 f4       	brne	.+48     	; 0x157a <__vector_13+0xc4>
			ticks = 99999;
    154a:	8f e9       	ldi	r24, 0x9F	; 159
    154c:	96 e8       	ldi	r25, 0x86	; 134
    154e:	a1 e0       	ldi	r26, 0x01	; 1
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	80 93 00 01 	sts	0x0100, r24
    1556:	90 93 01 01 	sts	0x0101, r25
    155a:	a0 93 02 01 	sts	0x0102, r26
    155e:	b0 93 03 01 	sts	0x0103, r27
			stopFunction(argc2,argv2);
    1562:	80 91 1a 01 	lds	r24, 0x011A
    1566:	90 91 1b 01 	lds	r25, 0x011B
    156a:	e0 91 1c 01 	lds	r30, 0x011C
    156e:	f0 91 1d 01 	lds	r31, 0x011D
    1572:	62 e5       	ldi	r22, 0x52	; 82
    1574:	73 e0       	ldi	r23, 0x03	; 3
    1576:	09 95       	icall
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
			LED_CMD_PORT &= ~(1<<LED_CMD_PINx);
    1578:	17 98       	cbi	0x02, 7	; 2
	//call the stop function
	stopFunction(argc2, argv2);
	}

*/
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	7f 91       	pop	r23
    1588:	6f 91       	pop	r22
    158a:	5f 91       	pop	r21
    158c:	4f 91       	pop	r20
    158e:	3f 91       	pop	r19
    1590:	2f 91       	pop	r18
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <__subsf3>:
    159c:	50 58       	subi	r21, 0x80	; 128

0000159e <__addsf3>:
    159e:	bb 27       	eor	r27, r27
    15a0:	aa 27       	eor	r26, r26
    15a2:	0e d0       	rcall	.+28     	; 0x15c0 <__addsf3x>
    15a4:	84 c1       	rjmp	.+776    	; 0x18ae <__fp_round>
    15a6:	75 d1       	rcall	.+746    	; 0x1892 <__fp_pscA>
    15a8:	30 f0       	brcs	.+12     	; 0x15b6 <__addsf3+0x18>
    15aa:	7a d1       	rcall	.+756    	; 0x18a0 <__fp_pscB>
    15ac:	20 f0       	brcs	.+8      	; 0x15b6 <__addsf3+0x18>
    15ae:	31 f4       	brne	.+12     	; 0x15bc <__addsf3+0x1e>
    15b0:	9f 3f       	cpi	r25, 0xFF	; 255
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <__addsf3+0x1a>
    15b4:	1e f4       	brtc	.+6      	; 0x15bc <__addsf3+0x1e>
    15b6:	6a c1       	rjmp	.+724    	; 0x188c <__fp_nan>
    15b8:	0e f4       	brtc	.+2      	; 0x15bc <__addsf3+0x1e>
    15ba:	e0 95       	com	r30
    15bc:	e7 fb       	bst	r30, 7
    15be:	37 c1       	rjmp	.+622    	; 0x182e <__fp_inf>

000015c0 <__addsf3x>:
    15c0:	e9 2f       	mov	r30, r25
    15c2:	86 d1       	rcall	.+780    	; 0x18d0 <__fp_split3>
    15c4:	80 f3       	brcs	.-32     	; 0x15a6 <__addsf3+0x8>
    15c6:	ba 17       	cp	r27, r26
    15c8:	62 07       	cpc	r22, r18
    15ca:	73 07       	cpc	r23, r19
    15cc:	84 07       	cpc	r24, r20
    15ce:	95 07       	cpc	r25, r21
    15d0:	18 f0       	brcs	.+6      	; 0x15d8 <__addsf3x+0x18>
    15d2:	71 f4       	brne	.+28     	; 0x15f0 <__addsf3x+0x30>
    15d4:	9e f5       	brtc	.+102    	; 0x163c <__addsf3x+0x7c>
    15d6:	b5 c1       	rjmp	.+874    	; 0x1942 <__fp_zero>
    15d8:	0e f4       	brtc	.+2      	; 0x15dc <__addsf3x+0x1c>
    15da:	e0 95       	com	r30
    15dc:	0b 2e       	mov	r0, r27
    15de:	ba 2f       	mov	r27, r26
    15e0:	a0 2d       	mov	r26, r0
    15e2:	0b 01       	movw	r0, r22
    15e4:	b9 01       	movw	r22, r18
    15e6:	90 01       	movw	r18, r0
    15e8:	0c 01       	movw	r0, r24
    15ea:	ca 01       	movw	r24, r20
    15ec:	a0 01       	movw	r20, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	ff 27       	eor	r31, r31
    15f2:	59 1b       	sub	r21, r25
    15f4:	99 f0       	breq	.+38     	; 0x161c <__addsf3x+0x5c>
    15f6:	59 3f       	cpi	r21, 0xF9	; 249
    15f8:	50 f4       	brcc	.+20     	; 0x160e <__addsf3x+0x4e>
    15fa:	50 3e       	cpi	r21, 0xE0	; 224
    15fc:	68 f1       	brcs	.+90     	; 0x1658 <__addsf3x+0x98>
    15fe:	1a 16       	cp	r1, r26
    1600:	f0 40       	sbci	r31, 0x00	; 0
    1602:	a2 2f       	mov	r26, r18
    1604:	23 2f       	mov	r18, r19
    1606:	34 2f       	mov	r19, r20
    1608:	44 27       	eor	r20, r20
    160a:	58 5f       	subi	r21, 0xF8	; 248
    160c:	f3 cf       	rjmp	.-26     	; 0x15f4 <__addsf3x+0x34>
    160e:	46 95       	lsr	r20
    1610:	37 95       	ror	r19
    1612:	27 95       	ror	r18
    1614:	a7 95       	ror	r26
    1616:	f0 40       	sbci	r31, 0x00	; 0
    1618:	53 95       	inc	r21
    161a:	c9 f7       	brne	.-14     	; 0x160e <__addsf3x+0x4e>
    161c:	7e f4       	brtc	.+30     	; 0x163c <__addsf3x+0x7c>
    161e:	1f 16       	cp	r1, r31
    1620:	ba 0b       	sbc	r27, r26
    1622:	62 0b       	sbc	r22, r18
    1624:	73 0b       	sbc	r23, r19
    1626:	84 0b       	sbc	r24, r20
    1628:	ba f0       	brmi	.+46     	; 0x1658 <__addsf3x+0x98>
    162a:	91 50       	subi	r25, 0x01	; 1
    162c:	a1 f0       	breq	.+40     	; 0x1656 <__addsf3x+0x96>
    162e:	ff 0f       	add	r31, r31
    1630:	bb 1f       	adc	r27, r27
    1632:	66 1f       	adc	r22, r22
    1634:	77 1f       	adc	r23, r23
    1636:	88 1f       	adc	r24, r24
    1638:	c2 f7       	brpl	.-16     	; 0x162a <__addsf3x+0x6a>
    163a:	0e c0       	rjmp	.+28     	; 0x1658 <__addsf3x+0x98>
    163c:	ba 0f       	add	r27, r26
    163e:	62 1f       	adc	r22, r18
    1640:	73 1f       	adc	r23, r19
    1642:	84 1f       	adc	r24, r20
    1644:	48 f4       	brcc	.+18     	; 0x1658 <__addsf3x+0x98>
    1646:	87 95       	ror	r24
    1648:	77 95       	ror	r23
    164a:	67 95       	ror	r22
    164c:	b7 95       	ror	r27
    164e:	f7 95       	ror	r31
    1650:	9e 3f       	cpi	r25, 0xFE	; 254
    1652:	08 f0       	brcs	.+2      	; 0x1656 <__addsf3x+0x96>
    1654:	b3 cf       	rjmp	.-154    	; 0x15bc <__addsf3+0x1e>
    1656:	93 95       	inc	r25
    1658:	88 0f       	add	r24, r24
    165a:	08 f0       	brcs	.+2      	; 0x165e <__addsf3x+0x9e>
    165c:	99 27       	eor	r25, r25
    165e:	ee 0f       	add	r30, r30
    1660:	97 95       	ror	r25
    1662:	87 95       	ror	r24
    1664:	08 95       	ret

00001666 <__divsf3>:
    1666:	0c d0       	rcall	.+24     	; 0x1680 <__divsf3x>
    1668:	22 c1       	rjmp	.+580    	; 0x18ae <__fp_round>
    166a:	1a d1       	rcall	.+564    	; 0x18a0 <__fp_pscB>
    166c:	40 f0       	brcs	.+16     	; 0x167e <__divsf3+0x18>
    166e:	11 d1       	rcall	.+546    	; 0x1892 <__fp_pscA>
    1670:	30 f0       	brcs	.+12     	; 0x167e <__divsf3+0x18>
    1672:	21 f4       	brne	.+8      	; 0x167c <__divsf3+0x16>
    1674:	5f 3f       	cpi	r21, 0xFF	; 255
    1676:	19 f0       	breq	.+6      	; 0x167e <__divsf3+0x18>
    1678:	da c0       	rjmp	.+436    	; 0x182e <__fp_inf>
    167a:	51 11       	cpse	r21, r1
    167c:	63 c1       	rjmp	.+710    	; 0x1944 <__fp_szero>
    167e:	06 c1       	rjmp	.+524    	; 0x188c <__fp_nan>

00001680 <__divsf3x>:
    1680:	27 d1       	rcall	.+590    	; 0x18d0 <__fp_split3>
    1682:	98 f3       	brcs	.-26     	; 0x166a <__divsf3+0x4>

00001684 <__divsf3_pse>:
    1684:	99 23       	and	r25, r25
    1686:	c9 f3       	breq	.-14     	; 0x167a <__divsf3+0x14>
    1688:	55 23       	and	r21, r21
    168a:	b1 f3       	breq	.-20     	; 0x1678 <__divsf3+0x12>
    168c:	95 1b       	sub	r25, r21
    168e:	55 0b       	sbc	r21, r21
    1690:	bb 27       	eor	r27, r27
    1692:	aa 27       	eor	r26, r26
    1694:	62 17       	cp	r22, r18
    1696:	73 07       	cpc	r23, r19
    1698:	84 07       	cpc	r24, r20
    169a:	38 f0       	brcs	.+14     	; 0x16aa <__divsf3_pse+0x26>
    169c:	9f 5f       	subi	r25, 0xFF	; 255
    169e:	5f 4f       	sbci	r21, 0xFF	; 255
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	44 1f       	adc	r20, r20
    16a6:	aa 1f       	adc	r26, r26
    16a8:	a9 f3       	breq	.-22     	; 0x1694 <__divsf3_pse+0x10>
    16aa:	33 d0       	rcall	.+102    	; 0x1712 <__divsf3_pse+0x8e>
    16ac:	0e 2e       	mov	r0, r30
    16ae:	3a f0       	brmi	.+14     	; 0x16be <__divsf3_pse+0x3a>
    16b0:	e0 e8       	ldi	r30, 0x80	; 128
    16b2:	30 d0       	rcall	.+96     	; 0x1714 <__divsf3_pse+0x90>
    16b4:	91 50       	subi	r25, 0x01	; 1
    16b6:	50 40       	sbci	r21, 0x00	; 0
    16b8:	e6 95       	lsr	r30
    16ba:	00 1c       	adc	r0, r0
    16bc:	ca f7       	brpl	.-14     	; 0x16b0 <__divsf3_pse+0x2c>
    16be:	29 d0       	rcall	.+82     	; 0x1712 <__divsf3_pse+0x8e>
    16c0:	fe 2f       	mov	r31, r30
    16c2:	27 d0       	rcall	.+78     	; 0x1712 <__divsf3_pse+0x8e>
    16c4:	66 0f       	add	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	88 1f       	adc	r24, r24
    16ca:	bb 1f       	adc	r27, r27
    16cc:	26 17       	cp	r18, r22
    16ce:	37 07       	cpc	r19, r23
    16d0:	48 07       	cpc	r20, r24
    16d2:	ab 07       	cpc	r26, r27
    16d4:	b0 e8       	ldi	r27, 0x80	; 128
    16d6:	09 f0       	breq	.+2      	; 0x16da <__divsf3_pse+0x56>
    16d8:	bb 0b       	sbc	r27, r27
    16da:	80 2d       	mov	r24, r0
    16dc:	bf 01       	movw	r22, r30
    16de:	ff 27       	eor	r31, r31
    16e0:	93 58       	subi	r25, 0x83	; 131
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	2a f0       	brmi	.+10     	; 0x16f0 <__divsf3_pse+0x6c>
    16e6:	9e 3f       	cpi	r25, 0xFE	; 254
    16e8:	51 05       	cpc	r21, r1
    16ea:	68 f0       	brcs	.+26     	; 0x1706 <__divsf3_pse+0x82>
    16ec:	a0 c0       	rjmp	.+320    	; 0x182e <__fp_inf>
    16ee:	2a c1       	rjmp	.+596    	; 0x1944 <__fp_szero>
    16f0:	5f 3f       	cpi	r21, 0xFF	; 255
    16f2:	ec f3       	brlt	.-6      	; 0x16ee <__divsf3_pse+0x6a>
    16f4:	98 3e       	cpi	r25, 0xE8	; 232
    16f6:	dc f3       	brlt	.-10     	; 0x16ee <__divsf3_pse+0x6a>
    16f8:	86 95       	lsr	r24
    16fa:	77 95       	ror	r23
    16fc:	67 95       	ror	r22
    16fe:	b7 95       	ror	r27
    1700:	f7 95       	ror	r31
    1702:	9f 5f       	subi	r25, 0xFF	; 255
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__divsf3_pse+0x74>
    1706:	88 0f       	add	r24, r24
    1708:	91 1d       	adc	r25, r1
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	97 f9       	bld	r25, 7
    1710:	08 95       	ret
    1712:	e1 e0       	ldi	r30, 0x01	; 1
    1714:	66 0f       	add	r22, r22
    1716:	77 1f       	adc	r23, r23
    1718:	88 1f       	adc	r24, r24
    171a:	bb 1f       	adc	r27, r27
    171c:	62 17       	cp	r22, r18
    171e:	73 07       	cpc	r23, r19
    1720:	84 07       	cpc	r24, r20
    1722:	ba 07       	cpc	r27, r26
    1724:	20 f0       	brcs	.+8      	; 0x172e <__divsf3_pse+0xaa>
    1726:	62 1b       	sub	r22, r18
    1728:	73 0b       	sbc	r23, r19
    172a:	84 0b       	sbc	r24, r20
    172c:	ba 0b       	sbc	r27, r26
    172e:	ee 1f       	adc	r30, r30
    1730:	88 f7       	brcc	.-30     	; 0x1714 <__divsf3_pse+0x90>
    1732:	e0 95       	com	r30
    1734:	08 95       	ret

00001736 <__fixunssfsi>:
    1736:	d4 d0       	rcall	.+424    	; 0x18e0 <__fp_splitA>
    1738:	88 f0       	brcs	.+34     	; 0x175c <__fixunssfsi+0x26>
    173a:	9f 57       	subi	r25, 0x7F	; 127
    173c:	90 f0       	brcs	.+36     	; 0x1762 <__fixunssfsi+0x2c>
    173e:	b9 2f       	mov	r27, r25
    1740:	99 27       	eor	r25, r25
    1742:	b7 51       	subi	r27, 0x17	; 23
    1744:	a0 f0       	brcs	.+40     	; 0x176e <__fixunssfsi+0x38>
    1746:	d1 f0       	breq	.+52     	; 0x177c <__fixunssfsi+0x46>
    1748:	66 0f       	add	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	1a f0       	brmi	.+6      	; 0x1758 <__fixunssfsi+0x22>
    1752:	ba 95       	dec	r27
    1754:	c9 f7       	brne	.-14     	; 0x1748 <__fixunssfsi+0x12>
    1756:	12 c0       	rjmp	.+36     	; 0x177c <__fixunssfsi+0x46>
    1758:	b1 30       	cpi	r27, 0x01	; 1
    175a:	81 f0       	breq	.+32     	; 0x177c <__fixunssfsi+0x46>
    175c:	f2 d0       	rcall	.+484    	; 0x1942 <__fp_zero>
    175e:	b1 e0       	ldi	r27, 0x01	; 1
    1760:	08 95       	ret
    1762:	ef c0       	rjmp	.+478    	; 0x1942 <__fp_zero>
    1764:	67 2f       	mov	r22, r23
    1766:	78 2f       	mov	r23, r24
    1768:	88 27       	eor	r24, r24
    176a:	b8 5f       	subi	r27, 0xF8	; 248
    176c:	39 f0       	breq	.+14     	; 0x177c <__fixunssfsi+0x46>
    176e:	b9 3f       	cpi	r27, 0xF9	; 249
    1770:	cc f3       	brlt	.-14     	; 0x1764 <__fixunssfsi+0x2e>
    1772:	86 95       	lsr	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	b3 95       	inc	r27
    177a:	d9 f7       	brne	.-10     	; 0x1772 <__fixunssfsi+0x3c>
    177c:	3e f4       	brtc	.+14     	; 0x178c <__fixunssfsi+0x56>
    177e:	90 95       	com	r25
    1780:	80 95       	com	r24
    1782:	70 95       	com	r23
    1784:	61 95       	neg	r22
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	8f 4f       	sbci	r24, 0xFF	; 255
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	08 95       	ret

0000178e <__floatunsisf>:
    178e:	e8 94       	clt
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <__floatsisf+0x12>

00001792 <__floatsisf>:
    1792:	97 fb       	bst	r25, 7
    1794:	3e f4       	brtc	.+14     	; 0x17a4 <__floatsisf+0x12>
    1796:	90 95       	com	r25
    1798:	80 95       	com	r24
    179a:	70 95       	com	r23
    179c:	61 95       	neg	r22
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	8f 4f       	sbci	r24, 0xFF	; 255
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	99 23       	and	r25, r25
    17a6:	a9 f0       	breq	.+42     	; 0x17d2 <__floatsisf+0x40>
    17a8:	f9 2f       	mov	r31, r25
    17aa:	96 e9       	ldi	r25, 0x96	; 150
    17ac:	bb 27       	eor	r27, r27
    17ae:	93 95       	inc	r25
    17b0:	f6 95       	lsr	r31
    17b2:	87 95       	ror	r24
    17b4:	77 95       	ror	r23
    17b6:	67 95       	ror	r22
    17b8:	b7 95       	ror	r27
    17ba:	f1 11       	cpse	r31, r1
    17bc:	f8 cf       	rjmp	.-16     	; 0x17ae <__floatsisf+0x1c>
    17be:	fa f4       	brpl	.+62     	; 0x17fe <__floatsisf+0x6c>
    17c0:	bb 0f       	add	r27, r27
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <__floatsisf+0x36>
    17c4:	60 ff       	sbrs	r22, 0
    17c6:	1b c0       	rjmp	.+54     	; 0x17fe <__floatsisf+0x6c>
    17c8:	6f 5f       	subi	r22, 0xFF	; 255
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	8f 4f       	sbci	r24, 0xFF	; 255
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	16 c0       	rjmp	.+44     	; 0x17fe <__floatsisf+0x6c>
    17d2:	88 23       	and	r24, r24
    17d4:	11 f0       	breq	.+4      	; 0x17da <__floatsisf+0x48>
    17d6:	96 e9       	ldi	r25, 0x96	; 150
    17d8:	11 c0       	rjmp	.+34     	; 0x17fc <__floatsisf+0x6a>
    17da:	77 23       	and	r23, r23
    17dc:	21 f0       	breq	.+8      	; 0x17e6 <__floatsisf+0x54>
    17de:	9e e8       	ldi	r25, 0x8E	; 142
    17e0:	87 2f       	mov	r24, r23
    17e2:	76 2f       	mov	r23, r22
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <__floatsisf+0x5e>
    17e6:	66 23       	and	r22, r22
    17e8:	71 f0       	breq	.+28     	; 0x1806 <__floatsisf+0x74>
    17ea:	96 e8       	ldi	r25, 0x86	; 134
    17ec:	86 2f       	mov	r24, r22
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	2a f0       	brmi	.+10     	; 0x17fe <__floatsisf+0x6c>
    17f4:	9a 95       	dec	r25
    17f6:	66 0f       	add	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	da f7       	brpl	.-10     	; 0x17f4 <__floatsisf+0x62>
    17fe:	88 0f       	add	r24, r24
    1800:	96 95       	lsr	r25
    1802:	87 95       	ror	r24
    1804:	97 f9       	bld	r25, 7
    1806:	08 95       	ret

00001808 <floor>:
    1808:	85 d0       	rcall	.+266    	; 0x1914 <__fp_trunc>
    180a:	80 f0       	brcs	.+32     	; 0x182c <floor+0x24>
    180c:	9f 37       	cpi	r25, 0x7F	; 127
    180e:	40 f4       	brcc	.+16     	; 0x1820 <floor+0x18>
    1810:	91 11       	cpse	r25, r1
    1812:	0e f0       	brts	.+2      	; 0x1816 <floor+0xe>
    1814:	97 c0       	rjmp	.+302    	; 0x1944 <__fp_szero>
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	80 e8       	ldi	r24, 0x80	; 128
    181c:	9f eb       	ldi	r25, 0xBF	; 191
    181e:	08 95       	ret
    1820:	26 f4       	brtc	.+8      	; 0x182a <floor+0x22>
    1822:	1b 16       	cp	r1, r27
    1824:	61 1d       	adc	r22, r1
    1826:	71 1d       	adc	r23, r1
    1828:	81 1d       	adc	r24, r1
    182a:	07 c0       	rjmp	.+14     	; 0x183a <__fp_mintl>
    182c:	21 c0       	rjmp	.+66     	; 0x1870 <__fp_mpack>

0000182e <__fp_inf>:
    182e:	97 f9       	bld	r25, 7
    1830:	9f 67       	ori	r25, 0x7F	; 127
    1832:	80 e8       	ldi	r24, 0x80	; 128
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	08 95       	ret

0000183a <__fp_mintl>:
    183a:	88 23       	and	r24, r24
    183c:	71 f4       	brne	.+28     	; 0x185a <__fp_mintl+0x20>
    183e:	77 23       	and	r23, r23
    1840:	21 f0       	breq	.+8      	; 0x184a <__fp_mintl+0x10>
    1842:	98 50       	subi	r25, 0x08	; 8
    1844:	87 2b       	or	r24, r23
    1846:	76 2f       	mov	r23, r22
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <__fp_mintl+0x1e>
    184a:	66 23       	and	r22, r22
    184c:	11 f4       	brne	.+4      	; 0x1852 <__fp_mintl+0x18>
    184e:	99 27       	eor	r25, r25
    1850:	0d c0       	rjmp	.+26     	; 0x186c <__fp_mintl+0x32>
    1852:	90 51       	subi	r25, 0x10	; 16
    1854:	86 2b       	or	r24, r22
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	2a f0       	brmi	.+10     	; 0x1866 <__fp_mintl+0x2c>
    185c:	9a 95       	dec	r25
    185e:	66 0f       	add	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	88 1f       	adc	r24, r24
    1864:	da f7       	brpl	.-10     	; 0x185c <__fp_mintl+0x22>
    1866:	88 0f       	add	r24, r24
    1868:	96 95       	lsr	r25
    186a:	87 95       	ror	r24
    186c:	97 f9       	bld	r25, 7
    186e:	08 95       	ret

00001870 <__fp_mpack>:
    1870:	9f 3f       	cpi	r25, 0xFF	; 255
    1872:	31 f0       	breq	.+12     	; 0x1880 <__fp_mpack_finite+0xc>

00001874 <__fp_mpack_finite>:
    1874:	91 50       	subi	r25, 0x01	; 1
    1876:	20 f4       	brcc	.+8      	; 0x1880 <__fp_mpack_finite+0xc>
    1878:	87 95       	ror	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	b7 95       	ror	r27
    1880:	88 0f       	add	r24, r24
    1882:	91 1d       	adc	r25, r1
    1884:	96 95       	lsr	r25
    1886:	87 95       	ror	r24
    1888:	97 f9       	bld	r25, 7
    188a:	08 95       	ret

0000188c <__fp_nan>:
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	80 ec       	ldi	r24, 0xC0	; 192
    1890:	08 95       	ret

00001892 <__fp_pscA>:
    1892:	00 24       	eor	r0, r0
    1894:	0a 94       	dec	r0
    1896:	16 16       	cp	r1, r22
    1898:	17 06       	cpc	r1, r23
    189a:	18 06       	cpc	r1, r24
    189c:	09 06       	cpc	r0, r25
    189e:	08 95       	ret

000018a0 <__fp_pscB>:
    18a0:	00 24       	eor	r0, r0
    18a2:	0a 94       	dec	r0
    18a4:	12 16       	cp	r1, r18
    18a6:	13 06       	cpc	r1, r19
    18a8:	14 06       	cpc	r1, r20
    18aa:	05 06       	cpc	r0, r21
    18ac:	08 95       	ret

000018ae <__fp_round>:
    18ae:	09 2e       	mov	r0, r25
    18b0:	03 94       	inc	r0
    18b2:	00 0c       	add	r0, r0
    18b4:	11 f4       	brne	.+4      	; 0x18ba <__fp_round+0xc>
    18b6:	88 23       	and	r24, r24
    18b8:	52 f0       	brmi	.+20     	; 0x18ce <__fp_round+0x20>
    18ba:	bb 0f       	add	r27, r27
    18bc:	40 f4       	brcc	.+16     	; 0x18ce <__fp_round+0x20>
    18be:	bf 2b       	or	r27, r31
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <__fp_round+0x18>
    18c2:	60 ff       	sbrs	r22, 0
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <__fp_round+0x20>
    18c6:	6f 5f       	subi	r22, 0xFF	; 255
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	8f 4f       	sbci	r24, 0xFF	; 255
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	08 95       	ret

000018d0 <__fp_split3>:
    18d0:	57 fd       	sbrc	r21, 7
    18d2:	90 58       	subi	r25, 0x80	; 128
    18d4:	44 0f       	add	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	59 f0       	breq	.+22     	; 0x18f0 <__fp_splitA+0x10>
    18da:	5f 3f       	cpi	r21, 0xFF	; 255
    18dc:	71 f0       	breq	.+28     	; 0x18fa <__fp_splitA+0x1a>
    18de:	47 95       	ror	r20

000018e0 <__fp_splitA>:
    18e0:	88 0f       	add	r24, r24
    18e2:	97 fb       	bst	r25, 7
    18e4:	99 1f       	adc	r25, r25
    18e6:	61 f0       	breq	.+24     	; 0x1900 <__fp_splitA+0x20>
    18e8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ea:	79 f0       	breq	.+30     	; 0x190a <__fp_splitA+0x2a>
    18ec:	87 95       	ror	r24
    18ee:	08 95       	ret
    18f0:	12 16       	cp	r1, r18
    18f2:	13 06       	cpc	r1, r19
    18f4:	14 06       	cpc	r1, r20
    18f6:	55 1f       	adc	r21, r21
    18f8:	f2 cf       	rjmp	.-28     	; 0x18de <__fp_split3+0xe>
    18fa:	46 95       	lsr	r20
    18fc:	f1 df       	rcall	.-30     	; 0x18e0 <__fp_splitA>
    18fe:	08 c0       	rjmp	.+16     	; 0x1910 <__fp_splitA+0x30>
    1900:	16 16       	cp	r1, r22
    1902:	17 06       	cpc	r1, r23
    1904:	18 06       	cpc	r1, r24
    1906:	99 1f       	adc	r25, r25
    1908:	f1 cf       	rjmp	.-30     	; 0x18ec <__fp_splitA+0xc>
    190a:	86 95       	lsr	r24
    190c:	71 05       	cpc	r23, r1
    190e:	61 05       	cpc	r22, r1
    1910:	08 94       	sec
    1912:	08 95       	ret

00001914 <__fp_trunc>:
    1914:	e5 df       	rcall	.-54     	; 0x18e0 <__fp_splitA>
    1916:	a0 f0       	brcs	.+40     	; 0x1940 <__fp_trunc+0x2c>
    1918:	be e7       	ldi	r27, 0x7E	; 126
    191a:	b9 17       	cp	r27, r25
    191c:	88 f4       	brcc	.+34     	; 0x1940 <__fp_trunc+0x2c>
    191e:	bb 27       	eor	r27, r27
    1920:	9f 38       	cpi	r25, 0x8F	; 143
    1922:	60 f4       	brcc	.+24     	; 0x193c <__fp_trunc+0x28>
    1924:	16 16       	cp	r1, r22
    1926:	b1 1d       	adc	r27, r1
    1928:	67 2f       	mov	r22, r23
    192a:	78 2f       	mov	r23, r24
    192c:	88 27       	eor	r24, r24
    192e:	98 5f       	subi	r25, 0xF8	; 248
    1930:	f7 cf       	rjmp	.-18     	; 0x1920 <__fp_trunc+0xc>
    1932:	86 95       	lsr	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	b1 1d       	adc	r27, r1
    193a:	93 95       	inc	r25
    193c:	96 39       	cpi	r25, 0x96	; 150
    193e:	c8 f3       	brcs	.-14     	; 0x1932 <__fp_trunc+0x1e>
    1940:	08 95       	ret

00001942 <__fp_zero>:
    1942:	e8 94       	clt

00001944 <__fp_szero>:
    1944:	bb 27       	eor	r27, r27
    1946:	66 27       	eor	r22, r22
    1948:	77 27       	eor	r23, r23
    194a:	cb 01       	movw	r24, r22
    194c:	97 f9       	bld	r25, 7
    194e:	08 95       	ret

00001950 <lrint>:
    1950:	c7 df       	rcall	.-114    	; 0x18e0 <__fp_splitA>
    1952:	a8 f1       	brcs	.+106    	; 0x19be <lrint+0x6e>
    1954:	9e 57       	subi	r25, 0x7E	; 126
    1956:	a8 f1       	brcs	.+106    	; 0x19c2 <lrint+0x72>
    1958:	98 51       	subi	r25, 0x18	; 24
    195a:	60 f0       	brcs	.+24     	; 0x1974 <lrint+0x24>
    195c:	39 f1       	breq	.+78     	; 0x19ac <lrint+0x5c>
    195e:	98 30       	cpi	r25, 0x08	; 8
    1960:	70 f5       	brcc	.+92     	; 0x19be <lrint+0x6e>
    1962:	09 2e       	mov	r0, r25
    1964:	99 27       	eor	r25, r25
    1966:	66 0f       	add	r22, r22
    1968:	77 1f       	adc	r23, r23
    196a:	88 1f       	adc	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	d1 f7       	brne	.-12     	; 0x1966 <lrint+0x16>
    1972:	1c c0       	rjmp	.+56     	; 0x19ac <lrint+0x5c>
    1974:	bb 27       	eor	r27, r27
    1976:	99 3f       	cpi	r25, 0xF9	; 249
    1978:	4c f4       	brge	.+18     	; 0x198c <lrint+0x3c>
    197a:	b1 11       	cpse	r27, r1
    197c:	b1 e0       	ldi	r27, 0x01	; 1
    197e:	b6 2b       	or	r27, r22
    1980:	67 2f       	mov	r22, r23
    1982:	78 2f       	mov	r23, r24
    1984:	88 27       	eor	r24, r24
    1986:	98 5f       	subi	r25, 0xF8	; 248
    1988:	b1 f7       	brne	.-20     	; 0x1976 <lrint+0x26>
    198a:	08 c0       	rjmp	.+16     	; 0x199c <lrint+0x4c>
    198c:	86 95       	lsr	r24
    198e:	77 95       	ror	r23
    1990:	67 95       	ror	r22
    1992:	b7 95       	ror	r27
    1994:	08 f4       	brcc	.+2      	; 0x1998 <lrint+0x48>
    1996:	b1 60       	ori	r27, 0x01	; 1
    1998:	93 95       	inc	r25
    199a:	c1 f7       	brne	.-16     	; 0x198c <lrint+0x3c>
    199c:	bb 0f       	add	r27, r27
    199e:	30 f4       	brcc	.+12     	; 0x19ac <lrint+0x5c>
    19a0:	11 f4       	brne	.+4      	; 0x19a6 <lrint+0x56>
    19a2:	60 ff       	sbrs	r22, 0
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <lrint+0x5c>
    19a6:	6f 5f       	subi	r22, 0xFF	; 255
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	8f 4f       	sbci	r24, 0xFF	; 255
    19ac:	3e f4       	brtc	.+14     	; 0x19bc <lrint+0x6c>
    19ae:	90 95       	com	r25
    19b0:	80 95       	com	r24
    19b2:	70 95       	com	r23
    19b4:	61 95       	neg	r22
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	08 95       	ret
    19be:	68 94       	set
    19c0:	c1 cf       	rjmp	.-126    	; 0x1944 <__fp_szero>
    19c2:	bf cf       	rjmp	.-130    	; 0x1942 <__fp_zero>

000019c4 <__mulsf3>:
    19c4:	0b d0       	rcall	.+22     	; 0x19dc <__mulsf3x>
    19c6:	73 cf       	rjmp	.-282    	; 0x18ae <__fp_round>
    19c8:	64 df       	rcall	.-312    	; 0x1892 <__fp_pscA>
    19ca:	28 f0       	brcs	.+10     	; 0x19d6 <__mulsf3+0x12>
    19cc:	69 df       	rcall	.-302    	; 0x18a0 <__fp_pscB>
    19ce:	18 f0       	brcs	.+6      	; 0x19d6 <__mulsf3+0x12>
    19d0:	95 23       	and	r25, r21
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <__mulsf3+0x12>
    19d4:	2c cf       	rjmp	.-424    	; 0x182e <__fp_inf>
    19d6:	5a cf       	rjmp	.-332    	; 0x188c <__fp_nan>
    19d8:	11 24       	eor	r1, r1
    19da:	b4 cf       	rjmp	.-152    	; 0x1944 <__fp_szero>

000019dc <__mulsf3x>:
    19dc:	79 df       	rcall	.-270    	; 0x18d0 <__fp_split3>
    19de:	a0 f3       	brcs	.-24     	; 0x19c8 <__mulsf3+0x4>

000019e0 <__mulsf3_pse>:
    19e0:	95 9f       	mul	r25, r21
    19e2:	d1 f3       	breq	.-12     	; 0x19d8 <__mulsf3+0x14>
    19e4:	95 0f       	add	r25, r21
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	55 1f       	adc	r21, r21
    19ea:	62 9f       	mul	r22, r18
    19ec:	f0 01       	movw	r30, r0
    19ee:	72 9f       	mul	r23, r18
    19f0:	bb 27       	eor	r27, r27
    19f2:	f0 0d       	add	r31, r0
    19f4:	b1 1d       	adc	r27, r1
    19f6:	63 9f       	mul	r22, r19
    19f8:	aa 27       	eor	r26, r26
    19fa:	f0 0d       	add	r31, r0
    19fc:	b1 1d       	adc	r27, r1
    19fe:	aa 1f       	adc	r26, r26
    1a00:	64 9f       	mul	r22, r20
    1a02:	66 27       	eor	r22, r22
    1a04:	b0 0d       	add	r27, r0
    1a06:	a1 1d       	adc	r26, r1
    1a08:	66 1f       	adc	r22, r22
    1a0a:	82 9f       	mul	r24, r18
    1a0c:	22 27       	eor	r18, r18
    1a0e:	b0 0d       	add	r27, r0
    1a10:	a1 1d       	adc	r26, r1
    1a12:	62 1f       	adc	r22, r18
    1a14:	73 9f       	mul	r23, r19
    1a16:	b0 0d       	add	r27, r0
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	62 1f       	adc	r22, r18
    1a1c:	83 9f       	mul	r24, r19
    1a1e:	a0 0d       	add	r26, r0
    1a20:	61 1d       	adc	r22, r1
    1a22:	22 1f       	adc	r18, r18
    1a24:	74 9f       	mul	r23, r20
    1a26:	33 27       	eor	r19, r19
    1a28:	a0 0d       	add	r26, r0
    1a2a:	61 1d       	adc	r22, r1
    1a2c:	23 1f       	adc	r18, r19
    1a2e:	84 9f       	mul	r24, r20
    1a30:	60 0d       	add	r22, r0
    1a32:	21 1d       	adc	r18, r1
    1a34:	82 2f       	mov	r24, r18
    1a36:	76 2f       	mov	r23, r22
    1a38:	6a 2f       	mov	r22, r26
    1a3a:	11 24       	eor	r1, r1
    1a3c:	9f 57       	subi	r25, 0x7F	; 127
    1a3e:	50 40       	sbci	r21, 0x00	; 0
    1a40:	8a f0       	brmi	.+34     	; 0x1a64 <__mulsf3_pse+0x84>
    1a42:	e1 f0       	breq	.+56     	; 0x1a7c <__mulsf3_pse+0x9c>
    1a44:	88 23       	and	r24, r24
    1a46:	4a f0       	brmi	.+18     	; 0x1a5a <__mulsf3_pse+0x7a>
    1a48:	ee 0f       	add	r30, r30
    1a4a:	ff 1f       	adc	r31, r31
    1a4c:	bb 1f       	adc	r27, r27
    1a4e:	66 1f       	adc	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	91 50       	subi	r25, 0x01	; 1
    1a56:	50 40       	sbci	r21, 0x00	; 0
    1a58:	a9 f7       	brne	.-22     	; 0x1a44 <__mulsf3_pse+0x64>
    1a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a5c:	51 05       	cpc	r21, r1
    1a5e:	70 f0       	brcs	.+28     	; 0x1a7c <__mulsf3_pse+0x9c>
    1a60:	e6 ce       	rjmp	.-564    	; 0x182e <__fp_inf>
    1a62:	70 cf       	rjmp	.-288    	; 0x1944 <__fp_szero>
    1a64:	5f 3f       	cpi	r21, 0xFF	; 255
    1a66:	ec f3       	brlt	.-6      	; 0x1a62 <__mulsf3_pse+0x82>
    1a68:	98 3e       	cpi	r25, 0xE8	; 232
    1a6a:	dc f3       	brlt	.-10     	; 0x1a62 <__mulsf3_pse+0x82>
    1a6c:	86 95       	lsr	r24
    1a6e:	77 95       	ror	r23
    1a70:	67 95       	ror	r22
    1a72:	b7 95       	ror	r27
    1a74:	f7 95       	ror	r31
    1a76:	e7 95       	ror	r30
    1a78:	9f 5f       	subi	r25, 0xFF	; 255
    1a7a:	c1 f7       	brne	.-16     	; 0x1a6c <__mulsf3_pse+0x8c>
    1a7c:	fe 2b       	or	r31, r30
    1a7e:	88 0f       	add	r24, r24
    1a80:	91 1d       	adc	r25, r1
    1a82:	96 95       	lsr	r25
    1a84:	87 95       	ror	r24
    1a86:	97 f9       	bld	r25, 7
    1a88:	08 95       	ret

00001a8a <__udivmodsi4>:
    1a8a:	a1 e2       	ldi	r26, 0x21	; 33
    1a8c:	1a 2e       	mov	r1, r26
    1a8e:	aa 1b       	sub	r26, r26
    1a90:	bb 1b       	sub	r27, r27
    1a92:	fd 01       	movw	r30, r26
    1a94:	0d c0       	rjmp	.+26     	; 0x1ab0 <__udivmodsi4_ep>

00001a96 <__udivmodsi4_loop>:
    1a96:	aa 1f       	adc	r26, r26
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	ee 1f       	adc	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	a2 17       	cp	r26, r18
    1aa0:	b3 07       	cpc	r27, r19
    1aa2:	e4 07       	cpc	r30, r20
    1aa4:	f5 07       	cpc	r31, r21
    1aa6:	20 f0       	brcs	.+8      	; 0x1ab0 <__udivmodsi4_ep>
    1aa8:	a2 1b       	sub	r26, r18
    1aaa:	b3 0b       	sbc	r27, r19
    1aac:	e4 0b       	sbc	r30, r20
    1aae:	f5 0b       	sbc	r31, r21

00001ab0 <__udivmodsi4_ep>:
    1ab0:	66 1f       	adc	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	1a 94       	dec	r1
    1aba:	69 f7       	brne	.-38     	; 0x1a96 <__udivmodsi4_loop>
    1abc:	60 95       	com	r22
    1abe:	70 95       	com	r23
    1ac0:	80 95       	com	r24
    1ac2:	90 95       	com	r25
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	bd 01       	movw	r22, r26
    1aca:	cf 01       	movw	r24, r30
    1acc:	08 95       	ret

00001ace <__divmodsi4>:
    1ace:	05 2e       	mov	r0, r21
    1ad0:	97 fb       	bst	r25, 7
    1ad2:	1e f4       	brtc	.+6      	; 0x1ada <__divmodsi4+0xc>
    1ad4:	00 94       	com	r0
    1ad6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__negsi2>
    1ada:	57 fd       	sbrc	r21, 7
    1adc:	07 d0       	rcall	.+14     	; 0x1aec <__divmodsi4_neg2>
    1ade:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__udivmodsi4>
    1ae2:	07 fc       	sbrc	r0, 7
    1ae4:	03 d0       	rcall	.+6      	; 0x1aec <__divmodsi4_neg2>
    1ae6:	4e f4       	brtc	.+18     	; 0x1afa <__divmodsi4_exit>
    1ae8:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__negsi2>

00001aec <__divmodsi4_neg2>:
    1aec:	50 95       	com	r21
    1aee:	40 95       	com	r20
    1af0:	30 95       	com	r19
    1af2:	21 95       	neg	r18
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
    1af6:	4f 4f       	sbci	r20, 0xFF	; 255
    1af8:	5f 4f       	sbci	r21, 0xFF	; 255

00001afa <__divmodsi4_exit>:
    1afa:	08 95       	ret

00001afc <__negsi2>:
    1afc:	90 95       	com	r25
    1afe:	80 95       	com	r24
    1b00:	70 95       	com	r23
    1b02:	61 95       	neg	r22
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	08 95       	ret

00001b0c <_exit>:
    1b0c:	f8 94       	cli

00001b0e <__stop_program>:
    1b0e:	ff cf       	rjmp	.-2      	; 0x1b0e <__stop_program>
