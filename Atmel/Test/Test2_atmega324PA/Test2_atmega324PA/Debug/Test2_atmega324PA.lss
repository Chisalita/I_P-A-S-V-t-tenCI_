
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000015c0  00001654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025e  00800104  00800104  00001658  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ea1  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a55  00000000  00000000  00003779  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b22  00000000  00000000  000041ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000828  00000000  00000000  00004cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009f8  00000000  00000000  00005518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020bd  00000000  00000000  00005f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00007fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 ec       	ldi	r30, 0xC0	; 192
      90:	f5 e1       	ldi	r31, 0x15	; 21
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 30       	cpi	r26, 0x04	; 4
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a4 e0       	ldi	r26, 0x04	; 4
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 36       	cpi	r26, 0x62	; 98
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 a8 00 	call	0x150	; 0x150 <main>
      b2:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initAll>:

int bune =0; //teste


void initAll(){
	initUSART1(9600);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 ff 04 	call	0x9fe	; 0x9fe <initUSART1>
	initTimer0();
      c2:	0e 94 b8 00 	call	0x170	; 0x170 <initTimer0>
	initTimer1();
      c6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <initTimer1>
	initTimer2();
      ca:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <initTimer2>
	initSensors();
      ce:	0e 94 4b 02 	call	0x496	; 0x496 <initSensors>
      d2:	08 95       	ret

000000d4 <executeCommands>:
	}
	
}


void executeCommands(){
      d4:	ff 92       	push	r15
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	28 97       	sbiw	r28, 0x08	; 8
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	f8 94       	cli
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	cd bf       	out	0x3d, r28	; 61
	//startUltrasonicMeasure();
	int8_t s;
	command lastcmd = getLastCommand(&s);
      ee:	ce 01       	movw	r24, r28
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <getLastCommand>
      f6:	4c 83       	std	Y+4, r20	; 0x04
      f8:	5d 83       	std	Y+5, r21	; 0x05
      fa:	6e 83       	std	Y+6, r22	; 0x06
      fc:	f2 2e       	mov	r15, r18
      fe:	0d 81       	ldd	r16, Y+5	; 0x05
     100:	1e 81       	ldd	r17, Y+6	; 0x06
	//sendStatusUpdate();
	//CHECK CRCs	
	if(s==1){
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	c1 f4       	brne	.+48     	; 0x138 <executeCommands+0x64>
		//LED_CMD_PIN |= (1<<LED_CMD_PINx);
		sendStatusUpdate();//// sar putea sa nu poata transmite atat de repede + intreruperile la 10 ms nu cred ca il lasa sa transmita bine...
     108:	0e 94 bc 06 	call	0xd78	; 0xd78 <sendStatusUpdate>
						resp.sensorInfo[1]=33;
						resp.time=lastcmd.time;
						sendResponse(resp);		
	*/

		if(lastcmd.header == Header_StatusUpdate){ // is just status update
     10c:	80 e8       	ldi	r24, 0x80	; 128
     10e:	f8 12       	cpse	r15, r24
     110:	03 c0       	rjmp	.+6      	; 0x118 <executeCommands+0x44>
		
			sendStatusUpdate();
     112:	0e 94 bc 06 	call	0xd78	; 0xd78 <sendStatusUpdate>
     116:	10 c0       	rjmp	.+32     	; 0x138 <executeCommands+0x64>

			
			}else{
			if(lastcmd.time){
     118:	01 2b       	or	r16, r17
     11a:	29 f0       	breq	.+10     	; 0x126 <executeCommands+0x52>
				
				isAutonomous = 0;
     11c:	10 92 06 01 	sts	0x0106, r1
     120:	10 92 05 01 	sts	0x0105, r1
     124:	09 c0       	rjmp	.+18     	; 0x138 <executeCommands+0x64>
				//	driveRightForTime(lastcmd.right, lastcmd.time);//1
					}else{
				//	driveForwardForTime(lastcmd.forward, lastcmd.time);//1
				}
				}else{
				isAutonomous=1;
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	90 93 06 01 	sts	0x0106, r25
     12e:	80 93 05 01 	sts	0x0105, r24
				car_speed = lastcmd.forward;
     132:	8c 81       	ldd	r24, Y+4	; 0x04
     134:	80 93 04 01 	sts	0x0104, r24



	}
	
     138:	28 96       	adiw	r28, 0x08	; 8
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	ff 90       	pop	r15
     14e:	08 95       	ret

00000150 <main>:


int main(void)
{
	
	initAll();
     150:	0e 94 5d 00 	call	0xba	; 0xba <initAll>
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
     154:	08 9a       	sbi	0x01, 0	; 1
	
	sei();
     156:	78 94       	sei

	breakAll();
     158:	0e 94 b1 00 	call	0x162	; 0x162 <breakAll>
	
	
	while(1)
	{
		executeCommands();
     15c:	0e 94 6a 00 	call	0xd4	; 0xd4 <executeCommands>
     160:	fd cf       	rjmp	.-6      	; 0x15c <main+0xc>

00000162 <breakAll>:

volatile uint16_t TIME_TO_TURN_MS = 830; // 900 pe parchet , 1400 pe mocheta Conti
volatile uint16_t TURN_SPEED = 80;

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     162:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     164:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     166:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     16a:	10 92 b4 00 	sts	0x00B4, r1
     16e:	08 95       	ret

00000170 <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LEFT_DIR_DDR1 |= (1<<MOTOR_LEFT_DIR_PIN1x);
     170:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_LEFT_DIR_DDR2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     172:	39 9a       	sbi	0x07, 1	; 7

	//setez directia initiala
	MOTOR_LEFT_DIR_PORT2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     174:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_LEFT_DIR_PORT1 &= ~(1<<MOTOR_LEFT_DIR_PIN1x);
     176:	40 98       	cbi	0x08, 0	; 8

	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     178:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     17a:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     17c:	84 b5       	in	r24, 0x24	; 36
     17e:	80 68       	ori	r24, 0x80	; 128
     180:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     182:	84 b5       	in	r24, 0x24	; 36
     184:	8f 7b       	andi	r24, 0xBF	; 191
     186:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     188:	84 b5       	in	r24, 0x24	; 36
     18a:	80 62       	ori	r24, 0x20	; 32
     18c:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     18e:	84 b5       	in	r24, 0x24	; 36
     190:	8f 7e       	andi	r24, 0xEF	; 239
     192:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     194:	84 b5       	in	r24, 0x24	; 36
     196:	83 60       	ori	r24, 0x03	; 3
     198:	84 bd       	out	0x24, r24	; 36

volatile uint16_t TIME_TO_TURN_MS = 830; // 900 pe parchet , 1400 pe mocheta Conti
volatile uint16_t TURN_SPEED = 80;

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     19a:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     19c:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
     19e:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	85 bd       	out	0x25, r24	; 37
     1a4:	08 95       	ret

000001a6 <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RIGHT_DIR_DDR1 |= (1<<MOTOR_RIGHT_DIR_PIN1x);
     1a6:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RIGHT_DIR_DDR2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     1a8:	3f 9a       	sbi	0x07, 7	; 7
	
	//setez directia initiala
	MOTOR_RIGHT_DIR_PORT2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     1aa:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RIGHT_DIR_PORT1 &= ~(1<<MOTOR_RIGHT_DIR_PIN1x);
     1ac:	46 98       	cbi	0x08, 6	; 8

	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     1ae:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     1b0:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     1b2:	e0 eb       	ldi	r30, 0xB0	; 176
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 68       	ori	r24, 0x80	; 128
     1ba:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     1bc:	80 81       	ld	r24, Z
     1be:	8f 7b       	andi	r24, 0xBF	; 191
     1c0:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     1c2:	80 81       	ld	r24, Z
     1c4:	80 62       	ori	r24, 0x20	; 32
     1c6:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     1c8:	80 81       	ld	r24, Z
     1ca:	8f 7e       	andi	r24, 0xEF	; 239
     1cc:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     1ce:	80 81       	ld	r24, Z
     1d0:	83 60       	ori	r24, 0x03	; 3
     1d2:	80 83       	st	Z, r24
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     1d4:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     1d8:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
     1dc:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     1e0:	e1 eb       	ldi	r30, 0xB1	; 177
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8c 7f       	andi	r24, 0xFC	; 252
     1e8:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     1ea:	80 81       	ld	r24, Z
     1ec:	84 60       	ori	r24, 0x04	; 4
     1ee:	80 83       	st	Z, r24
     1f0:	08 95       	ret

000001f2 <getInfraredForwardDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES; j++)
	{
		avreage += InfraredValues[j];
     1f2:	20 91 3a 01 	lds	r18, 0x013A
     1f6:	80 91 3b 01 	lds	r24, 0x013B
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	82 0f       	add	r24, r18
     202:	91 1d       	adc	r25, r1
     204:	a1 1d       	adc	r26, r1
     206:	b1 1d       	adc	r27, r1
     208:	20 91 3c 01 	lds	r18, 0x013C
     20c:	82 0f       	add	r24, r18
     20e:	91 1d       	adc	r25, r1
     210:	a1 1d       	adc	r26, r1
     212:	b1 1d       	adc	r27, r1
     214:	20 91 3d 01 	lds	r18, 0x013D
     218:	82 0f       	add	r24, r18
     21a:	91 1d       	adc	r25, r1
     21c:	a1 1d       	adc	r26, r1
     21e:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     220:	b6 95       	lsr	r27
     222:	a7 95       	ror	r26
     224:	97 95       	ror	r25
     226:	87 95       	ror	r24
     228:	b6 95       	lsr	r27
     22a:	a7 95       	ror	r26
     22c:	97 95       	ror	r25
     22e:	87 95       	ror	r24
}
     230:	08 95       	ret

00000232 <getInfraredRightDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+NO_OF_IR_SENSORS];
     232:	20 91 3e 01 	lds	r18, 0x013E
     236:	80 91 3f 01 	lds	r24, 0x013F
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	82 0f       	add	r24, r18
     242:	91 1d       	adc	r25, r1
     244:	a1 1d       	adc	r26, r1
     246:	b1 1d       	adc	r27, r1
     248:	20 91 40 01 	lds	r18, 0x0140
     24c:	82 0f       	add	r24, r18
     24e:	91 1d       	adc	r25, r1
     250:	a1 1d       	adc	r26, r1
     252:	b1 1d       	adc	r27, r1
     254:	20 91 41 01 	lds	r18, 0x0141
     258:	82 0f       	add	r24, r18
     25a:	91 1d       	adc	r25, r1
     25c:	a1 1d       	adc	r26, r1
     25e:	b1 1d       	adc	r27, r1
	}

	return avreage/MAX_INFRARED_VALUES;
     260:	b6 95       	lsr	r27
     262:	a7 95       	ror	r26
     264:	97 95       	ror	r25
     266:	87 95       	ror	r24
     268:	b6 95       	lsr	r27
     26a:	a7 95       	ror	r26
     26c:	97 95       	ror	r25
     26e:	87 95       	ror	r24
}
     270:	08 95       	ret

00000272 <getInfraredBackDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+(2*NO_OF_IR_SENSORS)];
     272:	20 91 42 01 	lds	r18, 0x0142
     276:	80 91 43 01 	lds	r24, 0x0143
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	82 0f       	add	r24, r18
     282:	91 1d       	adc	r25, r1
     284:	a1 1d       	adc	r26, r1
     286:	b1 1d       	adc	r27, r1
     288:	20 91 44 01 	lds	r18, 0x0144
     28c:	82 0f       	add	r24, r18
     28e:	91 1d       	adc	r25, r1
     290:	a1 1d       	adc	r26, r1
     292:	b1 1d       	adc	r27, r1
     294:	20 91 45 01 	lds	r18, 0x0145
     298:	82 0f       	add	r24, r18
     29a:	91 1d       	adc	r25, r1
     29c:	a1 1d       	adc	r26, r1
     29e:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     2a0:	b6 95       	lsr	r27
     2a2:	a7 95       	ror	r26
     2a4:	97 95       	ror	r25
     2a6:	87 95       	ror	r24
     2a8:	b6 95       	lsr	r27
     2aa:	a7 95       	ror	r26
     2ac:	97 95       	ror	r25
     2ae:	87 95       	ror	r24
}
     2b0:	08 95       	ret

000002b2 <getInfraredLeftDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+(3*NO_OF_IR_SENSORS)];
     2b2:	20 91 46 01 	lds	r18, 0x0146
     2b6:	80 91 47 01 	lds	r24, 0x0147
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	82 0f       	add	r24, r18
     2c2:	91 1d       	adc	r25, r1
     2c4:	a1 1d       	adc	r26, r1
     2c6:	b1 1d       	adc	r27, r1
     2c8:	20 91 48 01 	lds	r18, 0x0148
     2cc:	82 0f       	add	r24, r18
     2ce:	91 1d       	adc	r25, r1
     2d0:	a1 1d       	adc	r26, r1
     2d2:	b1 1d       	adc	r27, r1
     2d4:	20 91 49 01 	lds	r18, 0x0149
     2d8:	82 0f       	add	r24, r18
     2da:	91 1d       	adc	r25, r1
     2dc:	a1 1d       	adc	r26, r1
     2de:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     2e0:	b6 95       	lsr	r27
     2e2:	a7 95       	ror	r26
     2e4:	97 95       	ror	r25
     2e6:	87 95       	ror	r24
     2e8:	b6 95       	lsr	r27
     2ea:	a7 95       	ror	r26
     2ec:	97 95       	ror	r25
     2ee:	87 95       	ror	r24
}
     2f0:	08 95       	ret

000002f2 <getAverageUltrasonicValue>:

uint16_t getLastUltrasonicValue(){
	return UltraSonicValues[US_pos_in_buffer-1];//because it is always the next position
}

uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
     2f2:	cf 93       	push	r28
     2f4:	38 2f       	mov	r19, r24
     2f6:	81 31       	cpi	r24, 0x11	; 17
     2f8:	08 f0       	brcs	.+2      	; 0x2fc <getAverageUltrasonicValue+0xa>
     2fa:	30 e1       	ldi	r19, 0x10	; 16
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     2fc:	33 23       	and	r19, r19
     2fe:	a9 f1       	breq	.+106    	; 0x36a <getAverageUltrasonicValue+0x78>
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     304:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	cb 01       	movw	r24, r22
     30c:	a0 e1       	ldi	r26, 0x10	; 16
     30e:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
	{
		uint16_t aux;
		if(US_pos_in_buffer-i >= 0){ 
     310:	e0 91 08 01 	lds	r30, 0x0108
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	e4 1b       	sub	r30, r20
     318:	f5 0b       	sbc	r31, r21
     31a:	6a f0       	brmi	.+26     	; 0x336 <getAverageUltrasonicValue+0x44>
			aux = UltraSonicValues[US_pos_in_buffer-i];
     31c:	e0 91 08 01 	lds	r30, 0x0108
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	e4 1b       	sub	r30, r20
     324:	f5 0b       	sbc	r31, r21
     326:	ee 0f       	add	r30, r30
     328:	ff 1f       	adc	r31, r31
     32a:	e6 5e       	subi	r30, 0xE6	; 230
     32c:	fe 4f       	sbci	r31, 0xFE	; 254
     32e:	01 90       	ld	r0, Z+
     330:	f0 81       	ld	r31, Z
     332:	e0 2d       	mov	r30, r0
     334:	0e c0       	rjmp	.+28     	; 0x352 <getAverageUltrasonicValue+0x60>
		}else{// rap around
			aux = UltraSonicValues[MAX_ULTRASONIC_VALUES - i + US_pos_in_buffer];
     336:	c0 91 08 01 	lds	r28, 0x0108
     33a:	fd 01       	movw	r30, r26
     33c:	e4 1b       	sub	r30, r20
     33e:	f5 0b       	sbc	r31, r21
     340:	ec 0f       	add	r30, r28
     342:	f1 1d       	adc	r31, r1
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	e6 5e       	subi	r30, 0xE6	; 230
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	01 90       	ld	r0, Z+
     34e:	f0 81       	ld	r31, Z
     350:	e0 2d       	mov	r30, r0
		}
		
		averrage += aux;
     352:	6e 0f       	add	r22, r30
     354:	7f 1f       	adc	r23, r31
     356:	81 1d       	adc	r24, r1
     358:	91 1d       	adc	r25, r1
		
		if(aux){ // only if the value is nonzero
     35a:	ef 2b       	or	r30, r31
     35c:	09 f0       	breq	.+2      	; 0x360 <getAverageUltrasonicValue+0x6e>
			good_vals++;
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	4f 5f       	subi	r20, 0xFF	; 255
     362:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     364:	43 17       	cp	r20, r19
     366:	a0 f2       	brcs	.-88     	; 0x310 <getAverageUltrasonicValue+0x1e>
     368:	04 c0       	rjmp	.+8      	; 0x372 <getAverageUltrasonicValue+0x80>
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     36a:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	cb 01       	movw	r24, r22
			good_vals++;
		}
		
	}
	
	averrage /= good_vals; //it may be better to round it up to the nearest
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	0e 94 9d 0a 	call	0x153a	; 0x153a <__udivmodsi4>
	
	return averrage;
}
     37c:	c9 01       	movw	r24, r18
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	9c 01       	movw	r18, r24
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0;
     38c:	fa 01       	movw	r30, r20
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	e6 5e       	subi	r30, 0xE6	; 230
     394:	fe 4f       	sbci	r31, 0xFE	; 254
     396:	11 82       	std	Z+1, r1	; 0x01
     398:	10 82       	st	Z, r1
     39a:	4f 5f       	subi	r20, 0xFF	; 255
     39c:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     39e:	40 31       	cpi	r20, 0x10	; 16
     3a0:	51 05       	cpc	r21, r1
     3a2:	a1 f7       	brne	.-24     	; 0x38c <initUSART0+0xa>
		UltraSonicValues[i] = 0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     3a4:	10 92 4a 01 	sts	0x014A, r1
     3a8:	10 92 4b 01 	sts	0x014B, r1
     3ac:	10 92 4c 01 	sts	0x014C, r1
     3b0:	10 92 4d 01 	sts	0x014D, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     3b4:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     3b6:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     3b8:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     3ba:	c2 ec       	ldi	r28, 0xC2	; 194
     3bc:	d0 e0       	ldi	r29, 0x00	; 0
     3be:	88 81       	ld	r24, Y
     3c0:	8f 73       	andi	r24, 0x3F	; 63
     3c2:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     3c4:	e0 ec       	ldi	r30, 0xC0	; 192
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8d 7f       	andi	r24, 0xFD	; 253
     3cc:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     3ce:	c9 01       	movw	r24, r18
     3d0:	aa 27       	eor	r26, r26
     3d2:	97 fd       	sbrc	r25, 7
     3d4:	a0 95       	com	r26
     3d6:	ba 2f       	mov	r27, r26
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	aa 1f       	adc	r26, r26
     3de:	bb 1f       	adc	r27, r27
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	aa 1f       	adc	r26, r26
     3e6:	bb 1f       	adc	r27, r27
     3e8:	9c 01       	movw	r18, r24
     3ea:	ad 01       	movw	r20, r26
     3ec:	22 0f       	add	r18, r18
     3ee:	33 1f       	adc	r19, r19
     3f0:	44 1f       	adc	r20, r20
     3f2:	55 1f       	adc	r21, r21
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	44 1f       	adc	r20, r20
     3fa:	55 1f       	adc	r21, r21
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	72 e1       	ldi	r23, 0x12	; 18
     400:	8a e7       	ldi	r24, 0x7A	; 122
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divmodsi4>
     408:	ca 01       	movw	r24, r20
     40a:	b9 01       	movw	r22, r18
     40c:	61 50       	subi	r22, 0x01	; 1
     40e:	71 09       	sbc	r23, r1
     410:	81 09       	sbc	r24, r1
     412:	91 09       	sbc	r25, r1
     414:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatsisf>
     418:	0e 94 00 0a 	call	0x1400	; 0x1400 <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     41c:	27 2f       	mov	r18, r23
     41e:	33 27       	eor	r19, r19
     420:	27 fd       	sbrc	r18, 7
     422:	3a 95       	dec	r19
     424:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     428:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     42c:	e1 ec       	ldi	r30, 0xC1	; 193
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 e1       	ldi	r24, 0x10	; 16
     432:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     434:	88 81       	ld	r24, Y
     436:	86 60       	ori	r24, 0x06	; 6
     438:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     43a:	80 81       	ld	r24, Z
     43c:	8b 7f       	andi	r24, 0xFB	; 251
     43e:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     440:	88 81       	ld	r24, Y
     442:	87 7f       	andi	r24, 0xF7	; 247
     444:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     446:	88 81       	ld	r24, Y
     448:	8f 7c       	andi	r24, 0xCF	; 207
     44a:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     44c:	80 81       	ld	r24, Z
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	80 83       	st	Z, r24
	
		
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <initADC>:

void  initADC(void)
{

	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC4D) | (1<<ADC5D) | (1<<ADC6D) | (1<<ADC7D) ;
     458:	ee e7       	ldi	r30, 0x7E	; 126
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	80 6f       	ori	r24, 0xF0	; 240
     460:	80 83       	st	Z, r24

	//set Vref to Vcc, va trebui sa fie referinta externa !!
	ADMUX |= (1<<REFS0);
     462:	ec e7       	ldi	r30, 0x7C	; 124
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     46c:	80 81       	ld	r24, Z
     46e:	8f 77       	andi	r24, 0x7F	; 127
     470:	80 83       	st	Z, r24
	
	//select ADC4
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     472:	80 81       	ld	r24, Z
     474:	80 7e       	andi	r24, 0xE0	; 224
     476:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX2);
     478:	80 81       	ld	r24, Z
     47a:	84 60       	ori	r24, 0x04	; 4
     47c:	80 83       	st	Z, r24
	
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     47e:	ea e7       	ldi	r30, 0x7A	; 122
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	88 60       	ori	r24, 0x08	; 8
     486:	80 83       	st	Z, r24
	
	
	//enable the ADC
	ADCSRA |= (1<<ADEN);
     488:	80 81       	ld	r24, Z
     48a:	80 68       	ori	r24, 0x80	; 128
     48c:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     48e:	80 81       	ld	r24, Z
     490:	87 60       	ori	r24, 0x07	; 7
     492:	80 83       	st	Z, r24
     494:	08 95       	ret

00000496 <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     496:	0c 98       	cbi	0x01, 4	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     498:	0d 98       	cbi	0x01, 5	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     49a:	0e 98       	cbi	0x01, 6	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     49c:	0f 98       	cbi	0x01, 7	; 1
	
	initADC();
     49e:	0e 94 2c 02 	call	0x458	; 0x458 <initADC>
	initUSART0(9600);
     4a2:	80 e8       	ldi	r24, 0x80	; 128
     4a4:	95 e2       	ldi	r25, 0x25	; 37
     4a6:	0e 94 c1 01 	call	0x382	; 0x382 <initUSART0>
     4aa:	08 95       	ret

000004ac <__vector_24>:
	//start conversion
	//ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	6f 93       	push	r22
     4c0:	7f 93       	push	r23
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	ef 93       	push	r30
     4d0:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     4d2:	60 91 78 00 	lds	r22, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     4d6:	80 91 79 00 	lds	r24, 0x0079
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	78 2b       	or	r23, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     4de:	60 31       	cpi	r22, 0x10	; 16
     4e0:	71 05       	cpc	r23, r1
     4e2:	10 f4       	brcc	.+4      	; 0x4e8 <__vector_24+0x3c>
     4e4:	60 e1       	ldi	r22, 0x10	; 16
     4e6:	70 e0       	ldi	r23, 0x00	; 0
		distance = 30.0;
	}
	*/
		
		//dont forget to set IR_pos_in_buffer = 0 when changing the active sensor
		int pos_in_buff = (activeInfraredSensor * NO_OF_IR_SENSORS) + IR_pos_in_buffer; //(IR_pos_in_buffer&MAX_INFRARED_VALUES_MSK) 
     4e8:	80 91 0d 01 	lds	r24, 0x010D
     4ec:	c0 91 0c 01 	lds	r28, 0x010C
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
     4f2:	94 e0       	ldi	r25, 0x04	; 4
     4f4:	89 9f       	mul	r24, r25
     4f6:	c0 0d       	add	r28, r0
     4f8:	d1 1d       	adc	r29, r1
     4fa:	11 24       	eor	r1, r1
		InfraredValues[pos_in_buff] = floor((2076.0 / (theTenBitResult - 11.0)) + 0.5);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 1f 09 	call	0x123e	; 0x123e <__floatunsisf>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e3       	ldi	r20, 0x30	; 48
     50a:	51 e4       	ldi	r21, 0x41	; 65
     50c:	0e 94 26 08 	call	0x104c	; 0x104c <__subsf3>
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 ec       	ldi	r23, 0xC0	; 192
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	95 e4       	ldi	r25, 0x45	; 69
     51c:	0e 94 8b 08 	call	0x1116	; 0x1116 <__divsf3>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	5f e3       	ldi	r21, 0x3F	; 63
     528:	0e 94 27 08 	call	0x104e	; 0x104e <__addsf3>
     52c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <floor>
     530:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fixunssfsi>
     534:	fe 01       	movw	r30, r28
     536:	e6 5c       	subi	r30, 0xC6	; 198
     538:	fe 4f       	sbci	r31, 0xFE	; 254
     53a:	60 83       	st	Z, r22
		
		//under lower limit
		if (InfraredValues[pos_in_buff] < 4)
     53c:	80 81       	ld	r24, Z
     53e:	84 30       	cpi	r24, 0x04	; 4
     540:	28 f4       	brcc	.+10     	; 0x54c <__vector_24+0xa0>
		{
			InfraredValues[pos_in_buff] = 4;
     542:	84 e0       	ldi	r24, 0x04	; 4
     544:	fe 01       	movw	r30, r28
     546:	e6 5c       	subi	r30, 0xC6	; 198
     548:	fe 4f       	sbci	r31, 0xFE	; 254
     54a:	80 83       	st	Z, r24
		}
		
		//above upper limit
		if (InfraredValues[pos_in_buff] > 30)
     54c:	fe 01       	movw	r30, r28
     54e:	e6 5c       	subi	r30, 0xC6	; 198
     550:	fe 4f       	sbci	r31, 0xFE	; 254
     552:	80 81       	ld	r24, Z
     554:	8f 31       	cpi	r24, 0x1F	; 31
     556:	10 f0       	brcs	.+4      	; 0x55c <__vector_24+0xb0>
		{
			
			InfraredValues[pos_in_buff] = 30;
     558:	8e e1       	ldi	r24, 0x1E	; 30
     55a:	80 83       	st	Z, r24
		}
	
	
	IR_pos_in_buffer++;
     55c:	80 91 0c 01 	lds	r24, 0x010C
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	80 93 0c 01 	sts	0x010C, r24
	
	if (IR_pos_in_buffer == MAX_INFRARED_VALUES)
     566:	80 91 0c 01 	lds	r24, 0x010C
     56a:	84 30       	cpi	r24, 0x04	; 4
     56c:	39 f4       	brne	.+14     	; 0x57c <__vector_24+0xd0>
	{
		IR_pos_in_buffer = 0;
     56e:	10 92 0c 01 	sts	0x010C, r1
		activeInfraredSensor++;
     572:	80 91 0d 01 	lds	r24, 0x010D
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	80 93 0d 01 	sts	0x010D, r24
	}
	
	if (activeInfraredSensor == NO_OF_IR_SENSORS)
     57c:	80 91 0d 01 	lds	r24, 0x010D
     580:	84 30       	cpi	r24, 0x04	; 4
     582:	11 f4       	brne	.+4      	; 0x588 <__vector_24+0xdc>
	{
		activeInfraredSensor = 0;
     584:	10 92 0d 01 	sts	0x010D, r1
	}
	
	//if the sensors are connected starting with pin 4, then add 4 as a offset
	
	//clear the MUX bits first
	ADMUX &= 0xF0;
     588:	ec e7       	ldi	r30, 0x7C	; 124
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	80 7f       	andi	r24, 0xF0	; 240
     590:	80 83       	st	Z, r24
	
	
	//select the sensor
	ADMUX |= activeInfraredSensor + 4; //+offset
     592:	90 81       	ld	r25, Z
     594:	80 91 0d 01 	lds	r24, 0x010D
     598:	8c 5f       	subi	r24, 0xFC	; 252
     59a:	89 2b       	or	r24, r25
     59c:	80 83       	st	Z, r24
	
	//start a new conversion
	ADCSRA |= 1<<ADSC;
     59e:	ea e7       	ldi	r30, 0x7A	; 122
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	80 64       	ori	r24, 0x40	; 64
     5a6:	80 83       	st	Z, r24
}
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	bf 91       	pop	r27
     5b2:	af 91       	pop	r26
     5b4:	9f 91       	pop	r25
     5b6:	8f 91       	pop	r24
     5b8:	7f 91       	pop	r23
     5ba:	6f 91       	pop	r22
     5bc:	5f 91       	pop	r21
     5be:	4f 91       	pop	r20
     5c0:	3f 91       	pop	r19
     5c2:	2f 91       	pop	r18
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <__vector_20>:

ISR(USART0_RX_vect){
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	4f 92       	push	r4
     5da:	5f 92       	push	r5
     5dc:	7f 92       	push	r7
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	1f 93       	push	r17
     5ee:	2f 93       	push	r18
     5f0:	3f 93       	push	r19
     5f2:	4f 93       	push	r20
     5f4:	5f 93       	push	r21
     5f6:	6f 93       	push	r22
     5f8:	7f 93       	push	r23
     5fa:	8f 93       	push	r24
     5fc:	9f 93       	push	r25
     5fe:	af 93       	push	r26
     600:	bf 93       	push	r27
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31


	uint8_t data;
	data = UDR0;
     60a:	10 91 c6 00 	lds	r17, 0x00C6
	
	if(data == 0x52){ //start of data
     60e:	12 35       	cpi	r17, 0x52	; 82
     610:	39 f4       	brne	.+14     	; 0x620 <__vector_20+0x52>
		ultrasonicDataPack[0] = 'R';
     612:	82 e5       	ldi	r24, 0x52	; 82
     614:	80 93 4a 01 	sts	0x014A, r24
		US_data_part_no=1;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 09 01 	sts	0x0109, r24
     61e:	a5 c0       	rjmp	.+330    	; 0x76a <__vector_20+0x19c>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     620:	80 91 4a 01 	lds	r24, 0x014A
     624:	82 35       	cpi	r24, 0x52	; 82
     626:	09 f0       	breq	.+2      	; 0x62a <__vector_20+0x5c>
     628:	7c c0       	rjmp	.+248    	; 0x722 <__vector_20+0x154>
     62a:	80 91 09 01 	lds	r24, 0x0109
     62e:	84 30       	cpi	r24, 0x04	; 4
     630:	09 f0       	breq	.+2      	; 0x634 <__vector_20+0x66>
     632:	77 c0       	rjmp	.+238    	; 0x722 <__vector_20+0x154>
     634:	1d 30       	cpi	r17, 0x0D	; 13
     636:	09 f0       	breq	.+2      	; 0x63a <__vector_20+0x6c>
     638:	74 c0       	rjmp	.+232    	; 0x722 <__vector_20+0x154>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     63a:	0f 2e       	mov	r0, r31
     63c:	fb e4       	ldi	r31, 0x4B	; 75
     63e:	ef 2e       	mov	r14, r31
     640:	f1 e0       	ldi	r31, 0x01	; 1
     642:	ff 2e       	mov	r15, r31
     644:	f0 2d       	mov	r31, r0
     646:	f7 01       	movw	r30, r14
     648:	60 81       	ld	r22, Z
     64a:	0f 2e       	mov	r0, r31
     64c:	fc e4       	ldi	r31, 0x4C	; 76
     64e:	4f 2e       	mov	r4, r31
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	5f 2e       	mov	r5, r31
     654:	f0 2d       	mov	r31, r0
     656:	f2 01       	movw	r30, r4
     658:	70 80       	ld	r7, Z
     65a:	cd e4       	ldi	r28, 0x4D	; 77
     65c:	d1 e0       	ldi	r29, 0x01	; 1
     65e:	c8 80       	ld	r12, Y
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatsisf>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	48 ec       	ldi	r20, 0xC8	; 200
     670:	52 e4       	ldi	r21, 0x42	; 66
     672:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__mulsf3>
     676:	4b 01       	movw	r8, r22
     678:	5c 01       	movw	r10, r24
     67a:	67 2d       	mov	r22, r7
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatsisf>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e2       	ldi	r20, 0x20	; 32
     68c:	51 e4       	ldi	r21, 0x41	; 65
     68e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__mulsf3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	c5 01       	movw	r24, r10
     698:	b4 01       	movw	r22, r8
     69a:	0e 94 27 08 	call	0x104e	; 0x104e <__addsf3>
     69e:	4b 01       	movw	r8, r22
     6a0:	5c 01       	movw	r10, r24
     6a2:	6c 2d       	mov	r22, r12
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatsisf>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	c5 01       	movw	r24, r10
     6b4:	b4 01       	movw	r22, r8
     6b6:	0e 94 27 08 	call	0x104e	; 0x104e <__addsf3>
			//transform from inch to mm
			val *= 25.4;
     6ba:	23 e3       	ldi	r18, 0x33	; 51
     6bc:	33 e3       	ldi	r19, 0x33	; 51
     6be:	4b ec       	ldi	r20, 0xCB	; 203
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__mulsf3>
			uint16_t mm = floor(val+0.5); // round to the nearest
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	5f e3       	ldi	r21, 0x3F	; 63
     6ce:	0e 94 27 08 	call	0x104e	; 0x104e <__addsf3>
     6d2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <floor>
     6d6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fixunssfsi>
			UltraSonicValues[US_pos_in_buffer] = mm; 
     6da:	e0 91 08 01 	lds	r30, 0x0108
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	e6 5e       	subi	r30, 0xE6	; 230
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	71 83       	std	Z+1, r23	; 0x01
     6ea:	60 83       	st	Z, r22
			lastUSonicValue = mm;
     6ec:	70 93 0b 01 	sts	0x010B, r23
     6f0:	60 93 0a 01 	sts	0x010A, r22
			US_pos_in_buffer++;
     6f4:	80 91 08 01 	lds	r24, 0x0108
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 08 01 	sts	0x0108, r24

			US_pos_in_buffer &= MAX_ULTRASONIC_VALUES_MSK;
     6fe:	80 91 08 01 	lds	r24, 0x0108
     702:	8f 70       	andi	r24, 0x0F	; 15
     704:	80 93 08 01 	sts	0x0108, r24
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     708:	10 92 4a 01 	sts	0x014A, r1
     70c:	f7 01       	movw	r30, r14
     70e:	10 82       	st	Z, r1
     710:	f2 01       	movw	r30, r4
     712:	10 82       	st	Z, r1
     714:	18 82       	st	Y, r1
				}
				US_data_part_no=0;
     716:	10 92 09 01 	sts	0x0109, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     71a:	80 91 07 01 	lds	r24, 0x0107
     71e:	81 11       	cpse	r24, r1
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     720:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     722:	80 91 09 01 	lds	r24, 0x0109
     726:	84 30       	cpi	r24, 0x04	; 4
     728:	50 f0       	brcs	.+20     	; 0x73e <__vector_20+0x170>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     72a:	10 92 4a 01 	sts	0x014A, r1
     72e:	10 92 4b 01 	sts	0x014B, r1
     732:	10 92 4c 01 	sts	0x014C, r1
     736:	10 92 4d 01 	sts	0x014D, r1
			}
			US_data_part_no=0;
     73a:	10 92 09 01 	sts	0x0109, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     73e:	80 91 4a 01 	lds	r24, 0x014A
     742:	82 35       	cpi	r24, 0x52	; 82
     744:	91 f4       	brne	.+36     	; 0x76a <__vector_20+0x19c>
			if (isdigit(data))
     746:	81 2f       	mov	r24, r17
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	c0 97       	sbiw	r24, 0x30	; 48
     74c:	0a 97       	sbiw	r24, 0x0a	; 10
     74e:	68 f4       	brcc	.+26     	; 0x76a <__vector_20+0x19c>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     750:	e0 91 09 01 	lds	r30, 0x0109
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 ed       	ldi	r24, 0xD0	; 208
     758:	81 0f       	add	r24, r17
     75a:	e6 5b       	subi	r30, 0xB6	; 182
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	80 83       	st	Z, r24
				US_data_part_no++;
     760:	80 91 09 01 	lds	r24, 0x0109
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	80 93 09 01 	sts	0x0109, r24
			
		}
				
	}

}
     76a:	ff 91       	pop	r31
     76c:	ef 91       	pop	r30
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	bf 91       	pop	r27
     774:	af 91       	pop	r26
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	7f 91       	pop	r23
     77c:	6f 91       	pop	r22
     77e:	5f 91       	pop	r21
     780:	4f 91       	pop	r20
     782:	3f 91       	pop	r19
     784:	2f 91       	pop	r18
     786:	1f 91       	pop	r17
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	9f 90       	pop	r9
     794:	8f 90       	pop	r8
     796:	7f 90       	pop	r7
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <checkPackIsFullLength>:
}

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
     7a6:	28 2f       	mov	r18, r24
     7a8:	2f 77       	andi	r18, 0x7F	; 127
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	f9 01       	movw	r30, r18
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	e2 5b       	subi	r30, 0xB2	; 178
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	9f 3f       	cpi	r25, 0xFF	; 255
     7ba:	b1 f1       	breq	.+108    	; 0x828 <checkPackIsFullLength+0x82>
		return 0;
		}else{
		pc_no = rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no;
     7bc:	f9 01       	movw	r30, r18
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	e2 5b       	subi	r30, 0xB2	; 178
     7c4:	fe 4f       	sbci	r31, 0xFE	; 254
     7c6:	61 81       	ldd	r22, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	41 81       	ldd	r20, Z+1	; 0x01
     7cc:	4f 3f       	cpi	r20, 0xFF	; 255
     7ce:	71 f1       	breq	.+92     	; 0x82c <checkPackIsFullLength+0x86>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     7d0:	f9 01       	movw	r30, r18
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	e2 5b       	subi	r30, 0xB2	; 178
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	41 81       	ldd	r20, Z+1	; 0x01
     7dc:	55 27       	eor	r21, r21
     7de:	47 fd       	sbrc	r20, 7
     7e0:	50 95       	com	r21
     7e2:	26 2f       	mov	r18, r22
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	42 17       	cp	r20, r18
     7e8:	53 07       	cpc	r21, r19
     7ea:	11 f5       	brne	.+68     	; 0x830 <checkPackIsFullLength+0x8a>
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	66 e0       	ldi	r22, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
     7f0:	9c 01       	movw	r18, r24
     7f2:	2f 77       	andi	r18, 0x7F	; 127
     7f4:	33 27       	eor	r19, r19
     7f6:	f9 01       	movw	r30, r18
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	e2 5b       	subi	r30, 0xB2	; 178
     7fe:	fe 4f       	sbci	r31, 0xFE	; 254
     800:	71 81       	ldd	r23, Z+1	; 0x01
     802:	7f 3f       	cpi	r23, 0xFF	; 255
     804:	b9 f0       	breq	.+46     	; 0x834 <checkPackIsFullLength+0x8e>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     806:	f9 01       	movw	r30, r18
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	e2 5b       	subi	r30, 0xB2	; 178
     80e:	fe 4f       	sbci	r31, 0xFE	; 254
     810:	21 81       	ldd	r18, Z+1	; 0x01
     812:	33 27       	eor	r19, r19
     814:	27 fd       	sbrc	r18, 7
     816:	30 95       	com	r19
     818:	24 17       	cp	r18, r20
     81a:	35 07       	cpc	r19, r21
     81c:	69 f4       	brne	.+26     	; 0x838 <checkPackIsFullLength+0x92>
     81e:	61 50       	subi	r22, 0x01	; 1
     820:	01 96       	adiw	r24, 0x01	; 1
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     822:	61 11       	cpse	r22, r1
     824:	e5 cf       	rjmp	.-54     	; 0x7f0 <checkPackIsFullLength+0x4a>
     826:	0a c0       	rjmp	.+20     	; 0x83c <checkPackIsFullLength+0x96>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
		return 0;
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	08 95       	ret
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
			return 0;
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	08 95       	ret
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	08 95       	ret
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	08 95       	ret
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 95       	ret
		}
	}
	return 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
}
     83e:	08 95       	ret

00000840 <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	27 97       	sbiw	r28, 0x07	; 7
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
	
	
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
     860:	e0 91 11 01 	lds	r30, 0x0111
     864:	ef 77       	andi	r30, 0x7F	; 127
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	e2 5b       	subi	r30, 0xB2	; 178
     86e:	fe 4f       	sbci	r31, 0xFE	; 254
     870:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
     872:	e0 91 11 01 	lds	r30, 0x0111
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	31 96       	adiw	r30, 0x01	; 1
     87a:	ef 77       	andi	r30, 0x7F	; 127
     87c:	ff 27       	eor	r31, r31
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	e2 5b       	subi	r30, 0xB2	; 178
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	30 81       	ld	r19, Z
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
     888:	e0 91 11 01 	lds	r30, 0x0111
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	32 96       	adiw	r30, 0x02	; 2
     890:	ef 77       	andi	r30, 0x7F	; 127
     892:	ff 27       	eor	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e2 5b       	subi	r30, 0xB2	; 178
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
     89c:	40 81       	ld	r20, Z
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     89e:	e0 91 11 01 	lds	r30, 0x0111
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	33 96       	adiw	r30, 0x03	; 3
     8a6:	ef 77       	andi	r30, 0x7F	; 127
     8a8:	ff 27       	eor	r31, r31
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	e2 5b       	subi	r30, 0xB2	; 178
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	80 81       	ld	r24, Z
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     8b4:	e0 91 11 01 	lds	r30, 0x0111
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	34 96       	adiw	r30, 0x04	; 4
     8bc:	ef 77       	andi	r30, 0x7F	; 127
     8be:	ff 27       	eor	r31, r31
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	e2 5b       	subi	r30, 0xB2	; 178
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	e0 80       	ld	r14, Z
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     8ca:	f1 2c       	mov	r15, r1
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     8cc:	f8 2a       	or	r15, r24
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     8ce:	e0 91 11 01 	lds	r30, 0x0111
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	35 96       	adiw	r30, 0x05	; 5
     8d6:	ef 77       	andi	r30, 0x7F	; 127
     8d8:	ff 27       	eor	r31, r31
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	e2 5b       	subi	r30, 0xB2	; 178
     8e0:	fe 4f       	sbci	r31, 0xFE	; 254
     8e2:	80 81       	ld	r24, Z
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     8e4:	e0 91 11 01 	lds	r30, 0x0111
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	36 96       	adiw	r30, 0x06	; 6
     8ec:	ef 77       	andi	r30, 0x7F	; 127
     8ee:	ff 27       	eor	r31, r31
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e2 5b       	subi	r30, 0xB2	; 178
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	00 81       	ld	r16, Z
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     8fa:	10 e0       	ldi	r17, 0x00	; 0
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     8fc:	18 2b       	or	r17, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0


	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
     902:	ef ef       	ldi	r30, 0xFF	; 255
     904:	ff ef       	ldi	r31, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     906:	5f ef       	ldi	r21, 0xFF	; 255

	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
     908:	a0 91 11 01 	lds	r26, 0x0111
     90c:	6c 01       	movw	r12, r24
     90e:	ca 0e       	add	r12, r26
     910:	d1 1c       	adc	r13, r1
     912:	d6 01       	movw	r26, r12
     914:	af 77       	andi	r26, 0x7F	; 127
     916:	bb 27       	eor	r27, r27
     918:	aa 0f       	add	r26, r26
     91a:	bb 1f       	adc	r27, r27
     91c:	a2 5b       	subi	r26, 0xB2	; 178
     91e:	be 4f       	sbci	r27, 0xFE	; 254
     920:	ac 91       	ld	r26, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     922:	ea 27       	eor	r30, r26
     924:	ae 2f       	mov	r26, r30
     926:	a2 95       	swap	r26
     928:	ae 27       	eor	r26, r30
     92a:	0a 2e       	mov	r0, r26
     92c:	a6 95       	lsr	r26
     92e:	a6 95       	lsr	r26
     930:	a0 25       	eor	r26, r0
     932:	0a 2e       	mov	r0, r26
     934:	a6 95       	lsr	r26
     936:	a0 25       	eor	r26, r0
     938:	a7 70       	andi	r26, 0x07	; 7
     93a:	0e 2e       	mov	r0, r30
     93c:	ef 2f       	mov	r30, r31
     93e:	a6 95       	lsr	r26
     940:	07 94       	ror	r0
     942:	a7 95       	ror	r26
     944:	f0 2d       	mov	r31, r0
     946:	ea 27       	eor	r30, r26
     948:	06 94       	lsr	r0
     94a:	a7 95       	ror	r26
     94c:	f0 25       	eor	r31, r0
     94e:	ea 27       	eor	r30, r26
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     950:	a0 91 11 01 	lds	r26, 0x0111
     954:	6c 01       	movw	r12, r24
     956:	ca 0e       	add	r12, r26
     958:	d1 1c       	adc	r13, r1
     95a:	d6 01       	movw	r26, r12
     95c:	af 77       	andi	r26, 0x7F	; 127
     95e:	bb 27       	eor	r27, r27
     960:	aa 0f       	add	r26, r26
     962:	bb 1f       	adc	r27, r27
     964:	a2 5b       	subi	r26, 0xB2	; 178
     966:	be 4f       	sbci	r27, 0xFE	; 254
     968:	11 96       	adiw	r26, 0x01	; 1
     96a:	5c 93       	st	X, r21
     96c:	01 96       	adiw	r24, 0x01	; 1


	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     96e:	87 30       	cpi	r24, 0x07	; 7
     970:	91 05       	cpc	r25, r1
     972:	09 f0       	breq	.+2      	; 0x976 <__stack+0x77>
     974:	c9 cf       	rjmp	.-110    	; 0x908 <__stack+0x9>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
	}
	
	if (crc == 0){
     976:	ef 2b       	or	r30, r31
     978:	21 f4       	brne	.+8      	; 0x982 <__stack+0x83>
		*CRC_correct = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	fb 01       	movw	r30, r22
     97e:	80 83       	st	Z, r24
     980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x87>
		}else{
		*CRC_correct = 0;
     982:	fb 01       	movw	r30, r22
     984:	10 82       	st	Z, r1
	}
	
	return comm;
     986:	fd 82       	std	Y+5, r15	; 0x05
     988:	ec 82       	std	Y+4, r14	; 0x04
     98a:	1f 83       	std	Y+7, r17	; 0x07
     98c:	0e 83       	std	Y+6, r16	; 0x06
     98e:	5e 2d       	mov	r21, r14
     990:	6d 81       	ldd	r22, Y+5	; 0x05
     992:	70 2f       	mov	r23, r16
}
     994:	8f 81       	ldd	r24, Y+7	; 0x07
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	27 96       	adiw	r28, 0x07	; 7
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	08 95       	ret

000009b6 <__clearBuffers>:
	}
	
}

void __clearBuffers(){
	for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
		rxBuffer[i].pack_no =-1;
     9ba:	2f ef       	ldi	r18, 0xFF	; 255
     9bc:	fc 01       	movw	r30, r24
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	df 01       	movw	r26, r30
     9c4:	a2 5b       	subi	r26, 0xB2	; 178
     9c6:	be 4f       	sbci	r27, 0xFE	; 254
     9c8:	11 96       	adiw	r26, 0x01	; 1
     9ca:	2c 93       	st	X, r18
		txBuffer[i].pack_no =-1;
     9cc:	e2 5b       	subi	r30, 0xB2	; 178
     9ce:	fd 4f       	sbci	r31, 0xFD	; 253
     9d0:	21 83       	std	Z+1, r18	; 0x01
		txBuffer[i].data =0;
     9d2:	10 82       	st	Z, r1
	}
	
}

void __clearBuffers(){
	for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	80 38       	cpi	r24, 0x80	; 128
     9d8:	91 05       	cpc	r25, r1
     9da:	81 f7       	brne	.-32     	; 0x9bc <__clearBuffers+0x6>
		rxBuffer[i].pack_no =-1;
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}
	txWritePos = 0;
     9dc:	10 92 0e 01 	sts	0x010E, r1
	txReadPos = 0;
     9e0:	10 92 0f 01 	sts	0x010F, r1
	rxReadPos = 0;
     9e4:	10 92 15 01 	sts	0x0115, r1
	rxWritePos = 0;
     9e8:	10 92 14 01 	sts	0x0114, r1
	lastCommandHeader = 0;
     9ec:	10 92 10 01 	sts	0x0110, r1
	lastPackNo = 0;
     9f0:	10 92 12 01 	sts	0x0112, r1
	lastPackPosInBuff = 0;
     9f4:	10 92 11 01 	sts	0x0111, r1
	packStarted = 0;
     9f8:	10 92 13 01 	sts	0x0113, r1
     9fc:	08 95       	ret

000009fe <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	8c 01       	movw	r16, r24
	
	///TEST////
	txBuffer[i].pack_no =-1;
	txBuffer[i].data =0;
	}*/
	__clearBuffers();
     a08:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__clearBuffers>
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
     a0c:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
     a0e:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
     a10:	ca ec       	ldi	r28, 0xCA	; 202
     a12:	d0 e0       	ldi	r29, 0x00	; 0
     a14:	88 81       	ld	r24, Y
     a16:	8f 73       	andi	r24, 0x3F	; 63
     a18:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
     a1a:	e8 ec       	ldi	r30, 0xC8	; 200
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	8d 7f       	andi	r24, 0xFD	; 253
     a22:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     a24:	c8 01       	movw	r24, r16
     a26:	aa 27       	eor	r26, r26
     a28:	97 fd       	sbrc	r25, 7
     a2a:	a0 95       	com	r26
     a2c:	ba 2f       	mov	r27, r26
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	aa 1f       	adc	r26, r26
     a34:	bb 1f       	adc	r27, r27
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	aa 1f       	adc	r26, r26
     a3c:	bb 1f       	adc	r27, r27
     a3e:	9c 01       	movw	r18, r24
     a40:	ad 01       	movw	r20, r26
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	44 1f       	adc	r20, r20
     a48:	55 1f       	adc	r21, r21
     a4a:	22 0f       	add	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	44 1f       	adc	r20, r20
     a50:	55 1f       	adc	r21, r21
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	72 e1       	ldi	r23, 0x12	; 18
     a56:	8a e7       	ldi	r24, 0x7A	; 122
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divmodsi4>
     a5e:	ca 01       	movw	r24, r20
     a60:	b9 01       	movw	r22, r18
     a62:	61 50       	subi	r22, 0x01	; 1
     a64:	71 09       	sbc	r23, r1
     a66:	81 09       	sbc	r24, r1
     a68:	91 09       	sbc	r25, r1
     a6a:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatsisf>
     a6e:	0e 94 00 0a 	call	0x1400	; 0x1400 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
     a72:	27 2f       	mov	r18, r23
     a74:	33 27       	eor	r19, r19
     a76:	27 fd       	sbrc	r18, 7
     a78:	3a 95       	dec	r19
     a7a:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
     a7e:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     a82:	e9 ec       	ldi	r30, 0xC9	; 201
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
     a8a:	88 81       	ld	r24, Y
     a8c:	86 60       	ori	r24, 0x06	; 6
     a8e:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
     a90:	80 81       	ld	r24, Z
     a92:	8b 7f       	andi	r24, 0xFB	; 251
     a94:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
     a96:	88 81       	ld	r24, Y
     a98:	87 7f       	andi	r24, 0xF7	; 247
     a9a:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
     a9c:	88 81       	ld	r24, Y
     a9e:	8f 7c       	andi	r24, 0xCF	; 207
     aa0:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
     aa2:	80 81       	ld	r24, Z
     aa4:	80 68       	ori	r24, 0x80	; 128
     aa6:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
     aa8:	80 81       	ld	r24, Z
     aaa:	80 64       	ori	r24, 0x40	; 64
     aac:	80 83       	st	Z, r24
	
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	08 95       	ret

00000ab8 <__tryToSend>:
	packStarted = 0;
}

//this is used to send data so that USART1_TX_vect can be triggered
void __tryToSend(){
	if (UCSR1A & (1<<UDRE1)) //if data register is empty send a byte
     ab8:	80 91 c8 00 	lds	r24, 0x00C8
     abc:	85 ff       	sbrs	r24, 5
     abe:	31 c0       	rjmp	.+98     	; 0xb22 <__tryToSend+0x6a>
	{
		cli();
     ac0:	f8 94       	cli
		if(txBuffer[txReadPos].pack_no != -1){
     ac2:	e0 91 0f 01 	lds	r30, 0x010F
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	e2 5b       	subi	r30, 0xB2	; 178
     ace:	fd 4f       	sbci	r31, 0xFD	; 253
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	8f 3f       	cpi	r24, 0xFF	; 255
     ad4:	29 f1       	breq	.+74     	; 0xb20 <__tryToSend+0x68>
			UDR1 = txBuffer[txReadPos].data;
     ad6:	e0 91 0f 01 	lds	r30, 0x010F
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	e2 5b       	subi	r30, 0xB2	; 178
     ae2:	fd 4f       	sbci	r31, 0xFD	; 253
     ae4:	80 81       	ld	r24, Z
     ae6:	80 93 ce 00 	sts	0x00CE, r24
			txBuffer[txReadPos].pack_no = -1;
     aea:	e0 91 0f 01 	lds	r30, 0x010F
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	e2 5b       	subi	r30, 0xB2	; 178
     af6:	fd 4f       	sbci	r31, 0xFD	; 253
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	81 83       	std	Z+1, r24	; 0x01
			txBuffer[txReadPos].data = 0;
     afc:	e0 91 0f 01 	lds	r30, 0x010F
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	e2 5b       	subi	r30, 0xB2	; 178
     b08:	fd 4f       	sbci	r31, 0xFD	; 253
     b0a:	10 82       	st	Z, r1
			txReadPos++;
     b0c:	80 91 0f 01 	lds	r24, 0x010F
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	80 93 0f 01 	sts	0x010F, r24
			txReadPos &= TX_BUFFER_SIZE_MSK;
     b16:	80 91 0f 01 	lds	r24, 0x010F
     b1a:	8f 77       	andi	r24, 0x7F	; 127
     b1c:	80 93 0f 01 	sts	0x010F, r24
			if(txReadPos >= TX_BUFFER_SIZE){
			txReadPos=0;
			}
			*/
		}
		sei();
     b20:	78 94       	sei
     b22:	08 95       	ret

00000b24 <sendResponse>:
	}
	
	return comm;
}

void sendResponse(response r){
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	29 97       	sbiw	r28, 0x09	; 9
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	09 83       	std	Y+1, r16	; 0x01
     b3e:	1a 83       	std	Y+2, r17	; 0x02
     b40:	2b 83       	std	Y+3, r18	; 0x03
     b42:	3c 83       	std	Y+4, r19	; 0x04
     b44:	4d 83       	std	Y+5, r20	; 0x05
     b46:	5e 83       	std	Y+6, r21	; 0x06
     b48:	6f 83       	std	Y+7, r22	; 0x07
     b4a:	97 2f       	mov	r25, r23
     b4c:	78 87       	std	Y+8, r23	; 0x08
     b4e:	89 87       	std	Y+9, r24	; 0x09
	
	int8_t header = r.header;
	uint16_t i = txWritePos;
     b50:	e0 91 0e 01 	lds	r30, 0x010E
     b54:	4e 2f       	mov	r20, r30
     b56:	50 e0       	ldi	r21, 0x00	; 0
	
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = header;
     b58:	ef 77       	andi	r30, 0x7F	; 127
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	e2 5b       	subi	r30, 0xB2	; 178
     b62:	fd 4f       	sbci	r31, 0xFD	; 253
     b64:	00 83       	st	Z, r16
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     b66:	01 83       	std	Z+1, r16	; 0x01
	i++;
     b68:	fa 01       	movw	r30, r20
     b6a:	31 96       	adiw	r30, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
     b6c:	ef 77       	andi	r30, 0x7F	; 127
     b6e:	ff 27       	eor	r31, r31
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	e2 5b       	subi	r30, 0xB2	; 178
     b76:	fd 4f       	sbci	r31, 0xFD	; 253
     b78:	26 e0       	ldi	r18, 0x06	; 6
     b7a:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     b7c:	01 83       	std	Z+1, r16	; 0x01
	i++;
     b7e:	9a 01       	movw	r18, r20
     b80:	2e 5f       	subi	r18, 0xFE	; 254
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	fe 01       	movw	r30, r28
     b86:	32 96       	adiw	r30, 0x02	; 2
     b88:	be 01       	movw	r22, r28
     b8a:	68 5f       	subi	r22, 0xF8	; 248
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
     b8e:	d9 01       	movw	r26, r18
     b90:	af 77       	andi	r26, 0x7F	; 127
     b92:	bb 27       	eor	r27, r27
     b94:	11 91       	ld	r17, Z+
     b96:	aa 0f       	add	r26, r26
     b98:	bb 1f       	adc	r27, r27
     b9a:	a2 5b       	subi	r26, 0xB2	; 178
     b9c:	bd 4f       	sbci	r27, 0xFD	; 253
     b9e:	1c 93       	st	X, r17
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     ba0:	11 96       	adiw	r26, 0x01	; 1
     ba2:	0c 93       	st	X, r16
		i++;
     ba4:	2f 5f       	subi	r18, 0xFF	; 255
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
	i++;
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
     ba8:	e6 17       	cp	r30, r22
     baa:	f7 07       	cpc	r31, r23
     bac:	81 f7       	brne	.-32     	; 0xb8e <sendResponse+0x6a>
     bae:	fa 01       	movw	r30, r20
     bb0:	38 96       	adiw	r30, 0x08	; 8
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
		i++;
	}
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time >> 8); // first 8 bits
     bb2:	ef 77       	andi	r30, 0x7F	; 127
     bb4:	ff 27       	eor	r31, r31
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	e2 5b       	subi	r30, 0xB2	; 178
     bbc:	fd 4f       	sbci	r31, 0xFD	; 253
     bbe:	80 83       	st	Z, r24
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     bc0:	01 83       	std	Z+1, r16	; 0x01
	i++;
     bc2:	fa 01       	movw	r30, r20
     bc4:	39 96       	adiw	r30, 0x09	; 9
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time & 0xFF); // next 8 bits
     bc6:	ef 77       	andi	r30, 0x7F	; 127
     bc8:	ff 27       	eor	r31, r31
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	e2 5b       	subi	r30, 0xB2	; 178
     bd0:	fd 4f       	sbci	r31, 0xFD	; 253
     bd2:	90 83       	st	Z, r25
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     bd4:	01 83       	std	Z+1, r16	; 0x01
	i++;
     bd6:	ba 01       	movw	r22, r20
     bd8:	66 5f       	subi	r22, 0xF6	; 246
     bda:	7f 4f       	sbci	r23, 0xFF	; 255
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
     be0:	2f ef       	ldi	r18, 0xFF	; 255
     be2:	3f ef       	ldi	r19, 0xFF	; 255
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
     be4:	e0 91 0e 01 	lds	r30, 0x010E
     be8:	dc 01       	movw	r26, r24
     bea:	ae 0f       	add	r26, r30
     bec:	b1 1d       	adc	r27, r1
     bee:	fd 01       	movw	r30, r26
     bf0:	ef 77       	andi	r30, 0x7F	; 127
     bf2:	ff 27       	eor	r31, r31
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	e2 5b       	subi	r30, 0xB2	; 178
     bfa:	fd 4f       	sbci	r31, 0xFD	; 253
     bfc:	e0 81       	ld	r30, Z
     bfe:	2e 27       	eor	r18, r30
     c00:	e2 2f       	mov	r30, r18
     c02:	e2 95       	swap	r30
     c04:	e2 27       	eor	r30, r18
     c06:	0e 2e       	mov	r0, r30
     c08:	e6 95       	lsr	r30
     c0a:	e6 95       	lsr	r30
     c0c:	e0 25       	eor	r30, r0
     c0e:	0e 2e       	mov	r0, r30
     c10:	e6 95       	lsr	r30
     c12:	e0 25       	eor	r30, r0
     c14:	e7 70       	andi	r30, 0x07	; 7
     c16:	02 2e       	mov	r0, r18
     c18:	23 2f       	mov	r18, r19
     c1a:	e6 95       	lsr	r30
     c1c:	07 94       	ror	r0
     c1e:	e7 95       	ror	r30
     c20:	30 2d       	mov	r19, r0
     c22:	2e 27       	eor	r18, r30
     c24:	06 94       	lsr	r0
     c26:	e7 95       	ror	r30
     c28:	30 25       	eor	r19, r0
     c2a:	2e 27       	eor	r18, r30
     c2c:	01 96       	adiw	r24, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
     c2e:	8a 30       	cpi	r24, 0x0A	; 10
     c30:	91 05       	cpc	r25, r1
     c32:	c1 f6       	brne	.-80     	; 0xbe4 <sendResponse+0xc0>
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
	}
	
	//send CRC in reverse order!
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc & 0xFF); // last 8 bits
     c34:	fb 01       	movw	r30, r22
     c36:	ef 77       	andi	r30, 0x7F	; 127
     c38:	ff 27       	eor	r31, r31
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	e2 5b       	subi	r30, 0xB2	; 178
     c40:	fd 4f       	sbci	r31, 0xFD	; 253
     c42:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     c44:	01 83       	std	Z+1, r16	; 0x01
	i++;
     c46:	fa 01       	movw	r30, r20
     c48:	3b 96       	adiw	r30, 0x0b	; 11
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc >> 8); // first 8 bits
     c4a:	ef 77       	andi	r30, 0x7F	; 127
     c4c:	ff 27       	eor	r31, r31
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	e2 5b       	subi	r30, 0xB2	; 178
     c54:	fd 4f       	sbci	r31, 0xFD	; 253
     c56:	30 83       	st	Z, r19
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     c58:	01 83       	std	Z+1, r16	; 0x01
	i++;
     c5a:	44 5f       	subi	r20, 0xF4	; 244
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
	txWritePos = i & TX_BUFFER_SIZE_MSK;
     c5e:	4f 77       	andi	r20, 0x7F	; 127
     c60:	40 93 0e 01 	sts	0x010E, r20
	
	__tryToSend();
     c64:	0e 94 5c 05 	call	0xab8	; 0xab8 <__tryToSend>
}
     c68:	29 96       	adiw	r28, 0x09	; 9
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	08 95       	ret

00000c7e <getLastCommand>:
		}
		sei();
	}
}

command getLastCommand(int8_t *success){
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     c98:	fe 01       	movw	r30, r28
     c9a:	38 96       	adiw	r30, 0x08	; 8
     c9c:	87 e0       	ldi	r24, 0x07	; 7
     c9e:	df 01       	movw	r26, r30
     ca0:	1d 92       	st	X+, r1
     ca2:	8a 95       	dec	r24
     ca4:	e9 f7       	brne	.-6      	; 0xca0 <getLastCommand+0x22>
	*success = 0;
     ca6:	f8 01       	movw	r30, r16
     ca8:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
     caa:	80 91 11 01 	lds	r24, 0x0111
     cae:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <checkPackIsFullLength>
     cb2:	88 23       	and	r24, r24
     cb4:	c1 f0       	breq	.+48     	; 0xce6 <getLastCommand+0x68>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
     cb6:	80 91 11 01 	lds	r24, 0x0111
     cba:	be 01       	movw	r22, r28
     cbc:	61 5f       	subi	r22, 0xF1	; 241
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	0e 94 20 04 	call	0x840	; 0x840 <fetchCommand>
     cc4:	39 87       	std	Y+9, r19	; 0x09
     cc6:	4a 87       	std	Y+10, r20	; 0x0a
     cc8:	5b 87       	std	Y+11, r21	; 0x0b
     cca:	6c 87       	std	Y+12, r22	; 0x0c
     ccc:	7d 87       	std	Y+13, r23	; 0x0d
     cce:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
     cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd2:	88 23       	and	r24, r24
     cd4:	21 f0       	breq	.+8      	; 0xcde <getLastCommand+0x60>
		{
			*success=1;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	d8 01       	movw	r26, r16
     cda:	8c 93       	st	X, r24
     cdc:	2e c0       	rjmp	.+92     	; 0xd3a <getLastCommand+0xbc>
			}else{
			*success=2;
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	f8 01       	movw	r30, r16
     ce2:	80 83       	st	Z, r24
     ce4:	2a c0       	rjmp	.+84     	; 0xd3a <getLastCommand+0xbc>
		
		
		}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
									
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE)
     ce6:	80 91 11 01 	lds	r24, 0x0111
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	07 97       	sbiw	r24, 0x07	; 7
     cee:	80 38       	cpi	r24, 0x80	; 128
     cf0:	91 05       	cpc	r25, r1
     cf2:	04 f5       	brge	.+64     	; 0xd34 <getLastCommand+0xb6>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
     cf4:	80 91 11 01 	lds	r24, 0x0111
     cf8:	87 50       	subi	r24, 0x07	; 7
     cfa:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <checkPackIsFullLength>
     cfe:	88 23       	and	r24, r24
     d00:	d9 f0       	breq	.+54     	; 0xd38 <getLastCommand+0xba>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
     d02:	80 91 11 01 	lds	r24, 0x0111
     d06:	be 01       	movw	r22, r28
     d08:	61 5f       	subi	r22, 0xF1	; 241
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	87 50       	subi	r24, 0x07	; 7
     d0e:	0e 94 20 04 	call	0x840	; 0x840 <fetchCommand>
     d12:	39 87       	std	Y+9, r19	; 0x09
     d14:	4a 87       	std	Y+10, r20	; 0x0a
     d16:	5b 87       	std	Y+11, r21	; 0x0b
     d18:	6c 87       	std	Y+12, r22	; 0x0c
     d1a:	7d 87       	std	Y+13, r23	; 0x0d
     d1c:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
     d1e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d20:	88 23       	and	r24, r24
     d22:	21 f0       	breq	.+8      	; 0xd2c <getLastCommand+0xae>
			{
				*success=1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	d8 01       	movw	r26, r16
     d28:	8c 93       	st	X, r24
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <getLastCommand+0xbc>
				}else{
				*success=2;//it retrived something but the CRC was not matching
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	f8 01       	movw	r30, r16
     d30:	80 83       	st	Z, r24
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <getLastCommand+0xbc>
}

command getLastCommand(int8_t *success){
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <getLastCommand+0xbc>
     d38:	20 e0       	ldi	r18, 0x00	; 0
			
		}
	}
	
	//if(cmd.header != Header_StatusUpdate){
		lastCommandHeader = cmd.header;
     d3a:	20 93 10 01 	sts	0x0110, r18
	//}
	
	return cmd;
     d3e:	28 87       	std	Y+8, r18	; 0x08
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	fe 01       	movw	r30, r28
     d44:	38 96       	adiw	r30, 0x08	; 8
     d46:	de 01       	movw	r26, r28
     d48:	11 96       	adiw	r26, 0x01	; 1
     d4a:	01 90       	ld	r0, Z+
     d4c:	0d 92       	st	X+, r0
     d4e:	8a 95       	dec	r24
     d50:	e1 f7       	brne	.-8      	; 0xd4a <getLastCommand+0xcc>
     d52:	29 81       	ldd	r18, Y+1	; 0x01
     d54:	3a 81       	ldd	r19, Y+2	; 0x02
     d56:	4b 81       	ldd	r20, Y+3	; 0x03
     d58:	5c 81       	ldd	r21, Y+4	; 0x04
     d5a:	6d 81       	ldd	r22, Y+5	; 0x05
     d5c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     d5e:	8f 81       	ldd	r24, Y+7	; 0x07
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	2f 96       	adiw	r28, 0x0f	; 15
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <sendStatusUpdate>:


void sendStatusUpdate(){
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	29 97       	sbiw	r28, 0x09	; 9
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
	
	response status;
	status.header = lastCommandHeader;
     d90:	80 91 10 01 	lds	r24, 0x0110
     d94:	89 83       	std	Y+1, r24	; 0x01
	//set info to send
	status.sensorInfo[0] = getInfraredForwardDistance();
     d96:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <getInfraredForwardDistance>
     d9a:	8a 83       	std	Y+2, r24	; 0x02
	status.sensorInfo[1] = getInfraredRightDistance();
     d9c:	0e 94 19 01 	call	0x232	; 0x232 <getInfraredRightDistance>
     da0:	8b 83       	std	Y+3, r24	; 0x03
	status.sensorInfo[2] = getInfraredBackDistance();
     da2:	0e 94 39 01 	call	0x272	; 0x272 <getInfraredBackDistance>
     da6:	8c 83       	std	Y+4, r24	; 0x04
	status.sensorInfo[3] = getInfraredLeftDistance();
     da8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <getInfraredLeftDistance>
     dac:	8d 83       	std	Y+5, r24	; 0x05
	//add speed/distance
	
	uint16_t US_distance = getAverageUltrasonicValue(3);
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <getAverageUltrasonicValue>
	status.sensorInfo[NO_OF_SENSORS-2] = US_distance >> 8;
     db4:	9e 83       	std	Y+6, r25	; 0x06
	status.sensorInfo[NO_OF_SENSORS-1] = US_distance & 0xff;
     db6:	8f 83       	std	Y+7, r24	; 0x07
	status.time = getTimeExecutedLastCmd();
     db8:	0e 94 bc 07 	call	0xf78	; 0xf78 <getTimeExecutedLastCmd>
     dbc:	78 2f       	mov	r23, r24
     dbe:	88 87       	std	Y+8, r24	; 0x08
     dc0:	99 87       	std	Y+9, r25	; 0x09
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	sendResponse(status);
     dc2:	09 81       	ldd	r16, Y+1	; 0x01
     dc4:	1a 81       	ldd	r17, Y+2	; 0x02
     dc6:	2b 81       	ldd	r18, Y+3	; 0x03
     dc8:	3c 81       	ldd	r19, Y+4	; 0x04
     dca:	4d 81       	ldd	r20, Y+5	; 0x05
     dcc:	5e 81       	ldd	r21, Y+6	; 0x06
     dce:	6f 81       	ldd	r22, Y+7	; 0x07
     dd0:	89 2f       	mov	r24, r25
     dd2:	0e 94 92 05 	call	0xb24	; 0xb24 <sendResponse>
		
}
     dd6:	29 96       	adiw	r28, 0x09	; 9
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <__vector_28>:

return ret;
}
*/

ISR(USART1_RX_vect){
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31

	uint8_t data = UDR1;
     dfe:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
     e02:	90 91 13 01 	lds	r25, 0x0113
     e06:	91 11       	cpse	r25, r1
     e08:	1b c0       	rjmp	.+54     	; 0xe40 <__vector_28+0x54>
		
		LED_CMD_PIN |= (1<<LED_CMD_PINx);
     e0a:	00 9a       	sbi	0x00, 0	; 0
		
		rxBuffer[rxWritePos].pack_no = data; //numai ultimi 7 biti va trebui sa ii consider
     e0c:	e0 91 14 01 	lds	r30, 0x0114
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	e2 5b       	subi	r30, 0xB2	; 178
     e18:	fe 4f       	sbci	r31, 0xFE	; 254
     e1a:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
     e1c:	e0 91 14 01 	lds	r30, 0x0114
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	e2 5b       	subi	r30, 0xB2	; 178
     e28:	fe 4f       	sbci	r31, 0xFE	; 254
     e2a:	80 83       	st	Z, r24
		packStarted = 1;
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	90 93 13 01 	sts	0x0113, r25
		lastPackNo = data;
     e32:	80 93 12 01 	sts	0x0112, r24
		lastPackPosInBuff = rxWritePos;
     e36:	80 91 14 01 	lds	r24, 0x0114
     e3a:	80 93 11 01 	sts	0x0111, r24
     e3e:	1d c0       	rjmp	.+58     	; 0xe7a <__vector_28+0x8e>
		
				
		}else{
	
		rxBuffer[rxWritePos].pack_no = lastPackNo;
     e40:	e0 91 14 01 	lds	r30, 0x0114
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	90 91 12 01 	lds	r25, 0x0112
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	e2 5b       	subi	r30, 0xB2	; 178
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
     e54:	e0 91 14 01 	lds	r30, 0x0114
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	e2 5b       	subi	r30, 0xB2	; 178
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	80 83       	st	Z, r24
		packStarted++ ;
     e64:	80 91 13 01 	lds	r24, 0x0113
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	80 93 13 01 	sts	0x0113, r24
		
		if(packStarted == COMMAND_SIZE){//fara -3
     e6e:	80 91 13 01 	lds	r24, 0x0113
     e72:	87 30       	cpi	r24, 0x07	; 7
     e74:	11 f4       	brne	.+4      	; 0xe7a <__vector_28+0x8e>
			packStarted = 0;
     e76:	10 92 13 01 	sts	0x0113, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
     e7a:	80 91 14 01 	lds	r24, 0x0114
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	80 93 14 01 	sts	0x0114, r24
	rxWritePos &= RX_BUFFER_SIZE_MSK;
     e84:	80 91 14 01 	lds	r24, 0x0114
     e88:	8f 77       	andi	r24, 0x7F	; 127
     e8a:	80 93 14 01 	sts	0x0114, r24
	rxWritePos = 0;
	}*/
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	9f 91       	pop	r25
     e94:	8f 91       	pop	r24
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_30>:

ISR(USART1_TX_vect){
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	8f 93       	push	r24
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
     eb0:	e0 91 0f 01 	lds	r30, 0x010F
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	e2 5b       	subi	r30, 0xB2	; 178
     ebc:	fd 4f       	sbci	r31, 0xFD	; 253
     ebe:	81 81       	ldd	r24, Z+1	; 0x01
     ec0:	8f 3f       	cpi	r24, 0xFF	; 255
     ec2:	29 f1       	breq	.+74     	; 0xf0e <__vector_30+0x6e>
		UDR1 =  txBuffer[txReadPos].data;
     ec4:	e0 91 0f 01 	lds	r30, 0x010F
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	e2 5b       	subi	r30, 0xB2	; 178
     ed0:	fd 4f       	sbci	r31, 0xFD	; 253
     ed2:	80 81       	ld	r24, Z
     ed4:	80 93 ce 00 	sts	0x00CE, r24
		txBuffer[txReadPos].data =0;
     ed8:	e0 91 0f 01 	lds	r30, 0x010F
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	e2 5b       	subi	r30, 0xB2	; 178
     ee4:	fd 4f       	sbci	r31, 0xFD	; 253
     ee6:	10 82       	st	Z, r1
		txBuffer[txReadPos].pack_no =-1;
     ee8:	e0 91 0f 01 	lds	r30, 0x010F
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	e2 5b       	subi	r30, 0xB2	; 178
     ef4:	fd 4f       	sbci	r31, 0xFD	; 253
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	81 83       	std	Z+1, r24	; 0x01
		txReadPos++;
     efa:	80 91 0f 01 	lds	r24, 0x010F
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	80 93 0f 01 	sts	0x010F, r24
		txReadPos &= TX_BUFFER_SIZE_MSK;
     f04:	80 91 0f 01 	lds	r24, 0x010F
     f08:	8f 77       	andi	r24, 0x7F	; 127
     f0a:	80 93 0f 01 	sts	0x010F, r24
		txReadPos =0;
		}
		*/
	}
	
     f0e:	ff 91       	pop	r31
     f10:	ef 91       	pop	r30
     f12:	8f 91       	pop	r24
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <initTimer1>:
}

void initTimer1()
{
	//Normal port operation, OC1A/OC1B disconnected.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0));	
     f1e:	e0 e8       	ldi	r30, 0x80	; 128
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 70       	andi	r24, 0x0F	; 15
     f26:	80 83       	st	Z, r24
	
	//Timer/Counter mode of operation: CTC, TOP = OCR1A, Update of OCR1x at Immediate TOVn flag set on MAX
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11));
     f28:	80 81       	ld	r24, Z
     f2a:	8c 7f       	andi	r24, 0xFC	; 252
     f2c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
     f2e:	e1 e8       	ldi	r30, 0x81	; 129
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 60       	ori	r24, 0x08	; 8
     f36:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	80 83       	st	Z, r24

	
	// reset counter
	TCNT1 = 0;
     f3e:	10 92 85 00 	sts	0x0085, r1
     f42:	10 92 84 00 	sts	0x0084, r1
	
	OCR1A = ((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*1000L; //100
     f46:	a8 e8       	ldi	r26, 0x88	; 136
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	88 e5       	ldi	r24, 0x58	; 88
     f4c:	9b e1       	ldi	r25, 0x1B	; 27
     f4e:	11 96       	adiw	r26, 0x01	; 1
     f50:	9c 93       	st	X, r25
     f52:	8e 93       	st	-X, r24
		//Clock Select: clk/64 prescaler
		TCCR1B &= ~((1<<CS11)); //1024
     f54:	80 81       	ld	r24, Z
     f56:	8d 7f       	andi	r24, 0xFD	; 253
     f58:	80 83       	st	Z, r24
		TCCR1B |= (1<<CS10) | (1<<CS12);
     f5a:	80 81       	ld	r24, Z
     f5c:	85 60       	ori	r24, 0x05	; 5
     f5e:	80 83       	st	Z, r24
		
		////////////////////////
		//stop timer, it MUST be called first!!!
		TCCR1B &= ~((1<<CS10) | (1<<CS11) | (1<<CS12));
     f60:	80 81       	ld	r24, Z
     f62:	88 7f       	andi	r24, 0xF8	; 248
     f64:	80 83       	st	Z, r24
		OCR1A = 0;
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	1c 92       	st	X, r1
     f6a:	1e 92       	st	-X, r1
	
	//OCR1A = 0;
	//OCR1B = (((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*3000L) -1; //1 s
	
	//enable Output Compare A/B Match Interrupt Enable
	TIMSK1 |= (1<<OCIE1A);/* | (1<<OCIE1B); */
     f6c:	ef e6       	ldi	r30, 0x6F	; 111
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	82 60       	ori	r24, 0x02	; 2
     f74:	80 83       	st	Z, r24
     f76:	08 95       	ret

00000f78 <getTimeExecutedLastCmd>:

uint16_t getTimeExecutedLastCmd(){
	
	
	return 0;
}
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	08 95       	ret

00000f7e <__vector_13>:

ISR(TIMER1_COMPA_vect){		
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
			OCR1A = ticks;
			ticks = 0;
		}
*/
	
	LED_CMD_PIN |= (1<<LED_CMD_PINx);	
     fa0:	00 9a       	sbi	0x00, 0	; 0
	if(ticks && ticks != 999999){
     fa2:	80 91 00 01 	lds	r24, 0x0100
     fa6:	90 91 01 01 	lds	r25, 0x0101
     faa:	a0 91 02 01 	lds	r26, 0x0102
     fae:	b0 91 03 01 	lds	r27, 0x0103
     fb2:	89 2b       	or	r24, r25
     fb4:	8a 2b       	or	r24, r26
     fb6:	8b 2b       	or	r24, r27
     fb8:	09 f1       	breq	.+66     	; 0xffc <__vector_13+0x7e>
     fba:	80 91 00 01 	lds	r24, 0x0100
     fbe:	90 91 01 01 	lds	r25, 0x0101
     fc2:	a0 91 02 01 	lds	r26, 0x0102
     fc6:	b0 91 03 01 	lds	r27, 0x0103
     fca:	8f 33       	cpi	r24, 0x3F	; 63
     fcc:	92 44       	sbci	r25, 0x42	; 66
     fce:	af 40       	sbci	r26, 0x0F	; 15
     fd0:	b1 05       	cpc	r27, r1
     fd2:	a1 f0       	breq	.+40     	; 0xffc <__vector_13+0x7e>
		ticks--;
     fd4:	80 91 00 01 	lds	r24, 0x0100
     fd8:	90 91 01 01 	lds	r25, 0x0101
     fdc:	a0 91 02 01 	lds	r26, 0x0102
     fe0:	b0 91 03 01 	lds	r27, 0x0103
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	a1 09       	sbc	r26, r1
     fe8:	b1 09       	sbc	r27, r1
     fea:	80 93 00 01 	sts	0x0100, r24
     fee:	90 93 01 01 	sts	0x0101, r25
     ff2:	a0 93 02 01 	sts	0x0102, r26
     ff6:	b0 93 03 01 	sts	0x0103, r27
     ffa:	17 c0       	rjmp	.+46     	; 0x102a <__vector_13+0xac>
	}else if (ticks==0){
     ffc:	80 91 00 01 	lds	r24, 0x0100
    1000:	90 91 01 01 	lds	r25, 0x0101
    1004:	a0 91 02 01 	lds	r26, 0x0102
    1008:	b0 91 03 01 	lds	r27, 0x0103
    100c:	89 2b       	or	r24, r25
    100e:	8a 2b       	or	r24, r26
    1010:	8b 2b       	or	r24, r27
    1012:	59 f4       	brne	.+22     	; 0x102a <__vector_13+0xac>
		//stop timer, it MUST be called first!!!
		TCCR1B &= ~((1<<CS10) | (1<<CS11) | (1<<CS12)); 
		OCR1A = 0; 
		LED_CMD_PORT &= ~(1<<LED_CMD_PINx);			
		*/
		stopFunction(argc2,argv2);						
    1014:	80 91 16 01 	lds	r24, 0x0116
    1018:	90 91 17 01 	lds	r25, 0x0117
    101c:	e0 91 18 01 	lds	r30, 0x0118
    1020:	f0 91 19 01 	lds	r31, 0x0119
    1024:	6e e4       	ldi	r22, 0x4E	; 78
    1026:	73 e0       	ldi	r23, 0x03	; 3
    1028:	09 95       	icall
	}		
}
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <__subsf3>:
    104c:	50 58       	subi	r21, 0x80	; 128

0000104e <__addsf3>:
    104e:	bb 27       	eor	r27, r27
    1050:	aa 27       	eor	r26, r26
    1052:	0e d0       	rcall	.+28     	; 0x1070 <__addsf3x>
    1054:	84 c1       	rjmp	.+776    	; 0x135e <__fp_round>
    1056:	75 d1       	rcall	.+746    	; 0x1342 <__fp_pscA>
    1058:	30 f0       	brcs	.+12     	; 0x1066 <__addsf3+0x18>
    105a:	7a d1       	rcall	.+756    	; 0x1350 <__fp_pscB>
    105c:	20 f0       	brcs	.+8      	; 0x1066 <__addsf3+0x18>
    105e:	31 f4       	brne	.+12     	; 0x106c <__addsf3+0x1e>
    1060:	9f 3f       	cpi	r25, 0xFF	; 255
    1062:	11 f4       	brne	.+4      	; 0x1068 <__addsf3+0x1a>
    1064:	1e f4       	brtc	.+6      	; 0x106c <__addsf3+0x1e>
    1066:	6a c1       	rjmp	.+724    	; 0x133c <__fp_nan>
    1068:	0e f4       	brtc	.+2      	; 0x106c <__addsf3+0x1e>
    106a:	e0 95       	com	r30
    106c:	e7 fb       	bst	r30, 7
    106e:	37 c1       	rjmp	.+622    	; 0x12de <__fp_inf>

00001070 <__addsf3x>:
    1070:	e9 2f       	mov	r30, r25
    1072:	86 d1       	rcall	.+780    	; 0x1380 <__fp_split3>
    1074:	80 f3       	brcs	.-32     	; 0x1056 <__addsf3+0x8>
    1076:	ba 17       	cp	r27, r26
    1078:	62 07       	cpc	r22, r18
    107a:	73 07       	cpc	r23, r19
    107c:	84 07       	cpc	r24, r20
    107e:	95 07       	cpc	r25, r21
    1080:	18 f0       	brcs	.+6      	; 0x1088 <__addsf3x+0x18>
    1082:	71 f4       	brne	.+28     	; 0x10a0 <__addsf3x+0x30>
    1084:	9e f5       	brtc	.+102    	; 0x10ec <__addsf3x+0x7c>
    1086:	b5 c1       	rjmp	.+874    	; 0x13f2 <__fp_zero>
    1088:	0e f4       	brtc	.+2      	; 0x108c <__addsf3x+0x1c>
    108a:	e0 95       	com	r30
    108c:	0b 2e       	mov	r0, r27
    108e:	ba 2f       	mov	r27, r26
    1090:	a0 2d       	mov	r26, r0
    1092:	0b 01       	movw	r0, r22
    1094:	b9 01       	movw	r22, r18
    1096:	90 01       	movw	r18, r0
    1098:	0c 01       	movw	r0, r24
    109a:	ca 01       	movw	r24, r20
    109c:	a0 01       	movw	r20, r0
    109e:	11 24       	eor	r1, r1
    10a0:	ff 27       	eor	r31, r31
    10a2:	59 1b       	sub	r21, r25
    10a4:	99 f0       	breq	.+38     	; 0x10cc <__addsf3x+0x5c>
    10a6:	59 3f       	cpi	r21, 0xF9	; 249
    10a8:	50 f4       	brcc	.+20     	; 0x10be <__addsf3x+0x4e>
    10aa:	50 3e       	cpi	r21, 0xE0	; 224
    10ac:	68 f1       	brcs	.+90     	; 0x1108 <__addsf3x+0x98>
    10ae:	1a 16       	cp	r1, r26
    10b0:	f0 40       	sbci	r31, 0x00	; 0
    10b2:	a2 2f       	mov	r26, r18
    10b4:	23 2f       	mov	r18, r19
    10b6:	34 2f       	mov	r19, r20
    10b8:	44 27       	eor	r20, r20
    10ba:	58 5f       	subi	r21, 0xF8	; 248
    10bc:	f3 cf       	rjmp	.-26     	; 0x10a4 <__addsf3x+0x34>
    10be:	46 95       	lsr	r20
    10c0:	37 95       	ror	r19
    10c2:	27 95       	ror	r18
    10c4:	a7 95       	ror	r26
    10c6:	f0 40       	sbci	r31, 0x00	; 0
    10c8:	53 95       	inc	r21
    10ca:	c9 f7       	brne	.-14     	; 0x10be <__addsf3x+0x4e>
    10cc:	7e f4       	brtc	.+30     	; 0x10ec <__addsf3x+0x7c>
    10ce:	1f 16       	cp	r1, r31
    10d0:	ba 0b       	sbc	r27, r26
    10d2:	62 0b       	sbc	r22, r18
    10d4:	73 0b       	sbc	r23, r19
    10d6:	84 0b       	sbc	r24, r20
    10d8:	ba f0       	brmi	.+46     	; 0x1108 <__addsf3x+0x98>
    10da:	91 50       	subi	r25, 0x01	; 1
    10dc:	a1 f0       	breq	.+40     	; 0x1106 <__addsf3x+0x96>
    10de:	ff 0f       	add	r31, r31
    10e0:	bb 1f       	adc	r27, r27
    10e2:	66 1f       	adc	r22, r22
    10e4:	77 1f       	adc	r23, r23
    10e6:	88 1f       	adc	r24, r24
    10e8:	c2 f7       	brpl	.-16     	; 0x10da <__addsf3x+0x6a>
    10ea:	0e c0       	rjmp	.+28     	; 0x1108 <__addsf3x+0x98>
    10ec:	ba 0f       	add	r27, r26
    10ee:	62 1f       	adc	r22, r18
    10f0:	73 1f       	adc	r23, r19
    10f2:	84 1f       	adc	r24, r20
    10f4:	48 f4       	brcc	.+18     	; 0x1108 <__addsf3x+0x98>
    10f6:	87 95       	ror	r24
    10f8:	77 95       	ror	r23
    10fa:	67 95       	ror	r22
    10fc:	b7 95       	ror	r27
    10fe:	f7 95       	ror	r31
    1100:	9e 3f       	cpi	r25, 0xFE	; 254
    1102:	08 f0       	brcs	.+2      	; 0x1106 <__addsf3x+0x96>
    1104:	b3 cf       	rjmp	.-154    	; 0x106c <__addsf3+0x1e>
    1106:	93 95       	inc	r25
    1108:	88 0f       	add	r24, r24
    110a:	08 f0       	brcs	.+2      	; 0x110e <__addsf3x+0x9e>
    110c:	99 27       	eor	r25, r25
    110e:	ee 0f       	add	r30, r30
    1110:	97 95       	ror	r25
    1112:	87 95       	ror	r24
    1114:	08 95       	ret

00001116 <__divsf3>:
    1116:	0c d0       	rcall	.+24     	; 0x1130 <__divsf3x>
    1118:	22 c1       	rjmp	.+580    	; 0x135e <__fp_round>
    111a:	1a d1       	rcall	.+564    	; 0x1350 <__fp_pscB>
    111c:	40 f0       	brcs	.+16     	; 0x112e <__divsf3+0x18>
    111e:	11 d1       	rcall	.+546    	; 0x1342 <__fp_pscA>
    1120:	30 f0       	brcs	.+12     	; 0x112e <__divsf3+0x18>
    1122:	21 f4       	brne	.+8      	; 0x112c <__divsf3+0x16>
    1124:	5f 3f       	cpi	r21, 0xFF	; 255
    1126:	19 f0       	breq	.+6      	; 0x112e <__divsf3+0x18>
    1128:	da c0       	rjmp	.+436    	; 0x12de <__fp_inf>
    112a:	51 11       	cpse	r21, r1
    112c:	63 c1       	rjmp	.+710    	; 0x13f4 <__fp_szero>
    112e:	06 c1       	rjmp	.+524    	; 0x133c <__fp_nan>

00001130 <__divsf3x>:
    1130:	27 d1       	rcall	.+590    	; 0x1380 <__fp_split3>
    1132:	98 f3       	brcs	.-26     	; 0x111a <__divsf3+0x4>

00001134 <__divsf3_pse>:
    1134:	99 23       	and	r25, r25
    1136:	c9 f3       	breq	.-14     	; 0x112a <__divsf3+0x14>
    1138:	55 23       	and	r21, r21
    113a:	b1 f3       	breq	.-20     	; 0x1128 <__divsf3+0x12>
    113c:	95 1b       	sub	r25, r21
    113e:	55 0b       	sbc	r21, r21
    1140:	bb 27       	eor	r27, r27
    1142:	aa 27       	eor	r26, r26
    1144:	62 17       	cp	r22, r18
    1146:	73 07       	cpc	r23, r19
    1148:	84 07       	cpc	r24, r20
    114a:	38 f0       	brcs	.+14     	; 0x115a <__divsf3_pse+0x26>
    114c:	9f 5f       	subi	r25, 0xFF	; 255
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	44 1f       	adc	r20, r20
    1156:	aa 1f       	adc	r26, r26
    1158:	a9 f3       	breq	.-22     	; 0x1144 <__divsf3_pse+0x10>
    115a:	33 d0       	rcall	.+102    	; 0x11c2 <__divsf3_pse+0x8e>
    115c:	0e 2e       	mov	r0, r30
    115e:	3a f0       	brmi	.+14     	; 0x116e <__divsf3_pse+0x3a>
    1160:	e0 e8       	ldi	r30, 0x80	; 128
    1162:	30 d0       	rcall	.+96     	; 0x11c4 <__divsf3_pse+0x90>
    1164:	91 50       	subi	r25, 0x01	; 1
    1166:	50 40       	sbci	r21, 0x00	; 0
    1168:	e6 95       	lsr	r30
    116a:	00 1c       	adc	r0, r0
    116c:	ca f7       	brpl	.-14     	; 0x1160 <__divsf3_pse+0x2c>
    116e:	29 d0       	rcall	.+82     	; 0x11c2 <__divsf3_pse+0x8e>
    1170:	fe 2f       	mov	r31, r30
    1172:	27 d0       	rcall	.+78     	; 0x11c2 <__divsf3_pse+0x8e>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	bb 1f       	adc	r27, r27
    117c:	26 17       	cp	r18, r22
    117e:	37 07       	cpc	r19, r23
    1180:	48 07       	cpc	r20, r24
    1182:	ab 07       	cpc	r26, r27
    1184:	b0 e8       	ldi	r27, 0x80	; 128
    1186:	09 f0       	breq	.+2      	; 0x118a <__divsf3_pse+0x56>
    1188:	bb 0b       	sbc	r27, r27
    118a:	80 2d       	mov	r24, r0
    118c:	bf 01       	movw	r22, r30
    118e:	ff 27       	eor	r31, r31
    1190:	93 58       	subi	r25, 0x83	; 131
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	2a f0       	brmi	.+10     	; 0x11a0 <__divsf3_pse+0x6c>
    1196:	9e 3f       	cpi	r25, 0xFE	; 254
    1198:	51 05       	cpc	r21, r1
    119a:	68 f0       	brcs	.+26     	; 0x11b6 <__divsf3_pse+0x82>
    119c:	a0 c0       	rjmp	.+320    	; 0x12de <__fp_inf>
    119e:	2a c1       	rjmp	.+596    	; 0x13f4 <__fp_szero>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	ec f3       	brlt	.-6      	; 0x119e <__divsf3_pse+0x6a>
    11a4:	98 3e       	cpi	r25, 0xE8	; 232
    11a6:	dc f3       	brlt	.-10     	; 0x119e <__divsf3_pse+0x6a>
    11a8:	86 95       	lsr	r24
    11aa:	77 95       	ror	r23
    11ac:	67 95       	ror	r22
    11ae:	b7 95       	ror	r27
    11b0:	f7 95       	ror	r31
    11b2:	9f 5f       	subi	r25, 0xFF	; 255
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <__divsf3_pse+0x74>
    11b6:	88 0f       	add	r24, r24
    11b8:	91 1d       	adc	r25, r1
    11ba:	96 95       	lsr	r25
    11bc:	87 95       	ror	r24
    11be:	97 f9       	bld	r25, 7
    11c0:	08 95       	ret
    11c2:	e1 e0       	ldi	r30, 0x01	; 1
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	bb 1f       	adc	r27, r27
    11cc:	62 17       	cp	r22, r18
    11ce:	73 07       	cpc	r23, r19
    11d0:	84 07       	cpc	r24, r20
    11d2:	ba 07       	cpc	r27, r26
    11d4:	20 f0       	brcs	.+8      	; 0x11de <__divsf3_pse+0xaa>
    11d6:	62 1b       	sub	r22, r18
    11d8:	73 0b       	sbc	r23, r19
    11da:	84 0b       	sbc	r24, r20
    11dc:	ba 0b       	sbc	r27, r26
    11de:	ee 1f       	adc	r30, r30
    11e0:	88 f7       	brcc	.-30     	; 0x11c4 <__divsf3_pse+0x90>
    11e2:	e0 95       	com	r30
    11e4:	08 95       	ret

000011e6 <__fixunssfsi>:
    11e6:	d4 d0       	rcall	.+424    	; 0x1390 <__fp_splitA>
    11e8:	88 f0       	brcs	.+34     	; 0x120c <__fixunssfsi+0x26>
    11ea:	9f 57       	subi	r25, 0x7F	; 127
    11ec:	90 f0       	brcs	.+36     	; 0x1212 <__fixunssfsi+0x2c>
    11ee:	b9 2f       	mov	r27, r25
    11f0:	99 27       	eor	r25, r25
    11f2:	b7 51       	subi	r27, 0x17	; 23
    11f4:	a0 f0       	brcs	.+40     	; 0x121e <__fixunssfsi+0x38>
    11f6:	d1 f0       	breq	.+52     	; 0x122c <__fixunssfsi+0x46>
    11f8:	66 0f       	add	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	1a f0       	brmi	.+6      	; 0x1208 <__fixunssfsi+0x22>
    1202:	ba 95       	dec	r27
    1204:	c9 f7       	brne	.-14     	; 0x11f8 <__fixunssfsi+0x12>
    1206:	12 c0       	rjmp	.+36     	; 0x122c <__fixunssfsi+0x46>
    1208:	b1 30       	cpi	r27, 0x01	; 1
    120a:	81 f0       	breq	.+32     	; 0x122c <__fixunssfsi+0x46>
    120c:	f2 d0       	rcall	.+484    	; 0x13f2 <__fp_zero>
    120e:	b1 e0       	ldi	r27, 0x01	; 1
    1210:	08 95       	ret
    1212:	ef c0       	rjmp	.+478    	; 0x13f2 <__fp_zero>
    1214:	67 2f       	mov	r22, r23
    1216:	78 2f       	mov	r23, r24
    1218:	88 27       	eor	r24, r24
    121a:	b8 5f       	subi	r27, 0xF8	; 248
    121c:	39 f0       	breq	.+14     	; 0x122c <__fixunssfsi+0x46>
    121e:	b9 3f       	cpi	r27, 0xF9	; 249
    1220:	cc f3       	brlt	.-14     	; 0x1214 <__fixunssfsi+0x2e>
    1222:	86 95       	lsr	r24
    1224:	77 95       	ror	r23
    1226:	67 95       	ror	r22
    1228:	b3 95       	inc	r27
    122a:	d9 f7       	brne	.-10     	; 0x1222 <__fixunssfsi+0x3c>
    122c:	3e f4       	brtc	.+14     	; 0x123c <__fixunssfsi+0x56>
    122e:	90 95       	com	r25
    1230:	80 95       	com	r24
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__floatunsisf>:
    123e:	e8 94       	clt
    1240:	09 c0       	rjmp	.+18     	; 0x1254 <__floatsisf+0x12>

00001242 <__floatsisf>:
    1242:	97 fb       	bst	r25, 7
    1244:	3e f4       	brtc	.+14     	; 0x1254 <__floatsisf+0x12>
    1246:	90 95       	com	r25
    1248:	80 95       	com	r24
    124a:	70 95       	com	r23
    124c:	61 95       	neg	r22
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	99 23       	and	r25, r25
    1256:	a9 f0       	breq	.+42     	; 0x1282 <__floatsisf+0x40>
    1258:	f9 2f       	mov	r31, r25
    125a:	96 e9       	ldi	r25, 0x96	; 150
    125c:	bb 27       	eor	r27, r27
    125e:	93 95       	inc	r25
    1260:	f6 95       	lsr	r31
    1262:	87 95       	ror	r24
    1264:	77 95       	ror	r23
    1266:	67 95       	ror	r22
    1268:	b7 95       	ror	r27
    126a:	f1 11       	cpse	r31, r1
    126c:	f8 cf       	rjmp	.-16     	; 0x125e <__floatsisf+0x1c>
    126e:	fa f4       	brpl	.+62     	; 0x12ae <__floatsisf+0x6c>
    1270:	bb 0f       	add	r27, r27
    1272:	11 f4       	brne	.+4      	; 0x1278 <__floatsisf+0x36>
    1274:	60 ff       	sbrs	r22, 0
    1276:	1b c0       	rjmp	.+54     	; 0x12ae <__floatsisf+0x6c>
    1278:	6f 5f       	subi	r22, 0xFF	; 255
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	8f 4f       	sbci	r24, 0xFF	; 255
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	16 c0       	rjmp	.+44     	; 0x12ae <__floatsisf+0x6c>
    1282:	88 23       	and	r24, r24
    1284:	11 f0       	breq	.+4      	; 0x128a <__floatsisf+0x48>
    1286:	96 e9       	ldi	r25, 0x96	; 150
    1288:	11 c0       	rjmp	.+34     	; 0x12ac <__floatsisf+0x6a>
    128a:	77 23       	and	r23, r23
    128c:	21 f0       	breq	.+8      	; 0x1296 <__floatsisf+0x54>
    128e:	9e e8       	ldi	r25, 0x8E	; 142
    1290:	87 2f       	mov	r24, r23
    1292:	76 2f       	mov	r23, r22
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <__floatsisf+0x5e>
    1296:	66 23       	and	r22, r22
    1298:	71 f0       	breq	.+28     	; 0x12b6 <__floatsisf+0x74>
    129a:	96 e8       	ldi	r25, 0x86	; 134
    129c:	86 2f       	mov	r24, r22
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	2a f0       	brmi	.+10     	; 0x12ae <__floatsisf+0x6c>
    12a4:	9a 95       	dec	r25
    12a6:	66 0f       	add	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	da f7       	brpl	.-10     	; 0x12a4 <__floatsisf+0x62>
    12ae:	88 0f       	add	r24, r24
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	97 f9       	bld	r25, 7
    12b6:	08 95       	ret

000012b8 <floor>:
    12b8:	85 d0       	rcall	.+266    	; 0x13c4 <__fp_trunc>
    12ba:	80 f0       	brcs	.+32     	; 0x12dc <floor+0x24>
    12bc:	9f 37       	cpi	r25, 0x7F	; 127
    12be:	40 f4       	brcc	.+16     	; 0x12d0 <floor+0x18>
    12c0:	91 11       	cpse	r25, r1
    12c2:	0e f0       	brts	.+2      	; 0x12c6 <floor+0xe>
    12c4:	97 c0       	rjmp	.+302    	; 0x13f4 <__fp_szero>
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e8       	ldi	r24, 0x80	; 128
    12cc:	9f eb       	ldi	r25, 0xBF	; 191
    12ce:	08 95       	ret
    12d0:	26 f4       	brtc	.+8      	; 0x12da <floor+0x22>
    12d2:	1b 16       	cp	r1, r27
    12d4:	61 1d       	adc	r22, r1
    12d6:	71 1d       	adc	r23, r1
    12d8:	81 1d       	adc	r24, r1
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <__fp_mintl>
    12dc:	21 c0       	rjmp	.+66     	; 0x1320 <__fp_mpack>

000012de <__fp_inf>:
    12de:	97 f9       	bld	r25, 7
    12e0:	9f 67       	ori	r25, 0x7F	; 127
    12e2:	80 e8       	ldi	r24, 0x80	; 128
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	08 95       	ret

000012ea <__fp_mintl>:
    12ea:	88 23       	and	r24, r24
    12ec:	71 f4       	brne	.+28     	; 0x130a <__fp_mintl+0x20>
    12ee:	77 23       	and	r23, r23
    12f0:	21 f0       	breq	.+8      	; 0x12fa <__fp_mintl+0x10>
    12f2:	98 50       	subi	r25, 0x08	; 8
    12f4:	87 2b       	or	r24, r23
    12f6:	76 2f       	mov	r23, r22
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <__fp_mintl+0x1e>
    12fa:	66 23       	and	r22, r22
    12fc:	11 f4       	brne	.+4      	; 0x1302 <__fp_mintl+0x18>
    12fe:	99 27       	eor	r25, r25
    1300:	0d c0       	rjmp	.+26     	; 0x131c <__fp_mintl+0x32>
    1302:	90 51       	subi	r25, 0x10	; 16
    1304:	86 2b       	or	r24, r22
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	2a f0       	brmi	.+10     	; 0x1316 <__fp_mintl+0x2c>
    130c:	9a 95       	dec	r25
    130e:	66 0f       	add	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	88 1f       	adc	r24, r24
    1314:	da f7       	brpl	.-10     	; 0x130c <__fp_mintl+0x22>
    1316:	88 0f       	add	r24, r24
    1318:	96 95       	lsr	r25
    131a:	87 95       	ror	r24
    131c:	97 f9       	bld	r25, 7
    131e:	08 95       	ret

00001320 <__fp_mpack>:
    1320:	9f 3f       	cpi	r25, 0xFF	; 255
    1322:	31 f0       	breq	.+12     	; 0x1330 <__fp_mpack_finite+0xc>

00001324 <__fp_mpack_finite>:
    1324:	91 50       	subi	r25, 0x01	; 1
    1326:	20 f4       	brcc	.+8      	; 0x1330 <__fp_mpack_finite+0xc>
    1328:	87 95       	ror	r24
    132a:	77 95       	ror	r23
    132c:	67 95       	ror	r22
    132e:	b7 95       	ror	r27
    1330:	88 0f       	add	r24, r24
    1332:	91 1d       	adc	r25, r1
    1334:	96 95       	lsr	r25
    1336:	87 95       	ror	r24
    1338:	97 f9       	bld	r25, 7
    133a:	08 95       	ret

0000133c <__fp_nan>:
    133c:	9f ef       	ldi	r25, 0xFF	; 255
    133e:	80 ec       	ldi	r24, 0xC0	; 192
    1340:	08 95       	ret

00001342 <__fp_pscA>:
    1342:	00 24       	eor	r0, r0
    1344:	0a 94       	dec	r0
    1346:	16 16       	cp	r1, r22
    1348:	17 06       	cpc	r1, r23
    134a:	18 06       	cpc	r1, r24
    134c:	09 06       	cpc	r0, r25
    134e:	08 95       	ret

00001350 <__fp_pscB>:
    1350:	00 24       	eor	r0, r0
    1352:	0a 94       	dec	r0
    1354:	12 16       	cp	r1, r18
    1356:	13 06       	cpc	r1, r19
    1358:	14 06       	cpc	r1, r20
    135a:	05 06       	cpc	r0, r21
    135c:	08 95       	ret

0000135e <__fp_round>:
    135e:	09 2e       	mov	r0, r25
    1360:	03 94       	inc	r0
    1362:	00 0c       	add	r0, r0
    1364:	11 f4       	brne	.+4      	; 0x136a <__fp_round+0xc>
    1366:	88 23       	and	r24, r24
    1368:	52 f0       	brmi	.+20     	; 0x137e <__fp_round+0x20>
    136a:	bb 0f       	add	r27, r27
    136c:	40 f4       	brcc	.+16     	; 0x137e <__fp_round+0x20>
    136e:	bf 2b       	or	r27, r31
    1370:	11 f4       	brne	.+4      	; 0x1376 <__fp_round+0x18>
    1372:	60 ff       	sbrs	r22, 0
    1374:	04 c0       	rjmp	.+8      	; 0x137e <__fp_round+0x20>
    1376:	6f 5f       	subi	r22, 0xFF	; 255
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	8f 4f       	sbci	r24, 0xFF	; 255
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	08 95       	ret

00001380 <__fp_split3>:
    1380:	57 fd       	sbrc	r21, 7
    1382:	90 58       	subi	r25, 0x80	; 128
    1384:	44 0f       	add	r20, r20
    1386:	55 1f       	adc	r21, r21
    1388:	59 f0       	breq	.+22     	; 0x13a0 <__fp_splitA+0x10>
    138a:	5f 3f       	cpi	r21, 0xFF	; 255
    138c:	71 f0       	breq	.+28     	; 0x13aa <__fp_splitA+0x1a>
    138e:	47 95       	ror	r20

00001390 <__fp_splitA>:
    1390:	88 0f       	add	r24, r24
    1392:	97 fb       	bst	r25, 7
    1394:	99 1f       	adc	r25, r25
    1396:	61 f0       	breq	.+24     	; 0x13b0 <__fp_splitA+0x20>
    1398:	9f 3f       	cpi	r25, 0xFF	; 255
    139a:	79 f0       	breq	.+30     	; 0x13ba <__fp_splitA+0x2a>
    139c:	87 95       	ror	r24
    139e:	08 95       	ret
    13a0:	12 16       	cp	r1, r18
    13a2:	13 06       	cpc	r1, r19
    13a4:	14 06       	cpc	r1, r20
    13a6:	55 1f       	adc	r21, r21
    13a8:	f2 cf       	rjmp	.-28     	; 0x138e <__fp_split3+0xe>
    13aa:	46 95       	lsr	r20
    13ac:	f1 df       	rcall	.-30     	; 0x1390 <__fp_splitA>
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <__fp_splitA+0x30>
    13b0:	16 16       	cp	r1, r22
    13b2:	17 06       	cpc	r1, r23
    13b4:	18 06       	cpc	r1, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	f1 cf       	rjmp	.-30     	; 0x139c <__fp_splitA+0xc>
    13ba:	86 95       	lsr	r24
    13bc:	71 05       	cpc	r23, r1
    13be:	61 05       	cpc	r22, r1
    13c0:	08 94       	sec
    13c2:	08 95       	ret

000013c4 <__fp_trunc>:
    13c4:	e5 df       	rcall	.-54     	; 0x1390 <__fp_splitA>
    13c6:	a0 f0       	brcs	.+40     	; 0x13f0 <__fp_trunc+0x2c>
    13c8:	be e7       	ldi	r27, 0x7E	; 126
    13ca:	b9 17       	cp	r27, r25
    13cc:	88 f4       	brcc	.+34     	; 0x13f0 <__fp_trunc+0x2c>
    13ce:	bb 27       	eor	r27, r27
    13d0:	9f 38       	cpi	r25, 0x8F	; 143
    13d2:	60 f4       	brcc	.+24     	; 0x13ec <__fp_trunc+0x28>
    13d4:	16 16       	cp	r1, r22
    13d6:	b1 1d       	adc	r27, r1
    13d8:	67 2f       	mov	r22, r23
    13da:	78 2f       	mov	r23, r24
    13dc:	88 27       	eor	r24, r24
    13de:	98 5f       	subi	r25, 0xF8	; 248
    13e0:	f7 cf       	rjmp	.-18     	; 0x13d0 <__fp_trunc+0xc>
    13e2:	86 95       	lsr	r24
    13e4:	77 95       	ror	r23
    13e6:	67 95       	ror	r22
    13e8:	b1 1d       	adc	r27, r1
    13ea:	93 95       	inc	r25
    13ec:	96 39       	cpi	r25, 0x96	; 150
    13ee:	c8 f3       	brcs	.-14     	; 0x13e2 <__fp_trunc+0x1e>
    13f0:	08 95       	ret

000013f2 <__fp_zero>:
    13f2:	e8 94       	clt

000013f4 <__fp_szero>:
    13f4:	bb 27       	eor	r27, r27
    13f6:	66 27       	eor	r22, r22
    13f8:	77 27       	eor	r23, r23
    13fa:	cb 01       	movw	r24, r22
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret

00001400 <lrint>:
    1400:	c7 df       	rcall	.-114    	; 0x1390 <__fp_splitA>
    1402:	a8 f1       	brcs	.+106    	; 0x146e <lrint+0x6e>
    1404:	9e 57       	subi	r25, 0x7E	; 126
    1406:	a8 f1       	brcs	.+106    	; 0x1472 <lrint+0x72>
    1408:	98 51       	subi	r25, 0x18	; 24
    140a:	60 f0       	brcs	.+24     	; 0x1424 <lrint+0x24>
    140c:	39 f1       	breq	.+78     	; 0x145c <lrint+0x5c>
    140e:	98 30       	cpi	r25, 0x08	; 8
    1410:	70 f5       	brcc	.+92     	; 0x146e <lrint+0x6e>
    1412:	09 2e       	mov	r0, r25
    1414:	99 27       	eor	r25, r25
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	d1 f7       	brne	.-12     	; 0x1416 <lrint+0x16>
    1422:	1c c0       	rjmp	.+56     	; 0x145c <lrint+0x5c>
    1424:	bb 27       	eor	r27, r27
    1426:	99 3f       	cpi	r25, 0xF9	; 249
    1428:	4c f4       	brge	.+18     	; 0x143c <lrint+0x3c>
    142a:	b1 11       	cpse	r27, r1
    142c:	b1 e0       	ldi	r27, 0x01	; 1
    142e:	b6 2b       	or	r27, r22
    1430:	67 2f       	mov	r22, r23
    1432:	78 2f       	mov	r23, r24
    1434:	88 27       	eor	r24, r24
    1436:	98 5f       	subi	r25, 0xF8	; 248
    1438:	b1 f7       	brne	.-20     	; 0x1426 <lrint+0x26>
    143a:	08 c0       	rjmp	.+16     	; 0x144c <lrint+0x4c>
    143c:	86 95       	lsr	r24
    143e:	77 95       	ror	r23
    1440:	67 95       	ror	r22
    1442:	b7 95       	ror	r27
    1444:	08 f4       	brcc	.+2      	; 0x1448 <lrint+0x48>
    1446:	b1 60       	ori	r27, 0x01	; 1
    1448:	93 95       	inc	r25
    144a:	c1 f7       	brne	.-16     	; 0x143c <lrint+0x3c>
    144c:	bb 0f       	add	r27, r27
    144e:	30 f4       	brcc	.+12     	; 0x145c <lrint+0x5c>
    1450:	11 f4       	brne	.+4      	; 0x1456 <lrint+0x56>
    1452:	60 ff       	sbrs	r22, 0
    1454:	03 c0       	rjmp	.+6      	; 0x145c <lrint+0x5c>
    1456:	6f 5f       	subi	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	8f 4f       	sbci	r24, 0xFF	; 255
    145c:	3e f4       	brtc	.+14     	; 0x146c <lrint+0x6c>
    145e:	90 95       	com	r25
    1460:	80 95       	com	r24
    1462:	70 95       	com	r23
    1464:	61 95       	neg	r22
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	08 95       	ret
    146e:	68 94       	set
    1470:	c1 cf       	rjmp	.-126    	; 0x13f4 <__fp_szero>
    1472:	bf cf       	rjmp	.-130    	; 0x13f2 <__fp_zero>

00001474 <__mulsf3>:
    1474:	0b d0       	rcall	.+22     	; 0x148c <__mulsf3x>
    1476:	73 cf       	rjmp	.-282    	; 0x135e <__fp_round>
    1478:	64 df       	rcall	.-312    	; 0x1342 <__fp_pscA>
    147a:	28 f0       	brcs	.+10     	; 0x1486 <__mulsf3+0x12>
    147c:	69 df       	rcall	.-302    	; 0x1350 <__fp_pscB>
    147e:	18 f0       	brcs	.+6      	; 0x1486 <__mulsf3+0x12>
    1480:	95 23       	and	r25, r21
    1482:	09 f0       	breq	.+2      	; 0x1486 <__mulsf3+0x12>
    1484:	2c cf       	rjmp	.-424    	; 0x12de <__fp_inf>
    1486:	5a cf       	rjmp	.-332    	; 0x133c <__fp_nan>
    1488:	11 24       	eor	r1, r1
    148a:	b4 cf       	rjmp	.-152    	; 0x13f4 <__fp_szero>

0000148c <__mulsf3x>:
    148c:	79 df       	rcall	.-270    	; 0x1380 <__fp_split3>
    148e:	a0 f3       	brcs	.-24     	; 0x1478 <__mulsf3+0x4>

00001490 <__mulsf3_pse>:
    1490:	95 9f       	mul	r25, r21
    1492:	d1 f3       	breq	.-12     	; 0x1488 <__mulsf3+0x14>
    1494:	95 0f       	add	r25, r21
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	55 1f       	adc	r21, r21
    149a:	62 9f       	mul	r22, r18
    149c:	f0 01       	movw	r30, r0
    149e:	72 9f       	mul	r23, r18
    14a0:	bb 27       	eor	r27, r27
    14a2:	f0 0d       	add	r31, r0
    14a4:	b1 1d       	adc	r27, r1
    14a6:	63 9f       	mul	r22, r19
    14a8:	aa 27       	eor	r26, r26
    14aa:	f0 0d       	add	r31, r0
    14ac:	b1 1d       	adc	r27, r1
    14ae:	aa 1f       	adc	r26, r26
    14b0:	64 9f       	mul	r22, r20
    14b2:	66 27       	eor	r22, r22
    14b4:	b0 0d       	add	r27, r0
    14b6:	a1 1d       	adc	r26, r1
    14b8:	66 1f       	adc	r22, r22
    14ba:	82 9f       	mul	r24, r18
    14bc:	22 27       	eor	r18, r18
    14be:	b0 0d       	add	r27, r0
    14c0:	a1 1d       	adc	r26, r1
    14c2:	62 1f       	adc	r22, r18
    14c4:	73 9f       	mul	r23, r19
    14c6:	b0 0d       	add	r27, r0
    14c8:	a1 1d       	adc	r26, r1
    14ca:	62 1f       	adc	r22, r18
    14cc:	83 9f       	mul	r24, r19
    14ce:	a0 0d       	add	r26, r0
    14d0:	61 1d       	adc	r22, r1
    14d2:	22 1f       	adc	r18, r18
    14d4:	74 9f       	mul	r23, r20
    14d6:	33 27       	eor	r19, r19
    14d8:	a0 0d       	add	r26, r0
    14da:	61 1d       	adc	r22, r1
    14dc:	23 1f       	adc	r18, r19
    14de:	84 9f       	mul	r24, r20
    14e0:	60 0d       	add	r22, r0
    14e2:	21 1d       	adc	r18, r1
    14e4:	82 2f       	mov	r24, r18
    14e6:	76 2f       	mov	r23, r22
    14e8:	6a 2f       	mov	r22, r26
    14ea:	11 24       	eor	r1, r1
    14ec:	9f 57       	subi	r25, 0x7F	; 127
    14ee:	50 40       	sbci	r21, 0x00	; 0
    14f0:	8a f0       	brmi	.+34     	; 0x1514 <__mulsf3_pse+0x84>
    14f2:	e1 f0       	breq	.+56     	; 0x152c <__mulsf3_pse+0x9c>
    14f4:	88 23       	and	r24, r24
    14f6:	4a f0       	brmi	.+18     	; 0x150a <__mulsf3_pse+0x7a>
    14f8:	ee 0f       	add	r30, r30
    14fa:	ff 1f       	adc	r31, r31
    14fc:	bb 1f       	adc	r27, r27
    14fe:	66 1f       	adc	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	88 1f       	adc	r24, r24
    1504:	91 50       	subi	r25, 0x01	; 1
    1506:	50 40       	sbci	r21, 0x00	; 0
    1508:	a9 f7       	brne	.-22     	; 0x14f4 <__mulsf3_pse+0x64>
    150a:	9e 3f       	cpi	r25, 0xFE	; 254
    150c:	51 05       	cpc	r21, r1
    150e:	70 f0       	brcs	.+28     	; 0x152c <__mulsf3_pse+0x9c>
    1510:	e6 ce       	rjmp	.-564    	; 0x12de <__fp_inf>
    1512:	70 cf       	rjmp	.-288    	; 0x13f4 <__fp_szero>
    1514:	5f 3f       	cpi	r21, 0xFF	; 255
    1516:	ec f3       	brlt	.-6      	; 0x1512 <__mulsf3_pse+0x82>
    1518:	98 3e       	cpi	r25, 0xE8	; 232
    151a:	dc f3       	brlt	.-10     	; 0x1512 <__mulsf3_pse+0x82>
    151c:	86 95       	lsr	r24
    151e:	77 95       	ror	r23
    1520:	67 95       	ror	r22
    1522:	b7 95       	ror	r27
    1524:	f7 95       	ror	r31
    1526:	e7 95       	ror	r30
    1528:	9f 5f       	subi	r25, 0xFF	; 255
    152a:	c1 f7       	brne	.-16     	; 0x151c <__mulsf3_pse+0x8c>
    152c:	fe 2b       	or	r31, r30
    152e:	88 0f       	add	r24, r24
    1530:	91 1d       	adc	r25, r1
    1532:	96 95       	lsr	r25
    1534:	87 95       	ror	r24
    1536:	97 f9       	bld	r25, 7
    1538:	08 95       	ret

0000153a <__udivmodsi4>:
    153a:	a1 e2       	ldi	r26, 0x21	; 33
    153c:	1a 2e       	mov	r1, r26
    153e:	aa 1b       	sub	r26, r26
    1540:	bb 1b       	sub	r27, r27
    1542:	fd 01       	movw	r30, r26
    1544:	0d c0       	rjmp	.+26     	; 0x1560 <__udivmodsi4_ep>

00001546 <__udivmodsi4_loop>:
    1546:	aa 1f       	adc	r26, r26
    1548:	bb 1f       	adc	r27, r27
    154a:	ee 1f       	adc	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	a2 17       	cp	r26, r18
    1550:	b3 07       	cpc	r27, r19
    1552:	e4 07       	cpc	r30, r20
    1554:	f5 07       	cpc	r31, r21
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__udivmodsi4_ep>
    1558:	a2 1b       	sub	r26, r18
    155a:	b3 0b       	sbc	r27, r19
    155c:	e4 0b       	sbc	r30, r20
    155e:	f5 0b       	sbc	r31, r21

00001560 <__udivmodsi4_ep>:
    1560:	66 1f       	adc	r22, r22
    1562:	77 1f       	adc	r23, r23
    1564:	88 1f       	adc	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	1a 94       	dec	r1
    156a:	69 f7       	brne	.-38     	; 0x1546 <__udivmodsi4_loop>
    156c:	60 95       	com	r22
    156e:	70 95       	com	r23
    1570:	80 95       	com	r24
    1572:	90 95       	com	r25
    1574:	9b 01       	movw	r18, r22
    1576:	ac 01       	movw	r20, r24
    1578:	bd 01       	movw	r22, r26
    157a:	cf 01       	movw	r24, r30
    157c:	08 95       	ret

0000157e <__divmodsi4>:
    157e:	05 2e       	mov	r0, r21
    1580:	97 fb       	bst	r25, 7
    1582:	1e f4       	brtc	.+6      	; 0x158a <__divmodsi4+0xc>
    1584:	00 94       	com	r0
    1586:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__negsi2>
    158a:	57 fd       	sbrc	r21, 7
    158c:	07 d0       	rcall	.+14     	; 0x159c <__divmodsi4_neg2>
    158e:	0e 94 9d 0a 	call	0x153a	; 0x153a <__udivmodsi4>
    1592:	07 fc       	sbrc	r0, 7
    1594:	03 d0       	rcall	.+6      	; 0x159c <__divmodsi4_neg2>
    1596:	4e f4       	brtc	.+18     	; 0x15aa <__divmodsi4_exit>
    1598:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__negsi2>

0000159c <__divmodsi4_neg2>:
    159c:	50 95       	com	r21
    159e:	40 95       	com	r20
    15a0:	30 95       	com	r19
    15a2:	21 95       	neg	r18
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	4f 4f       	sbci	r20, 0xFF	; 255
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255

000015aa <__divmodsi4_exit>:
    15aa:	08 95       	ret

000015ac <__negsi2>:
    15ac:	90 95       	com	r25
    15ae:	80 95       	com	r24
    15b0:	70 95       	com	r23
    15b2:	61 95       	neg	r22
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	08 95       	ret

000015bc <_exit>:
    15bc:	f8 94       	cli

000015be <__stop_program>:
    15be:	ff cf       	rjmp	.-2      	; 0x15be <__stop_program>
