
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001be6  00001c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000258  00800104  00800104  00001c7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e1a  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099f  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab9  00000000  00000000  0000467f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007a8  00000000  00000000  00005138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008fc  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d96  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00007f72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 ee       	ldi	r30, 0xE6	; 230
      90:	fb e1       	ldi	r31, 0x1B	; 27
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 30       	cpi	r26, 0x04	; 4
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a4 e0       	ldi	r26, 0x04	; 4
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ac 35       	cpi	r26, 0x5C	; 92
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 4a 01 	call	0x294	; 0x294 <main>
      b2:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initAll>:

int bune =0; //teste


void initAll(){
	initUSART1(9600);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 fb 07 	call	0xff6	; 0xff6 <initUSART1>
	initTimer0();
      c2:	0e 94 c3 03 	call	0x786	; 0x786 <initTimer0>
	initTimer1();
      c6:	0e 94 91 0a 	call	0x1522	; 0x1522 <initTimer1>
	initTimer2();
      ca:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <initTimer2>
	initSensors();
      ce:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <initSensors>
      d2:	08 95       	ret

000000d4 <executeCommands>:
	}
	
}


void executeCommands(){
      d4:	bf 92       	push	r11
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	61 97       	sbiw	r28, 0x11	; 17
      ec:	0f b6       	in	r0, 0x3f	; 63
      ee:	f8 94       	cli
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	0f be       	out	0x3f, r0	; 63
      f4:	cd bf       	out	0x3d, r28	; 61
		//startUltrasonicMeasure();
	int8_t s;
	command lastcmd = getLastCommand(&s);
      f6:	ce 01       	movw	r24, r28
      f8:	01 96       	adiw	r24, 0x01	; 1
      fa:	0e 94 3b 09 	call	0x1276	; 0x1276 <getLastCommand>
      fe:	d3 2e       	mov	r13, r19
     100:	c4 2e       	mov	r12, r20
     102:	2a 83       	std	Y+2, r18	; 0x02
     104:	3b 83       	std	Y+3, r19	; 0x03
     106:	4c 83       	std	Y+4, r20	; 0x04
     108:	5d 83       	std	Y+5, r21	; 0x05
     10a:	6e 83       	std	Y+6, r22	; 0x06
     10c:	7f 83       	std	Y+7, r23	; 0x07
     10e:	88 87       	std	Y+8, r24	; 0x08
     110:	ed 80       	ldd	r14, Y+5	; 0x05
     112:	fe 80       	ldd	r15, Y+6	; 0x06
	if(s==1){
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	09 f0       	breq	.+2      	; 0x11c <executeCommands+0x48>
     11a:	43 c0       	rjmp	.+134    	; 0x1a2 <executeCommands+0xce>
		//CHECK CRC
		
		if(lastcmd.time){
     11c:	e1 14       	cp	r14, r1
     11e:	f1 04       	cpc	r15, r1
     120:	11 f1       	breq	.+68     	; 0x166 <executeCommands+0x92>
					
				isAutonomous = 0;	
     122:	10 92 09 01 	sts	0x0109, r1
     126:	10 92 08 01 	sts	0x0108, r1
				response resp;
				resp.header = lastcmd.header;
     12a:	02 2f       	mov	r16, r18
     12c:	29 87       	std	Y+9, r18	; 0x09
				resp.sensorInfo[0]=2;
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	8a 87       	std	Y+10, r24	; 0x0a
				resp.sensorInfo[1]=3;
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	8b 87       	std	Y+11, r24	; 0x0b
				resp.time=lastcmd.time;
     136:	7e 2d       	mov	r23, r14
     138:	f9 8a       	std	Y+17, r15	; 0x11
     13a:	e8 8a       	std	Y+16, r14	; 0x10
				sendResponse(resp);
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	23 e0       	ldi	r18, 0x03	; 3
     140:	3c 85       	ldd	r19, Y+12	; 0x0c
     142:	4d 85       	ldd	r20, Y+13	; 0x0d
     144:	5e 85       	ldd	r21, Y+14	; 0x0e
     146:	6f 85       	ldd	r22, Y+15	; 0x0f
     148:	89 89       	ldd	r24, Y+17	; 0x11
     14a:	0e 94 8e 08 	call	0x111c	; 0x111c <sendResponse>
				
			if(lastcmd.right!=0){
     14e:	dd 20       	and	r13, r13
     150:	29 f0       	breq	.+10     	; 0x15c <executeCommands+0x88>
				driveRightForTime(lastcmd.right, lastcmd.time);
     152:	b7 01       	movw	r22, r14
     154:	8d 2d       	mov	r24, r13
     156:	0e 94 82 02 	call	0x504	; 0x504 <driveRightForTime>
     15a:	23 c0       	rjmp	.+70     	; 0x1a2 <executeCommands+0xce>
			}else{
				driveForwardForTime(lastcmd.forward, lastcmd.time);
     15c:	b7 01       	movw	r22, r14
     15e:	8c 2d       	mov	r24, r12
     160:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <driveForwardForTime>
     164:	1e c0       	rjmp	.+60     	; 0x1a2 <executeCommands+0xce>
			}
			
		}else{
			isAutonomous=1;
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	30 93 09 01 	sts	0x0109, r19
     16e:	20 93 08 01 	sts	0x0108, r18
			car_speed = lastcmd.forward;
     172:	c0 92 04 01 	sts	0x0104, r12
			changePwm_MotorLB(car_speed);
     176:	80 91 04 01 	lds	r24, 0x0104
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <changePwm_MotorLB>
			changePwm_MotorRB(car_speed);
     180:	80 91 04 01 	lds	r24, 0x0104
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 99 01 	call	0x332	; 0x332 <changePwm_MotorRB>
			changePwm_MotorLF(car_speed);
     18a:	80 91 04 01 	lds	r24, 0x0104
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 53 01 	call	0x2a6	; 0x2a6 <changePwm_MotorLF>
			changePwm_MotorRF(car_speed);
     194:	80 91 04 01 	lds	r24, 0x0104
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 81 01 	call	0x302	; 0x302 <changePwm_MotorRF>
			reverse();
     19e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <reverse>
		}

	}
	
		
			if(isAutonomous){
     1a2:	80 91 08 01 	lds	r24, 0x0108
     1a6:	90 91 09 01 	lds	r25, 0x0109
     1aa:	89 2b       	or	r24, r25
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <executeCommands+0xdc>
     1ae:	62 c0       	rjmp	.+196    	; 0x274 <executeCommands+0x1a0>
			cm_IR = getDistance();
     1b0:	0e 94 0c 04 	call	0x818	; 0x818 <getDistance>
     1b4:	80 93 07 01 	sts	0x0107, r24
			mm_US = getAverageUltrasonicValue(3);
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	0e 94 29 04 	call	0x852	; 0x852 <getAverageUltrasonicValue>
     1be:	90 93 06 01 	sts	0x0106, r25
     1c2:	80 93 05 01 	sts	0x0105, r24
							
			if(cm_IR<20 && (turning >> 1 == 0)){
     1c6:	80 91 07 01 	lds	r24, 0x0107
     1ca:	84 31       	cpi	r24, 0x14	; 20
     1cc:	a0 f4       	brcc	.+40     	; 0x1f6 <executeCommands+0x122>
     1ce:	80 91 0a 01 	lds	r24, 0x010A
     1d2:	90 91 0b 01 	lds	r25, 0x010B
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	89 2b       	or	r24, r25
     1dc:	61 f4       	brne	.+24     	; 0x1f6 <executeCommands+0x122>
				//turnRight_90degrees();
				turnLeft();
     1de:	0e 94 dd 02 	call	0x5ba	; 0x5ba <turnLeft>
				turning|=1<<1;
     1e2:	80 91 0a 01 	lds	r24, 0x010A
     1e6:	90 91 0b 01 	lds	r25, 0x010B
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	90 93 0b 01 	sts	0x010B, r25
     1f0:	80 93 0a 01 	sts	0x010A, r24
     1f4:	3f c0       	rjmp	.+126    	; 0x274 <executeCommands+0x1a0>
				//breakAll();
				}else if((turning >> 1 == 1) && cm_IR>=20){
     1f6:	80 91 0a 01 	lds	r24, 0x010A
     1fa:	90 91 0b 01 	lds	r25, 0x010B
     1fe:	9c 01       	movw	r18, r24
     200:	35 95       	asr	r19
     202:	27 95       	ror	r18
     204:	21 30       	cpi	r18, 0x01	; 1
     206:	31 05       	cpc	r19, r1
     208:	71 f4       	brne	.+28     	; 0x226 <executeCommands+0x152>
     20a:	20 91 07 01 	lds	r18, 0x0107
     20e:	24 31       	cpi	r18, 0x14	; 20
     210:	50 f0       	brcs	.+20     	; 0x226 <executeCommands+0x152>
				turning&= ~(1<<1);
     212:	8d 7f       	andi	r24, 0xFD	; 253
     214:	90 93 0b 01 	sts	0x010B, r25
     218:	80 93 0a 01 	sts	0x010A, r24
				stopTurning();
     21c:	0e 94 ce 02 	call	0x59c	; 0x59c <stopTurning>
				reverse();
     220:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <reverse>
     224:	27 c0       	rjmp	.+78     	; 0x274 <executeCommands+0x1a0>
				
			}else if(mm_US<250 && ((turning & 1) == 0)){
     226:	20 91 05 01 	lds	r18, 0x0105
     22a:	30 91 06 01 	lds	r19, 0x0106
     22e:	2a 3f       	cpi	r18, 0xFA	; 250
     230:	31 05       	cpc	r19, r1
     232:	70 f4       	brcc	.+28     	; 0x250 <executeCommands+0x17c>
     234:	80 fd       	sbrc	r24, 0
     236:	0e c0       	rjmp	.+28     	; 0x254 <executeCommands+0x180>
				//turnRight_90degrees();
				turnLeft();
     238:	0e 94 dd 02 	call	0x5ba	; 0x5ba <turnLeft>
				turning|=1;
     23c:	80 91 0a 01 	lds	r24, 0x010A
     240:	90 91 0b 01 	lds	r25, 0x010B
     244:	81 60       	ori	r24, 0x01	; 1
     246:	90 93 0b 01 	sts	0x010B, r25
     24a:	80 93 0a 01 	sts	0x010A, r24
     24e:	12 c0       	rjmp	.+36     	; 0x274 <executeCommands+0x1a0>
				//breakAll();
				}else if(((turning &1) ==1) && mm_US>=250){
     250:	80 ff       	sbrs	r24, 0
     252:	10 c0       	rjmp	.+32     	; 0x274 <executeCommands+0x1a0>
     254:	20 91 05 01 	lds	r18, 0x0105
     258:	30 91 06 01 	lds	r19, 0x0106
     25c:	2a 3f       	cpi	r18, 0xFA	; 250
     25e:	31 05       	cpc	r19, r1
     260:	48 f0       	brcs	.+18     	; 0x274 <executeCommands+0x1a0>
				turning&=~1;
     262:	8e 7f       	andi	r24, 0xFE	; 254
     264:	90 93 0b 01 	sts	0x010B, r25
     268:	80 93 0a 01 	sts	0x010A, r24
				stopTurning();
     26c:	0e 94 ce 02 	call	0x59c	; 0x59c <stopTurning>
				reverse();	
     270:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <reverse>



		}
	
     274:	61 96       	adiw	r28, 0x11	; 17
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	df 90       	pop	r13
     28e:	cf 90       	pop	r12
     290:	bf 90       	pop	r11
     292:	08 95       	ret

00000294 <main>:


int main(void)
{
	
	initAll();
     294:	0e 94 5d 00 	call	0xba	; 0xba <initAll>
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
     298:	0f 9a       	sbi	0x01, 7	; 1
	
	sei();
     29a:	78 94       	sei

	breakAll();
     29c:	0e 94 bc 03 	call	0x778	; 0x778 <breakAll>
		
	
	while(1)
	{
		executeCommands();		
     2a0:	0e 94 6a 00 	call	0xd4	; 0xd4 <executeCommands>
     2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <main+0xc>

000002a6 <changePwm_MotorLF>:
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     2a6:	bc 01       	movw	r22, r24
     2a8:	88 27       	eor	r24, r24
     2aa:	77 fd       	sbrc	r23, 7
     2ac:	80 95       	com	r24
     2ae:	98 2f       	mov	r25, r24
     2b0:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	48 ec       	ldi	r20, 0xC8	; 200
     2ba:	52 e4       	ldi	r21, 0x42	; 66
     2bc:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	4f e7       	ldi	r20, 0x7F	; 127
     2c6:	53 e4       	ldi	r21, 0x43	; 67
     2c8:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     2cc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     2d0:	67 bd       	out	0x27, r22	; 39
     2d2:	08 95       	ret

000002d4 <changePwm_MotorLB>:
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     2d4:	bc 01       	movw	r22, r24
     2d6:	88 27       	eor	r24, r24
     2d8:	77 fd       	sbrc	r23, 7
     2da:	80 95       	com	r24
     2dc:	98 2f       	mov	r25, r24
     2de:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	48 ec       	ldi	r20, 0xC8	; 200
     2e8:	52 e4       	ldi	r21, 0x42	; 66
     2ea:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	4f e7       	ldi	r20, 0x7F	; 127
     2f4:	53 e4       	ldi	r21, 0x43	; 67
     2f6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     2fa:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     2fe:	68 bd       	out	0x28, r22	; 40
     300:	08 95       	ret

00000302 <changePwm_MotorRF>:
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     302:	bc 01       	movw	r22, r24
     304:	88 27       	eor	r24, r24
     306:	77 fd       	sbrc	r23, 7
     308:	80 95       	com	r24
     30a:	98 2f       	mov	r25, r24
     30c:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	48 ec       	ldi	r20, 0xC8	; 200
     316:	52 e4       	ldi	r21, 0x42	; 66
     318:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	4f e7       	ldi	r20, 0x7F	; 127
     322:	53 e4       	ldi	r21, 0x43	; 67
     324:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     328:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     32c:	60 93 b3 00 	sts	0x00B3, r22
     330:	08 95       	ret

00000332 <changePwm_MotorRB>:
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     332:	bc 01       	movw	r22, r24
     334:	88 27       	eor	r24, r24
     336:	77 fd       	sbrc	r23, 7
     338:	80 95       	com	r24
     33a:	98 2f       	mov	r25, r24
     33c:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	48 ec       	ldi	r20, 0xC8	; 200
     346:	52 e4       	ldi	r21, 0x42	; 66
     348:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	4f e7       	ldi	r20, 0x7F	; 127
     352:	53 e4       	ldi	r21, 0x43	; 67
     354:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     358:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     35c:	60 93 b4 00 	sts	0x00B4, r22
     360:	08 95       	ret

00000362 <driveBackwardForTime>:
		executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
	}	
	
}

void driveBackwardForTime(uint8_t pwm, uint16_t time){
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	2a 97       	sbiw	r28, 0x0a	; 10
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
	
		//check if it is a negative number and if it is call the complementary function
		if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     382:	88 23       	and	r24, r24
     384:	24 f4       	brge	.+8      	; 0x38e <driveBackwardForTime+0x2c>
			//it is a negative pwm
			int8_t pwm_signed = pwm;
			pwm_signed = -pwm_signed;
			driveForwardForTime(pwm_signed, time);
     386:	81 95       	neg	r24
     388:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <driveForwardForTime>
     38c:	1e c0       	rjmp	.+60     	; 0x3ca <driveBackwardForTime+0x68>
		}
		else
		{
			int16_t arg1[3];
			int16_t arg2[]= {0, 0};
     38e:	18 86       	std	Y+8, r1	; 0x08
     390:	1f 82       	std	Y+7, r1	; 0x07
     392:	1a 86       	std	Y+10, r1	; 0x0a
     394:	19 86       	std	Y+9, r1	; 0x09
			
			// the pwm is for backward but expressed like forward
			// it must be reversed
			
			int8_t pwm_signed = pwm;
			pwm_signed = -pwm_signed;
     396:	81 95       	neg	r24
			//change back to unsigned so that the bit operations work properly
			pwm = pwm_signed;
			
			arg1[0] = pwm;
     398:	90 e0       	ldi	r25, 0x00	; 0
			arg1[0] |= pwm << 8;
     39a:	38 2f       	mov	r19, r24
     39c:	22 27       	eor	r18, r18
     39e:	82 2b       	or	r24, r18
     3a0:	93 2b       	or	r25, r19
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	89 83       	std	Y+1, r24	; 0x01
			arg1[1] = pwm;
			arg1[1] |= pwm << 8;
     3a6:	9c 83       	std	Y+4, r25	; 0x04
     3a8:	8b 83       	std	Y+3, r24	; 0x03
			
			executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
     3aa:	6b 01       	movw	r12, r22
     3ac:	ce 01       	movw	r24, r28
     3ae:	07 96       	adiw	r24, 0x07	; 7
     3b0:	7c 01       	movw	r14, r24
     3b2:	02 e0       	ldi	r16, 0x02	; 2
     3b4:	10 e0       	ldi	r17, 0x00	; 0
     3b6:	9e 01       	movw	r18, r28
     3b8:	2f 5f       	subi	r18, 0xFF	; 255
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
     3bc:	42 e0       	ldi	r20, 0x02	; 2
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	61 ef       	ldi	r22, 0xF1	; 241
     3c2:	72 e0       	ldi	r23, 0x02	; 2
     3c4:	cb 01       	movw	r24, r22
     3c6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <executeCommandForTime>
		}
	
	
}
     3ca:	2a 96       	adiw	r28, 0x0a	; 10
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	df 90       	pop	r13
     3e4:	cf 90       	pop	r12
     3e6:	08 95       	ret

000003e8 <driveForwardForTime>:
	executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
	}
	
}

void driveForwardForTime(uint8_t pwm, uint16_t time){
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	2a 97       	sbiw	r28, 0x0a	; 10
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     408:	88 23       	and	r24, r24
     40a:	24 f4       	brge	.+8      	; 0x414 <driveForwardForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		driveBackwardForTime(pwm_signed, time);
     40c:	81 95       	neg	r24
     40e:	0e 94 b1 01 	call	0x362	; 0x362 <driveBackwardForTime>
     412:	1d c0       	rjmp	.+58     	; 0x44e <driveForwardForTime+0x66>
	} 
	else
	{
		int16_t arg1[3];
		int16_t arg2[]= {0, 0};
     414:	18 86       	std	Y+8, r1	; 0x08
     416:	1f 82       	std	Y+7, r1	; 0x07
     418:	1a 86       	std	Y+10, r1	; 0x0a
     41a:	19 86       	std	Y+9, r1	; 0x09
		
		arg1[0] = pwm;
     41c:	90 e0       	ldi	r25, 0x00	; 0
		arg1[0] |= pwm << 8;
     41e:	38 2f       	mov	r19, r24
     420:	22 27       	eor	r18, r18
     422:	82 2b       	or	r24, r18
     424:	93 2b       	or	r25, r19
     426:	9a 83       	std	Y+2, r25	; 0x02
     428:	89 83       	std	Y+1, r24	; 0x01
		arg1[1] = pwm;
		arg1[1] |= pwm << 8;
     42a:	9c 83       	std	Y+4, r25	; 0x04
     42c:	8b 83       	std	Y+3, r24	; 0x03

		executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
     42e:	6b 01       	movw	r12, r22
     430:	ce 01       	movw	r24, r28
     432:	07 96       	adiw	r24, 0x07	; 7
     434:	7c 01       	movw	r14, r24
     436:	02 e0       	ldi	r16, 0x02	; 2
     438:	10 e0       	ldi	r17, 0x00	; 0
     43a:	9e 01       	movw	r18, r28
     43c:	2f 5f       	subi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	42 e0       	ldi	r20, 0x02	; 2
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	61 ef       	ldi	r22, 0xF1	; 241
     446:	72 e0       	ldi	r23, 0x02	; 2
     448:	cb 01       	movw	r24, r22
     44a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <executeCommandForTime>
	}	
	
}
     44e:	2a 96       	adiw	r28, 0x0a	; 10
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	08 95       	ret

0000046c <driveLeftForTime>:
	
}



void driveLeftForTime(uint8_t pwm, uint16_t time){
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	2a 97       	sbiw	r28, 0x0a	; 10
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     48c:	88 23       	and	r24, r24
     48e:	24 f4       	brge	.+8      	; 0x498 <driveLeftForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		
		driveRightForTime(pwm_signed, time);
     490:	81 95       	neg	r24
     492:	0e 94 82 02 	call	0x504	; 0x504 <driveRightForTime>
     496:	27 c0       	rjmp	.+78     	; 0x4e6 <driveLeftForTime+0x7a>
		
		}else{
		
		int16_t arg1[] = {0x5050, 0xB0B0};
     498:	20 e5       	ldi	r18, 0x50	; 80
     49a:	30 e5       	ldi	r19, 0x50	; 80
     49c:	38 87       	std	Y+8, r19	; 0x08
     49e:	2f 83       	std	Y+7, r18	; 0x07
     4a0:	20 eb       	ldi	r18, 0xB0	; 176
     4a2:	30 eb       	ldi	r19, 0xB0	; 176
     4a4:	3a 87       	std	Y+10, r19	; 0x0a
     4a6:	29 87       	std	Y+9, r18	; 0x09
		int16_t arg2[3];
		
		arg2[0] = pwm;
     4a8:	90 e0       	ldi	r25, 0x00	; 0
		arg2[0] |= pwm << 8;
     4aa:	38 2f       	mov	r19, r24
     4ac:	22 27       	eor	r18, r18
     4ae:	82 2b       	or	r24, r18
     4b0:	93 2b       	or	r25, r19
     4b2:	9a 83       	std	Y+2, r25	; 0x02
     4b4:	89 83       	std	Y+1, r24	; 0x01
		arg2[1] = pwm;
		arg2[1] |= pwm << 8;
     4b6:	9c 83       	std	Y+4, r25	; 0x04
     4b8:	8b 83       	std	Y+3, r24	; 0x03

		arg2[2] = time;
     4ba:	7e 83       	std	Y+6, r23	; 0x06
     4bc:	6d 83       	std	Y+5, r22	; 0x05
		
		executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
     4be:	0f 2e       	mov	r0, r31
     4c0:	fc e8       	ldi	r31, 0x8C	; 140
     4c2:	cf 2e       	mov	r12, r31
     4c4:	d1 2c       	mov	r13, r1
     4c6:	f0 2d       	mov	r31, r0
     4c8:	ce 01       	movw	r24, r28
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	7c 01       	movw	r14, r24
     4ce:	03 e0       	ldi	r16, 0x03	; 3
     4d0:	10 e0       	ldi	r17, 0x00	; 0
     4d2:	9e 01       	movw	r18, r28
     4d4:	29 5f       	subi	r18, 0xF9	; 249
     4d6:	3f 4f       	sbci	r19, 0xFF	; 255
     4d8:	42 e0       	ldi	r20, 0x02	; 2
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	61 ef       	ldi	r22, 0xF1	; 241
     4de:	72 e0       	ldi	r23, 0x02	; 2
     4e0:	cb 01       	movw	r24, r22
     4e2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <executeCommandForTime>
	}
	
}
     4e6:	2a 96       	adiw	r28, 0x0a	; 10
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	08 95       	ret

00000504 <driveRightForTime>:

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
}
	 
void driveRightForTime(uint8_t pwm, uint16_t time){
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	2a 97       	sbiw	r28, 0x0a	; 10
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
	
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){ 
     524:	88 23       	and	r24, r24
     526:	24 f4       	brge	.+8      	; 0x530 <driveRightForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		
		driveLeftForTime(pwm_signed, time);
     528:	81 95       	neg	r24
     52a:	0e 94 36 02 	call	0x46c	; 0x46c <driveLeftForTime>
     52e:	27 c0       	rjmp	.+78     	; 0x57e <driveRightForTime+0x7a>
		
	}else{
	
	int16_t arg1[] = {0xB0B0, 0x5050};
     530:	20 eb       	ldi	r18, 0xB0	; 176
     532:	30 eb       	ldi	r19, 0xB0	; 176
     534:	38 87       	std	Y+8, r19	; 0x08
     536:	2f 83       	std	Y+7, r18	; 0x07
     538:	20 e5       	ldi	r18, 0x50	; 80
     53a:	30 e5       	ldi	r19, 0x50	; 80
     53c:	3a 87       	std	Y+10, r19	; 0x0a
     53e:	29 87       	std	Y+9, r18	; 0x09
	int16_t arg2[3];	
	
	arg2[0] = pwm;
     540:	90 e0       	ldi	r25, 0x00	; 0
	arg2[0] |= pwm << 8;	
     542:	38 2f       	mov	r19, r24
     544:	22 27       	eor	r18, r18
     546:	82 2b       	or	r24, r18
     548:	93 2b       	or	r25, r19
     54a:	9a 83       	std	Y+2, r25	; 0x02
     54c:	89 83       	std	Y+1, r24	; 0x01
	arg2[1] = pwm;
	arg2[1] |= pwm << 8;	
     54e:	9c 83       	std	Y+4, r25	; 0x04
     550:	8b 83       	std	Y+3, r24	; 0x03

	arg2[2] = time;
     552:	7e 83       	std	Y+6, r23	; 0x06
     554:	6d 83       	std	Y+5, r22	; 0x05

	executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
     556:	0f 2e       	mov	r0, r31
     558:	fc e8       	ldi	r31, 0x8C	; 140
     55a:	cf 2e       	mov	r12, r31
     55c:	d1 2c       	mov	r13, r1
     55e:	f0 2d       	mov	r31, r0
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	7c 01       	movw	r14, r24
     566:	03 e0       	ldi	r16, 0x03	; 3
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	9e 01       	movw	r18, r28
     56c:	29 5f       	subi	r18, 0xF9	; 249
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	42 e0       	ldi	r20, 0x02	; 2
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	61 ef       	ldi	r22, 0xF1	; 241
     576:	72 e0       	ldi	r23, 0x02	; 2
     578:	cb 01       	movw	r24, r22
     57a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <executeCommandForTime>
	}
	
}
     57e:	2a 96       	adiw	r28, 0x0a	; 10
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	08 95       	ret

0000059c <stopTurning>:
}


void stopTurning(){
		//setez directia initiala
		MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     59c:	29 9a       	sbi	0x05, 1	; 5
		MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     59e:	28 98       	cbi	0x05, 0	; 5
		MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     5a0:	2d 9a       	sbi	0x05, 5	; 5
		MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     5a2:	2a 98       	cbi	0x05, 2	; 5
		
		
		MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     5a4:	47 9a       	sbi	0x08, 7	; 8
		MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     5a6:	46 98       	cbi	0x08, 6	; 8
		MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     5a8:	41 9a       	sbi	0x08, 1	; 8
		MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);
     5aa:	40 98       	cbi	0x08, 0	; 8
     5ac:	08 95       	ret

000005ae <changeMotorDirectionLF>:
	changeMotorDirectionRF();
}


void changeMotorDirectionLF(){
	MOTOR_LF_DIR_PIN1 |= (1<<MOTOR_LF_DIR_PIN1x);
     5ae:	18 9a       	sbi	0x03, 0	; 3
	MOTOR_LF_DIR_PIN2 |= (1<<MOTOR_LF_DIR_PIN2x);
     5b0:	19 9a       	sbi	0x03, 1	; 3
     5b2:	08 95       	ret

000005b4 <changeMotorDirectionLB>:
}
	
void changeMotorDirectionLB(){
	MOTOR_LB_DIR_PIN1 |= (1<<MOTOR_LB_DIR_PIN1x);
     5b4:	1a 9a       	sbi	0x03, 2	; 3
	MOTOR_LB_DIR_PIN2 |= (1<<MOTOR_LB_DIR_PIN2x);
     5b6:	1d 9a       	sbi	0x03, 5	; 3
     5b8:	08 95       	ret

000005ba <turnLeft>:
	
}


void turnLeft(){
	changeMotorDirectionLB();
     5ba:	0e 94 da 02 	call	0x5b4	; 0x5b4 <changeMotorDirectionLB>
	changeMotorDirectionLF();
     5be:	0e 94 d7 02 	call	0x5ae	; 0x5ae <changeMotorDirectionLF>
     5c2:	08 95       	ret

000005c4 <changeMotorDirectionRF>:
	MOTOR_LB_DIR_PIN1 |= (1<<MOTOR_LB_DIR_PIN1x);
	MOTOR_LB_DIR_PIN2 |= (1<<MOTOR_LB_DIR_PIN2x);
}
	  
void changeMotorDirectionRF(){
	MOTOR_RF_DIR_PIN1 |= (1<<MOTOR_RF_DIR_PIN1x);	
     5c4:	36 9a       	sbi	0x06, 6	; 6
	MOTOR_RF_DIR_PIN2 |= (1<<MOTOR_RF_DIR_PIN2x);
     5c6:	37 9a       	sbi	0x06, 7	; 6
     5c8:	08 95       	ret

000005ca <changeMotorDirectionRB>:
}
	 
void changeMotorDirectionRB(){
	MOTOR_RB_DIR_PIN1 |= (1<<MOTOR_RB_DIR_PIN1x);
     5ca:	30 9a       	sbi	0x06, 0	; 6
	MOTOR_RB_DIR_PIN2 |= (1<<MOTOR_RB_DIR_PIN2x);
     5cc:	31 9a       	sbi	0x06, 1	; 6
     5ce:	08 95       	ret

000005d0 <reverse>:
	
	
}

void reverse(){
	changeMotorDirectionLB();
     5d0:	0e 94 da 02 	call	0x5b4	; 0x5b4 <changeMotorDirectionLB>
	changeMotorDirectionLF();
     5d4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <changeMotorDirectionLF>
	changeMotorDirectionRB();
     5d8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <changeMotorDirectionRB>
	changeMotorDirectionRF();
     5dc:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <changeMotorDirectionRF>
     5e0:	08 95       	ret

000005e2 <move>:
}

void move(uint16_t argc, int16_t* argv){
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	28 97       	sbiw	r28, 0x08	; 8
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	8b 01       	movw	r16, r22
	
	if(argc == 2){
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	91 05       	cpc	r25, r1
     608:	09 f0       	breq	.+2      	; 0x60c <move+0x2a>
     60a:	87 c0       	rjmp	.+270    	; 0x71a <move+0x138>
	//setez directia initiala
	MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     60c:	29 9a       	sbi	0x05, 1	; 5
	MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     60e:	28 98       	cbi	0x05, 0	; 5
	MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     610:	2d 9a       	sbi	0x05, 5	; 5
	MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     612:	2a 98       	cbi	0x05, 2	; 5
	
	
	MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     614:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     616:	46 98       	cbi	0x08, 6	; 8
	MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     618:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);
     61a:	40 98       	cbi	0x08, 0	; 8
	

	
	int8_t d;
	
	d = argv[0] >> 8;
     61c:	fb 01       	movw	r30, r22
     61e:	81 81       	ldd	r24, Z+1	; 0x01
     620:	d8 2e       	mov	r13, r24
	
	if (d < 0){
     622:	88 23       	and	r24, r24
     624:	1c f4       	brge	.+6      	; 0x62c <move+0x4a>
		d=-d;
     626:	d1 94       	neg	r13
		changeMotorDirectionLF();
     628:	0e 94 d7 02 	call	0x5ae	; 0x5ae <changeMotorDirectionLF>
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     62c:	6d 2d       	mov	r22, r13
     62e:	77 27       	eor	r23, r23
     630:	67 fd       	sbrc	r22, 7
     632:	70 95       	com	r23
     634:	87 2f       	mov	r24, r23
     636:	97 2f       	mov	r25, r23
     638:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	48 ec       	ldi	r20, 0xC8	; 200
     642:	52 e4       	ldi	r21, 0x42	; 66
     644:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	4f e7       	ldi	r20, 0x7F	; 127
     64e:	53 e4       	ldi	r21, 0x43	; 67
     650:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     654:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     658:	67 bd       	out	0x27, r22	; 39
		changeMotorDirectionLF();
	}
	changePwm_MotorLF(d);
	
	
	d = argv[0] & 0xff;
     65a:	f8 01       	movw	r30, r16
     65c:	80 81       	ld	r24, Z
     65e:	d8 2e       	mov	r13, r24
	
	if (d < 0){
     660:	88 23       	and	r24, r24
     662:	1c f4       	brge	.+6      	; 0x66a <move+0x88>
		d=-d;
     664:	d1 94       	neg	r13
		changeMotorDirectionLB();
     666:	0e 94 da 02 	call	0x5b4	; 0x5b4 <changeMotorDirectionLB>
void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     66a:	6d 2d       	mov	r22, r13
     66c:	77 27       	eor	r23, r23
     66e:	67 fd       	sbrc	r22, 7
     670:	70 95       	com	r23
     672:	87 2f       	mov	r24, r23
     674:	97 2f       	mov	r25, r23
     676:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	48 ec       	ldi	r20, 0xC8	; 200
     680:	52 e4       	ldi	r21, 0x42	; 66
     682:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	4f e7       	ldi	r20, 0x7F	; 127
     68c:	53 e4       	ldi	r21, 0x43	; 67
     68e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     692:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     696:	68 bd       	out	0x28, r22	; 40
		d=-d;
		changeMotorDirectionLB();
	}
	changePwm_MotorLB(d);

	d = argv[1] >> 8;
     698:	f8 01       	movw	r30, r16
     69a:	83 81       	ldd	r24, Z+3	; 0x03
     69c:	d8 2e       	mov	r13, r24
	if (d < 0){
     69e:	88 23       	and	r24, r24
     6a0:	1c f4       	brge	.+6      	; 0x6a8 <move+0xc6>
		d=-d;
     6a2:	d1 94       	neg	r13
		changeMotorDirectionRF();
     6a4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <changeMotorDirectionRF>
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     6a8:	6d 2d       	mov	r22, r13
     6aa:	77 27       	eor	r23, r23
     6ac:	67 fd       	sbrc	r22, 7
     6ae:	70 95       	com	r23
     6b0:	87 2f       	mov	r24, r23
     6b2:	97 2f       	mov	r25, r23
     6b4:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	48 ec       	ldi	r20, 0xC8	; 200
     6be:	52 e4       	ldi	r21, 0x42	; 66
     6c0:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	4f e7       	ldi	r20, 0x7F	; 127
     6ca:	53 e4       	ldi	r21, 0x43	; 67
     6cc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     6d0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     6d4:	60 93 b3 00 	sts	0x00B3, r22
		d=-d;
		changeMotorDirectionRF();
	}
	changePwm_MotorRF(d);
	
	d = argv[1] & 0xff;
     6d8:	f8 01       	movw	r30, r16
     6da:	82 81       	ldd	r24, Z+2	; 0x02
     6dc:	18 2f       	mov	r17, r24
	
	if (d < 0){
     6de:	88 23       	and	r24, r24
     6e0:	1c f4       	brge	.+6      	; 0x6e8 <move+0x106>
		d=-d;
     6e2:	11 95       	neg	r17
		changeMotorDirectionRB();
     6e4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <changeMotorDirectionRB>
void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     6e8:	61 2f       	mov	r22, r17
     6ea:	77 27       	eor	r23, r23
     6ec:	67 fd       	sbrc	r22, 7
     6ee:	70 95       	com	r23
     6f0:	87 2f       	mov	r24, r23
     6f2:	97 2f       	mov	r25, r23
     6f4:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	48 ec       	ldi	r20, 0xC8	; 200
     6fe:	52 e4       	ldi	r21, 0x42	; 66
     700:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	4f e7       	ldi	r20, 0x7F	; 127
     70a:	53 e4       	ldi	r21, 0x43	; 67
     70c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     710:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     714:	60 93 b4 00 	sts	0x00B4, r22
     718:	20 c0       	rjmp	.+64     	; 0x75a <move+0x178>
	if (d < 0){
		d=-d;
		changeMotorDirectionRB();
	}	
	changePwm_MotorRB(d);
	}else if (argc == 3){
     71a:	03 97       	sbiw	r24, 0x03	; 3
     71c:	f1 f4       	brne	.+60     	; 0x75a <move+0x178>
		
	int16_t arg1[2];
	arg1[0] = argv[0];
     71e:	fb 01       	movw	r30, r22
     720:	80 81       	ld	r24, Z
     722:	91 81       	ldd	r25, Z+1	; 0x01
     724:	9e 83       	std	Y+6, r25	; 0x06
     726:	8d 83       	std	Y+5, r24	; 0x05
	arg1[1] = argv[1];
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	93 81       	ldd	r25, Z+3	; 0x03
     72c:	98 87       	std	Y+8, r25	; 0x08
     72e:	8f 83       	std	Y+7, r24	; 0x07
	
	int16_t arg2[] = {0, 0};
     730:	1a 82       	std	Y+2, r1	; 0x02
     732:	19 82       	std	Y+1, r1	; 0x01
     734:	1c 82       	std	Y+4, r1	; 0x04
     736:	1b 82       	std	Y+3, r1	; 0x03
	executeCommandForTime(&move, &move, 2, arg1,2, arg2,argv[2]);
     738:	c4 80       	ldd	r12, Z+4	; 0x04
     73a:	d5 80       	ldd	r13, Z+5	; 0x05
     73c:	ce 01       	movw	r24, r28
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	7c 01       	movw	r14, r24
     742:	02 e0       	ldi	r16, 0x02	; 2
     744:	10 e0       	ldi	r17, 0x00	; 0
     746:	9e 01       	movw	r18, r28
     748:	2b 5f       	subi	r18, 0xFB	; 251
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	42 e0       	ldi	r20, 0x02	; 2
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	61 ef       	ldi	r22, 0xF1	; 241
     752:	72 e0       	ldi	r23, 0x02	; 2
     754:	cb 01       	movw	r24, r22
     756:	0e 94 4b 0a 	call	0x1496	; 0x1496 <executeCommandForTime>
	
		
	}
	
}
     75a:	28 96       	adiw	r28, 0x08	; 8
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	08 95       	ret

00000778 <breakAll>:
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     778:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     77a:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     77c:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     780:	10 92 b4 00 	sts	0x00B4, r1
     784:	08 95       	ret

00000786 <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LF_DIR_DDR1 |= (1<<MOTOR_LF_DIR_PIN1x);
     786:	20 9a       	sbi	0x04, 0	; 4
	MOTOR_LF_DIR_DDR2 |= (1<<MOTOR_LF_DIR_PIN2x);
     788:	21 9a       	sbi	0x04, 1	; 4
	MOTOR_LB_DIR_DDR1 |= (1<<MOTOR_LB_DIR_PIN1x);
     78a:	22 9a       	sbi	0x04, 2	; 4
	MOTOR_LB_DIR_DDR2 |= (1<<MOTOR_LB_DIR_PIN1x);
     78c:	22 9a       	sbi	0x04, 2	; 4
	
	//setez directia initiala
	MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     78e:	29 9a       	sbi	0x05, 1	; 5
	MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     790:	28 98       	cbi	0x05, 0	; 5
	MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     792:	2d 9a       	sbi	0x05, 5	; 5
	MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     794:	2a 98       	cbi	0x05, 2	; 5
	
	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     796:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     798:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     79a:	84 b5       	in	r24, 0x24	; 36
     79c:	80 68       	ori	r24, 0x80	; 128
     79e:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     7a0:	84 b5       	in	r24, 0x24	; 36
     7a2:	8f 7b       	andi	r24, 0xBF	; 191
     7a4:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     7a6:	84 b5       	in	r24, 0x24	; 36
     7a8:	80 62       	ori	r24, 0x20	; 32
     7aa:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     7ac:	84 b5       	in	r24, 0x24	; 36
     7ae:	8f 7e       	andi	r24, 0xEF	; 239
     7b0:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     7b2:	84 b5       	in	r24, 0x24	; 36
     7b4:	83 60       	ori	r24, 0x03	; 3
     7b6:	84 bd       	out	0x24, r24	; 36
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     7b8:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     7ba:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
     7bc:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	85 bd       	out	0x25, r24	; 37
     7c2:	08 95       	ret

000007c4 <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RF_DIR_DDR1 |= (1<<MOTOR_RF_DIR_PIN1x);
     7c4:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RF_DIR_DDR2 |= (1<<MOTOR_RF_DIR_PIN2x);
     7c6:	3f 9a       	sbi	0x07, 7	; 7
	MOTOR_RB_DIR_DDR1 |= (1<<MOTOR_RB_DIR_PIN1x);
     7c8:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_RB_DIR_DDR2 |= (1<<MOTOR_RB_DIR_PIN2x);
     7ca:	39 9a       	sbi	0x07, 1	; 7
	
	//setez directia initiala
	MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     7cc:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     7ce:	46 98       	cbi	0x08, 6	; 8
	MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     7d0:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);	
     7d2:	40 98       	cbi	0x08, 0	; 8
	
	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     7d4:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     7d6:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     7d8:	e0 eb       	ldi	r30, 0xB0	; 176
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	80 68       	ori	r24, 0x80	; 128
     7e0:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     7e2:	80 81       	ld	r24, Z
     7e4:	8f 7b       	andi	r24, 0xBF	; 191
     7e6:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     7e8:	80 81       	ld	r24, Z
     7ea:	80 62       	ori	r24, 0x20	; 32
     7ec:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     7ee:	80 81       	ld	r24, Z
     7f0:	8f 7e       	andi	r24, 0xEF	; 239
     7f2:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     7f4:	80 81       	ld	r24, Z
     7f6:	83 60       	ori	r24, 0x03	; 3
     7f8:	80 83       	st	Z, r24
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     7fa:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     7fe:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
     802:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     806:	e1 eb       	ldi	r30, 0xB1	; 177
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	8c 7f       	andi	r24, 0xFC	; 252
     80e:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	80 83       	st	Z, r24
     816:	08 95       	ret

00000818 <getDistance>:
uint8_t getDistance(){
	
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX;j++)
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0


//Functia asta trebuie neaparat schimbata!!
uint8_t getDistance(){
	
	uint32_t avreage = 0;
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	cb 01       	movw	r24, r22
	
	int j;
	for (j=0;j<MAX;j++)
	{
		avreage += dis[j];
     822:	f9 01       	movw	r30, r18
     824:	ed 5b       	subi	r30, 0xBD	; 189
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	40 81       	ld	r20, Z
     82a:	64 0f       	add	r22, r20
     82c:	71 1d       	adc	r23, r1
     82e:	81 1d       	adc	r24, r1
     830:	91 1d       	adc	r25, r1
uint8_t getDistance(){
	
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX;j++)
     832:	2f 5f       	subi	r18, 0xFF	; 255
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	25 30       	cpi	r18, 0x05	; 5
     838:	31 05       	cpc	r19, r1
     83a:	99 f7       	brne	.-26     	; 0x822 <getDistance+0xa>
	{
		avreage += dis[j];
	}
	
	distance = avreage/MAX;
     83c:	25 e0       	ldi	r18, 0x05	; 5
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__udivmodsi4>
     848:	20 93 11 01 	sts	0x0111, r18
	
	return distance;
     84c:	80 91 11 01 	lds	r24, 0x0111
}
     850:	08 95       	ret

00000852 <getAverageUltrasonicValue>:

uint16_t getLastUltrasonicValue(){
	return UltraSonicValues[US_pos_in_buffer-1];//because it is always the next position
}

uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
     852:	cf 93       	push	r28
     854:	38 2f       	mov	r19, r24
     856:	81 31       	cpi	r24, 0x11	; 17
     858:	08 f0       	brcs	.+2      	; 0x85c <getAverageUltrasonicValue+0xa>
     85a:	30 e1       	ldi	r19, 0x10	; 16
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     85c:	33 23       	and	r19, r19
     85e:	a9 f1       	breq	.+106    	; 0x8ca <getAverageUltrasonicValue+0x78>
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     864:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	cb 01       	movw	r24, r22
     86c:	a0 e1       	ldi	r26, 0x10	; 16
     86e:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
	{
		uint16_t aux;
		if(US_pos_in_buffer-i >= 0){ 
     870:	e0 91 0d 01 	lds	r30, 0x010D
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	e4 1b       	sub	r30, r20
     878:	f5 0b       	sbc	r31, r21
     87a:	6a f0       	brmi	.+26     	; 0x896 <getAverageUltrasonicValue+0x44>
			aux = UltraSonicValues[US_pos_in_buffer-i];
     87c:	e0 91 0d 01 	lds	r30, 0x010D
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	e4 1b       	sub	r30, r20
     884:	f5 0b       	sbc	r31, r21
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	e1 5e       	subi	r30, 0xE1	; 225
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	01 90       	ld	r0, Z+
     890:	f0 81       	ld	r31, Z
     892:	e0 2d       	mov	r30, r0
     894:	0e c0       	rjmp	.+28     	; 0x8b2 <getAverageUltrasonicValue+0x60>
		}else{// rap around
			aux = UltraSonicValues[MAX_ULTRASONIC_VALUES - i + US_pos_in_buffer];
     896:	c0 91 0d 01 	lds	r28, 0x010D
     89a:	fd 01       	movw	r30, r26
     89c:	e4 1b       	sub	r30, r20
     89e:	f5 0b       	sbc	r31, r21
     8a0:	ec 0f       	add	r30, r28
     8a2:	f1 1d       	adc	r31, r1
     8a4:	ee 0f       	add	r30, r30
     8a6:	ff 1f       	adc	r31, r31
     8a8:	e1 5e       	subi	r30, 0xE1	; 225
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	01 90       	ld	r0, Z+
     8ae:	f0 81       	ld	r31, Z
     8b0:	e0 2d       	mov	r30, r0
		}
		
		averrage += aux;
     8b2:	6e 0f       	add	r22, r30
     8b4:	7f 1f       	adc	r23, r31
     8b6:	81 1d       	adc	r24, r1
     8b8:	91 1d       	adc	r25, r1
		
		if(aux){ // only if the value is nonzero
     8ba:	ef 2b       	or	r30, r31
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <getAverageUltrasonicValue+0x6e>
			good_vals++;
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	4f 5f       	subi	r20, 0xFF	; 255
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     8c4:	43 17       	cp	r20, r19
     8c6:	a0 f2       	brcs	.-88     	; 0x870 <getAverageUltrasonicValue+0x1e>
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <getAverageUltrasonicValue+0x80>
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     8ca:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	cb 01       	movw	r24, r22
			good_vals++;
		}
		
	}
	
	averrage /= good_vals; //it may be better to round it up to the nearest
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__udivmodsi4>
	
	return averrage;
}
     8dc:	c9 01       	movw	r24, r18
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	9c 01       	movw	r18, r24
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0;
     8ec:	fa 01       	movw	r30, r20
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	e1 5e       	subi	r30, 0xE1	; 225
     8f4:	fe 4f       	sbci	r31, 0xFE	; 254
     8f6:	11 82       	std	Z+1, r1	; 0x01
     8f8:	10 82       	st	Z, r1
     8fa:	4f 5f       	subi	r20, 0xFF	; 255
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     8fe:	40 31       	cpi	r20, 0x10	; 16
     900:	51 05       	cpc	r21, r1
     902:	a1 f7       	brne	.-24     	; 0x8ec <initUSART0+0xa>
		UltraSonicValues[i] = 0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     904:	10 92 3f 01 	sts	0x013F, r1
     908:	10 92 40 01 	sts	0x0140, r1
     90c:	10 92 41 01 	sts	0x0141, r1
     910:	10 92 42 01 	sts	0x0142, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     914:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     916:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     918:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     91a:	c2 ec       	ldi	r28, 0xC2	; 194
     91c:	d0 e0       	ldi	r29, 0x00	; 0
     91e:	88 81       	ld	r24, Y
     920:	8f 73       	andi	r24, 0x3F	; 63
     922:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     924:	e0 ec       	ldi	r30, 0xC0	; 192
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	8d 7f       	andi	r24, 0xFD	; 253
     92c:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     92e:	c9 01       	movw	r24, r18
     930:	aa 27       	eor	r26, r26
     932:	97 fd       	sbrc	r25, 7
     934:	a0 95       	com	r26
     936:	ba 2f       	mov	r27, r26
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	aa 1f       	adc	r26, r26
     93e:	bb 1f       	adc	r27, r27
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	aa 1f       	adc	r26, r26
     946:	bb 1f       	adc	r27, r27
     948:	9c 01       	movw	r18, r24
     94a:	ad 01       	movw	r20, r26
     94c:	22 0f       	add	r18, r18
     94e:	33 1f       	adc	r19, r19
     950:	44 1f       	adc	r20, r20
     952:	55 1f       	adc	r21, r21
     954:	22 0f       	add	r18, r18
     956:	33 1f       	adc	r19, r19
     958:	44 1f       	adc	r20, r20
     95a:	55 1f       	adc	r21, r21
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	72 e1       	ldi	r23, 0x12	; 18
     960:	8a e7       	ldi	r24, 0x7A	; 122
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__divmodsi4>
     968:	ca 01       	movw	r24, r20
     96a:	b9 01       	movw	r22, r18
     96c:	61 50       	subi	r22, 0x01	; 1
     96e:	71 09       	sbc	r23, r1
     970:	81 09       	sbc	r24, r1
     972:	91 09       	sbc	r25, r1
     974:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     978:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     97c:	27 2f       	mov	r18, r23
     97e:	33 27       	eor	r19, r19
     980:	27 fd       	sbrc	r18, 7
     982:	3a 95       	dec	r19
     984:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     988:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     98c:	e1 ec       	ldi	r30, 0xC1	; 193
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 e1       	ldi	r24, 0x10	; 16
     992:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     994:	88 81       	ld	r24, Y
     996:	86 60       	ori	r24, 0x06	; 6
     998:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     99a:	80 81       	ld	r24, Z
     99c:	8b 7f       	andi	r24, 0xFB	; 251
     99e:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     9a0:	88 81       	ld	r24, Y
     9a2:	87 7f       	andi	r24, 0xF7	; 247
     9a4:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     9a6:	88 81       	ld	r24, Y
     9a8:	8f 7c       	andi	r24, 0xCF	; 207
     9aa:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     9ac:	80 81       	ld	r24, Z
     9ae:	80 68       	ori	r24, 0x80	; 128
     9b0:	80 83       	st	Z, r24
	
		
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <initADC>:

void  initADC(void)
{

	//set Vref to Vcc
	ADMUX |= (1<<REFS0);
     9b8:	ec e7       	ldi	r30, 0x7C	; 124
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	80 64       	ori	r24, 0x40	; 64
     9c0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     9c2:	80 81       	ld	r24, Z
     9c4:	8f 77       	andi	r24, 0x7F	; 127
     9c6:	80 83       	st	Z, r24
	
	//select ADC0
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     9c8:	80 81       	ld	r24, Z
     9ca:	80 7e       	andi	r24, 0xE0	; 224
     9cc:	80 83       	st	Z, r24

	//enable the ADC
	ADCSRA |= (1<<ADEN);
     9ce:	ea e7       	ldi	r30, 0x7A	; 122
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	80 68       	ori	r24, 0x80	; 128
     9d6:	80 83       	st	Z, r24
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     9d8:	80 81       	ld	r24, Z
     9da:	88 60       	ori	r24, 0x08	; 8
     9dc:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     9de:	80 81       	ld	r24, Z
     9e0:	87 60       	ori	r24, 0x07	; 7
     9e2:	80 83       	st	Z, r24
	//select free running mode
	//ADCSRB &= ~( (1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2) );


	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC0D) | (1<<ADC1D) | (1<<ADC2D) | (1<<ADC3D) ;
     9e4:	ae e7       	ldi	r26, 0x7E	; 126
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	8c 91       	ld	r24, X
     9ea:	8f 60       	ori	r24, 0x0F	; 15
     9ec:	8c 93       	st	X, r24


	//start conversion
	ADCSRA |= (1<<ADSC);
     9ee:	80 81       	ld	r24, Z
     9f0:	80 64       	ori	r24, 0x40	; 64
     9f2:	80 83       	st	Z, r24
     9f4:	08 95       	ret

000009f6 <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     9f6:	08 98       	cbi	0x01, 0	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     9f8:	09 98       	cbi	0x01, 1	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     9fa:	0a 98       	cbi	0x01, 2	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     9fc:	0b 98       	cbi	0x01, 3	; 1
	
	initADC();
     9fe:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <initADC>
	initUSART0(9600);
     a02:	80 e8       	ldi	r24, 0x80	; 128
     a04:	95 e2       	ldi	r25, 0x25	; 37
     a06:	0e 94 71 04 	call	0x8e2	; 0x8e2 <initUSART0>
     a0a:	08 95       	ret

00000a0c <__vector_24>:
	//start conversion
	ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     a32:	40 91 78 00 	lds	r20, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     a36:	80 91 79 00 	lds	r24, 0x0079
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	58 2b       	or	r21, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     a3e:	40 31       	cpi	r20, 0x10	; 16
     a40:	51 05       	cpc	r21, r1
     a42:	10 f4       	brcc	.+4      	; 0xa48 <__vector_24+0x3c>
     a44:	40 e1       	ldi	r20, 0x10	; 16
     a46:	50 e0       	ldi	r21, 0x00	; 0
		distance = 30.0;
	}
	*/
	
		
		dis[iter%MAX] = floor((2076.0 / (theTenBitResult - 11.0)) + 0.5);
     a48:	e0 91 12 01 	lds	r30, 0x0112
     a4c:	f0 91 13 01 	lds	r31, 0x0113
     a50:	9f 01       	movw	r18, r30
     a52:	ad ec       	ldi	r26, 0xCD	; 205
     a54:	bc ec       	ldi	r27, 0xCC	; 204
     a56:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__umulhisi3>
     a5a:	ec 01       	movw	r28, r24
     a5c:	d6 95       	lsr	r29
     a5e:	c7 95       	ror	r28
     a60:	d6 95       	lsr	r29
     a62:	c7 95       	ror	r28
     a64:	ce 01       	movw	r24, r28
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	c8 0f       	add	r28, r24
     a70:	d9 1f       	adc	r29, r25
     a72:	2c 1b       	sub	r18, r28
     a74:	3d 0b       	sbc	r19, r29
     a76:	e9 01       	movw	r28, r18
     a78:	ba 01       	movw	r22, r20
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__floatunsisf>
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e3       	ldi	r20, 0x30	; 48
     a88:	51 e4       	ldi	r21, 0x41	; 65
     a8a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__subsf3>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 ec       	ldi	r23, 0xC0	; 192
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	95 e4       	ldi	r25, 0x45	; 69
     a9a:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	5f e3       	ldi	r21, 0x3F	; 63
     aa6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__addsf3>
     aaa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <floor>
     aae:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
     ab2:	cd 5b       	subi	r28, 0xBD	; 189
     ab4:	de 4f       	sbci	r29, 0xFE	; 254
     ab6:	68 83       	st	Y, r22
		
		//under lower limit
		if (dis[iter%MAX] < 4)
     ab8:	40 91 12 01 	lds	r20, 0x0112
     abc:	50 91 13 01 	lds	r21, 0x0113
     ac0:	9a 01       	movw	r18, r20
     ac2:	ad ec       	ldi	r26, 0xCD	; 205
     ac4:	bc ec       	ldi	r27, 0xCC	; 204
     ac6:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__umulhisi3>
     aca:	96 95       	lsr	r25
     acc:	87 95       	ror	r24
     ace:	96 95       	lsr	r25
     ad0:	87 95       	ror	r24
     ad2:	9c 01       	movw	r18, r24
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
     ad8:	22 0f       	add	r18, r18
     ada:	33 1f       	adc	r19, r19
     adc:	82 0f       	add	r24, r18
     ade:	93 1f       	adc	r25, r19
     ae0:	9a 01       	movw	r18, r20
     ae2:	28 1b       	sub	r18, r24
     ae4:	39 0b       	sbc	r19, r25
     ae6:	f9 01       	movw	r30, r18
     ae8:	ed 5b       	subi	r30, 0xBD	; 189
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	80 81       	ld	r24, Z
     aee:	84 30       	cpi	r24, 0x04	; 4
     af0:	d0 f4       	brcc	.+52     	; 0xb26 <__vector_24+0x11a>
		{
			dis[iter%MAX] = 4;
     af2:	40 91 12 01 	lds	r20, 0x0112
     af6:	50 91 13 01 	lds	r21, 0x0113
     afa:	9a 01       	movw	r18, r20
     afc:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__umulhisi3>
     b00:	96 95       	lsr	r25
     b02:	87 95       	ror	r24
     b04:	96 95       	lsr	r25
     b06:	87 95       	ror	r24
     b08:	9c 01       	movw	r18, r24
     b0a:	22 0f       	add	r18, r18
     b0c:	33 1f       	adc	r19, r19
     b0e:	22 0f       	add	r18, r18
     b10:	33 1f       	adc	r19, r19
     b12:	82 0f       	add	r24, r18
     b14:	93 1f       	adc	r25, r19
     b16:	9a 01       	movw	r18, r20
     b18:	28 1b       	sub	r18, r24
     b1a:	39 0b       	sbc	r19, r25
     b1c:	f9 01       	movw	r30, r18
     b1e:	ed 5b       	subi	r30, 0xBD	; 189
     b20:	fe 4f       	sbci	r31, 0xFE	; 254
     b22:	24 e0       	ldi	r18, 0x04	; 4
     b24:	20 83       	st	Z, r18
		}
		
		//above upper limit
		if (dis[iter%MAX] > 30)
     b26:	40 91 12 01 	lds	r20, 0x0112
     b2a:	50 91 13 01 	lds	r21, 0x0113
     b2e:	9a 01       	movw	r18, r20
     b30:	ad ec       	ldi	r26, 0xCD	; 205
     b32:	bc ec       	ldi	r27, 0xCC	; 204
     b34:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__umulhisi3>
     b38:	96 95       	lsr	r25
     b3a:	87 95       	ror	r24
     b3c:	96 95       	lsr	r25
     b3e:	87 95       	ror	r24
     b40:	9c 01       	movw	r18, r24
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	22 0f       	add	r18, r18
     b48:	33 1f       	adc	r19, r19
     b4a:	82 0f       	add	r24, r18
     b4c:	93 1f       	adc	r25, r19
     b4e:	9a 01       	movw	r18, r20
     b50:	28 1b       	sub	r18, r24
     b52:	39 0b       	sbc	r19, r25
     b54:	f9 01       	movw	r30, r18
     b56:	ed 5b       	subi	r30, 0xBD	; 189
     b58:	fe 4f       	sbci	r31, 0xFE	; 254
     b5a:	80 81       	ld	r24, Z
     b5c:	8f 31       	cpi	r24, 0x1F	; 31
     b5e:	d0 f0       	brcs	.+52     	; 0xb94 <__vector_24+0x188>
		{
			
			dis[iter%MAX] = 30;
     b60:	40 91 12 01 	lds	r20, 0x0112
     b64:	50 91 13 01 	lds	r21, 0x0113
     b68:	9a 01       	movw	r18, r20
     b6a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__umulhisi3>
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	9c 01       	movw	r18, r24
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	82 0f       	add	r24, r18
     b82:	93 1f       	adc	r25, r19
     b84:	9a 01       	movw	r18, r20
     b86:	28 1b       	sub	r18, r24
     b88:	39 0b       	sbc	r19, r25
     b8a:	f9 01       	movw	r30, r18
     b8c:	ed 5b       	subi	r30, 0xBD	; 189
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	2e e1       	ldi	r18, 0x1E	; 30
     b92:	20 83       	st	Z, r18
		}
	
	
	iter++;
     b94:	80 91 12 01 	lds	r24, 0x0112
     b98:	90 91 13 01 	lds	r25, 0x0113
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	90 93 13 01 	sts	0x0113, r25
     ba2:	80 93 12 01 	sts	0x0112, r24
	ADCSRA |= 1<<ADSC;
     ba6:	ea e7       	ldi	r30, 0x7A	; 122
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	80 83       	st	Z, r24
}
     bb0:	ff 91       	pop	r31
     bb2:	ef 91       	pop	r30
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <__vector_20>:

ISR(USART0_RX_vect){
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	4f 92       	push	r4
     be2:	5f 92       	push	r5
     be4:	7f 92       	push	r7
     be6:	8f 92       	push	r8
     be8:	9f 92       	push	r9
     bea:	af 92       	push	r10
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	1f 93       	push	r17
     bf6:	2f 93       	push	r18
     bf8:	3f 93       	push	r19
     bfa:	4f 93       	push	r20
     bfc:	5f 93       	push	r21
     bfe:	6f 93       	push	r22
     c00:	7f 93       	push	r23
     c02:	8f 93       	push	r24
     c04:	9f 93       	push	r25
     c06:	af 93       	push	r26
     c08:	bf 93       	push	r27
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ef 93       	push	r30
     c10:	ff 93       	push	r31


	uint8_t data;
	data = UDR0;
     c12:	10 91 c6 00 	lds	r17, 0x00C6
	
	if(data == 0x52){ //start of data
     c16:	12 35       	cpi	r17, 0x52	; 82
     c18:	39 f4       	brne	.+14     	; 0xc28 <__vector_20+0x52>
		ultrasonicDataPack[0] = 'R';
     c1a:	82 e5       	ldi	r24, 0x52	; 82
     c1c:	80 93 3f 01 	sts	0x013F, r24
		US_data_part_no=1;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 0e 01 	sts	0x010E, r24
     c26:	a5 c0       	rjmp	.+330    	; 0xd72 <__vector_20+0x19c>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     c28:	80 91 3f 01 	lds	r24, 0x013F
     c2c:	82 35       	cpi	r24, 0x52	; 82
     c2e:	09 f0       	breq	.+2      	; 0xc32 <__vector_20+0x5c>
     c30:	7c c0       	rjmp	.+248    	; 0xd2a <__vector_20+0x154>
     c32:	80 91 0e 01 	lds	r24, 0x010E
     c36:	84 30       	cpi	r24, 0x04	; 4
     c38:	09 f0       	breq	.+2      	; 0xc3c <__vector_20+0x66>
     c3a:	77 c0       	rjmp	.+238    	; 0xd2a <__vector_20+0x154>
     c3c:	1d 30       	cpi	r17, 0x0D	; 13
     c3e:	09 f0       	breq	.+2      	; 0xc42 <__vector_20+0x6c>
     c40:	74 c0       	rjmp	.+232    	; 0xd2a <__vector_20+0x154>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     c42:	0f 2e       	mov	r0, r31
     c44:	f0 e4       	ldi	r31, 0x40	; 64
     c46:	ef 2e       	mov	r14, r31
     c48:	f1 e0       	ldi	r31, 0x01	; 1
     c4a:	ff 2e       	mov	r15, r31
     c4c:	f0 2d       	mov	r31, r0
     c4e:	f7 01       	movw	r30, r14
     c50:	60 81       	ld	r22, Z
     c52:	0f 2e       	mov	r0, r31
     c54:	f1 e4       	ldi	r31, 0x41	; 65
     c56:	4f 2e       	mov	r4, r31
     c58:	f1 e0       	ldi	r31, 0x01	; 1
     c5a:	5f 2e       	mov	r5, r31
     c5c:	f0 2d       	mov	r31, r0
     c5e:	f2 01       	movw	r30, r4
     c60:	70 80       	ld	r7, Z
     c62:	c2 e4       	ldi	r28, 0x42	; 66
     c64:	d1 e0       	ldi	r29, 0x01	; 1
     c66:	c8 80       	ld	r12, Y
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	48 ec       	ldi	r20, 0xC8	; 200
     c78:	52 e4       	ldi	r21, 0x42	; 66
     c7a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     c7e:	4b 01       	movw	r8, r22
     c80:	5c 01       	movw	r10, r24
     c82:	67 2d       	mov	r22, r7
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e2       	ldi	r20, 0x20	; 32
     c94:	51 e4       	ldi	r21, 0x41	; 65
     c96:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	c5 01       	movw	r24, r10
     ca0:	b4 01       	movw	r22, r8
     ca2:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__addsf3>
     ca6:	4b 01       	movw	r8, r22
     ca8:	5c 01       	movw	r10, r24
     caa:	6c 2d       	mov	r22, r12
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	c5 01       	movw	r24, r10
     cbc:	b4 01       	movw	r22, r8
     cbe:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__addsf3>
			//transform from inch to mm
			val *= 25.4;
     cc2:	23 e3       	ldi	r18, 0x33	; 51
     cc4:	33 e3       	ldi	r19, 0x33	; 51
     cc6:	4b ec       	ldi	r20, 0xCB	; 203
     cc8:	51 e4       	ldi	r21, 0x41	; 65
     cca:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__mulsf3>
			uint16_t mm = floor(val+0.5); // round to the nearest
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__addsf3>
     cda:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <floor>
     cde:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fixunssfsi>
			UltraSonicValues[US_pos_in_buffer] = mm; 
     ce2:	e0 91 0d 01 	lds	r30, 0x010D
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	e1 5e       	subi	r30, 0xE1	; 225
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	71 83       	std	Z+1, r23	; 0x01
     cf2:	60 83       	st	Z, r22
			lastUSonicValue = mm;
     cf4:	70 93 10 01 	sts	0x0110, r23
     cf8:	60 93 0f 01 	sts	0x010F, r22
			US_pos_in_buffer++;
     cfc:	80 91 0d 01 	lds	r24, 0x010D
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	80 93 0d 01 	sts	0x010D, r24

			US_pos_in_buffer &= MAX_ULTRASONIC_VALUES_MSK;
     d06:	80 91 0d 01 	lds	r24, 0x010D
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	80 93 0d 01 	sts	0x010D, r24
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     d10:	10 92 3f 01 	sts	0x013F, r1
     d14:	f7 01       	movw	r30, r14
     d16:	10 82       	st	Z, r1
     d18:	f2 01       	movw	r30, r4
     d1a:	10 82       	st	Z, r1
     d1c:	18 82       	st	Y, r1
				}
				US_data_part_no=0;
     d1e:	10 92 0e 01 	sts	0x010E, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     d22:	80 91 0c 01 	lds	r24, 0x010C
     d26:	81 11       	cpse	r24, r1
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     d28:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     d2a:	80 91 0e 01 	lds	r24, 0x010E
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	50 f0       	brcs	.+20     	; 0xd46 <__vector_20+0x170>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     d32:	10 92 3f 01 	sts	0x013F, r1
     d36:	10 92 40 01 	sts	0x0140, r1
     d3a:	10 92 41 01 	sts	0x0141, r1
     d3e:	10 92 42 01 	sts	0x0142, r1
			}
			US_data_part_no=0;
     d42:	10 92 0e 01 	sts	0x010E, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     d46:	80 91 3f 01 	lds	r24, 0x013F
     d4a:	82 35       	cpi	r24, 0x52	; 82
     d4c:	91 f4       	brne	.+36     	; 0xd72 <__vector_20+0x19c>
			if (isdigit(data))
     d4e:	81 2f       	mov	r24, r17
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	c0 97       	sbiw	r24, 0x30	; 48
     d54:	0a 97       	sbiw	r24, 0x0a	; 10
     d56:	68 f4       	brcc	.+26     	; 0xd72 <__vector_20+0x19c>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     d58:	e0 91 0e 01 	lds	r30, 0x010E
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 ed       	ldi	r24, 0xD0	; 208
     d60:	81 0f       	add	r24, r17
     d62:	e1 5c       	subi	r30, 0xC1	; 193
     d64:	fe 4f       	sbci	r31, 0xFE	; 254
     d66:	80 83       	st	Z, r24
				US_data_part_no++;
     d68:	80 91 0e 01 	lds	r24, 0x010E
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	80 93 0e 01 	sts	0x010E, r24
			
		}
				
	}

}
     d72:	ff 91       	pop	r31
     d74:	ef 91       	pop	r30
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	1f 91       	pop	r17
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	cf 90       	pop	r12
     d96:	bf 90       	pop	r11
     d98:	af 90       	pop	r10
     d9a:	9f 90       	pop	r9
     d9c:	8f 90       	pop	r8
     d9e:	7f 90       	pop	r7
     da0:	5f 90       	pop	r5
     da2:	4f 90       	pop	r4
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <checkPackIsFullLength>:
}

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
     dae:	28 2f       	mov	r18, r24
     db0:	2f 77       	andi	r18, 0x7F	; 127
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	f9 01       	movw	r30, r18
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	e8 5b       	subi	r30, 0xB8	; 184
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	9f 3f       	cpi	r25, 0xFF	; 255
     dc2:	b1 f1       	breq	.+108    	; 0xe30 <checkPackIsFullLength+0x82>
		return 0;
	}else{
		pc_no = rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no;
     dc4:	f9 01       	movw	r30, r18
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	e8 5b       	subi	r30, 0xB8	; 184
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	61 81       	ldd	r22, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	41 81       	ldd	r20, Z+1	; 0x01
     dd4:	4f 3f       	cpi	r20, 0xFF	; 255
     dd6:	71 f1       	breq	.+92     	; 0xe34 <checkPackIsFullLength+0x86>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     dd8:	f9 01       	movw	r30, r18
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	e8 5b       	subi	r30, 0xB8	; 184
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	41 81       	ldd	r20, Z+1	; 0x01
     de4:	55 27       	eor	r21, r21
     de6:	47 fd       	sbrc	r20, 7
     de8:	50 95       	com	r21
     dea:	26 2f       	mov	r18, r22
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	42 17       	cp	r20, r18
     df0:	53 07       	cpc	r21, r19
     df2:	11 f5       	brne	.+68     	; 0xe38 <checkPackIsFullLength+0x8a>
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	66 e0       	ldi	r22, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
     df8:	9c 01       	movw	r18, r24
     dfa:	2f 77       	andi	r18, 0x7F	; 127
     dfc:	33 27       	eor	r19, r19
     dfe:	f9 01       	movw	r30, r18
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	e8 5b       	subi	r30, 0xB8	; 184
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	7f 3f       	cpi	r23, 0xFF	; 255
     e0c:	b9 f0       	breq	.+46     	; 0xe3c <checkPackIsFullLength+0x8e>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     e0e:	f9 01       	movw	r30, r18
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	e8 5b       	subi	r30, 0xB8	; 184
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	21 81       	ldd	r18, Z+1	; 0x01
     e1a:	33 27       	eor	r19, r19
     e1c:	27 fd       	sbrc	r18, 7
     e1e:	30 95       	com	r19
     e20:	24 17       	cp	r18, r20
     e22:	35 07       	cpc	r19, r21
     e24:	69 f4       	brne	.+26     	; 0xe40 <checkPackIsFullLength+0x92>
     e26:	61 50       	subi	r22, 0x01	; 1
     e28:	01 96       	adiw	r24, 0x01	; 1
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     e2a:	61 11       	cpse	r22, r1
     e2c:	e5 cf       	rjmp	.-54     	; 0xdf8 <checkPackIsFullLength+0x4a>
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <checkPackIsFullLength+0x96>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
		return 0;
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	08 95       	ret
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
			return 0;
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	08 95       	ret
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	08 95       	ret
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	08 95       	ret
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 95       	ret
		}
	}
	return 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
}
     e46:	08 95       	ret

00000e48 <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	27 97       	sbiw	r28, 0x07	; 7
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
	
	
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
     e68:	e0 91 16 01 	lds	r30, 0x0116
     e6c:	ef 77       	andi	r30, 0x7F	; 127
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	e8 5b       	subi	r30, 0xB8	; 184
     e76:	fe 4f       	sbci	r31, 0xFE	; 254
     e78:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
     e7a:	e0 91 16 01 	lds	r30, 0x0116
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	31 96       	adiw	r30, 0x01	; 1
     e82:	ef 77       	andi	r30, 0x7F	; 127
     e84:	ff 27       	eor	r31, r31
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	e8 5b       	subi	r30, 0xB8	; 184
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	30 81       	ld	r19, Z
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
     e90:	e0 91 16 01 	lds	r30, 0x0116
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	32 96       	adiw	r30, 0x02	; 2
     e98:	ef 77       	andi	r30, 0x7F	; 127
     e9a:	ff 27       	eor	r31, r31
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	e8 5b       	subi	r30, 0xB8	; 184
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	40 81       	ld	r20, Z
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     ea6:	e0 91 16 01 	lds	r30, 0x0116
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	33 96       	adiw	r30, 0x03	; 3
     eae:	ef 77       	andi	r30, 0x7F	; 127
     eb0:	ff 27       	eor	r31, r31
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	e8 5b       	subi	r30, 0xB8	; 184
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	80 81       	ld	r24, Z
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     ebc:	e0 91 16 01 	lds	r30, 0x0116
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	34 96       	adiw	r30, 0x04	; 4
     ec4:	ef 77       	andi	r30, 0x7F	; 127
     ec6:	ff 27       	eor	r31, r31
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	e8 5b       	subi	r30, 0xB8	; 184
     ece:	fe 4f       	sbci	r31, 0xFE	; 254
     ed0:	e0 80       	ld	r14, Z
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     ed2:	f1 2c       	mov	r15, r1
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     ed4:	f8 2a       	or	r15, r24
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     ed6:	e0 91 16 01 	lds	r30, 0x0116
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	35 96       	adiw	r30, 0x05	; 5
     ede:	ef 77       	andi	r30, 0x7F	; 127
     ee0:	ff 27       	eor	r31, r31
     ee2:	ee 0f       	add	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	e8 5b       	subi	r30, 0xB8	; 184
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	80 81       	ld	r24, Z
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     eec:	e0 91 16 01 	lds	r30, 0x0116
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	36 96       	adiw	r30, 0x06	; 6
     ef4:	ef 77       	andi	r30, 0x7F	; 127
     ef6:	ff 27       	eor	r31, r31
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
     efc:	e8 5b       	subi	r30, 0xB8	; 184
     efe:	fe 4f       	sbci	r31, 0xFE	; 254
     f00:	00 81       	ld	r16, Z
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     f02:	10 e0       	ldi	r17, 0x00	; 0
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     f04:	18 2b       	or	r17, r24
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
	//sendResponse( rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data);
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
     f0a:	ef ef       	ldi	r30, 0xFF	; 255
     f0c:	ff ef       	ldi	r31, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     f0e:	5f ef       	ldi	r21, 0xFF	; 255

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
     f10:	a0 91 16 01 	lds	r26, 0x0116
     f14:	6c 01       	movw	r12, r24
     f16:	ca 0e       	add	r12, r26
     f18:	d1 1c       	adc	r13, r1
     f1a:	d6 01       	movw	r26, r12
     f1c:	af 77       	andi	r26, 0x7F	; 127
     f1e:	bb 27       	eor	r27, r27
     f20:	aa 0f       	add	r26, r26
     f22:	bb 1f       	adc	r27, r27
     f24:	a8 5b       	subi	r26, 0xB8	; 184
     f26:	be 4f       	sbci	r27, 0xFE	; 254
     f28:	ac 91       	ld	r26, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     f2a:	ea 27       	eor	r30, r26
     f2c:	ae 2f       	mov	r26, r30
     f2e:	a2 95       	swap	r26
     f30:	ae 27       	eor	r26, r30
     f32:	0a 2e       	mov	r0, r26
     f34:	a6 95       	lsr	r26
     f36:	a6 95       	lsr	r26
     f38:	a0 25       	eor	r26, r0
     f3a:	0a 2e       	mov	r0, r26
     f3c:	a6 95       	lsr	r26
     f3e:	a0 25       	eor	r26, r0
     f40:	a7 70       	andi	r26, 0x07	; 7
     f42:	0e 2e       	mov	r0, r30
     f44:	ef 2f       	mov	r30, r31
     f46:	a6 95       	lsr	r26
     f48:	07 94       	ror	r0
     f4a:	a7 95       	ror	r26
     f4c:	f0 2d       	mov	r31, r0
     f4e:	ea 27       	eor	r30, r26
     f50:	06 94       	lsr	r0
     f52:	a7 95       	ror	r26
     f54:	f0 25       	eor	r31, r0
     f56:	ea 27       	eor	r30, r26
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     f58:	a0 91 16 01 	lds	r26, 0x0116
     f5c:	6c 01       	movw	r12, r24
     f5e:	ca 0e       	add	r12, r26
     f60:	d1 1c       	adc	r13, r1
     f62:	d6 01       	movw	r26, r12
     f64:	af 77       	andi	r26, 0x7F	; 127
     f66:	bb 27       	eor	r27, r27
     f68:	aa 0f       	add	r26, r26
     f6a:	bb 1f       	adc	r27, r27
     f6c:	a8 5b       	subi	r26, 0xB8	; 184
     f6e:	be 4f       	sbci	r27, 0xFE	; 254
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	5c 93       	st	X, r21
     f74:	01 96       	adiw	r24, 0x01	; 1
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     f76:	87 30       	cpi	r24, 0x07	; 7
     f78:	91 05       	cpc	r25, r1
     f7a:	09 f0       	breq	.+2      	; 0xf7e <fetchCommand+0x136>
     f7c:	c9 cf       	rjmp	.-110    	; 0xf10 <fetchCommand+0xc8>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
	}
	
	if (crc == 0){
     f7e:	ef 2b       	or	r30, r31
     f80:	21 f4       	brne	.+8      	; 0xf8a <fetchCommand+0x142>
		*CRC_correct = 1;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	fb 01       	movw	r30, r22
     f86:	80 83       	st	Z, r24
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <fetchCommand+0x146>
		}else{
		*CRC_correct = 0;
     f8a:	fb 01       	movw	r30, r22
     f8c:	10 82       	st	Z, r1
	}
	
	return comm;
     f8e:	fd 82       	std	Y+5, r15	; 0x05
     f90:	ec 82       	std	Y+4, r14	; 0x04
     f92:	1f 83       	std	Y+7, r17	; 0x07
     f94:	0e 83       	std	Y+6, r16	; 0x06
     f96:	5e 2d       	mov	r21, r14
     f98:	6d 81       	ldd	r22, Y+5	; 0x05
     f9a:	70 2f       	mov	r23, r16
}
     f9c:	8f 81       	ldd	r24, Y+7	; 0x07
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	27 96       	adiw	r28, 0x07	; 7
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	08 95       	ret

00000fbe <__clearBuffers>:
	}
	
}

void __clearBuffers(){
		for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
			rxBuffer[i].pack_no =-1;
     fc2:	2f ef       	ldi	r18, 0xFF	; 255
     fc4:	fc 01       	movw	r30, r24
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	df 01       	movw	r26, r30
     fcc:	a8 5b       	subi	r26, 0xB8	; 184
     fce:	be 4f       	sbci	r27, 0xFE	; 254
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	2c 93       	st	X, r18
			txBuffer[i].pack_no =-1;
     fd4:	e8 5b       	subi	r30, 0xB8	; 184
     fd6:	fd 4f       	sbci	r31, 0xFD	; 253
     fd8:	21 83       	std	Z+1, r18	; 0x01
			txBuffer[i].data =0;
     fda:	10 82       	st	Z, r1
	}
	
}

void __clearBuffers(){
		for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	80 38       	cpi	r24, 0x80	; 128
     fe0:	91 05       	cpc	r25, r1
     fe2:	81 f7       	brne	.-32     	; 0xfc4 <__clearBuffers+0x6>
			rxBuffer[i].pack_no =-1;
			txBuffer[i].pack_no =-1;
			txBuffer[i].data =0;
		}
		txWritePos = 0;
     fe4:	10 92 14 01 	sts	0x0114, r1
		txReadPos = 0;
     fe8:	10 92 15 01 	sts	0x0115, r1
		rxReadPos = 0;
     fec:	10 92 1a 01 	sts	0x011A, r1
		rxWritePos = 0;
     ff0:	10 92 19 01 	sts	0x0119, r1
     ff4:	08 95       	ret

00000ff6 <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	8c 01       	movw	r16, r24
		
		///TEST////
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}*/
	__clearBuffers();
    1000:	0e 94 df 07 	call	0xfbe	; 0xfbe <__clearBuffers>
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
    1004:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
    1006:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
    1008:	ca ec       	ldi	r28, 0xCA	; 202
    100a:	d0 e0       	ldi	r29, 0x00	; 0
    100c:	88 81       	ld	r24, Y
    100e:	8f 73       	andi	r24, 0x3F	; 63
    1010:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
    1012:	e8 ec       	ldi	r30, 0xC8	; 200
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8d 7f       	andi	r24, 0xFD	; 253
    101a:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
    101c:	c8 01       	movw	r24, r16
    101e:	aa 27       	eor	r26, r26
    1020:	97 fd       	sbrc	r25, 7
    1022:	a0 95       	com	r26
    1024:	ba 2f       	mov	r27, r26
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	aa 1f       	adc	r26, r26
    102c:	bb 1f       	adc	r27, r27
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	aa 1f       	adc	r26, r26
    1034:	bb 1f       	adc	r27, r27
    1036:	9c 01       	movw	r18, r24
    1038:	ad 01       	movw	r20, r26
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	44 1f       	adc	r20, r20
    1040:	55 1f       	adc	r21, r21
    1042:	22 0f       	add	r18, r18
    1044:	33 1f       	adc	r19, r19
    1046:	44 1f       	adc	r20, r20
    1048:	55 1f       	adc	r21, r21
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	72 e1       	ldi	r23, 0x12	; 18
    104e:	8a e7       	ldi	r24, 0x7A	; 122
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__divmodsi4>
    1056:	ca 01       	movw	r24, r20
    1058:	b9 01       	movw	r22, r18
    105a:	61 50       	subi	r22, 0x01	; 1
    105c:	71 09       	sbc	r23, r1
    105e:	81 09       	sbc	r24, r1
    1060:	91 09       	sbc	r25, r1
    1062:	0e 94 25 0c 	call	0x184a	; 0x184a <__floatsisf>
    1066:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
    106a:	27 2f       	mov	r18, r23
    106c:	33 27       	eor	r19, r19
    106e:	27 fd       	sbrc	r18, 7
    1070:	3a 95       	dec	r19
    1072:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
    1076:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    107a:	e9 ec       	ldi	r30, 0xC9	; 201
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	88 e1       	ldi	r24, 0x18	; 24
    1080:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
    1082:	88 81       	ld	r24, Y
    1084:	86 60       	ori	r24, 0x06	; 6
    1086:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
    1088:	80 81       	ld	r24, Z
    108a:	8b 7f       	andi	r24, 0xFB	; 251
    108c:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
    108e:	88 81       	ld	r24, Y
    1090:	87 7f       	andi	r24, 0xF7	; 247
    1092:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
    1094:	88 81       	ld	r24, Y
    1096:	8f 7c       	andi	r24, 0xCF	; 207
    1098:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
    109a:	80 81       	ld	r24, Z
    109c:	80 68       	ori	r24, 0x80	; 128
    109e:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
    10a0:	80 81       	ld	r24, Z
    10a2:	80 64       	ori	r24, 0x40	; 64
    10a4:	80 83       	st	Z, r24
	
}
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	08 95       	ret

000010b0 <__tryToSend>:
	
}

//this is used to send data so that USART1_TX_vect can be triggered
void __tryToSend(){ 
	if (UCSR1A & (1<<UDRE1)) //if data register is empty send a byte
    10b0:	80 91 c8 00 	lds	r24, 0x00C8
    10b4:	85 ff       	sbrs	r24, 5
    10b6:	31 c0       	rjmp	.+98     	; 0x111a <__tryToSend+0x6a>
	{
		cli();
    10b8:	f8 94       	cli
		if(txBuffer[txReadPos].pack_no != -1){
    10ba:	e0 91 15 01 	lds	r30, 0x0115
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	e8 5b       	subi	r30, 0xB8	; 184
    10c6:	fd 4f       	sbci	r31, 0xFD	; 253
    10c8:	81 81       	ldd	r24, Z+1	; 0x01
    10ca:	8f 3f       	cpi	r24, 0xFF	; 255
    10cc:	29 f1       	breq	.+74     	; 0x1118 <__tryToSend+0x68>
				UDR1 = txBuffer[txReadPos].data;
    10ce:	e0 91 15 01 	lds	r30, 0x0115
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	e8 5b       	subi	r30, 0xB8	; 184
    10da:	fd 4f       	sbci	r31, 0xFD	; 253
    10dc:	80 81       	ld	r24, Z
    10de:	80 93 ce 00 	sts	0x00CE, r24
				txBuffer[txReadPos].pack_no = -1;
    10e2:	e0 91 15 01 	lds	r30, 0x0115
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	e8 5b       	subi	r30, 0xB8	; 184
    10ee:	fd 4f       	sbci	r31, 0xFD	; 253
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	81 83       	std	Z+1, r24	; 0x01
				txBuffer[txReadPos].data = 0;
    10f4:	e0 91 15 01 	lds	r30, 0x0115
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	e8 5b       	subi	r30, 0xB8	; 184
    1100:	fd 4f       	sbci	r31, 0xFD	; 253
    1102:	10 82       	st	Z, r1
				txReadPos++;
    1104:	80 91 15 01 	lds	r24, 0x0115
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 15 01 	sts	0x0115, r24
				txReadPos &= TX_BUFFER_SIZE_MSK;
    110e:	80 91 15 01 	lds	r24, 0x0115
    1112:	8f 77       	andi	r24, 0x7F	; 127
    1114:	80 93 15 01 	sts	0x0115, r24
				if(txReadPos >= TX_BUFFER_SIZE){
					txReadPos=0;
				}
				*/
		}
		sei();
    1118:	78 94       	sei
    111a:	08 95       	ret

0000111c <sendResponse>:
	}
	
	return comm;
}

void sendResponse(response r){
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	29 97       	sbiw	r28, 0x09	; 9
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	09 83       	std	Y+1, r16	; 0x01
    1136:	1a 83       	std	Y+2, r17	; 0x02
    1138:	2b 83       	std	Y+3, r18	; 0x03
    113a:	3c 83       	std	Y+4, r19	; 0x04
    113c:	4d 83       	std	Y+5, r20	; 0x05
    113e:	5e 83       	std	Y+6, r21	; 0x06
    1140:	6f 83       	std	Y+7, r22	; 0x07
    1142:	97 2f       	mov	r25, r23
    1144:	78 87       	std	Y+8, r23	; 0x08
    1146:	89 87       	std	Y+9, r24	; 0x09
	
	int8_t header = r.header;
	uint16_t i = txWritePos;
    1148:	e0 91 14 01 	lds	r30, 0x0114
    114c:	4e 2f       	mov	r20, r30
    114e:	50 e0       	ldi	r21, 0x00	; 0
	
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = header;
    1150:	ef 77       	andi	r30, 0x7F	; 127
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	e8 5b       	subi	r30, 0xB8	; 184
    115a:	fd 4f       	sbci	r31, 0xFD	; 253
    115c:	00 83       	st	Z, r16
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    115e:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1160:	fa 01       	movw	r30, r20
    1162:	31 96       	adiw	r30, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
    1164:	ef 77       	andi	r30, 0x7F	; 127
    1166:	ff 27       	eor	r31, r31
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e8 5b       	subi	r30, 0xB8	; 184
    116e:	fd 4f       	sbci	r31, 0xFD	; 253
    1170:	26 e0       	ldi	r18, 0x06	; 6
    1172:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1174:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1176:	9a 01       	movw	r18, r20
    1178:	2e 5f       	subi	r18, 0xFE	; 254
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	fe 01       	movw	r30, r28
    117e:	32 96       	adiw	r30, 0x02	; 2
    1180:	be 01       	movw	r22, r28
    1182:	68 5f       	subi	r22, 0xF8	; 248
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
    1186:	d9 01       	movw	r26, r18
    1188:	af 77       	andi	r26, 0x7F	; 127
    118a:	bb 27       	eor	r27, r27
    118c:	11 91       	ld	r17, Z+
    118e:	aa 0f       	add	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	a8 5b       	subi	r26, 0xB8	; 184
    1194:	bd 4f       	sbci	r27, 0xFD	; 253
    1196:	1c 93       	st	X, r17
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	0c 93       	st	X, r16
		i++;
    119c:	2f 5f       	subi	r18, 0xFF	; 255
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
	i++;
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
    11a0:	e6 17       	cp	r30, r22
    11a2:	f7 07       	cpc	r31, r23
    11a4:	81 f7       	brne	.-32     	; 0x1186 <sendResponse+0x6a>
    11a6:	fa 01       	movw	r30, r20
    11a8:	38 96       	adiw	r30, 0x08	; 8
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
		i++;
	}
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time >> 8); // first 8 bits
    11aa:	ef 77       	andi	r30, 0x7F	; 127
    11ac:	ff 27       	eor	r31, r31
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	e8 5b       	subi	r30, 0xB8	; 184
    11b4:	fd 4f       	sbci	r31, 0xFD	; 253
    11b6:	80 83       	st	Z, r24
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    11b8:	01 83       	std	Z+1, r16	; 0x01
	i++;
    11ba:	fa 01       	movw	r30, r20
    11bc:	39 96       	adiw	r30, 0x09	; 9
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time & 0xFF); // next 8 bits
    11be:	ef 77       	andi	r30, 0x7F	; 127
    11c0:	ff 27       	eor	r31, r31
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	e8 5b       	subi	r30, 0xB8	; 184
    11c8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ca:	90 83       	st	Z, r25
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    11cc:	01 83       	std	Z+1, r16	; 0x01
	i++;
    11ce:	ba 01       	movw	r22, r20
    11d0:	66 5f       	subi	r22, 0xF6	; 246
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
    11da:	3f ef       	ldi	r19, 0xFF	; 255
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
    11dc:	e0 91 14 01 	lds	r30, 0x0114
    11e0:	dc 01       	movw	r26, r24
    11e2:	ae 0f       	add	r26, r30
    11e4:	b1 1d       	adc	r27, r1
    11e6:	fd 01       	movw	r30, r26
    11e8:	ef 77       	andi	r30, 0x7F	; 127
    11ea:	ff 27       	eor	r31, r31
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	e8 5b       	subi	r30, 0xB8	; 184
    11f2:	fd 4f       	sbci	r31, 0xFD	; 253
    11f4:	e0 81       	ld	r30, Z
    11f6:	2e 27       	eor	r18, r30
    11f8:	e2 2f       	mov	r30, r18
    11fa:	e2 95       	swap	r30
    11fc:	e2 27       	eor	r30, r18
    11fe:	0e 2e       	mov	r0, r30
    1200:	e6 95       	lsr	r30
    1202:	e6 95       	lsr	r30
    1204:	e0 25       	eor	r30, r0
    1206:	0e 2e       	mov	r0, r30
    1208:	e6 95       	lsr	r30
    120a:	e0 25       	eor	r30, r0
    120c:	e7 70       	andi	r30, 0x07	; 7
    120e:	02 2e       	mov	r0, r18
    1210:	23 2f       	mov	r18, r19
    1212:	e6 95       	lsr	r30
    1214:	07 94       	ror	r0
    1216:	e7 95       	ror	r30
    1218:	30 2d       	mov	r19, r0
    121a:	2e 27       	eor	r18, r30
    121c:	06 94       	lsr	r0
    121e:	e7 95       	ror	r30
    1220:	30 25       	eor	r19, r0
    1222:	2e 27       	eor	r18, r30
    1224:	01 96       	adiw	r24, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
    1226:	8a 30       	cpi	r24, 0x0A	; 10
    1228:	91 05       	cpc	r25, r1
    122a:	c1 f6       	brne	.-80     	; 0x11dc <sendResponse+0xc0>
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
	}
	
	//send CRC in reverse order!
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc & 0xFF); // last 8 bits
    122c:	fb 01       	movw	r30, r22
    122e:	ef 77       	andi	r30, 0x7F	; 127
    1230:	ff 27       	eor	r31, r31
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	e8 5b       	subi	r30, 0xB8	; 184
    1238:	fd 4f       	sbci	r31, 0xFD	; 253
    123a:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    123c:	01 83       	std	Z+1, r16	; 0x01
	i++;
    123e:	fa 01       	movw	r30, r20
    1240:	3b 96       	adiw	r30, 0x0b	; 11
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc >> 8); // first 8 bits
    1242:	ef 77       	andi	r30, 0x7F	; 127
    1244:	ff 27       	eor	r31, r31
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	e8 5b       	subi	r30, 0xB8	; 184
    124c:	fd 4f       	sbci	r31, 0xFD	; 253
    124e:	30 83       	st	Z, r19
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1250:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1252:	44 5f       	subi	r20, 0xF4	; 244
    1254:	5f 4f       	sbci	r21, 0xFF	; 255
	txWritePos = i & TX_BUFFER_SIZE_MSK;
    1256:	4f 77       	andi	r20, 0x7F	; 127
    1258:	40 93 14 01 	sts	0x0114, r20
	
	__tryToSend();
    125c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__tryToSend>
}
    1260:	29 96       	adiw	r28, 0x09	; 9
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <getLastCommand>:
		}
		sei();
	}
}

command getLastCommand(int8_t *success){
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	2f 97       	sbiw	r28, 0x0f	; 15
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
    1290:	fe 01       	movw	r30, r28
    1292:	38 96       	adiw	r30, 0x08	; 8
    1294:	87 e0       	ldi	r24, 0x07	; 7
    1296:	df 01       	movw	r26, r30
    1298:	1d 92       	st	X+, r1
    129a:	8a 95       	dec	r24
    129c:	e9 f7       	brne	.-6      	; 0x1298 <getLastCommand+0x22>
	*success = 0;
    129e:	f8 01       	movw	r30, r16
    12a0:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
    12a2:	80 91 16 01 	lds	r24, 0x0116
    12a6:	0e 94 d7 06 	call	0xdae	; 0xdae <checkPackIsFullLength>
    12aa:	88 23       	and	r24, r24
    12ac:	c9 f0       	breq	.+50     	; 0x12e0 <getLastCommand+0x6a>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
    12ae:	80 91 16 01 	lds	r24, 0x0116
    12b2:	be 01       	movw	r22, r28
    12b4:	61 5f       	subi	r22, 0xF1	; 241
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	0e 94 24 07 	call	0xe48	; 0xe48 <fetchCommand>
    12bc:	28 87       	std	Y+8, r18	; 0x08
    12be:	39 87       	std	Y+9, r19	; 0x09
    12c0:	4a 87       	std	Y+10, r20	; 0x0a
    12c2:	5b 87       	std	Y+11, r21	; 0x0b
    12c4:	6c 87       	std	Y+12, r22	; 0x0c
    12c6:	7d 87       	std	Y+13, r23	; 0x0d
    12c8:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
    12ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    12cc:	88 23       	and	r24, r24
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <getLastCommand+0x62>
		{
			*success=1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	d8 01       	movw	r26, r16
    12d4:	8c 93       	st	X, r24
    12d6:	2b c0       	rjmp	.+86     	; 0x132e <getLastCommand+0xb8>
		}else{
			*success=2;
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	f8 01       	movw	r30, r16
    12dc:	80 83       	st	Z, r24
    12de:	27 c0       	rjmp	.+78     	; 0x132e <getLastCommand+0xb8>
		
	}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
		
		
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE) 
    12e0:	80 91 16 01 	lds	r24, 0x0116
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	07 97       	sbiw	r24, 0x07	; 7
    12e8:	80 38       	cpi	r24, 0x80	; 128
    12ea:	91 05       	cpc	r25, r1
    12ec:	04 f5       	brge	.+64     	; 0x132e <getLastCommand+0xb8>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
    12ee:	80 91 16 01 	lds	r24, 0x0116
    12f2:	87 50       	subi	r24, 0x07	; 7
    12f4:	0e 94 d7 06 	call	0xdae	; 0xdae <checkPackIsFullLength>
    12f8:	88 23       	and	r24, r24
    12fa:	c9 f0       	breq	.+50     	; 0x132e <getLastCommand+0xb8>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
    12fc:	80 91 16 01 	lds	r24, 0x0116
    1300:	be 01       	movw	r22, r28
    1302:	61 5f       	subi	r22, 0xF1	; 241
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	87 50       	subi	r24, 0x07	; 7
    1308:	0e 94 24 07 	call	0xe48	; 0xe48 <fetchCommand>
    130c:	28 87       	std	Y+8, r18	; 0x08
    130e:	39 87       	std	Y+9, r19	; 0x09
    1310:	4a 87       	std	Y+10, r20	; 0x0a
    1312:	5b 87       	std	Y+11, r21	; 0x0b
    1314:	6c 87       	std	Y+12, r22	; 0x0c
    1316:	7d 87       	std	Y+13, r23	; 0x0d
    1318:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
    131a:	8f 85       	ldd	r24, Y+15	; 0x0f
    131c:	88 23       	and	r24, r24
    131e:	21 f0       	breq	.+8      	; 0x1328 <getLastCommand+0xb2>
			{
				*success=1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	d8 01       	movw	r26, r16
    1324:	8c 93       	st	X, r24
    1326:	03 c0       	rjmp	.+6      	; 0x132e <getLastCommand+0xb8>
				}else{
				*success=2;
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	f8 01       	movw	r30, r16
    132c:	80 83       	st	Z, r24
		
		}
	}
	
	
	return cmd;
    132e:	87 e0       	ldi	r24, 0x07	; 7
    1330:	fe 01       	movw	r30, r28
    1332:	38 96       	adiw	r30, 0x08	; 8
    1334:	de 01       	movw	r26, r28
    1336:	11 96       	adiw	r26, 0x01	; 1
    1338:	01 90       	ld	r0, Z+
    133a:	0d 92       	st	X+, r0
    133c:	8a 95       	dec	r24
    133e:	e1 f7       	brne	.-8      	; 0x1338 <getLastCommand+0xc2>
    1340:	29 81       	ldd	r18, Y+1	; 0x01
    1342:	3a 81       	ldd	r19, Y+2	; 0x02
    1344:	4b 81       	ldd	r20, Y+3	; 0x03
    1346:	5c 81       	ldd	r21, Y+4	; 0x04
    1348:	6d 81       	ldd	r22, Y+5	; 0x05
    134a:	7e 81       	ldd	r23, Y+6	; 0x06
}
    134c:	8f 81       	ldd	r24, Y+7	; 0x07
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	2f 96       	adiw	r28, 0x0f	; 15
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <__vector_28>:
	
	return ret;
}
*/

ISR(USART1_RX_vect){
    1366:	1f 92       	push	r1
    1368:	0f 92       	push	r0
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	0f 92       	push	r0
    136e:	11 24       	eor	r1, r1
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
	
	uint8_t data = UDR1;
    1378:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
    137c:	90 91 18 01 	lds	r25, 0x0118
    1380:	91 11       	cpse	r25, r1
    1382:	1a c0       	rjmp	.+52     	; 0x13b8 <__vector_28+0x52>
		rxBuffer[rxWritePos].pack_no = data; //numai primi 7 biti
    1384:	e0 91 19 01 	lds	r30, 0x0119
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	e8 5b       	subi	r30, 0xB8	; 184
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
    1394:	e0 91 19 01 	lds	r30, 0x0119
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	e8 5b       	subi	r30, 0xB8	; 184
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	80 83       	st	Z, r24
		packStarted = 1;
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	90 93 18 01 	sts	0x0118, r25
		lastPackNo = data;
    13aa:	80 93 17 01 	sts	0x0117, r24
		lastPackPosInBuff = rxWritePos; 
    13ae:	80 91 19 01 	lds	r24, 0x0119
    13b2:	80 93 16 01 	sts	0x0116, r24
    13b6:	1d c0       	rjmp	.+58     	; 0x13f2 <__vector_28+0x8c>
	}else{
		
		rxBuffer[rxWritePos].pack_no = lastPackNo;
    13b8:	e0 91 19 01 	lds	r30, 0x0119
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	90 91 17 01 	lds	r25, 0x0117
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	e8 5b       	subi	r30, 0xB8	; 184
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
    13cc:	e0 91 19 01 	lds	r30, 0x0119
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	e8 5b       	subi	r30, 0xB8	; 184
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	80 83       	st	Z, r24
		packStarted++ ;
    13dc:	80 91 18 01 	lds	r24, 0x0118
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	80 93 18 01 	sts	0x0118, r24
		
		if(packStarted == COMMAND_SIZE){
    13e6:	80 91 18 01 	lds	r24, 0x0118
    13ea:	87 30       	cpi	r24, 0x07	; 7
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <__vector_28+0x8c>
			packStarted = 0;
    13ee:	10 92 18 01 	sts	0x0118, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
    13f2:	80 91 19 01 	lds	r24, 0x0119
    13f6:	8f 5f       	subi	r24, 0xFF	; 255
    13f8:	80 93 19 01 	sts	0x0119, r24
	rxWritePos &= RX_BUFFER_SIZE_MSK;
    13fc:	80 91 19 01 	lds	r24, 0x0119
    1400:	8f 77       	andi	r24, 0x7F	; 127
    1402:	80 93 19 01 	sts	0x0119, r24
			rxWritePos = 0;
	}*/
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_30>:

ISR(USART1_TX_vect){
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	8f 93       	push	r24
    1424:	ef 93       	push	r30
    1426:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
    1428:	e0 91 15 01 	lds	r30, 0x0115
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	e8 5b       	subi	r30, 0xB8	; 184
    1434:	fd 4f       	sbci	r31, 0xFD	; 253
    1436:	81 81       	ldd	r24, Z+1	; 0x01
    1438:	8f 3f       	cpi	r24, 0xFF	; 255
    143a:	29 f1       	breq	.+74     	; 0x1486 <__vector_30+0x6e>
	UDR1 =  txBuffer[txReadPos].data;
    143c:	e0 91 15 01 	lds	r30, 0x0115
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	e8 5b       	subi	r30, 0xB8	; 184
    1448:	fd 4f       	sbci	r31, 0xFD	; 253
    144a:	80 81       	ld	r24, Z
    144c:	80 93 ce 00 	sts	0x00CE, r24
	txBuffer[txReadPos].data =0;
    1450:	e0 91 15 01 	lds	r30, 0x0115
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	e8 5b       	subi	r30, 0xB8	; 184
    145c:	fd 4f       	sbci	r31, 0xFD	; 253
    145e:	10 82       	st	Z, r1
	txBuffer[txReadPos].pack_no =-1;
    1460:	e0 91 15 01 	lds	r30, 0x0115
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	e8 5b       	subi	r30, 0xB8	; 184
    146c:	fd 4f       	sbci	r31, 0xFD	; 253
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	81 83       	std	Z+1, r24	; 0x01
	txReadPos++;
    1472:	80 91 15 01 	lds	r24, 0x0115
    1476:	8f 5f       	subi	r24, 0xFF	; 255
    1478:	80 93 15 01 	sts	0x0115, r24
	txReadPos &= TX_BUFFER_SIZE_MSK;
    147c:	80 91 15 01 	lds	r24, 0x0115
    1480:	8f 77       	andi	r24, 0x7F	; 127
    1482:	80 93 15 01 	sts	0x0115, r24
			txReadPos =0;
		}
		*/
	}
	
    1486:	ff 91       	pop	r31
    1488:	ef 91       	pop	r30
    148a:	8f 91       	pop	r24
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <executeCommandForTime>:
volatile uint32_t ticks = 99999;
volatile uint16_t lastCOMPARE = 0;


void executeCommandForTime(void (*startF) (uint16_t, int16_t*), void (*stopF) (uint16_t, int16_t*), 
uint16_t argc_start, int16_t* argv_start, uint16_t argc_stop, int16_t* argv_stop, uint16_t time){
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	5c 01       	movw	r10, r24
    14ac:	ca 01       	movw	r24, r20
    14ae:	a9 01       	movw	r20, r18
	//init timer


	cli();
    14b0:	f8 94       	cli
	stopFunction = stopF;
    14b2:	70 93 1e 01 	sts	0x011E, r23
    14b6:	60 93 1d 01 	sts	0x011D, r22
	argc2 = argc_stop;
    14ba:	10 93 1c 01 	sts	0x011C, r17
    14be:	00 93 1b 01 	sts	0x011B, r16
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
    14c2:	01 15       	cp	r16, r1
    14c4:	11 05       	cpc	r17, r1
    14c6:	91 f0       	breq	.+36     	; 0x14ec <executeCommandForTime+0x56>
    14c8:	ce 2d       	mov	r28, r14
    14ca:	df 2d       	mov	r29, r15
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
		argv2[i] = argv_stop[i];
    14d0:	69 91       	ld	r22, Y+
    14d2:	79 91       	ld	r23, Y+
    14d4:	9d 01       	movw	r18, r26
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	f9 01       	movw	r30, r18
    14dc:	e8 5b       	subi	r30, 0xB8	; 184
    14de:	fc 4f       	sbci	r31, 0xFC	; 252
    14e0:	71 83       	std	Z+1, r23	; 0x01
    14e2:	60 83       	st	Z, r22


	cli();
	stopFunction = stopF;
	argc2 = argc_stop;
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
    14e4:	11 96       	adiw	r26, 0x01	; 1
    14e6:	a0 17       	cp	r26, r16
    14e8:	b1 07       	cpc	r27, r17
    14ea:	91 f7       	brne	.-28     	; 0x14d0 <executeCommandForTime+0x3a>
	//TCCR1B &= ~((1<<CS10) | (1<<CS11));

//	sei();		
	
	//call start function
	ticks = time;
    14ec:	86 01       	movw	r16, r12
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	00 93 00 01 	sts	0x0100, r16
    14f6:	10 93 01 01 	sts	0x0101, r17
    14fa:	20 93 02 01 	sts	0x0102, r18
    14fe:	30 93 03 01 	sts	0x0103, r19
	startF(argc_start, argv_start);
    1502:	ba 01       	movw	r22, r20
    1504:	f5 01       	movw	r30, r10
    1506:	09 95       	icall
	LED_CMD_PORT |= (1<<LED_CMD_PINx);
    1508:	17 9a       	sbi	0x02, 7	; 2
	sei();
    150a:	78 94       	sei
}
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	df 90       	pop	r13
    151a:	cf 90       	pop	r12
    151c:	bf 90       	pop	r11
    151e:	af 90       	pop	r10
    1520:	08 95       	ret

00001522 <initTimer1>:

void initTimer1()
{
	//Normal port operation, OC1A/OC1B disconnected.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1A0));	
    1522:	e0 e8       	ldi	r30, 0x80	; 128
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 71       	andi	r24, 0x1F	; 31
    152a:	80 83       	st	Z, r24
	
	//Timer/Counter mode of operation: CTC, TOP = OCR1A, Update of OCR1x at Immediate TOVn flag set on MAX
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11));
    152c:	80 81       	ld	r24, Z
    152e:	8c 7f       	andi	r24, 0xFC	; 252
    1530:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
    1532:	e1 e8       	ldi	r30, 0x81	; 129
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	88 60       	ori	r24, 0x08	; 8
    153a:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
    153c:	80 81       	ld	r24, Z
    153e:	8f 7e       	andi	r24, 0xEF	; 239
    1540:	80 83       	st	Z, r24
	
	// Clock Select: clk/64 prescaler
	TCCR1B &= ~((1<<CS12));
    1542:	80 81       	ld	r24, Z
    1544:	8b 7f       	andi	r24, 0xFB	; 251
    1546:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10) | (1<<CS11);
    1548:	80 81       	ld	r24, Z
    154a:	83 60       	ori	r24, 0x03	; 3
    154c:	80 83       	st	Z, r24
	
	
	
	// reset counter
	TCNT1 = 0;
    154e:	10 92 85 00 	sts	0x0085, r1
    1552:	10 92 84 00 	sts	0x0084, r1
	// disable compare for the moment
	//OCR1A = 0;
	//OCR1B = 0;
	
	//set OCR1A for 1 ms interrupts
	OCR1A = ((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*10L;
    1556:	82 ee       	ldi	r24, 0xE2	; 226
    1558:	94 e0       	ldi	r25, 0x04	; 4
    155a:	90 93 89 00 	sts	0x0089, r25
    155e:	80 93 88 00 	sts	0x0088, r24
	
	//enable Output Compare A Match Interrupt Enable
	TIMSK1 |= (1<<OCIE1A);// (1<<OCIE1B) | (1<<OCIE1A);
    1562:	ef e6       	ldi	r30, 0x6F	; 111
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	82 60       	ori	r24, 0x02	; 2
    156a:	80 83       	st	Z, r24
    156c:	08 95       	ret

0000156e <__vector_13>:
	
}

ISR(TIMER1_COMPA_vect){
    156e:	1f 92       	push	r1
    1570:	0f 92       	push	r0
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	0f 92       	push	r0
    1576:	11 24       	eor	r1, r1
    1578:	2f 93       	push	r18
    157a:	3f 93       	push	r19
    157c:	4f 93       	push	r20
    157e:	5f 93       	push	r21
    1580:	6f 93       	push	r22
    1582:	7f 93       	push	r23
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    1588:	af 93       	push	r26
    158a:	bf 93       	push	r27
    158c:	ef 93       	push	r30
    158e:	ff 93       	push	r31
		
	//	LED_CMD_PIN |= (1<<LED_CMD_PINx);
		
		if(ticks && ticks != 99999){
    1590:	80 91 00 01 	lds	r24, 0x0100
    1594:	90 91 01 01 	lds	r25, 0x0101
    1598:	a0 91 02 01 	lds	r26, 0x0102
    159c:	b0 91 03 01 	lds	r27, 0x0103
    15a0:	89 2b       	or	r24, r25
    15a2:	8a 2b       	or	r24, r26
    15a4:	8b 2b       	or	r24, r27
    15a6:	09 f1       	breq	.+66     	; 0x15ea <__vector_13+0x7c>
    15a8:	80 91 00 01 	lds	r24, 0x0100
    15ac:	90 91 01 01 	lds	r25, 0x0101
    15b0:	a0 91 02 01 	lds	r26, 0x0102
    15b4:	b0 91 03 01 	lds	r27, 0x0103
    15b8:	8f 39       	cpi	r24, 0x9F	; 159
    15ba:	96 48       	sbci	r25, 0x86	; 134
    15bc:	a1 40       	sbci	r26, 0x01	; 1
    15be:	b1 05       	cpc	r27, r1
    15c0:	a1 f0       	breq	.+40     	; 0x15ea <__vector_13+0x7c>
			ticks--;
    15c2:	80 91 00 01 	lds	r24, 0x0100
    15c6:	90 91 01 01 	lds	r25, 0x0101
    15ca:	a0 91 02 01 	lds	r26, 0x0102
    15ce:	b0 91 03 01 	lds	r27, 0x0103
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	a1 09       	sbc	r26, r1
    15d6:	b1 09       	sbc	r27, r1
    15d8:	80 93 00 01 	sts	0x0100, r24
    15dc:	90 93 01 01 	sts	0x0101, r25
    15e0:	a0 93 02 01 	sts	0x0102, r26
    15e4:	b0 93 03 01 	sts	0x0103, r27
    15e8:	24 c0       	rjmp	.+72     	; 0x1632 <__vector_13+0xc4>
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
		}else if(ticks == 0){
    15ea:	80 91 00 01 	lds	r24, 0x0100
    15ee:	90 91 01 01 	lds	r25, 0x0101
    15f2:	a0 91 02 01 	lds	r26, 0x0102
    15f6:	b0 91 03 01 	lds	r27, 0x0103
    15fa:	89 2b       	or	r24, r25
    15fc:	8a 2b       	or	r24, r26
    15fe:	8b 2b       	or	r24, r27
    1600:	c1 f4       	brne	.+48     	; 0x1632 <__vector_13+0xc4>
			ticks = 99999;
    1602:	8f e9       	ldi	r24, 0x9F	; 159
    1604:	96 e8       	ldi	r25, 0x86	; 134
    1606:	a1 e0       	ldi	r26, 0x01	; 1
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	80 93 00 01 	sts	0x0100, r24
    160e:	90 93 01 01 	sts	0x0101, r25
    1612:	a0 93 02 01 	sts	0x0102, r26
    1616:	b0 93 03 01 	sts	0x0103, r27
			stopFunction(argc2,argv2);
    161a:	80 91 1b 01 	lds	r24, 0x011B
    161e:	90 91 1c 01 	lds	r25, 0x011C
    1622:	e0 91 1d 01 	lds	r30, 0x011D
    1626:	f0 91 1e 01 	lds	r31, 0x011E
    162a:	68 e4       	ldi	r22, 0x48	; 72
    162c:	73 e0       	ldi	r23, 0x03	; 3
    162e:	09 95       	icall
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
			LED_CMD_PORT &= ~(1<<LED_CMD_PINx);
    1630:	17 98       	cbi	0x02, 7	; 2
	//call the stop function
	stopFunction(argc2, argv2);
	}

*/
    1632:	ff 91       	pop	r31
    1634:	ef 91       	pop	r30
    1636:	bf 91       	pop	r27
    1638:	af 91       	pop	r26
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	7f 91       	pop	r23
    1640:	6f 91       	pop	r22
    1642:	5f 91       	pop	r21
    1644:	4f 91       	pop	r20
    1646:	3f 91       	pop	r19
    1648:	2f 91       	pop	r18
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <__subsf3>:
    1654:	50 58       	subi	r21, 0x80	; 128

00001656 <__addsf3>:
    1656:	bb 27       	eor	r27, r27
    1658:	aa 27       	eor	r26, r26
    165a:	0e d0       	rcall	.+28     	; 0x1678 <__addsf3x>
    165c:	84 c1       	rjmp	.+776    	; 0x1966 <__fp_round>
    165e:	75 d1       	rcall	.+746    	; 0x194a <__fp_pscA>
    1660:	30 f0       	brcs	.+12     	; 0x166e <__addsf3+0x18>
    1662:	7a d1       	rcall	.+756    	; 0x1958 <__fp_pscB>
    1664:	20 f0       	brcs	.+8      	; 0x166e <__addsf3+0x18>
    1666:	31 f4       	brne	.+12     	; 0x1674 <__addsf3+0x1e>
    1668:	9f 3f       	cpi	r25, 0xFF	; 255
    166a:	11 f4       	brne	.+4      	; 0x1670 <__addsf3+0x1a>
    166c:	1e f4       	brtc	.+6      	; 0x1674 <__addsf3+0x1e>
    166e:	6a c1       	rjmp	.+724    	; 0x1944 <__fp_nan>
    1670:	0e f4       	brtc	.+2      	; 0x1674 <__addsf3+0x1e>
    1672:	e0 95       	com	r30
    1674:	e7 fb       	bst	r30, 7
    1676:	37 c1       	rjmp	.+622    	; 0x18e6 <__fp_inf>

00001678 <__addsf3x>:
    1678:	e9 2f       	mov	r30, r25
    167a:	86 d1       	rcall	.+780    	; 0x1988 <__fp_split3>
    167c:	80 f3       	brcs	.-32     	; 0x165e <__addsf3+0x8>
    167e:	ba 17       	cp	r27, r26
    1680:	62 07       	cpc	r22, r18
    1682:	73 07       	cpc	r23, r19
    1684:	84 07       	cpc	r24, r20
    1686:	95 07       	cpc	r25, r21
    1688:	18 f0       	brcs	.+6      	; 0x1690 <__addsf3x+0x18>
    168a:	71 f4       	brne	.+28     	; 0x16a8 <__addsf3x+0x30>
    168c:	9e f5       	brtc	.+102    	; 0x16f4 <__addsf3x+0x7c>
    168e:	b5 c1       	rjmp	.+874    	; 0x19fa <__fp_zero>
    1690:	0e f4       	brtc	.+2      	; 0x1694 <__addsf3x+0x1c>
    1692:	e0 95       	com	r30
    1694:	0b 2e       	mov	r0, r27
    1696:	ba 2f       	mov	r27, r26
    1698:	a0 2d       	mov	r26, r0
    169a:	0b 01       	movw	r0, r22
    169c:	b9 01       	movw	r22, r18
    169e:	90 01       	movw	r18, r0
    16a0:	0c 01       	movw	r0, r24
    16a2:	ca 01       	movw	r24, r20
    16a4:	a0 01       	movw	r20, r0
    16a6:	11 24       	eor	r1, r1
    16a8:	ff 27       	eor	r31, r31
    16aa:	59 1b       	sub	r21, r25
    16ac:	99 f0       	breq	.+38     	; 0x16d4 <__addsf3x+0x5c>
    16ae:	59 3f       	cpi	r21, 0xF9	; 249
    16b0:	50 f4       	brcc	.+20     	; 0x16c6 <__addsf3x+0x4e>
    16b2:	50 3e       	cpi	r21, 0xE0	; 224
    16b4:	68 f1       	brcs	.+90     	; 0x1710 <__addsf3x+0x98>
    16b6:	1a 16       	cp	r1, r26
    16b8:	f0 40       	sbci	r31, 0x00	; 0
    16ba:	a2 2f       	mov	r26, r18
    16bc:	23 2f       	mov	r18, r19
    16be:	34 2f       	mov	r19, r20
    16c0:	44 27       	eor	r20, r20
    16c2:	58 5f       	subi	r21, 0xF8	; 248
    16c4:	f3 cf       	rjmp	.-26     	; 0x16ac <__addsf3x+0x34>
    16c6:	46 95       	lsr	r20
    16c8:	37 95       	ror	r19
    16ca:	27 95       	ror	r18
    16cc:	a7 95       	ror	r26
    16ce:	f0 40       	sbci	r31, 0x00	; 0
    16d0:	53 95       	inc	r21
    16d2:	c9 f7       	brne	.-14     	; 0x16c6 <__addsf3x+0x4e>
    16d4:	7e f4       	brtc	.+30     	; 0x16f4 <__addsf3x+0x7c>
    16d6:	1f 16       	cp	r1, r31
    16d8:	ba 0b       	sbc	r27, r26
    16da:	62 0b       	sbc	r22, r18
    16dc:	73 0b       	sbc	r23, r19
    16de:	84 0b       	sbc	r24, r20
    16e0:	ba f0       	brmi	.+46     	; 0x1710 <__addsf3x+0x98>
    16e2:	91 50       	subi	r25, 0x01	; 1
    16e4:	a1 f0       	breq	.+40     	; 0x170e <__addsf3x+0x96>
    16e6:	ff 0f       	add	r31, r31
    16e8:	bb 1f       	adc	r27, r27
    16ea:	66 1f       	adc	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	88 1f       	adc	r24, r24
    16f0:	c2 f7       	brpl	.-16     	; 0x16e2 <__addsf3x+0x6a>
    16f2:	0e c0       	rjmp	.+28     	; 0x1710 <__addsf3x+0x98>
    16f4:	ba 0f       	add	r27, r26
    16f6:	62 1f       	adc	r22, r18
    16f8:	73 1f       	adc	r23, r19
    16fa:	84 1f       	adc	r24, r20
    16fc:	48 f4       	brcc	.+18     	; 0x1710 <__addsf3x+0x98>
    16fe:	87 95       	ror	r24
    1700:	77 95       	ror	r23
    1702:	67 95       	ror	r22
    1704:	b7 95       	ror	r27
    1706:	f7 95       	ror	r31
    1708:	9e 3f       	cpi	r25, 0xFE	; 254
    170a:	08 f0       	brcs	.+2      	; 0x170e <__addsf3x+0x96>
    170c:	b3 cf       	rjmp	.-154    	; 0x1674 <__addsf3+0x1e>
    170e:	93 95       	inc	r25
    1710:	88 0f       	add	r24, r24
    1712:	08 f0       	brcs	.+2      	; 0x1716 <__addsf3x+0x9e>
    1714:	99 27       	eor	r25, r25
    1716:	ee 0f       	add	r30, r30
    1718:	97 95       	ror	r25
    171a:	87 95       	ror	r24
    171c:	08 95       	ret

0000171e <__divsf3>:
    171e:	0c d0       	rcall	.+24     	; 0x1738 <__divsf3x>
    1720:	22 c1       	rjmp	.+580    	; 0x1966 <__fp_round>
    1722:	1a d1       	rcall	.+564    	; 0x1958 <__fp_pscB>
    1724:	40 f0       	brcs	.+16     	; 0x1736 <__divsf3+0x18>
    1726:	11 d1       	rcall	.+546    	; 0x194a <__fp_pscA>
    1728:	30 f0       	brcs	.+12     	; 0x1736 <__divsf3+0x18>
    172a:	21 f4       	brne	.+8      	; 0x1734 <__divsf3+0x16>
    172c:	5f 3f       	cpi	r21, 0xFF	; 255
    172e:	19 f0       	breq	.+6      	; 0x1736 <__divsf3+0x18>
    1730:	da c0       	rjmp	.+436    	; 0x18e6 <__fp_inf>
    1732:	51 11       	cpse	r21, r1
    1734:	63 c1       	rjmp	.+710    	; 0x19fc <__fp_szero>
    1736:	06 c1       	rjmp	.+524    	; 0x1944 <__fp_nan>

00001738 <__divsf3x>:
    1738:	27 d1       	rcall	.+590    	; 0x1988 <__fp_split3>
    173a:	98 f3       	brcs	.-26     	; 0x1722 <__divsf3+0x4>

0000173c <__divsf3_pse>:
    173c:	99 23       	and	r25, r25
    173e:	c9 f3       	breq	.-14     	; 0x1732 <__divsf3+0x14>
    1740:	55 23       	and	r21, r21
    1742:	b1 f3       	breq	.-20     	; 0x1730 <__divsf3+0x12>
    1744:	95 1b       	sub	r25, r21
    1746:	55 0b       	sbc	r21, r21
    1748:	bb 27       	eor	r27, r27
    174a:	aa 27       	eor	r26, r26
    174c:	62 17       	cp	r22, r18
    174e:	73 07       	cpc	r23, r19
    1750:	84 07       	cpc	r24, r20
    1752:	38 f0       	brcs	.+14     	; 0x1762 <__divsf3_pse+0x26>
    1754:	9f 5f       	subi	r25, 0xFF	; 255
    1756:	5f 4f       	sbci	r21, 0xFF	; 255
    1758:	22 0f       	add	r18, r18
    175a:	33 1f       	adc	r19, r19
    175c:	44 1f       	adc	r20, r20
    175e:	aa 1f       	adc	r26, r26
    1760:	a9 f3       	breq	.-22     	; 0x174c <__divsf3_pse+0x10>
    1762:	33 d0       	rcall	.+102    	; 0x17ca <__divsf3_pse+0x8e>
    1764:	0e 2e       	mov	r0, r30
    1766:	3a f0       	brmi	.+14     	; 0x1776 <__divsf3_pse+0x3a>
    1768:	e0 e8       	ldi	r30, 0x80	; 128
    176a:	30 d0       	rcall	.+96     	; 0x17cc <__divsf3_pse+0x90>
    176c:	91 50       	subi	r25, 0x01	; 1
    176e:	50 40       	sbci	r21, 0x00	; 0
    1770:	e6 95       	lsr	r30
    1772:	00 1c       	adc	r0, r0
    1774:	ca f7       	brpl	.-14     	; 0x1768 <__divsf3_pse+0x2c>
    1776:	29 d0       	rcall	.+82     	; 0x17ca <__divsf3_pse+0x8e>
    1778:	fe 2f       	mov	r31, r30
    177a:	27 d0       	rcall	.+78     	; 0x17ca <__divsf3_pse+0x8e>
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	bb 1f       	adc	r27, r27
    1784:	26 17       	cp	r18, r22
    1786:	37 07       	cpc	r19, r23
    1788:	48 07       	cpc	r20, r24
    178a:	ab 07       	cpc	r26, r27
    178c:	b0 e8       	ldi	r27, 0x80	; 128
    178e:	09 f0       	breq	.+2      	; 0x1792 <__divsf3_pse+0x56>
    1790:	bb 0b       	sbc	r27, r27
    1792:	80 2d       	mov	r24, r0
    1794:	bf 01       	movw	r22, r30
    1796:	ff 27       	eor	r31, r31
    1798:	93 58       	subi	r25, 0x83	; 131
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	2a f0       	brmi	.+10     	; 0x17a8 <__divsf3_pse+0x6c>
    179e:	9e 3f       	cpi	r25, 0xFE	; 254
    17a0:	51 05       	cpc	r21, r1
    17a2:	68 f0       	brcs	.+26     	; 0x17be <__divsf3_pse+0x82>
    17a4:	a0 c0       	rjmp	.+320    	; 0x18e6 <__fp_inf>
    17a6:	2a c1       	rjmp	.+596    	; 0x19fc <__fp_szero>
    17a8:	5f 3f       	cpi	r21, 0xFF	; 255
    17aa:	ec f3       	brlt	.-6      	; 0x17a6 <__divsf3_pse+0x6a>
    17ac:	98 3e       	cpi	r25, 0xE8	; 232
    17ae:	dc f3       	brlt	.-10     	; 0x17a6 <__divsf3_pse+0x6a>
    17b0:	86 95       	lsr	r24
    17b2:	77 95       	ror	r23
    17b4:	67 95       	ror	r22
    17b6:	b7 95       	ror	r27
    17b8:	f7 95       	ror	r31
    17ba:	9f 5f       	subi	r25, 0xFF	; 255
    17bc:	c9 f7       	brne	.-14     	; 0x17b0 <__divsf3_pse+0x74>
    17be:	88 0f       	add	r24, r24
    17c0:	91 1d       	adc	r25, r1
    17c2:	96 95       	lsr	r25
    17c4:	87 95       	ror	r24
    17c6:	97 f9       	bld	r25, 7
    17c8:	08 95       	ret
    17ca:	e1 e0       	ldi	r30, 0x01	; 1
    17cc:	66 0f       	add	r22, r22
    17ce:	77 1f       	adc	r23, r23
    17d0:	88 1f       	adc	r24, r24
    17d2:	bb 1f       	adc	r27, r27
    17d4:	62 17       	cp	r22, r18
    17d6:	73 07       	cpc	r23, r19
    17d8:	84 07       	cpc	r24, r20
    17da:	ba 07       	cpc	r27, r26
    17dc:	20 f0       	brcs	.+8      	; 0x17e6 <__divsf3_pse+0xaa>
    17de:	62 1b       	sub	r22, r18
    17e0:	73 0b       	sbc	r23, r19
    17e2:	84 0b       	sbc	r24, r20
    17e4:	ba 0b       	sbc	r27, r26
    17e6:	ee 1f       	adc	r30, r30
    17e8:	88 f7       	brcc	.-30     	; 0x17cc <__divsf3_pse+0x90>
    17ea:	e0 95       	com	r30
    17ec:	08 95       	ret

000017ee <__fixunssfsi>:
    17ee:	d4 d0       	rcall	.+424    	; 0x1998 <__fp_splitA>
    17f0:	88 f0       	brcs	.+34     	; 0x1814 <__fixunssfsi+0x26>
    17f2:	9f 57       	subi	r25, 0x7F	; 127
    17f4:	90 f0       	brcs	.+36     	; 0x181a <__fixunssfsi+0x2c>
    17f6:	b9 2f       	mov	r27, r25
    17f8:	99 27       	eor	r25, r25
    17fa:	b7 51       	subi	r27, 0x17	; 23
    17fc:	a0 f0       	brcs	.+40     	; 0x1826 <__fixunssfsi+0x38>
    17fe:	d1 f0       	breq	.+52     	; 0x1834 <__fixunssfsi+0x46>
    1800:	66 0f       	add	r22, r22
    1802:	77 1f       	adc	r23, r23
    1804:	88 1f       	adc	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	1a f0       	brmi	.+6      	; 0x1810 <__fixunssfsi+0x22>
    180a:	ba 95       	dec	r27
    180c:	c9 f7       	brne	.-14     	; 0x1800 <__fixunssfsi+0x12>
    180e:	12 c0       	rjmp	.+36     	; 0x1834 <__fixunssfsi+0x46>
    1810:	b1 30       	cpi	r27, 0x01	; 1
    1812:	81 f0       	breq	.+32     	; 0x1834 <__fixunssfsi+0x46>
    1814:	f2 d0       	rcall	.+484    	; 0x19fa <__fp_zero>
    1816:	b1 e0       	ldi	r27, 0x01	; 1
    1818:	08 95       	ret
    181a:	ef c0       	rjmp	.+478    	; 0x19fa <__fp_zero>
    181c:	67 2f       	mov	r22, r23
    181e:	78 2f       	mov	r23, r24
    1820:	88 27       	eor	r24, r24
    1822:	b8 5f       	subi	r27, 0xF8	; 248
    1824:	39 f0       	breq	.+14     	; 0x1834 <__fixunssfsi+0x46>
    1826:	b9 3f       	cpi	r27, 0xF9	; 249
    1828:	cc f3       	brlt	.-14     	; 0x181c <__fixunssfsi+0x2e>
    182a:	86 95       	lsr	r24
    182c:	77 95       	ror	r23
    182e:	67 95       	ror	r22
    1830:	b3 95       	inc	r27
    1832:	d9 f7       	brne	.-10     	; 0x182a <__fixunssfsi+0x3c>
    1834:	3e f4       	brtc	.+14     	; 0x1844 <__fixunssfsi+0x56>
    1836:	90 95       	com	r25
    1838:	80 95       	com	r24
    183a:	70 95       	com	r23
    183c:	61 95       	neg	r22
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	8f 4f       	sbci	r24, 0xFF	; 255
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	08 95       	ret

00001846 <__floatunsisf>:
    1846:	e8 94       	clt
    1848:	09 c0       	rjmp	.+18     	; 0x185c <__floatsisf+0x12>

0000184a <__floatsisf>:
    184a:	97 fb       	bst	r25, 7
    184c:	3e f4       	brtc	.+14     	; 0x185c <__floatsisf+0x12>
    184e:	90 95       	com	r25
    1850:	80 95       	com	r24
    1852:	70 95       	com	r23
    1854:	61 95       	neg	r22
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	8f 4f       	sbci	r24, 0xFF	; 255
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	99 23       	and	r25, r25
    185e:	a9 f0       	breq	.+42     	; 0x188a <__floatsisf+0x40>
    1860:	f9 2f       	mov	r31, r25
    1862:	96 e9       	ldi	r25, 0x96	; 150
    1864:	bb 27       	eor	r27, r27
    1866:	93 95       	inc	r25
    1868:	f6 95       	lsr	r31
    186a:	87 95       	ror	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	b7 95       	ror	r27
    1872:	f1 11       	cpse	r31, r1
    1874:	f8 cf       	rjmp	.-16     	; 0x1866 <__floatsisf+0x1c>
    1876:	fa f4       	brpl	.+62     	; 0x18b6 <__floatsisf+0x6c>
    1878:	bb 0f       	add	r27, r27
    187a:	11 f4       	brne	.+4      	; 0x1880 <__floatsisf+0x36>
    187c:	60 ff       	sbrs	r22, 0
    187e:	1b c0       	rjmp	.+54     	; 0x18b6 <__floatsisf+0x6c>
    1880:	6f 5f       	subi	r22, 0xFF	; 255
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8f 4f       	sbci	r24, 0xFF	; 255
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	16 c0       	rjmp	.+44     	; 0x18b6 <__floatsisf+0x6c>
    188a:	88 23       	and	r24, r24
    188c:	11 f0       	breq	.+4      	; 0x1892 <__floatsisf+0x48>
    188e:	96 e9       	ldi	r25, 0x96	; 150
    1890:	11 c0       	rjmp	.+34     	; 0x18b4 <__floatsisf+0x6a>
    1892:	77 23       	and	r23, r23
    1894:	21 f0       	breq	.+8      	; 0x189e <__floatsisf+0x54>
    1896:	9e e8       	ldi	r25, 0x8E	; 142
    1898:	87 2f       	mov	r24, r23
    189a:	76 2f       	mov	r23, r22
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <__floatsisf+0x5e>
    189e:	66 23       	and	r22, r22
    18a0:	71 f0       	breq	.+28     	; 0x18be <__floatsisf+0x74>
    18a2:	96 e8       	ldi	r25, 0x86	; 134
    18a4:	86 2f       	mov	r24, r22
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	2a f0       	brmi	.+10     	; 0x18b6 <__floatsisf+0x6c>
    18ac:	9a 95       	dec	r25
    18ae:	66 0f       	add	r22, r22
    18b0:	77 1f       	adc	r23, r23
    18b2:	88 1f       	adc	r24, r24
    18b4:	da f7       	brpl	.-10     	; 0x18ac <__floatsisf+0x62>
    18b6:	88 0f       	add	r24, r24
    18b8:	96 95       	lsr	r25
    18ba:	87 95       	ror	r24
    18bc:	97 f9       	bld	r25, 7
    18be:	08 95       	ret

000018c0 <floor>:
    18c0:	85 d0       	rcall	.+266    	; 0x19cc <__fp_trunc>
    18c2:	80 f0       	brcs	.+32     	; 0x18e4 <floor+0x24>
    18c4:	9f 37       	cpi	r25, 0x7F	; 127
    18c6:	40 f4       	brcc	.+16     	; 0x18d8 <floor+0x18>
    18c8:	91 11       	cpse	r25, r1
    18ca:	0e f0       	brts	.+2      	; 0x18ce <floor+0xe>
    18cc:	97 c0       	rjmp	.+302    	; 0x19fc <__fp_szero>
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	80 e8       	ldi	r24, 0x80	; 128
    18d4:	9f eb       	ldi	r25, 0xBF	; 191
    18d6:	08 95       	ret
    18d8:	26 f4       	brtc	.+8      	; 0x18e2 <floor+0x22>
    18da:	1b 16       	cp	r1, r27
    18dc:	61 1d       	adc	r22, r1
    18de:	71 1d       	adc	r23, r1
    18e0:	81 1d       	adc	r24, r1
    18e2:	07 c0       	rjmp	.+14     	; 0x18f2 <__fp_mintl>
    18e4:	21 c0       	rjmp	.+66     	; 0x1928 <__fp_mpack>

000018e6 <__fp_inf>:
    18e6:	97 f9       	bld	r25, 7
    18e8:	9f 67       	ori	r25, 0x7F	; 127
    18ea:	80 e8       	ldi	r24, 0x80	; 128
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	08 95       	ret

000018f2 <__fp_mintl>:
    18f2:	88 23       	and	r24, r24
    18f4:	71 f4       	brne	.+28     	; 0x1912 <__fp_mintl+0x20>
    18f6:	77 23       	and	r23, r23
    18f8:	21 f0       	breq	.+8      	; 0x1902 <__fp_mintl+0x10>
    18fa:	98 50       	subi	r25, 0x08	; 8
    18fc:	87 2b       	or	r24, r23
    18fe:	76 2f       	mov	r23, r22
    1900:	07 c0       	rjmp	.+14     	; 0x1910 <__fp_mintl+0x1e>
    1902:	66 23       	and	r22, r22
    1904:	11 f4       	brne	.+4      	; 0x190a <__fp_mintl+0x18>
    1906:	99 27       	eor	r25, r25
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <__fp_mintl+0x32>
    190a:	90 51       	subi	r25, 0x10	; 16
    190c:	86 2b       	or	r24, r22
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	2a f0       	brmi	.+10     	; 0x191e <__fp_mintl+0x2c>
    1914:	9a 95       	dec	r25
    1916:	66 0f       	add	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	88 1f       	adc	r24, r24
    191c:	da f7       	brpl	.-10     	; 0x1914 <__fp_mintl+0x22>
    191e:	88 0f       	add	r24, r24
    1920:	96 95       	lsr	r25
    1922:	87 95       	ror	r24
    1924:	97 f9       	bld	r25, 7
    1926:	08 95       	ret

00001928 <__fp_mpack>:
    1928:	9f 3f       	cpi	r25, 0xFF	; 255
    192a:	31 f0       	breq	.+12     	; 0x1938 <__fp_mpack_finite+0xc>

0000192c <__fp_mpack_finite>:
    192c:	91 50       	subi	r25, 0x01	; 1
    192e:	20 f4       	brcc	.+8      	; 0x1938 <__fp_mpack_finite+0xc>
    1930:	87 95       	ror	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	b7 95       	ror	r27
    1938:	88 0f       	add	r24, r24
    193a:	91 1d       	adc	r25, r1
    193c:	96 95       	lsr	r25
    193e:	87 95       	ror	r24
    1940:	97 f9       	bld	r25, 7
    1942:	08 95       	ret

00001944 <__fp_nan>:
    1944:	9f ef       	ldi	r25, 0xFF	; 255
    1946:	80 ec       	ldi	r24, 0xC0	; 192
    1948:	08 95       	ret

0000194a <__fp_pscA>:
    194a:	00 24       	eor	r0, r0
    194c:	0a 94       	dec	r0
    194e:	16 16       	cp	r1, r22
    1950:	17 06       	cpc	r1, r23
    1952:	18 06       	cpc	r1, r24
    1954:	09 06       	cpc	r0, r25
    1956:	08 95       	ret

00001958 <__fp_pscB>:
    1958:	00 24       	eor	r0, r0
    195a:	0a 94       	dec	r0
    195c:	12 16       	cp	r1, r18
    195e:	13 06       	cpc	r1, r19
    1960:	14 06       	cpc	r1, r20
    1962:	05 06       	cpc	r0, r21
    1964:	08 95       	ret

00001966 <__fp_round>:
    1966:	09 2e       	mov	r0, r25
    1968:	03 94       	inc	r0
    196a:	00 0c       	add	r0, r0
    196c:	11 f4       	brne	.+4      	; 0x1972 <__fp_round+0xc>
    196e:	88 23       	and	r24, r24
    1970:	52 f0       	brmi	.+20     	; 0x1986 <__fp_round+0x20>
    1972:	bb 0f       	add	r27, r27
    1974:	40 f4       	brcc	.+16     	; 0x1986 <__fp_round+0x20>
    1976:	bf 2b       	or	r27, r31
    1978:	11 f4       	brne	.+4      	; 0x197e <__fp_round+0x18>
    197a:	60 ff       	sbrs	r22, 0
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <__fp_round+0x20>
    197e:	6f 5f       	subi	r22, 0xFF	; 255
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	08 95       	ret

00001988 <__fp_split3>:
    1988:	57 fd       	sbrc	r21, 7
    198a:	90 58       	subi	r25, 0x80	; 128
    198c:	44 0f       	add	r20, r20
    198e:	55 1f       	adc	r21, r21
    1990:	59 f0       	breq	.+22     	; 0x19a8 <__fp_splitA+0x10>
    1992:	5f 3f       	cpi	r21, 0xFF	; 255
    1994:	71 f0       	breq	.+28     	; 0x19b2 <__fp_splitA+0x1a>
    1996:	47 95       	ror	r20

00001998 <__fp_splitA>:
    1998:	88 0f       	add	r24, r24
    199a:	97 fb       	bst	r25, 7
    199c:	99 1f       	adc	r25, r25
    199e:	61 f0       	breq	.+24     	; 0x19b8 <__fp_splitA+0x20>
    19a0:	9f 3f       	cpi	r25, 0xFF	; 255
    19a2:	79 f0       	breq	.+30     	; 0x19c2 <__fp_splitA+0x2a>
    19a4:	87 95       	ror	r24
    19a6:	08 95       	ret
    19a8:	12 16       	cp	r1, r18
    19aa:	13 06       	cpc	r1, r19
    19ac:	14 06       	cpc	r1, r20
    19ae:	55 1f       	adc	r21, r21
    19b0:	f2 cf       	rjmp	.-28     	; 0x1996 <__fp_split3+0xe>
    19b2:	46 95       	lsr	r20
    19b4:	f1 df       	rcall	.-30     	; 0x1998 <__fp_splitA>
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <__fp_splitA+0x30>
    19b8:	16 16       	cp	r1, r22
    19ba:	17 06       	cpc	r1, r23
    19bc:	18 06       	cpc	r1, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	f1 cf       	rjmp	.-30     	; 0x19a4 <__fp_splitA+0xc>
    19c2:	86 95       	lsr	r24
    19c4:	71 05       	cpc	r23, r1
    19c6:	61 05       	cpc	r22, r1
    19c8:	08 94       	sec
    19ca:	08 95       	ret

000019cc <__fp_trunc>:
    19cc:	e5 df       	rcall	.-54     	; 0x1998 <__fp_splitA>
    19ce:	a0 f0       	brcs	.+40     	; 0x19f8 <__fp_trunc+0x2c>
    19d0:	be e7       	ldi	r27, 0x7E	; 126
    19d2:	b9 17       	cp	r27, r25
    19d4:	88 f4       	brcc	.+34     	; 0x19f8 <__fp_trunc+0x2c>
    19d6:	bb 27       	eor	r27, r27
    19d8:	9f 38       	cpi	r25, 0x8F	; 143
    19da:	60 f4       	brcc	.+24     	; 0x19f4 <__fp_trunc+0x28>
    19dc:	16 16       	cp	r1, r22
    19de:	b1 1d       	adc	r27, r1
    19e0:	67 2f       	mov	r22, r23
    19e2:	78 2f       	mov	r23, r24
    19e4:	88 27       	eor	r24, r24
    19e6:	98 5f       	subi	r25, 0xF8	; 248
    19e8:	f7 cf       	rjmp	.-18     	; 0x19d8 <__fp_trunc+0xc>
    19ea:	86 95       	lsr	r24
    19ec:	77 95       	ror	r23
    19ee:	67 95       	ror	r22
    19f0:	b1 1d       	adc	r27, r1
    19f2:	93 95       	inc	r25
    19f4:	96 39       	cpi	r25, 0x96	; 150
    19f6:	c8 f3       	brcs	.-14     	; 0x19ea <__fp_trunc+0x1e>
    19f8:	08 95       	ret

000019fa <__fp_zero>:
    19fa:	e8 94       	clt

000019fc <__fp_szero>:
    19fc:	bb 27       	eor	r27, r27
    19fe:	66 27       	eor	r22, r22
    1a00:	77 27       	eor	r23, r23
    1a02:	cb 01       	movw	r24, r22
    1a04:	97 f9       	bld	r25, 7
    1a06:	08 95       	ret

00001a08 <lrint>:
    1a08:	c7 df       	rcall	.-114    	; 0x1998 <__fp_splitA>
    1a0a:	a8 f1       	brcs	.+106    	; 0x1a76 <lrint+0x6e>
    1a0c:	9e 57       	subi	r25, 0x7E	; 126
    1a0e:	a8 f1       	brcs	.+106    	; 0x1a7a <lrint+0x72>
    1a10:	98 51       	subi	r25, 0x18	; 24
    1a12:	60 f0       	brcs	.+24     	; 0x1a2c <lrint+0x24>
    1a14:	39 f1       	breq	.+78     	; 0x1a64 <lrint+0x5c>
    1a16:	98 30       	cpi	r25, 0x08	; 8
    1a18:	70 f5       	brcc	.+92     	; 0x1a76 <lrint+0x6e>
    1a1a:	09 2e       	mov	r0, r25
    1a1c:	99 27       	eor	r25, r25
    1a1e:	66 0f       	add	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	d1 f7       	brne	.-12     	; 0x1a1e <lrint+0x16>
    1a2a:	1c c0       	rjmp	.+56     	; 0x1a64 <lrint+0x5c>
    1a2c:	bb 27       	eor	r27, r27
    1a2e:	99 3f       	cpi	r25, 0xF9	; 249
    1a30:	4c f4       	brge	.+18     	; 0x1a44 <lrint+0x3c>
    1a32:	b1 11       	cpse	r27, r1
    1a34:	b1 e0       	ldi	r27, 0x01	; 1
    1a36:	b6 2b       	or	r27, r22
    1a38:	67 2f       	mov	r22, r23
    1a3a:	78 2f       	mov	r23, r24
    1a3c:	88 27       	eor	r24, r24
    1a3e:	98 5f       	subi	r25, 0xF8	; 248
    1a40:	b1 f7       	brne	.-20     	; 0x1a2e <lrint+0x26>
    1a42:	08 c0       	rjmp	.+16     	; 0x1a54 <lrint+0x4c>
    1a44:	86 95       	lsr	r24
    1a46:	77 95       	ror	r23
    1a48:	67 95       	ror	r22
    1a4a:	b7 95       	ror	r27
    1a4c:	08 f4       	brcc	.+2      	; 0x1a50 <lrint+0x48>
    1a4e:	b1 60       	ori	r27, 0x01	; 1
    1a50:	93 95       	inc	r25
    1a52:	c1 f7       	brne	.-16     	; 0x1a44 <lrint+0x3c>
    1a54:	bb 0f       	add	r27, r27
    1a56:	30 f4       	brcc	.+12     	; 0x1a64 <lrint+0x5c>
    1a58:	11 f4       	brne	.+4      	; 0x1a5e <lrint+0x56>
    1a5a:	60 ff       	sbrs	r22, 0
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <lrint+0x5c>
    1a5e:	6f 5f       	subi	r22, 0xFF	; 255
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	8f 4f       	sbci	r24, 0xFF	; 255
    1a64:	3e f4       	brtc	.+14     	; 0x1a74 <lrint+0x6c>
    1a66:	90 95       	com	r25
    1a68:	80 95       	com	r24
    1a6a:	70 95       	com	r23
    1a6c:	61 95       	neg	r22
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	08 95       	ret
    1a76:	68 94       	set
    1a78:	c1 cf       	rjmp	.-126    	; 0x19fc <__fp_szero>
    1a7a:	bf cf       	rjmp	.-130    	; 0x19fa <__fp_zero>

00001a7c <__mulsf3>:
    1a7c:	0b d0       	rcall	.+22     	; 0x1a94 <__mulsf3x>
    1a7e:	73 cf       	rjmp	.-282    	; 0x1966 <__fp_round>
    1a80:	64 df       	rcall	.-312    	; 0x194a <__fp_pscA>
    1a82:	28 f0       	brcs	.+10     	; 0x1a8e <__mulsf3+0x12>
    1a84:	69 df       	rcall	.-302    	; 0x1958 <__fp_pscB>
    1a86:	18 f0       	brcs	.+6      	; 0x1a8e <__mulsf3+0x12>
    1a88:	95 23       	and	r25, r21
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <__mulsf3+0x12>
    1a8c:	2c cf       	rjmp	.-424    	; 0x18e6 <__fp_inf>
    1a8e:	5a cf       	rjmp	.-332    	; 0x1944 <__fp_nan>
    1a90:	11 24       	eor	r1, r1
    1a92:	b4 cf       	rjmp	.-152    	; 0x19fc <__fp_szero>

00001a94 <__mulsf3x>:
    1a94:	79 df       	rcall	.-270    	; 0x1988 <__fp_split3>
    1a96:	a0 f3       	brcs	.-24     	; 0x1a80 <__mulsf3+0x4>

00001a98 <__mulsf3_pse>:
    1a98:	95 9f       	mul	r25, r21
    1a9a:	d1 f3       	breq	.-12     	; 0x1a90 <__mulsf3+0x14>
    1a9c:	95 0f       	add	r25, r21
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	55 1f       	adc	r21, r21
    1aa2:	62 9f       	mul	r22, r18
    1aa4:	f0 01       	movw	r30, r0
    1aa6:	72 9f       	mul	r23, r18
    1aa8:	bb 27       	eor	r27, r27
    1aaa:	f0 0d       	add	r31, r0
    1aac:	b1 1d       	adc	r27, r1
    1aae:	63 9f       	mul	r22, r19
    1ab0:	aa 27       	eor	r26, r26
    1ab2:	f0 0d       	add	r31, r0
    1ab4:	b1 1d       	adc	r27, r1
    1ab6:	aa 1f       	adc	r26, r26
    1ab8:	64 9f       	mul	r22, r20
    1aba:	66 27       	eor	r22, r22
    1abc:	b0 0d       	add	r27, r0
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	66 1f       	adc	r22, r22
    1ac2:	82 9f       	mul	r24, r18
    1ac4:	22 27       	eor	r18, r18
    1ac6:	b0 0d       	add	r27, r0
    1ac8:	a1 1d       	adc	r26, r1
    1aca:	62 1f       	adc	r22, r18
    1acc:	73 9f       	mul	r23, r19
    1ace:	b0 0d       	add	r27, r0
    1ad0:	a1 1d       	adc	r26, r1
    1ad2:	62 1f       	adc	r22, r18
    1ad4:	83 9f       	mul	r24, r19
    1ad6:	a0 0d       	add	r26, r0
    1ad8:	61 1d       	adc	r22, r1
    1ada:	22 1f       	adc	r18, r18
    1adc:	74 9f       	mul	r23, r20
    1ade:	33 27       	eor	r19, r19
    1ae0:	a0 0d       	add	r26, r0
    1ae2:	61 1d       	adc	r22, r1
    1ae4:	23 1f       	adc	r18, r19
    1ae6:	84 9f       	mul	r24, r20
    1ae8:	60 0d       	add	r22, r0
    1aea:	21 1d       	adc	r18, r1
    1aec:	82 2f       	mov	r24, r18
    1aee:	76 2f       	mov	r23, r22
    1af0:	6a 2f       	mov	r22, r26
    1af2:	11 24       	eor	r1, r1
    1af4:	9f 57       	subi	r25, 0x7F	; 127
    1af6:	50 40       	sbci	r21, 0x00	; 0
    1af8:	8a f0       	brmi	.+34     	; 0x1b1c <__mulsf3_pse+0x84>
    1afa:	e1 f0       	breq	.+56     	; 0x1b34 <__mulsf3_pse+0x9c>
    1afc:	88 23       	and	r24, r24
    1afe:	4a f0       	brmi	.+18     	; 0x1b12 <__mulsf3_pse+0x7a>
    1b00:	ee 0f       	add	r30, r30
    1b02:	ff 1f       	adc	r31, r31
    1b04:	bb 1f       	adc	r27, r27
    1b06:	66 1f       	adc	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	91 50       	subi	r25, 0x01	; 1
    1b0e:	50 40       	sbci	r21, 0x00	; 0
    1b10:	a9 f7       	brne	.-22     	; 0x1afc <__mulsf3_pse+0x64>
    1b12:	9e 3f       	cpi	r25, 0xFE	; 254
    1b14:	51 05       	cpc	r21, r1
    1b16:	70 f0       	brcs	.+28     	; 0x1b34 <__mulsf3_pse+0x9c>
    1b18:	e6 ce       	rjmp	.-564    	; 0x18e6 <__fp_inf>
    1b1a:	70 cf       	rjmp	.-288    	; 0x19fc <__fp_szero>
    1b1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b1e:	ec f3       	brlt	.-6      	; 0x1b1a <__mulsf3_pse+0x82>
    1b20:	98 3e       	cpi	r25, 0xE8	; 232
    1b22:	dc f3       	brlt	.-10     	; 0x1b1a <__mulsf3_pse+0x82>
    1b24:	86 95       	lsr	r24
    1b26:	77 95       	ror	r23
    1b28:	67 95       	ror	r22
    1b2a:	b7 95       	ror	r27
    1b2c:	f7 95       	ror	r31
    1b2e:	e7 95       	ror	r30
    1b30:	9f 5f       	subi	r25, 0xFF	; 255
    1b32:	c1 f7       	brne	.-16     	; 0x1b24 <__mulsf3_pse+0x8c>
    1b34:	fe 2b       	or	r31, r30
    1b36:	88 0f       	add	r24, r24
    1b38:	91 1d       	adc	r25, r1
    1b3a:	96 95       	lsr	r25
    1b3c:	87 95       	ror	r24
    1b3e:	97 f9       	bld	r25, 7
    1b40:	08 95       	ret

00001b42 <__udivmodsi4>:
    1b42:	a1 e2       	ldi	r26, 0x21	; 33
    1b44:	1a 2e       	mov	r1, r26
    1b46:	aa 1b       	sub	r26, r26
    1b48:	bb 1b       	sub	r27, r27
    1b4a:	fd 01       	movw	r30, r26
    1b4c:	0d c0       	rjmp	.+26     	; 0x1b68 <__udivmodsi4_ep>

00001b4e <__udivmodsi4_loop>:
    1b4e:	aa 1f       	adc	r26, r26
    1b50:	bb 1f       	adc	r27, r27
    1b52:	ee 1f       	adc	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	a2 17       	cp	r26, r18
    1b58:	b3 07       	cpc	r27, r19
    1b5a:	e4 07       	cpc	r30, r20
    1b5c:	f5 07       	cpc	r31, r21
    1b5e:	20 f0       	brcs	.+8      	; 0x1b68 <__udivmodsi4_ep>
    1b60:	a2 1b       	sub	r26, r18
    1b62:	b3 0b       	sbc	r27, r19
    1b64:	e4 0b       	sbc	r30, r20
    1b66:	f5 0b       	sbc	r31, r21

00001b68 <__udivmodsi4_ep>:
    1b68:	66 1f       	adc	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	1a 94       	dec	r1
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <__udivmodsi4_loop>
    1b74:	60 95       	com	r22
    1b76:	70 95       	com	r23
    1b78:	80 95       	com	r24
    1b7a:	90 95       	com	r25
    1b7c:	9b 01       	movw	r18, r22
    1b7e:	ac 01       	movw	r20, r24
    1b80:	bd 01       	movw	r22, r26
    1b82:	cf 01       	movw	r24, r30
    1b84:	08 95       	ret

00001b86 <__divmodsi4>:
    1b86:	05 2e       	mov	r0, r21
    1b88:	97 fb       	bst	r25, 7
    1b8a:	1e f4       	brtc	.+6      	; 0x1b92 <__divmodsi4+0xc>
    1b8c:	00 94       	com	r0
    1b8e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__negsi2>
    1b92:	57 fd       	sbrc	r21, 7
    1b94:	07 d0       	rcall	.+14     	; 0x1ba4 <__divmodsi4_neg2>
    1b96:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__udivmodsi4>
    1b9a:	07 fc       	sbrc	r0, 7
    1b9c:	03 d0       	rcall	.+6      	; 0x1ba4 <__divmodsi4_neg2>
    1b9e:	4e f4       	brtc	.+18     	; 0x1bb2 <__divmodsi4_exit>
    1ba0:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__negsi2>

00001ba4 <__divmodsi4_neg2>:
    1ba4:	50 95       	com	r21
    1ba6:	40 95       	com	r20
    1ba8:	30 95       	com	r19
    1baa:	21 95       	neg	r18
    1bac:	3f 4f       	sbci	r19, 0xFF	; 255
    1bae:	4f 4f       	sbci	r20, 0xFF	; 255
    1bb0:	5f 4f       	sbci	r21, 0xFF	; 255

00001bb2 <__divmodsi4_exit>:
    1bb2:	08 95       	ret

00001bb4 <__negsi2>:
    1bb4:	90 95       	com	r25
    1bb6:	80 95       	com	r24
    1bb8:	70 95       	com	r23
    1bba:	61 95       	neg	r22
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	08 95       	ret

00001bc4 <__umulhisi3>:
    1bc4:	a2 9f       	mul	r26, r18
    1bc6:	b0 01       	movw	r22, r0
    1bc8:	b3 9f       	mul	r27, r19
    1bca:	c0 01       	movw	r24, r0
    1bcc:	a3 9f       	mul	r26, r19
    1bce:	70 0d       	add	r23, r0
    1bd0:	81 1d       	adc	r24, r1
    1bd2:	11 24       	eor	r1, r1
    1bd4:	91 1d       	adc	r25, r1
    1bd6:	b2 9f       	mul	r27, r18
    1bd8:	70 0d       	add	r23, r0
    1bda:	81 1d       	adc	r24, r1
    1bdc:	11 24       	eor	r1, r1
    1bde:	91 1d       	adc	r25, r1
    1be0:	08 95       	ret

00001be2 <_exit>:
    1be2:	f8 94       	cli

00001be4 <__stop_program>:
    1be4:	ff cf       	rjmp	.-2      	; 0x1be4 <__stop_program>
