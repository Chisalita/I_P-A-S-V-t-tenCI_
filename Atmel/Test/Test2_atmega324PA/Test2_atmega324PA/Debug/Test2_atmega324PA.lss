
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001ab8  00001b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000262  00800104  00800104  00001b50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e51  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098e  00000000  00000000  00003bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aac  00000000  00000000  0000457f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007b8  00000000  00000000  0000502c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000095e  00000000  00000000  000057e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fff  00000000  00000000  00006142  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00008141  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 eb       	ldi	r30, 0xB8	; 184
      90:	fa e1       	ldi	r31, 0x1A	; 26
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 30       	cpi	r26, 0x04	; 4
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a4 e0       	ldi	r26, 0x04	; 4
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 36       	cpi	r26, 0x66	; 102
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 40 01 	call	0x280	; 0x280 <main>
      b2:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initAll>:

int bune =0; //teste


void initAll(){
	initUSART1(9600);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 73 07 	call	0xee6	; 0xee6 <initUSART1>
	initTimer0();
      c2:	0e 94 91 03 	call	0x722	; 0x722 <initTimer0>
	initTimer1();
      c6:	0e 94 09 0a 	call	0x1412	; 0x1412 <initTimer1>
	initTimer2();
      ca:	0e 94 ac 03 	call	0x758	; 0x758 <initTimer2>
	initSensors();
      ce:	0e 94 c7 04 	call	0x98e	; 0x98e <initSensors>
      d2:	08 95       	ret

000000d4 <executeCommands>:
	}
	
}


void executeCommands(){
      d4:	bf 92       	push	r11
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	61 97       	sbiw	r28, 0x11	; 17
      ec:	0f b6       	in	r0, 0x3f	; 63
      ee:	f8 94       	cli
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	0f be       	out	0x3f, r0	; 63
      f4:	cd bf       	out	0x3d, r28	; 61
		//startUltrasonicMeasure();
	int8_t s;
	command lastcmd = getLastCommand(&s);
      f6:	ce 01       	movw	r24, r28
      f8:	01 96       	adiw	r24, 0x01	; 1
      fa:	0e 94 b3 08 	call	0x1166	; 0x1166 <getLastCommand>
      fe:	d3 2e       	mov	r13, r19
     100:	c4 2e       	mov	r12, r20
     102:	2a 83       	std	Y+2, r18	; 0x02
     104:	3b 83       	std	Y+3, r19	; 0x03
     106:	4c 83       	std	Y+4, r20	; 0x04
     108:	5d 83       	std	Y+5, r21	; 0x05
     10a:	6e 83       	std	Y+6, r22	; 0x06
     10c:	7f 83       	std	Y+7, r23	; 0x07
     10e:	88 87       	std	Y+8, r24	; 0x08
     110:	ed 80       	ldd	r14, Y+5	; 0x05
     112:	fe 80       	ldd	r15, Y+6	; 0x06
	if(s==1){
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	09 f0       	breq	.+2      	; 0x11c <executeCommands+0x48>
     11a:	43 c0       	rjmp	.+134    	; 0x1a2 <executeCommands+0xce>
		//CHECK CRC
		
		if(lastcmd.time){
     11c:	e1 14       	cp	r14, r1
     11e:	f1 04       	cpc	r15, r1
     120:	11 f1       	breq	.+68     	; 0x166 <executeCommands+0x92>
					
				isAutonomous = 0;	
     122:	10 92 09 01 	sts	0x0109, r1
     126:	10 92 08 01 	sts	0x0108, r1
				response resp;
				resp.header = lastcmd.header;
     12a:	02 2f       	mov	r16, r18
     12c:	29 87       	std	Y+9, r18	; 0x09
				resp.sensorInfo[0]=2;
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	8a 87       	std	Y+10, r24	; 0x0a
				resp.sensorInfo[1]=3;
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	8b 87       	std	Y+11, r24	; 0x0b
				resp.time=lastcmd.time;
     136:	7e 2d       	mov	r23, r14
     138:	f9 8a       	std	Y+17, r15	; 0x11
     13a:	e8 8a       	std	Y+16, r14	; 0x10
				sendResponse(resp);
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	23 e0       	ldi	r18, 0x03	; 3
     140:	3c 85       	ldd	r19, Y+12	; 0x0c
     142:	4d 85       	ldd	r20, Y+13	; 0x0d
     144:	5e 85       	ldd	r21, Y+14	; 0x0e
     146:	6f 85       	ldd	r22, Y+15	; 0x0f
     148:	89 89       	ldd	r24, Y+17	; 0x11
     14a:	0e 94 06 08 	call	0x100c	; 0x100c <sendResponse>
				
			if(lastcmd.right!=0){
     14e:	dd 20       	and	r13, r13
     150:	29 f0       	breq	.+10     	; 0x15c <executeCommands+0x88>
				driveRightForTime(lastcmd.right, lastcmd.time);
     152:	b7 01       	movw	r22, r14
     154:	8d 2d       	mov	r24, r13
     156:	0e 94 2b 03 	call	0x656	; 0x656 <driveRightForTime>
     15a:	23 c0       	rjmp	.+70     	; 0x1a2 <executeCommands+0xce>
			}else{
				driveForwardForTime(lastcmd.forward, lastcmd.time);
     15c:	b7 01       	movw	r22, r14
     15e:	8c 2d       	mov	r24, r12
     160:	0e 94 9d 02 	call	0x53a	; 0x53a <driveForwardForTime>
     164:	1e c0       	rjmp	.+60     	; 0x1a2 <executeCommands+0xce>
			}
			
		}else{
			isAutonomous=1;
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	30 93 09 01 	sts	0x0109, r19
     16e:	20 93 08 01 	sts	0x0108, r18
			car_speed = lastcmd.forward;
     172:	c0 92 04 01 	sts	0x0104, r12
			changePwm_MotorLB(car_speed);
     176:	80 91 04 01 	lds	r24, 0x0104
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 13 02 	call	0x426	; 0x426 <changePwm_MotorLB>
			changePwm_MotorRB(car_speed);
     180:	80 91 04 01 	lds	r24, 0x0104
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 42 02 	call	0x484	; 0x484 <changePwm_MotorRB>
			changePwm_MotorLF(car_speed);
     18a:	80 91 04 01 	lds	r24, 0x0104
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <changePwm_MotorLF>
			changePwm_MotorRF(car_speed);
     194:	80 91 04 01 	lds	r24, 0x0104
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 2a 02 	call	0x454	; 0x454 <changePwm_MotorRF>
			changeMotorDirectionLeft();
     19e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <changeMotorDirectionLeft>
		}

	}
	
		
			if(isAutonomous){
     1a2:	80 91 08 01 	lds	r24, 0x0108
     1a6:	90 91 09 01 	lds	r25, 0x0109
     1aa:	89 2b       	or	r24, r25
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <executeCommands+0xdc>
     1ae:	58 c0       	rjmp	.+176    	; 0x260 <executeCommands+0x18c>
			cm_IR = getInfraredRightDistance();
     1b0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <getInfraredRightDistance>
     1b4:	80 93 07 01 	sts	0x0107, r24
			mm_US = getAverageUltrasonicValue(3);
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <getAverageUltrasonicValue>
     1be:	90 93 06 01 	sts	0x0106, r25
     1c2:	80 93 05 01 	sts	0x0105, r24
							
			if(cm_IR<20 && (turning >> 1 == 0)){
     1c6:	80 91 07 01 	lds	r24, 0x0107
     1ca:	84 31       	cpi	r24, 0x14	; 20
     1cc:	a0 f4       	brcc	.+40     	; 0x1f6 <executeCommands+0x122>
     1ce:	80 91 0a 01 	lds	r24, 0x010A
     1d2:	90 91 0b 01 	lds	r25, 0x010B
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	89 2b       	or	r24, r25
     1dc:	61 f4       	brne	.+24     	; 0x1f6 <executeCommands+0x122>
				//turnRight_90degrees();
				turnLeft();
     1de:	0e 94 7f 03 	call	0x6fe	; 0x6fe <turnLeft>
				turning|=1<<1;
     1e2:	80 91 0a 01 	lds	r24, 0x010A
     1e6:	90 91 0b 01 	lds	r25, 0x010B
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	90 93 0b 01 	sts	0x010B, r25
     1f0:	80 93 0a 01 	sts	0x010A, r24
     1f4:	35 c0       	rjmp	.+106    	; 0x260 <executeCommands+0x18c>
				//breakAll();
				}else if((turning >> 1 == 1) && cm_IR>=20){
     1f6:	80 91 0a 01 	lds	r24, 0x010A
     1fa:	90 91 0b 01 	lds	r25, 0x010B
     1fe:	9c 01       	movw	r18, r24
     200:	35 95       	asr	r19
     202:	27 95       	ror	r18
     204:	21 30       	cpi	r18, 0x01	; 1
     206:	31 05       	cpc	r19, r1
     208:	71 f4       	brne	.+28     	; 0x226 <executeCommands+0x152>
     20a:	20 91 07 01 	lds	r18, 0x0107
     20e:	24 31       	cpi	r18, 0x14	; 20
     210:	50 f0       	brcs	.+20     	; 0x226 <executeCommands+0x152>
				turning&= ~(1<<1);
     212:	8d 7f       	andi	r24, 0xFD	; 253
     214:	90 93 0b 01 	sts	0x010B, r25
     218:	80 93 0a 01 	sts	0x010A, r24
				stopTurning();
     21c:	0e 94 77 03 	call	0x6ee	; 0x6ee <stopTurning>
				reverse();
     220:	0e 94 85 03 	call	0x70a	; 0x70a <reverse>
     224:	1d c0       	rjmp	.+58     	; 0x260 <executeCommands+0x18c>
				
			}else if(mm_US<250 && ((turning & 1) == 0)){
     226:	20 91 05 01 	lds	r18, 0x0105
     22a:	30 91 06 01 	lds	r19, 0x0106
     22e:	2a 3f       	cpi	r18, 0xFA	; 250
     230:	31 05       	cpc	r19, r1
     232:	40 f4       	brcc	.+16     	; 0x244 <executeCommands+0x170>
     234:	80 fd       	sbrc	r24, 0
     236:	08 c0       	rjmp	.+16     	; 0x248 <executeCommands+0x174>
				//turnRight_90degrees();
			//	turnLeft();
				turning|=1;
     238:	81 60       	ori	r24, 0x01	; 1
     23a:	90 93 0b 01 	sts	0x010B, r25
     23e:	80 93 0a 01 	sts	0x010A, r24
     242:	0e c0       	rjmp	.+28     	; 0x260 <executeCommands+0x18c>
				//breakAll();
				}else if(((turning &1) ==1) && mm_US>=250){
     244:	80 ff       	sbrs	r24, 0
     246:	0c c0       	rjmp	.+24     	; 0x260 <executeCommands+0x18c>
     248:	20 91 05 01 	lds	r18, 0x0105
     24c:	30 91 06 01 	lds	r19, 0x0106
     250:	2a 3f       	cpi	r18, 0xFA	; 250
     252:	31 05       	cpc	r19, r1
     254:	28 f0       	brcs	.+10     	; 0x260 <executeCommands+0x18c>
				turning&=~1;
     256:	8e 7f       	andi	r24, 0xFE	; 254
     258:	90 93 0b 01 	sts	0x010B, r25
     25c:	80 93 0a 01 	sts	0x010A, r24



		}
	
     260:	61 96       	adiw	r28, 0x11	; 17
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	08 95       	ret

00000280 <main>:


int main(void)
{
	
	initAll();
     280:	0e 94 5d 00 	call	0xba	; 0xba <initAll>
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
     284:	08 9a       	sbi	0x01, 0	; 1
	
	sei();
     286:	78 94       	sei

	breakAll();
     288:	0e 94 8a 03 	call	0x714	; 0x714 <breakAll>
		
	
	while(1)
	{
		executeCommands();		
     28c:	0e 94 6a 00 	call	0xd4	; 0xd4 <executeCommands>
     290:	fd cf       	rjmp	.-6      	; 0x28c <main+0xc>

00000292 <move>:
	changeMotorDirectionLeft();
	changeMotorDirectionRight();

}

void move(uint16_t argc, int16_t* argv){
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	28 97       	sbiw	r28, 0x08	; 8
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
     2b2:	8b 01       	movw	r16, r22
	
	if(argc == 2){
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	91 05       	cpc	r25, r1
     2b8:	09 f0       	breq	.+2      	; 0x2bc <move+0x2a>
     2ba:	6f c0       	rjmp	.+222    	; 0x39a <move+0x108>
	//setez directia initiala
	MOTOR_LEFT_DIR_PORT2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     2bc:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_LEFT_DIR_PORT1 &= ~(1<<MOTOR_LEFT_DIR_PIN1x);
     2be:	40 98       	cbi	0x08, 0	; 8
	
	MOTOR_RIGHT_DIR_PORT2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     2c0:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RIGHT_DIR_PORT1 &= ~(1<<MOTOR_RIGHT_DIR_PIN1x);
     2c2:	46 98       	cbi	0x08, 6	; 8
	
	int8_t d;
	
	d = argv[0] >> 8;
     2c4:	fb 01       	movw	r30, r22
     2c6:	61 81       	ldd	r22, Z+1	; 0x01
	
	if (d < 0){
		d=-d;
     2c8:	67 fd       	sbrc	r22, 7
     2ca:	61 95       	neg	r22
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     2cc:	77 27       	eor	r23, r23
     2ce:	67 fd       	sbrc	r22, 7
     2d0:	70 95       	com	r23
     2d2:	87 2f       	mov	r24, r23
     2d4:	97 2f       	mov	r25, r23
     2d6:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	48 ec       	ldi	r20, 0xC8	; 200
     2e0:	52 e4       	ldi	r21, 0x42	; 66
     2e2:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	4f e7       	ldi	r20, 0x7F	; 127
     2ec:	53 e4       	ldi	r21, 0x43	; 67
     2ee:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     2f2:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     2f6:	67 bd       	out	0x27, r22	; 39
		
	}
	changePwm_MotorLF(d);
	
	
	d = argv[0] & 0xff;
     2f8:	f8 01       	movw	r30, r16
     2fa:	60 81       	ld	r22, Z
	
	if (d < 0){ // aici pot pune un si
		d=-d;
     2fc:	67 fd       	sbrc	r22, 7
     2fe:	61 95       	neg	r22
void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     300:	77 27       	eor	r23, r23
     302:	67 fd       	sbrc	r22, 7
     304:	70 95       	com	r23
     306:	87 2f       	mov	r24, r23
     308:	97 2f       	mov	r25, r23
     30a:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	48 ec       	ldi	r20, 0xC8	; 200
     314:	52 e4       	ldi	r21, 0x42	; 66
     316:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	4f e7       	ldi	r20, 0x7F	; 127
     320:	53 e4       	ldi	r21, 0x43	; 67
     322:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     326:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     32a:	68 bd       	out	0x28, r22	; 40
	if (d < 0){ // aici pot pune un si
		d=-d;
	}
	changePwm_MotorLB(d);

	d = argv[1] >> 8;
     32c:	f8 01       	movw	r30, r16
     32e:	63 81       	ldd	r22, Z+3	; 0x03
	if (d < 0){
		d=-d;
     330:	67 fd       	sbrc	r22, 7
     332:	61 95       	neg	r22
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     334:	77 27       	eor	r23, r23
     336:	67 fd       	sbrc	r22, 7
     338:	70 95       	com	r23
     33a:	87 2f       	mov	r24, r23
     33c:	97 2f       	mov	r25, r23
     33e:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	48 ec       	ldi	r20, 0xC8	; 200
     348:	52 e4       	ldi	r21, 0x42	; 66
     34a:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	4f e7       	ldi	r20, 0x7F	; 127
     354:	53 e4       	ldi	r21, 0x43	; 67
     356:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     35a:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     35e:	60 93 b3 00 	sts	0x00B3, r22
			changeMotorDirectionRight();
		}
	}
	changePwm_MotorRF(d);
	
	d = argv[1] & 0xff;
     362:	f8 01       	movw	r30, r16
     364:	62 81       	ldd	r22, Z+2	; 0x02
	
	if (d < 0){
		d=-d;
     366:	67 fd       	sbrc	r22, 7
     368:	61 95       	neg	r22
void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     36a:	77 27       	eor	r23, r23
     36c:	67 fd       	sbrc	r22, 7
     36e:	70 95       	com	r23
     370:	87 2f       	mov	r24, r23
     372:	97 2f       	mov	r25, r23
     374:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	48 ec       	ldi	r20, 0xC8	; 200
     37e:	52 e4       	ldi	r21, 0x42	; 66
     380:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	4f e7       	ldi	r20, 0x7F	; 127
     38a:	53 e4       	ldi	r21, 0x43	; 67
     38c:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     390:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     394:	60 93 b4 00 	sts	0x00B4, r22
     398:	20 c0       	rjmp	.+64     	; 0x3da <move+0x148>
	
	if (d < 0){
		d=-d;
	}	
	changePwm_MotorRB(d);
	}else if (argc == 3){
     39a:	03 97       	sbiw	r24, 0x03	; 3
     39c:	f1 f4       	brne	.+60     	; 0x3da <move+0x148>
		
	int16_t arg1[2];
	arg1[0] = argv[0];
     39e:	fb 01       	movw	r30, r22
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	9e 83       	std	Y+6, r25	; 0x06
     3a6:	8d 83       	std	Y+5, r24	; 0x05
	arg1[1] = argv[1];
     3a8:	82 81       	ldd	r24, Z+2	; 0x02
     3aa:	93 81       	ldd	r25, Z+3	; 0x03
     3ac:	98 87       	std	Y+8, r25	; 0x08
     3ae:	8f 83       	std	Y+7, r24	; 0x07
	
	int16_t arg2[] = {0, 0};
     3b0:	1a 82       	std	Y+2, r1	; 0x02
     3b2:	19 82       	std	Y+1, r1	; 0x01
     3b4:	1c 82       	std	Y+4, r1	; 0x04
     3b6:	1b 82       	std	Y+3, r1	; 0x03
	executeCommandForTime(&move, &move, 2, arg1,2, arg2,argv[2]);
     3b8:	c4 80       	ldd	r12, Z+4	; 0x04
     3ba:	d5 80       	ldd	r13, Z+5	; 0x05
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	7c 01       	movw	r14, r24
     3c2:	02 e0       	ldi	r16, 0x02	; 2
     3c4:	10 e0       	ldi	r17, 0x00	; 0
     3c6:	9e 01       	movw	r18, r28
     3c8:	2b 5f       	subi	r18, 0xFB	; 251
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	42 e0       	ldi	r20, 0x02	; 2
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	69 e4       	ldi	r22, 0x49	; 73
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	cb 01       	movw	r24, r22
     3d6:	0e 94 c3 09 	call	0x1386	; 0x1386 <executeCommandForTime>
	
	}
	
}
     3da:	28 96       	adiw	r28, 0x08	; 8
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	08 95       	ret

000003f8 <changePwm_MotorLF>:
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     3f8:	bc 01       	movw	r22, r24
     3fa:	88 27       	eor	r24, r24
     3fc:	77 fd       	sbrc	r23, 7
     3fe:	80 95       	com	r24
     400:	98 2f       	mov	r25, r24
     402:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	48 ec       	ldi	r20, 0xC8	; 200
     40c:	52 e4       	ldi	r21, 0x42	; 66
     40e:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	4f e7       	ldi	r20, 0x7F	; 127
     418:	53 e4       	ldi	r21, 0x43	; 67
     41a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     41e:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     422:	67 bd       	out	0x27, r22	; 39
     424:	08 95       	ret

00000426 <changePwm_MotorLB>:
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     426:	bc 01       	movw	r22, r24
     428:	88 27       	eor	r24, r24
     42a:	77 fd       	sbrc	r23, 7
     42c:	80 95       	com	r24
     42e:	98 2f       	mov	r25, r24
     430:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	48 ec       	ldi	r20, 0xC8	; 200
     43a:	52 e4       	ldi	r21, 0x42	; 66
     43c:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	4f e7       	ldi	r20, 0x7F	; 127
     446:	53 e4       	ldi	r21, 0x43	; 67
     448:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     44c:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     450:	68 bd       	out	0x28, r22	; 40
     452:	08 95       	ret

00000454 <changePwm_MotorRF>:
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     454:	bc 01       	movw	r22, r24
     456:	88 27       	eor	r24, r24
     458:	77 fd       	sbrc	r23, 7
     45a:	80 95       	com	r24
     45c:	98 2f       	mov	r25, r24
     45e:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	48 ec       	ldi	r20, 0xC8	; 200
     468:	52 e4       	ldi	r21, 0x42	; 66
     46a:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	4f e7       	ldi	r20, 0x7F	; 127
     474:	53 e4       	ldi	r21, 0x43	; 67
     476:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     47a:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     47e:	60 93 b3 00 	sts	0x00B3, r22
     482:	08 95       	ret

00000484 <changePwm_MotorRB>:
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     484:	bc 01       	movw	r22, r24
     486:	88 27       	eor	r24, r24
     488:	77 fd       	sbrc	r23, 7
     48a:	80 95       	com	r24
     48c:	98 2f       	mov	r25, r24
     48e:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	48 ec       	ldi	r20, 0xC8	; 200
     498:	52 e4       	ldi	r21, 0x42	; 66
     49a:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	4f e7       	ldi	r20, 0x7F	; 127
     4a4:	53 e4       	ldi	r21, 0x43	; 67
     4a6:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     4aa:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     4ae:	60 93 b4 00 	sts	0x00B4, r22
     4b2:	08 95       	ret

000004b4 <driveBackwardForTime>:
		executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
	}	
	
}

void driveBackwardForTime(uint8_t pwm, uint16_t time){
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	2a 97       	sbiw	r28, 0x0a	; 10
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
	
		//check if it is a negative number and if it is call the complementary function
		if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     4d4:	88 23       	and	r24, r24
     4d6:	24 f4       	brge	.+8      	; 0x4e0 <driveBackwardForTime+0x2c>
			//it is a negative pwm
			int8_t pwm_signed = pwm;
			pwm_signed = -pwm_signed;
			driveForwardForTime(pwm_signed, time);
     4d8:	81 95       	neg	r24
     4da:	0e 94 9d 02 	call	0x53a	; 0x53a <driveForwardForTime>
     4de:	1e c0       	rjmp	.+60     	; 0x51c <driveBackwardForTime+0x68>
		}
		else
		{
			int16_t arg1[3];
			int16_t arg2[]= {0, 0};
     4e0:	18 86       	std	Y+8, r1	; 0x08
     4e2:	1f 82       	std	Y+7, r1	; 0x07
     4e4:	1a 86       	std	Y+10, r1	; 0x0a
     4e6:	19 86       	std	Y+9, r1	; 0x09
			
			// the pwm is for backward but expressed like forward
			// it must be reversed
			
			int8_t pwm_signed = pwm;
			pwm_signed = -pwm_signed;
     4e8:	81 95       	neg	r24
			//change back to unsigned so that the bit operations work properly
			pwm = pwm_signed;
			
			arg1[0] = pwm;
     4ea:	90 e0       	ldi	r25, 0x00	; 0
			arg1[0] |= pwm << 8;
     4ec:	38 2f       	mov	r19, r24
     4ee:	22 27       	eor	r18, r18
     4f0:	82 2b       	or	r24, r18
     4f2:	93 2b       	or	r25, r19
     4f4:	9a 83       	std	Y+2, r25	; 0x02
     4f6:	89 83       	std	Y+1, r24	; 0x01
			arg1[1] = pwm;
			arg1[1] |= pwm << 8;
     4f8:	9c 83       	std	Y+4, r25	; 0x04
     4fa:	8b 83       	std	Y+3, r24	; 0x03
			
			executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
     4fc:	6b 01       	movw	r12, r22
     4fe:	ce 01       	movw	r24, r28
     500:	07 96       	adiw	r24, 0x07	; 7
     502:	7c 01       	movw	r14, r24
     504:	02 e0       	ldi	r16, 0x02	; 2
     506:	10 e0       	ldi	r17, 0x00	; 0
     508:	9e 01       	movw	r18, r28
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
     50e:	42 e0       	ldi	r20, 0x02	; 2
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	69 e4       	ldi	r22, 0x49	; 73
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	cb 01       	movw	r24, r22
     518:	0e 94 c3 09 	call	0x1386	; 0x1386 <executeCommandForTime>
		}
	
	
}
     51c:	2a 96       	adiw	r28, 0x0a	; 10
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	08 95       	ret

0000053a <driveForwardForTime>:
	executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
	}
	
}

void driveForwardForTime(uint8_t pwm, uint16_t time){
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	2a 97       	sbiw	r28, 0x0a	; 10
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     55a:	88 23       	and	r24, r24
     55c:	24 f4       	brge	.+8      	; 0x566 <driveForwardForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		driveBackwardForTime(pwm_signed, time);
     55e:	81 95       	neg	r24
     560:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <driveBackwardForTime>
     564:	1d c0       	rjmp	.+58     	; 0x5a0 <driveForwardForTime+0x66>
	} 
	else
	{
		int16_t arg1[3];
		int16_t arg2[]= {0, 0};
     566:	18 86       	std	Y+8, r1	; 0x08
     568:	1f 82       	std	Y+7, r1	; 0x07
     56a:	1a 86       	std	Y+10, r1	; 0x0a
     56c:	19 86       	std	Y+9, r1	; 0x09
		
		arg1[0] = pwm;
     56e:	90 e0       	ldi	r25, 0x00	; 0
		arg1[0] |= pwm << 8;
     570:	38 2f       	mov	r19, r24
     572:	22 27       	eor	r18, r18
     574:	82 2b       	or	r24, r18
     576:	93 2b       	or	r25, r19
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	89 83       	std	Y+1, r24	; 0x01
		arg1[1] = pwm;
		arg1[1] |= pwm << 8;
     57c:	9c 83       	std	Y+4, r25	; 0x04
     57e:	8b 83       	std	Y+3, r24	; 0x03

		executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
     580:	6b 01       	movw	r12, r22
     582:	ce 01       	movw	r24, r28
     584:	07 96       	adiw	r24, 0x07	; 7
     586:	7c 01       	movw	r14, r24
     588:	02 e0       	ldi	r16, 0x02	; 2
     58a:	10 e0       	ldi	r17, 0x00	; 0
     58c:	9e 01       	movw	r18, r28
     58e:	2f 5f       	subi	r18, 0xFF	; 255
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	42 e0       	ldi	r20, 0x02	; 2
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	69 e4       	ldi	r22, 0x49	; 73
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	cb 01       	movw	r24, r22
     59c:	0e 94 c3 09 	call	0x1386	; 0x1386 <executeCommandForTime>
	}	
	
}
     5a0:	2a 96       	adiw	r28, 0x0a	; 10
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	08 95       	ret

000005be <driveLeftForTime>:
	
}



void driveLeftForTime(uint8_t pwm, uint16_t time){
     5be:	cf 92       	push	r12
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	2a 97       	sbiw	r28, 0x0a	; 10
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     5de:	88 23       	and	r24, r24
     5e0:	24 f4       	brge	.+8      	; 0x5ea <driveLeftForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		
		driveRightForTime(pwm_signed, time);
     5e2:	81 95       	neg	r24
     5e4:	0e 94 2b 03 	call	0x656	; 0x656 <driveRightForTime>
     5e8:	27 c0       	rjmp	.+78     	; 0x638 <driveLeftForTime+0x7a>
		
		}else{
		
		int16_t arg1[] = {0x5050, 0xB0B0};
     5ea:	20 e5       	ldi	r18, 0x50	; 80
     5ec:	30 e5       	ldi	r19, 0x50	; 80
     5ee:	38 87       	std	Y+8, r19	; 0x08
     5f0:	2f 83       	std	Y+7, r18	; 0x07
     5f2:	20 eb       	ldi	r18, 0xB0	; 176
     5f4:	30 eb       	ldi	r19, 0xB0	; 176
     5f6:	3a 87       	std	Y+10, r19	; 0x0a
     5f8:	29 87       	std	Y+9, r18	; 0x09
		int16_t arg2[3];
		
		arg2[0] = pwm;
     5fa:	90 e0       	ldi	r25, 0x00	; 0
		arg2[0] |= pwm << 8;
     5fc:	38 2f       	mov	r19, r24
     5fe:	22 27       	eor	r18, r18
     600:	82 2b       	or	r24, r18
     602:	93 2b       	or	r25, r19
     604:	9a 83       	std	Y+2, r25	; 0x02
     606:	89 83       	std	Y+1, r24	; 0x01
		arg2[1] = pwm;
		arg2[1] |= pwm << 8;
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	8b 83       	std	Y+3, r24	; 0x03

		arg2[2] = time;
     60c:	7e 83       	std	Y+6, r23	; 0x06
     60e:	6d 83       	std	Y+5, r22	; 0x05
		
		executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
     610:	0f 2e       	mov	r0, r31
     612:	fc e8       	ldi	r31, 0x8C	; 140
     614:	cf 2e       	mov	r12, r31
     616:	d1 2c       	mov	r13, r1
     618:	f0 2d       	mov	r31, r0
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	7c 01       	movw	r14, r24
     620:	03 e0       	ldi	r16, 0x03	; 3
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	9e 01       	movw	r18, r28
     626:	29 5f       	subi	r18, 0xF9	; 249
     628:	3f 4f       	sbci	r19, 0xFF	; 255
     62a:	42 e0       	ldi	r20, 0x02	; 2
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	69 e4       	ldi	r22, 0x49	; 73
     630:	71 e0       	ldi	r23, 0x01	; 1
     632:	cb 01       	movw	r24, r22
     634:	0e 94 c3 09 	call	0x1386	; 0x1386 <executeCommandForTime>
	}
	
}
     638:	2a 96       	adiw	r28, 0x0a	; 10
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	08 95       	ret

00000656 <driveRightForTime>:

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
}
	 
void driveRightForTime(uint8_t pwm, uint16_t time){
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	2a 97       	sbiw	r28, 0x0a	; 10
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
	
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){ 
     676:	88 23       	and	r24, r24
     678:	24 f4       	brge	.+8      	; 0x682 <driveRightForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		
		driveLeftForTime(pwm_signed, time);
     67a:	81 95       	neg	r24
     67c:	0e 94 df 02 	call	0x5be	; 0x5be <driveLeftForTime>
     680:	27 c0       	rjmp	.+78     	; 0x6d0 <driveRightForTime+0x7a>
		
	}else{
	
	int16_t arg1[] = {0xB0B0, 0x5050};
     682:	20 eb       	ldi	r18, 0xB0	; 176
     684:	30 eb       	ldi	r19, 0xB0	; 176
     686:	38 87       	std	Y+8, r19	; 0x08
     688:	2f 83       	std	Y+7, r18	; 0x07
     68a:	20 e5       	ldi	r18, 0x50	; 80
     68c:	30 e5       	ldi	r19, 0x50	; 80
     68e:	3a 87       	std	Y+10, r19	; 0x0a
     690:	29 87       	std	Y+9, r18	; 0x09
	int16_t arg2[3];	
	
	arg2[0] = pwm;
     692:	90 e0       	ldi	r25, 0x00	; 0
	arg2[0] |= pwm << 8;	
     694:	38 2f       	mov	r19, r24
     696:	22 27       	eor	r18, r18
     698:	82 2b       	or	r24, r18
     69a:	93 2b       	or	r25, r19
     69c:	9a 83       	std	Y+2, r25	; 0x02
     69e:	89 83       	std	Y+1, r24	; 0x01
	arg2[1] = pwm;
	arg2[1] |= pwm << 8;	
     6a0:	9c 83       	std	Y+4, r25	; 0x04
     6a2:	8b 83       	std	Y+3, r24	; 0x03

	arg2[2] = time;
     6a4:	7e 83       	std	Y+6, r23	; 0x06
     6a6:	6d 83       	std	Y+5, r22	; 0x05

	executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
     6a8:	0f 2e       	mov	r0, r31
     6aa:	fc e8       	ldi	r31, 0x8C	; 140
     6ac:	cf 2e       	mov	r12, r31
     6ae:	d1 2c       	mov	r13, r1
     6b0:	f0 2d       	mov	r31, r0
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	7c 01       	movw	r14, r24
     6b8:	03 e0       	ldi	r16, 0x03	; 3
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	9e 01       	movw	r18, r28
     6be:	29 5f       	subi	r18, 0xF9	; 249
     6c0:	3f 4f       	sbci	r19, 0xFF	; 255
     6c2:	42 e0       	ldi	r20, 0x02	; 2
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	69 e4       	ldi	r22, 0x49	; 73
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	cb 01       	movw	r24, r22
     6cc:	0e 94 c3 09 	call	0x1386	; 0x1386 <executeCommandForTime>
	}
	
}
     6d0:	2a 96       	adiw	r28, 0x0a	; 10
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <stopTurning>:
}


void stopTurning(){
		//setez directia initiala
		MOTOR_LEFT_DIR_DDR2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     6ee:	39 9a       	sbi	0x07, 1	; 7
		MOTOR_LEFT_DIR_PORT1 &= ~(1<<MOTOR_LEFT_DIR_PIN1x);		
     6f0:	40 98       	cbi	0x08, 0	; 8

		MOTOR_RIGHT_DIR_PORT2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     6f2:	47 9a       	sbi	0x08, 7	; 8
		MOTOR_RIGHT_DIR_PORT1 &= ~(1<<MOTOR_RIGHT_DIR_PIN1x);
     6f4:	46 98       	cbi	0x08, 6	; 8
     6f6:	08 95       	ret

000006f8 <changeMotorDirectionLeft>:
	changeMotorDirectionRight();
}


void changeMotorDirectionLeft(){
	MOTOR_LEFT_DIR_PIN1 |= (1<<MOTOR_LEFT_DIR_PIN1x);
     6f8:	30 9a       	sbi	0x06, 0	; 6
	MOTOR_LEFT_DIR_PIN2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     6fa:	31 9a       	sbi	0x06, 1	; 6
     6fc:	08 95       	ret

000006fe <turnLeft>:
	
}


void turnLeft(){
	changeMotorDirectionLeft();
     6fe:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <changeMotorDirectionLeft>
     702:	08 95       	ret

00000704 <changeMotorDirectionRight>:
}
	

	  
void changeMotorDirectionRight(){
	MOTOR_RIGHT_DIR_PIN1 |= (1<<MOTOR_RIGHT_DIR_PIN1x);	
     704:	36 9a       	sbi	0x06, 6	; 6
	MOTOR_RIGHT_DIR_PIN2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     706:	37 9a       	sbi	0x06, 7	; 6
     708:	08 95       	ret

0000070a <reverse>:
	
	
}

void reverse(){
	changeMotorDirectionLeft();
     70a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <changeMotorDirectionLeft>
	changeMotorDirectionRight();
     70e:	0e 94 82 03 	call	0x704	; 0x704 <changeMotorDirectionRight>
     712:	08 95       	ret

00000714 <breakAll>:
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     714:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     716:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     718:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     71c:	10 92 b4 00 	sts	0x00B4, r1
     720:	08 95       	ret

00000722 <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LEFT_DIR_DDR1 |= (1<<MOTOR_LEFT_DIR_PIN1x);
     722:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_LEFT_DIR_DDR2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     724:	39 9a       	sbi	0x07, 1	; 7

	//setez directia initiala
	MOTOR_LEFT_DIR_PORT2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     726:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_LEFT_DIR_PORT1 &= ~(1<<MOTOR_LEFT_DIR_PIN1x);
     728:	40 98       	cbi	0x08, 0	; 8

	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     72a:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     72c:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     72e:	84 b5       	in	r24, 0x24	; 36
     730:	80 68       	ori	r24, 0x80	; 128
     732:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     734:	84 b5       	in	r24, 0x24	; 36
     736:	8f 7b       	andi	r24, 0xBF	; 191
     738:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     73a:	84 b5       	in	r24, 0x24	; 36
     73c:	80 62       	ori	r24, 0x20	; 32
     73e:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     740:	84 b5       	in	r24, 0x24	; 36
     742:	8f 7e       	andi	r24, 0xEF	; 239
     744:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     746:	84 b5       	in	r24, 0x24	; 36
     748:	83 60       	ori	r24, 0x03	; 3
     74a:	84 bd       	out	0x24, r24	; 36
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     74c:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     74e:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
     750:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	85 bd       	out	0x25, r24	; 37
     756:	08 95       	ret

00000758 <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RIGHT_DIR_DDR1 |= (1<<MOTOR_RIGHT_DIR_PIN1x);
     758:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RIGHT_DIR_DDR2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     75a:	3f 9a       	sbi	0x07, 7	; 7
	
	//setez directia initiala
	MOTOR_RIGHT_DIR_PORT2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     75c:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RIGHT_DIR_PORT1 &= ~(1<<MOTOR_RIGHT_DIR_PIN1x);
     75e:	46 98       	cbi	0x08, 6	; 8

	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     760:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     762:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     764:	e0 eb       	ldi	r30, 0xB0	; 176
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	80 68       	ori	r24, 0x80	; 128
     76c:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     76e:	80 81       	ld	r24, Z
     770:	8f 7b       	andi	r24, 0xBF	; 191
     772:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     774:	80 81       	ld	r24, Z
     776:	80 62       	ori	r24, 0x20	; 32
     778:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     77a:	80 81       	ld	r24, Z
     77c:	8f 7e       	andi	r24, 0xEF	; 239
     77e:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     780:	80 81       	ld	r24, Z
     782:	83 60       	ori	r24, 0x03	; 3
     784:	80 83       	st	Z, r24
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     786:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     78a:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
     78e:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     792:	e1 eb       	ldi	r30, 0xB1	; 177
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	8c 7f       	andi	r24, 0xFC	; 252
     79a:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     79c:	80 81       	ld	r24, Z
     79e:	84 60       	ori	r24, 0x04	; 4
     7a0:	80 83       	st	Z, r24
     7a2:	08 95       	ret

000007a4 <getInfraredRightDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+NO_OF_IR_SENSORS];
     7a4:	20 91 42 01 	lds	r18, 0x0142
     7a8:	80 91 43 01 	lds	r24, 0x0143
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	a0 e0       	ldi	r26, 0x00	; 0
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	82 0f       	add	r24, r18
     7b4:	91 1d       	adc	r25, r1
     7b6:	a1 1d       	adc	r26, r1
     7b8:	b1 1d       	adc	r27, r1
     7ba:	20 91 44 01 	lds	r18, 0x0144
     7be:	82 0f       	add	r24, r18
     7c0:	91 1d       	adc	r25, r1
     7c2:	a1 1d       	adc	r26, r1
     7c4:	b1 1d       	adc	r27, r1
     7c6:	20 91 45 01 	lds	r18, 0x0145
     7ca:	82 0f       	add	r24, r18
     7cc:	91 1d       	adc	r25, r1
     7ce:	a1 1d       	adc	r26, r1
     7d0:	b1 1d       	adc	r27, r1
	}

	return avreage/MAX_INFRARED_VALUES;
     7d2:	b6 95       	lsr	r27
     7d4:	a7 95       	ror	r26
     7d6:	97 95       	ror	r25
     7d8:	87 95       	ror	r24
     7da:	b6 95       	lsr	r27
     7dc:	a7 95       	ror	r26
     7de:	97 95       	ror	r25
     7e0:	87 95       	ror	r24
}
     7e2:	08 95       	ret

000007e4 <getAverageUltrasonicValue>:

uint16_t getLastUltrasonicValue(){
	return UltraSonicValues[US_pos_in_buffer-1];//because it is always the next position
}

uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
     7e4:	cf 93       	push	r28
     7e6:	38 2f       	mov	r19, r24
     7e8:	81 31       	cpi	r24, 0x11	; 17
     7ea:	08 f0       	brcs	.+2      	; 0x7ee <getAverageUltrasonicValue+0xa>
     7ec:	30 e1       	ldi	r19, 0x10	; 16
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     7ee:	33 23       	and	r19, r19
     7f0:	a9 f1       	breq	.+106    	; 0x85c <getAverageUltrasonicValue+0x78>
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     7f6:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	cb 01       	movw	r24, r22
     7fe:	a0 e1       	ldi	r26, 0x10	; 16
     800:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
	{
		uint16_t aux;
		if(US_pos_in_buffer-i >= 0){ 
     802:	e0 91 0d 01 	lds	r30, 0x010D
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	e4 1b       	sub	r30, r20
     80a:	f5 0b       	sbc	r31, r21
     80c:	6a f0       	brmi	.+26     	; 0x828 <getAverageUltrasonicValue+0x44>
			aux = UltraSonicValues[US_pos_in_buffer-i];
     80e:	e0 91 0d 01 	lds	r30, 0x010D
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	e4 1b       	sub	r30, r20
     816:	f5 0b       	sbc	r31, r21
     818:	ee 0f       	add	r30, r30
     81a:	ff 1f       	adc	r31, r31
     81c:	e2 5e       	subi	r30, 0xE2	; 226
     81e:	fe 4f       	sbci	r31, 0xFE	; 254
     820:	01 90       	ld	r0, Z+
     822:	f0 81       	ld	r31, Z
     824:	e0 2d       	mov	r30, r0
     826:	0e c0       	rjmp	.+28     	; 0x844 <getAverageUltrasonicValue+0x60>
		}else{// rap around
			aux = UltraSonicValues[MAX_ULTRASONIC_VALUES - i + US_pos_in_buffer];
     828:	c0 91 0d 01 	lds	r28, 0x010D
     82c:	fd 01       	movw	r30, r26
     82e:	e4 1b       	sub	r30, r20
     830:	f5 0b       	sbc	r31, r21
     832:	ec 0f       	add	r30, r28
     834:	f1 1d       	adc	r31, r1
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e2 5e       	subi	r30, 0xE2	; 226
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	01 90       	ld	r0, Z+
     840:	f0 81       	ld	r31, Z
     842:	e0 2d       	mov	r30, r0
		}
		
		averrage += aux;
     844:	6e 0f       	add	r22, r30
     846:	7f 1f       	adc	r23, r31
     848:	81 1d       	adc	r24, r1
     84a:	91 1d       	adc	r25, r1
		
		if(aux){ // only if the value is nonzero
     84c:	ef 2b       	or	r30, r31
     84e:	09 f0       	breq	.+2      	; 0x852 <getAverageUltrasonicValue+0x6e>
			good_vals++;
     850:	2f 5f       	subi	r18, 0xFF	; 255
     852:	4f 5f       	subi	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     856:	43 17       	cp	r20, r19
     858:	a0 f2       	brcs	.-88     	; 0x802 <getAverageUltrasonicValue+0x1e>
     85a:	04 c0       	rjmp	.+8      	; 0x864 <getAverageUltrasonicValue+0x80>
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     85c:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	cb 01       	movw	r24, r22
			good_vals++;
		}
		
	}
	
	averrage /= good_vals; //it may be better to round it up to the nearest
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__udivmodsi4>
	
	return averrage;
}
     86e:	c9 01       	movw	r24, r18
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	9c 01       	movw	r18, r24
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0;
     87e:	fa 01       	movw	r30, r20
     880:	ee 0f       	add	r30, r30
     882:	ff 1f       	adc	r31, r31
     884:	e2 5e       	subi	r30, 0xE2	; 226
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	11 82       	std	Z+1, r1	; 0x01
     88a:	10 82       	st	Z, r1
     88c:	4f 5f       	subi	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     890:	40 31       	cpi	r20, 0x10	; 16
     892:	51 05       	cpc	r21, r1
     894:	a1 f7       	brne	.-24     	; 0x87e <initUSART0+0xa>
		UltraSonicValues[i] = 0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     896:	10 92 4e 01 	sts	0x014E, r1
     89a:	10 92 4f 01 	sts	0x014F, r1
     89e:	10 92 50 01 	sts	0x0150, r1
     8a2:	10 92 51 01 	sts	0x0151, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     8a6:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     8a8:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     8aa:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     8ac:	c2 ec       	ldi	r28, 0xC2	; 194
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
     8b0:	88 81       	ld	r24, Y
     8b2:	8f 73       	andi	r24, 0x3F	; 63
     8b4:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     8b6:	e0 ec       	ldi	r30, 0xC0	; 192
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	8d 7f       	andi	r24, 0xFD	; 253
     8be:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     8c0:	c9 01       	movw	r24, r18
     8c2:	aa 27       	eor	r26, r26
     8c4:	97 fd       	sbrc	r25, 7
     8c6:	a0 95       	com	r26
     8c8:	ba 2f       	mov	r27, r26
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	aa 1f       	adc	r26, r26
     8d0:	bb 1f       	adc	r27, r27
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	aa 1f       	adc	r26, r26
     8d8:	bb 1f       	adc	r27, r27
     8da:	9c 01       	movw	r18, r24
     8dc:	ad 01       	movw	r20, r26
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	44 1f       	adc	r20, r20
     8e4:	55 1f       	adc	r21, r21
     8e6:	22 0f       	add	r18, r18
     8e8:	33 1f       	adc	r19, r19
     8ea:	44 1f       	adc	r20, r20
     8ec:	55 1f       	adc	r21, r21
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	72 e1       	ldi	r23, 0x12	; 18
     8f2:	8a e7       	ldi	r24, 0x7A	; 122
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__divmodsi4>
     8fa:	ca 01       	movw	r24, r20
     8fc:	b9 01       	movw	r22, r18
     8fe:	61 50       	subi	r22, 0x01	; 1
     900:	71 09       	sbc	r23, r1
     902:	81 09       	sbc	r24, r1
     904:	91 09       	sbc	r25, r1
     906:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     90a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     90e:	27 2f       	mov	r18, r23
     910:	33 27       	eor	r19, r19
     912:	27 fd       	sbrc	r18, 7
     914:	3a 95       	dec	r19
     916:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     91a:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     91e:	e1 ec       	ldi	r30, 0xC1	; 193
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 e1       	ldi	r24, 0x10	; 16
     924:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     926:	88 81       	ld	r24, Y
     928:	86 60       	ori	r24, 0x06	; 6
     92a:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     92c:	80 81       	ld	r24, Z
     92e:	8b 7f       	andi	r24, 0xFB	; 251
     930:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     932:	88 81       	ld	r24, Y
     934:	87 7f       	andi	r24, 0xF7	; 247
     936:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     938:	88 81       	ld	r24, Y
     93a:	8f 7c       	andi	r24, 0xCF	; 207
     93c:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     93e:	80 81       	ld	r24, Z
     940:	80 68       	ori	r24, 0x80	; 128
     942:	80 83       	st	Z, r24
	
		
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <initADC>:

void  initADC(void)
{

	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC4D) | (1<<ADC5D) | (1<<ADC6D) | (1<<ADC7D) ;
     94a:	ee e7       	ldi	r30, 0x7E	; 126
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	80 6f       	ori	r24, 0xF0	; 240
     952:	80 83       	st	Z, r24

	//set Vref to Vcc, va trebui sa fie referinta externa !!
	ADMUX |= (1<<REFS0);
     954:	ec e7       	ldi	r30, 0x7C	; 124
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	80 64       	ori	r24, 0x40	; 64
     95c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     95e:	80 81       	ld	r24, Z
     960:	8f 77       	andi	r24, 0x7F	; 127
     962:	80 83       	st	Z, r24
	
	//select ADC4
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     964:	80 81       	ld	r24, Z
     966:	80 7e       	andi	r24, 0xE0	; 224
     968:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX2);
     96a:	80 81       	ld	r24, Z
     96c:	84 60       	ori	r24, 0x04	; 4
     96e:	80 83       	st	Z, r24
	
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     970:	ea e7       	ldi	r30, 0x7A	; 122
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	88 60       	ori	r24, 0x08	; 8
     978:	80 83       	st	Z, r24
	
	
	//enable the ADC
	ADCSRA |= (1<<ADEN);
     97a:	80 81       	ld	r24, Z
     97c:	80 68       	ori	r24, 0x80	; 128
     97e:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     980:	80 81       	ld	r24, Z
     982:	87 60       	ori	r24, 0x07	; 7
     984:	80 83       	st	Z, r24
	//select free running mode
	//ADCSRB &= ~( (1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2) );


	//start conversion
	ADCSRA |= (1<<ADSC);
     986:	80 81       	ld	r24, Z
     988:	80 64       	ori	r24, 0x40	; 64
     98a:	80 83       	st	Z, r24
     98c:	08 95       	ret

0000098e <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     98e:	0c 98       	cbi	0x01, 4	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     990:	0d 98       	cbi	0x01, 5	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     992:	0e 98       	cbi	0x01, 6	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     994:	0f 98       	cbi	0x01, 7	; 1
	
	initADC();
     996:	0e 94 a5 04 	call	0x94a	; 0x94a <initADC>
	initUSART0(9600);
     99a:	80 e8       	ldi	r24, 0x80	; 128
     99c:	95 e2       	ldi	r25, 0x25	; 37
     99e:	0e 94 3a 04 	call	0x874	; 0x874 <initUSART0>
     9a2:	08 95       	ret

000009a4 <__vector_24>:
	//start conversion
	ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	2f 93       	push	r18
     9b0:	3f 93       	push	r19
     9b2:	4f 93       	push	r20
     9b4:	5f 93       	push	r21
     9b6:	6f 93       	push	r22
     9b8:	7f 93       	push	r23
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     9ca:	60 91 78 00 	lds	r22, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     9ce:	80 91 79 00 	lds	r24, 0x0079
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	78 2b       	or	r23, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     9d6:	60 31       	cpi	r22, 0x10	; 16
     9d8:	71 05       	cpc	r23, r1
     9da:	10 f4       	brcc	.+4      	; 0x9e0 <__vector_24+0x3c>
     9dc:	60 e1       	ldi	r22, 0x10	; 16
     9de:	70 e0       	ldi	r23, 0x00	; 0
		distance = 30.0;
	}
	*/
		
		//dont forget to set IR_pos_in_buffer = 0 when changing the active sensor
		int pos_in_buff = (activeInfraredSensor * NO_OF_IR_SENSORS) + IR_pos_in_buffer; //(IR_pos_in_buffer&MAX_INFRARED_VALUES_MSK) 
     9e0:	80 91 12 01 	lds	r24, 0x0112
     9e4:	c0 91 11 01 	lds	r28, 0x0111
     9e8:	d0 e0       	ldi	r29, 0x00	; 0
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	89 9f       	mul	r24, r25
     9ee:	c0 0d       	add	r28, r0
     9f0:	d1 1d       	adc	r29, r1
     9f2:	11 24       	eor	r1, r1
		InfraredValues[pos_in_buff] = floor((2076.0 / (theTenBitResult - 11.0)) + 0.5);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__floatunsisf>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e3       	ldi	r20, 0x30	; 48
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__subsf3>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 ec       	ldi	r23, 0xC0	; 192
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	95 e4       	ldi	r25, 0x45	; 69
     a14:	0e 94 07 0b 	call	0x160e	; 0x160e <__divsf3>
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	5f e3       	ldi	r21, 0x3F	; 63
     a20:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__addsf3>
     a24:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <floor>
     a28:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
     a2c:	fe 01       	movw	r30, r28
     a2e:	e2 5c       	subi	r30, 0xC2	; 194
     a30:	fe 4f       	sbci	r31, 0xFE	; 254
     a32:	60 83       	st	Z, r22
		
		//under lower limit
		if (InfraredValues[pos_in_buff] < 4)
     a34:	80 81       	ld	r24, Z
     a36:	84 30       	cpi	r24, 0x04	; 4
     a38:	28 f4       	brcc	.+10     	; 0xa44 <__vector_24+0xa0>
		{
			InfraredValues[pos_in_buff] = 4;
     a3a:	84 e0       	ldi	r24, 0x04	; 4
     a3c:	fe 01       	movw	r30, r28
     a3e:	e2 5c       	subi	r30, 0xC2	; 194
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	80 83       	st	Z, r24
		}
		
		//above upper limit
		if (InfraredValues[pos_in_buff] > 30)
     a44:	fe 01       	movw	r30, r28
     a46:	e2 5c       	subi	r30, 0xC2	; 194
     a48:	fe 4f       	sbci	r31, 0xFE	; 254
     a4a:	80 81       	ld	r24, Z
     a4c:	8f 31       	cpi	r24, 0x1F	; 31
     a4e:	10 f0       	brcs	.+4      	; 0xa54 <__vector_24+0xb0>
		{
			
			InfraredValues[pos_in_buff] = 30;
     a50:	8e e1       	ldi	r24, 0x1E	; 30
     a52:	80 83       	st	Z, r24
		}
	
	
	IR_pos_in_buffer++;
     a54:	80 91 11 01 	lds	r24, 0x0111
     a58:	8f 5f       	subi	r24, 0xFF	; 255
     a5a:	80 93 11 01 	sts	0x0111, r24
	
	if (IR_pos_in_buffer == MAX_INFRARED_VALUES)
     a5e:	80 91 11 01 	lds	r24, 0x0111
     a62:	84 30       	cpi	r24, 0x04	; 4
     a64:	39 f4       	brne	.+14     	; 0xa74 <__vector_24+0xd0>
	{
		IR_pos_in_buffer = 0;
     a66:	10 92 11 01 	sts	0x0111, r1
		activeInfraredSensor++;
     a6a:	80 91 12 01 	lds	r24, 0x0112
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	80 93 12 01 	sts	0x0112, r24
	}
	
	if (activeInfraredSensor == NO_OF_IR_SENSORS)
     a74:	80 91 12 01 	lds	r24, 0x0112
     a78:	84 30       	cpi	r24, 0x04	; 4
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__vector_24+0xdc>
	{
		activeInfraredSensor = 0;
     a7c:	10 92 12 01 	sts	0x0112, r1
	}
	
	//if the sensors are connected starting with pin 4, then add 4 as a offset
	
	//clear the MUX bits first
	ADMUX &= 0xF0;
     a80:	ec e7       	ldi	r30, 0x7C	; 124
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	80 7f       	andi	r24, 0xF0	; 240
     a88:	80 83       	st	Z, r24
	
	
	//select the sensor
	ADMUX |= activeInfraredSensor + 4; //+offset
     a8a:	90 81       	ld	r25, Z
     a8c:	80 91 12 01 	lds	r24, 0x0112
     a90:	8c 5f       	subi	r24, 0xFC	; 252
     a92:	89 2b       	or	r24, r25
     a94:	80 83       	st	Z, r24
	
	//start a new conversion
	ADCSRA |= 1<<ADSC;
     a96:	ea e7       	ldi	r30, 0x7A	; 122
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	80 64       	ori	r24, 0x40	; 64
     a9e:	80 83       	st	Z, r24
}
     aa0:	ff 91       	pop	r31
     aa2:	ef 91       	pop	r30
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	7f 91       	pop	r23
     ab2:	6f 91       	pop	r22
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <__vector_20>:

ISR(USART0_RX_vect){
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	4f 92       	push	r4
     ad2:	5f 92       	push	r5
     ad4:	7f 92       	push	r7
     ad6:	8f 92       	push	r8
     ad8:	9f 92       	push	r9
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	1f 93       	push	r17
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31


	uint8_t data;
	data = UDR0;
     b02:	10 91 c6 00 	lds	r17, 0x00C6
	
	if(data == 0x52){ //start of data
     b06:	12 35       	cpi	r17, 0x52	; 82
     b08:	39 f4       	brne	.+14     	; 0xb18 <__vector_20+0x52>
		ultrasonicDataPack[0] = 'R';
     b0a:	82 e5       	ldi	r24, 0x52	; 82
     b0c:	80 93 4e 01 	sts	0x014E, r24
		US_data_part_no=1;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 0e 01 	sts	0x010E, r24
     b16:	a5 c0       	rjmp	.+330    	; 0xc62 <__vector_20+0x19c>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     b18:	80 91 4e 01 	lds	r24, 0x014E
     b1c:	82 35       	cpi	r24, 0x52	; 82
     b1e:	09 f0       	breq	.+2      	; 0xb22 <__vector_20+0x5c>
     b20:	7c c0       	rjmp	.+248    	; 0xc1a <__vector_20+0x154>
     b22:	80 91 0e 01 	lds	r24, 0x010E
     b26:	84 30       	cpi	r24, 0x04	; 4
     b28:	09 f0       	breq	.+2      	; 0xb2c <__vector_20+0x66>
     b2a:	77 c0       	rjmp	.+238    	; 0xc1a <__vector_20+0x154>
     b2c:	1d 30       	cpi	r17, 0x0D	; 13
     b2e:	09 f0       	breq	.+2      	; 0xb32 <__vector_20+0x6c>
     b30:	74 c0       	rjmp	.+232    	; 0xc1a <__vector_20+0x154>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     b32:	0f 2e       	mov	r0, r31
     b34:	ff e4       	ldi	r31, 0x4F	; 79
     b36:	ef 2e       	mov	r14, r31
     b38:	f1 e0       	ldi	r31, 0x01	; 1
     b3a:	ff 2e       	mov	r15, r31
     b3c:	f0 2d       	mov	r31, r0
     b3e:	f7 01       	movw	r30, r14
     b40:	60 81       	ld	r22, Z
     b42:	0f 2e       	mov	r0, r31
     b44:	f0 e5       	ldi	r31, 0x50	; 80
     b46:	4f 2e       	mov	r4, r31
     b48:	f1 e0       	ldi	r31, 0x01	; 1
     b4a:	5f 2e       	mov	r5, r31
     b4c:	f0 2d       	mov	r31, r0
     b4e:	f2 01       	movw	r30, r4
     b50:	70 80       	ld	r7, Z
     b52:	c1 e5       	ldi	r28, 0x51	; 81
     b54:	d1 e0       	ldi	r29, 0x01	; 1
     b56:	c8 80       	ld	r12, Y
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	48 ec       	ldi	r20, 0xC8	; 200
     b68:	52 e4       	ldi	r21, 0x42	; 66
     b6a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     b6e:	4b 01       	movw	r8, r22
     b70:	5c 01       	movw	r10, r24
     b72:	67 2d       	mov	r22, r7
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e2       	ldi	r20, 0x20	; 32
     b84:	51 e4       	ldi	r21, 0x41	; 65
     b86:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
     b8e:	c5 01       	movw	r24, r10
     b90:	b4 01       	movw	r22, r8
     b92:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__addsf3>
     b96:	4b 01       	movw	r8, r22
     b98:	5c 01       	movw	r10, r24
     b9a:	6c 2d       	mov	r22, r12
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c5 01       	movw	r24, r10
     bac:	b4 01       	movw	r22, r8
     bae:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__addsf3>
			//transform from inch to mm
			val *= 25.4;
     bb2:	23 e3       	ldi	r18, 0x33	; 51
     bb4:	33 e3       	ldi	r19, 0x33	; 51
     bb6:	4b ec       	ldi	r20, 0xCB	; 203
     bb8:	51 e4       	ldi	r21, 0x41	; 65
     bba:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
			uint16_t mm = floor(val+0.5); // round to the nearest
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__addsf3>
     bca:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <floor>
     bce:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixunssfsi>
			UltraSonicValues[US_pos_in_buffer] = mm; 
     bd2:	e0 91 0d 01 	lds	r30, 0x010D
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	e2 5e       	subi	r30, 0xE2	; 226
     bde:	fe 4f       	sbci	r31, 0xFE	; 254
     be0:	71 83       	std	Z+1, r23	; 0x01
     be2:	60 83       	st	Z, r22
			lastUSonicValue = mm;
     be4:	70 93 10 01 	sts	0x0110, r23
     be8:	60 93 0f 01 	sts	0x010F, r22
			US_pos_in_buffer++;
     bec:	80 91 0d 01 	lds	r24, 0x010D
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	80 93 0d 01 	sts	0x010D, r24

			US_pos_in_buffer &= MAX_ULTRASONIC_VALUES_MSK;
     bf6:	80 91 0d 01 	lds	r24, 0x010D
     bfa:	8f 70       	andi	r24, 0x0F	; 15
     bfc:	80 93 0d 01 	sts	0x010D, r24
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     c00:	10 92 4e 01 	sts	0x014E, r1
     c04:	f7 01       	movw	r30, r14
     c06:	10 82       	st	Z, r1
     c08:	f2 01       	movw	r30, r4
     c0a:	10 82       	st	Z, r1
     c0c:	18 82       	st	Y, r1
				}
				US_data_part_no=0;
     c0e:	10 92 0e 01 	sts	0x010E, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     c12:	80 91 0c 01 	lds	r24, 0x010C
     c16:	81 11       	cpse	r24, r1
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     c18:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     c1a:	80 91 0e 01 	lds	r24, 0x010E
     c1e:	84 30       	cpi	r24, 0x04	; 4
     c20:	50 f0       	brcs	.+20     	; 0xc36 <__vector_20+0x170>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     c22:	10 92 4e 01 	sts	0x014E, r1
     c26:	10 92 4f 01 	sts	0x014F, r1
     c2a:	10 92 50 01 	sts	0x0150, r1
     c2e:	10 92 51 01 	sts	0x0151, r1
			}
			US_data_part_no=0;
     c32:	10 92 0e 01 	sts	0x010E, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     c36:	80 91 4e 01 	lds	r24, 0x014E
     c3a:	82 35       	cpi	r24, 0x52	; 82
     c3c:	91 f4       	brne	.+36     	; 0xc62 <__vector_20+0x19c>
			if (isdigit(data))
     c3e:	81 2f       	mov	r24, r17
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	c0 97       	sbiw	r24, 0x30	; 48
     c44:	0a 97       	sbiw	r24, 0x0a	; 10
     c46:	68 f4       	brcc	.+26     	; 0xc62 <__vector_20+0x19c>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     c48:	e0 91 0e 01 	lds	r30, 0x010E
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 ed       	ldi	r24, 0xD0	; 208
     c50:	81 0f       	add	r24, r17
     c52:	e2 5b       	subi	r30, 0xB2	; 178
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	80 83       	st	Z, r24
				US_data_part_no++;
     c58:	80 91 0e 01 	lds	r24, 0x010E
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	80 93 0e 01 	sts	0x010E, r24
			
		}
				
	}

}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	1f 91       	pop	r17
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	9f 90       	pop	r9
     c8c:	8f 90       	pop	r8
     c8e:	7f 90       	pop	r7
     c90:	5f 90       	pop	r5
     c92:	4f 90       	pop	r4
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <checkPackIsFullLength>:
}

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
     c9e:	28 2f       	mov	r18, r24
     ca0:	2f 77       	andi	r18, 0x7F	; 127
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	ee 5a       	subi	r30, 0xAE	; 174
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	9f 3f       	cpi	r25, 0xFF	; 255
     cb2:	b1 f1       	breq	.+108    	; 0xd20 <checkPackIsFullLength+0x82>
		return 0;
	}else{
		pc_no = rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no;
     cb4:	f9 01       	movw	r30, r18
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ee 5a       	subi	r30, 0xAE	; 174
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	61 81       	ldd	r22, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	41 81       	ldd	r20, Z+1	; 0x01
     cc4:	4f 3f       	cpi	r20, 0xFF	; 255
     cc6:	71 f1       	breq	.+92     	; 0xd24 <checkPackIsFullLength+0x86>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     cc8:	f9 01       	movw	r30, r18
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	ee 5a       	subi	r30, 0xAE	; 174
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	41 81       	ldd	r20, Z+1	; 0x01
     cd4:	55 27       	eor	r21, r21
     cd6:	47 fd       	sbrc	r20, 7
     cd8:	50 95       	com	r21
     cda:	26 2f       	mov	r18, r22
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	42 17       	cp	r20, r18
     ce0:	53 07       	cpc	r21, r19
     ce2:	11 f5       	brne	.+68     	; 0xd28 <checkPackIsFullLength+0x8a>
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	66 e0       	ldi	r22, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
     ce8:	9c 01       	movw	r18, r24
     cea:	2f 77       	andi	r18, 0x7F	; 127
     cec:	33 27       	eor	r19, r19
     cee:	f9 01       	movw	r30, r18
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	ee 5a       	subi	r30, 0xAE	; 174
     cf6:	fe 4f       	sbci	r31, 0xFE	; 254
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	7f 3f       	cpi	r23, 0xFF	; 255
     cfc:	b9 f0       	breq	.+46     	; 0xd2c <checkPackIsFullLength+0x8e>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     cfe:	f9 01       	movw	r30, r18
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	ee 5a       	subi	r30, 0xAE	; 174
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	21 81       	ldd	r18, Z+1	; 0x01
     d0a:	33 27       	eor	r19, r19
     d0c:	27 fd       	sbrc	r18, 7
     d0e:	30 95       	com	r19
     d10:	24 17       	cp	r18, r20
     d12:	35 07       	cpc	r19, r21
     d14:	69 f4       	brne	.+26     	; 0xd30 <checkPackIsFullLength+0x92>
     d16:	61 50       	subi	r22, 0x01	; 1
     d18:	01 96       	adiw	r24, 0x01	; 1
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     d1a:	61 11       	cpse	r22, r1
     d1c:	e5 cf       	rjmp	.-54     	; 0xce8 <checkPackIsFullLength+0x4a>
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <checkPackIsFullLength+0x96>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
		return 0;
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	08 95       	ret
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1 
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
			return 0;
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	08 95       	ret
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	08 95       	ret
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	08 95       	ret
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	08 95       	ret
		}
	}
	return 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
}
     d36:	08 95       	ret

00000d38 <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     d38:	cf 92       	push	r12
     d3a:	df 92       	push	r13
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	27 97       	sbiw	r28, 0x07	; 7
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
	
	
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
     d58:	e0 91 15 01 	lds	r30, 0x0115
     d5c:	ef 77       	andi	r30, 0x7F	; 127
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	ee 5a       	subi	r30, 0xAE	; 174
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
     d6a:	e0 91 15 01 	lds	r30, 0x0115
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	31 96       	adiw	r30, 0x01	; 1
     d72:	ef 77       	andi	r30, 0x7F	; 127
     d74:	ff 27       	eor	r31, r31
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	ee 5a       	subi	r30, 0xAE	; 174
     d7c:	fe 4f       	sbci	r31, 0xFE	; 254
     d7e:	30 81       	ld	r19, Z
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
     d80:	e0 91 15 01 	lds	r30, 0x0115
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	32 96       	adiw	r30, 0x02	; 2
     d88:	ef 77       	andi	r30, 0x7F	; 127
     d8a:	ff 27       	eor	r31, r31
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	ee 5a       	subi	r30, 0xAE	; 174
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	40 81       	ld	r20, Z
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     d96:	e0 91 15 01 	lds	r30, 0x0115
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	33 96       	adiw	r30, 0x03	; 3
     d9e:	ef 77       	andi	r30, 0x7F	; 127
     da0:	ff 27       	eor	r31, r31
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	ee 5a       	subi	r30, 0xAE	; 174
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	80 81       	ld	r24, Z
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     dac:	e0 91 15 01 	lds	r30, 0x0115
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	34 96       	adiw	r30, 0x04	; 4
     db4:	ef 77       	andi	r30, 0x7F	; 127
     db6:	ff 27       	eor	r31, r31
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	ee 5a       	subi	r30, 0xAE	; 174
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	e0 80       	ld	r14, Z
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     dc2:	f1 2c       	mov	r15, r1
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     dc4:	f8 2a       	or	r15, r24
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     dc6:	e0 91 15 01 	lds	r30, 0x0115
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	35 96       	adiw	r30, 0x05	; 5
     dce:	ef 77       	andi	r30, 0x7F	; 127
     dd0:	ff 27       	eor	r31, r31
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	ee 5a       	subi	r30, 0xAE	; 174
     dd8:	fe 4f       	sbci	r31, 0xFE	; 254
     dda:	80 81       	ld	r24, Z
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     ddc:	e0 91 15 01 	lds	r30, 0x0115
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	36 96       	adiw	r30, 0x06	; 6
     de4:	ef 77       	andi	r30, 0x7F	; 127
     de6:	ff 27       	eor	r31, r31
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	ee 5a       	subi	r30, 0xAE	; 174
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	00 81       	ld	r16, Z
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     df2:	10 e0       	ldi	r17, 0x00	; 0
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     df4:	18 2b       	or	r17, r24
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
	//sendResponse( rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data);
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
     dfa:	ef ef       	ldi	r30, 0xFF	; 255
     dfc:	ff ef       	ldi	r31, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     dfe:	5f ef       	ldi	r21, 0xFF	; 255

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
     e00:	a0 91 15 01 	lds	r26, 0x0115
     e04:	6c 01       	movw	r12, r24
     e06:	ca 0e       	add	r12, r26
     e08:	d1 1c       	adc	r13, r1
     e0a:	d6 01       	movw	r26, r12
     e0c:	af 77       	andi	r26, 0x7F	; 127
     e0e:	bb 27       	eor	r27, r27
     e10:	aa 0f       	add	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	ae 5a       	subi	r26, 0xAE	; 174
     e16:	be 4f       	sbci	r27, 0xFE	; 254
     e18:	ac 91       	ld	r26, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     e1a:	ea 27       	eor	r30, r26
     e1c:	ae 2f       	mov	r26, r30
     e1e:	a2 95       	swap	r26
     e20:	ae 27       	eor	r26, r30
     e22:	0a 2e       	mov	r0, r26
     e24:	a6 95       	lsr	r26
     e26:	a6 95       	lsr	r26
     e28:	a0 25       	eor	r26, r0
     e2a:	0a 2e       	mov	r0, r26
     e2c:	a6 95       	lsr	r26
     e2e:	a0 25       	eor	r26, r0
     e30:	a7 70       	andi	r26, 0x07	; 7
     e32:	0e 2e       	mov	r0, r30
     e34:	ef 2f       	mov	r30, r31
     e36:	a6 95       	lsr	r26
     e38:	07 94       	ror	r0
     e3a:	a7 95       	ror	r26
     e3c:	f0 2d       	mov	r31, r0
     e3e:	ea 27       	eor	r30, r26
     e40:	06 94       	lsr	r0
     e42:	a7 95       	ror	r26
     e44:	f0 25       	eor	r31, r0
     e46:	ea 27       	eor	r30, r26
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     e48:	a0 91 15 01 	lds	r26, 0x0115
     e4c:	6c 01       	movw	r12, r24
     e4e:	ca 0e       	add	r12, r26
     e50:	d1 1c       	adc	r13, r1
     e52:	d6 01       	movw	r26, r12
     e54:	af 77       	andi	r26, 0x7F	; 127
     e56:	bb 27       	eor	r27, r27
     e58:	aa 0f       	add	r26, r26
     e5a:	bb 1f       	adc	r27, r27
     e5c:	ae 5a       	subi	r26, 0xAE	; 174
     e5e:	be 4f       	sbci	r27, 0xFE	; 254
     e60:	11 96       	adiw	r26, 0x01	; 1
     e62:	5c 93       	st	X, r21
     e64:	01 96       	adiw	r24, 0x01	; 1
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     e66:	87 30       	cpi	r24, 0x07	; 7
     e68:	91 05       	cpc	r25, r1
     e6a:	09 f0       	breq	.+2      	; 0xe6e <fetchCommand+0x136>
     e6c:	c9 cf       	rjmp	.-110    	; 0xe00 <fetchCommand+0xc8>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
	}
	
	if (crc == 0){
     e6e:	ef 2b       	or	r30, r31
     e70:	21 f4       	brne	.+8      	; 0xe7a <fetchCommand+0x142>
		*CRC_correct = 1;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	fb 01       	movw	r30, r22
     e76:	80 83       	st	Z, r24
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <fetchCommand+0x146>
		}else{
		*CRC_correct = 0;
     e7a:	fb 01       	movw	r30, r22
     e7c:	10 82       	st	Z, r1
	}
	
	return comm;
     e7e:	fd 82       	std	Y+5, r15	; 0x05
     e80:	ec 82       	std	Y+4, r14	; 0x04
     e82:	1f 83       	std	Y+7, r17	; 0x07
     e84:	0e 83       	std	Y+6, r16	; 0x06
     e86:	5e 2d       	mov	r21, r14
     e88:	6d 81       	ldd	r22, Y+5	; 0x05
     e8a:	70 2f       	mov	r23, r16
}
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	27 96       	adiw	r28, 0x07	; 7
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	df 90       	pop	r13
     eaa:	cf 90       	pop	r12
     eac:	08 95       	ret

00000eae <__clearBuffers>:
	}
	
}

void __clearBuffers(){
		for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
			rxBuffer[i].pack_no =-1;
     eb2:	2f ef       	ldi	r18, 0xFF	; 255
     eb4:	fc 01       	movw	r30, r24
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	df 01       	movw	r26, r30
     ebc:	ae 5a       	subi	r26, 0xAE	; 174
     ebe:	be 4f       	sbci	r27, 0xFE	; 254
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	2c 93       	st	X, r18
			txBuffer[i].pack_no =-1;
     ec4:	ee 5a       	subi	r30, 0xAE	; 174
     ec6:	fd 4f       	sbci	r31, 0xFD	; 253
     ec8:	21 83       	std	Z+1, r18	; 0x01
			txBuffer[i].data =0;
     eca:	10 82       	st	Z, r1
	}
	
}

void __clearBuffers(){
		for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	80 38       	cpi	r24, 0x80	; 128
     ed0:	91 05       	cpc	r25, r1
     ed2:	81 f7       	brne	.-32     	; 0xeb4 <__clearBuffers+0x6>
			rxBuffer[i].pack_no =-1;
			txBuffer[i].pack_no =-1;
			txBuffer[i].data =0;
		}
		txWritePos = 0;
     ed4:	10 92 13 01 	sts	0x0113, r1
		txReadPos = 0;
     ed8:	10 92 14 01 	sts	0x0114, r1
		rxReadPos = 0;
     edc:	10 92 19 01 	sts	0x0119, r1
		rxWritePos = 0;
     ee0:	10 92 18 01 	sts	0x0118, r1
     ee4:	08 95       	ret

00000ee6 <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	8c 01       	movw	r16, r24
		
		///TEST////
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}*/
	__clearBuffers();
     ef0:	0e 94 57 07 	call	0xeae	; 0xeae <__clearBuffers>
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
     ef4:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
     ef6:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
     ef8:	ca ec       	ldi	r28, 0xCA	; 202
     efa:	d0 e0       	ldi	r29, 0x00	; 0
     efc:	88 81       	ld	r24, Y
     efe:	8f 73       	andi	r24, 0x3F	; 63
     f00:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
     f02:	e8 ec       	ldi	r30, 0xC8	; 200
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     f0c:	c8 01       	movw	r24, r16
     f0e:	aa 27       	eor	r26, r26
     f10:	97 fd       	sbrc	r25, 7
     f12:	a0 95       	com	r26
     f14:	ba 2f       	mov	r27, r26
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	aa 1f       	adc	r26, r26
     f1c:	bb 1f       	adc	r27, r27
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	aa 1f       	adc	r26, r26
     f24:	bb 1f       	adc	r27, r27
     f26:	9c 01       	movw	r18, r24
     f28:	ad 01       	movw	r20, r26
     f2a:	22 0f       	add	r18, r18
     f2c:	33 1f       	adc	r19, r19
     f2e:	44 1f       	adc	r20, r20
     f30:	55 1f       	adc	r21, r21
     f32:	22 0f       	add	r18, r18
     f34:	33 1f       	adc	r19, r19
     f36:	44 1f       	adc	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	72 e1       	ldi	r23, 0x12	; 18
     f3e:	8a e7       	ldi	r24, 0x7A	; 122
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__divmodsi4>
     f46:	ca 01       	movw	r24, r20
     f48:	b9 01       	movw	r22, r18
     f4a:	61 50       	subi	r22, 0x01	; 1
     f4c:	71 09       	sbc	r23, r1
     f4e:	81 09       	sbc	r24, r1
     f50:	91 09       	sbc	r25, r1
     f52:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     f56:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
     f5a:	27 2f       	mov	r18, r23
     f5c:	33 27       	eor	r19, r19
     f5e:	27 fd       	sbrc	r18, 7
     f60:	3a 95       	dec	r19
     f62:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
     f66:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     f6a:	e9 ec       	ldi	r30, 0xC9	; 201
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	88 e1       	ldi	r24, 0x18	; 24
     f70:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
     f72:	88 81       	ld	r24, Y
     f74:	86 60       	ori	r24, 0x06	; 6
     f76:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
     f78:	80 81       	ld	r24, Z
     f7a:	8b 7f       	andi	r24, 0xFB	; 251
     f7c:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
     f7e:	88 81       	ld	r24, Y
     f80:	87 7f       	andi	r24, 0xF7	; 247
     f82:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
     f84:	88 81       	ld	r24, Y
     f86:	8f 7c       	andi	r24, 0xCF	; 207
     f88:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
     f8a:	80 81       	ld	r24, Z
     f8c:	80 68       	ori	r24, 0x80	; 128
     f8e:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
     f90:	80 81       	ld	r24, Z
     f92:	80 64       	ori	r24, 0x40	; 64
     f94:	80 83       	st	Z, r24
	
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <__tryToSend>:
	
}

//this is used to send data so that USART1_TX_vect can be triggered
void __tryToSend(){ 
	if (UCSR1A & (1<<UDRE1)) //if data register is empty send a byte
     fa0:	80 91 c8 00 	lds	r24, 0x00C8
     fa4:	85 ff       	sbrs	r24, 5
     fa6:	31 c0       	rjmp	.+98     	; 0x100a <__tryToSend+0x6a>
	{
		cli();
     fa8:	f8 94       	cli
		if(txBuffer[txReadPos].pack_no != -1){
     faa:	e0 91 14 01 	lds	r30, 0x0114
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	ee 5a       	subi	r30, 0xAE	; 174
     fb6:	fd 4f       	sbci	r31, 0xFD	; 253
     fb8:	81 81       	ldd	r24, Z+1	; 0x01
     fba:	8f 3f       	cpi	r24, 0xFF	; 255
     fbc:	29 f1       	breq	.+74     	; 0x1008 <__tryToSend+0x68>
				UDR1 = txBuffer[txReadPos].data;
     fbe:	e0 91 14 01 	lds	r30, 0x0114
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	ee 5a       	subi	r30, 0xAE	; 174
     fca:	fd 4f       	sbci	r31, 0xFD	; 253
     fcc:	80 81       	ld	r24, Z
     fce:	80 93 ce 00 	sts	0x00CE, r24
				txBuffer[txReadPos].pack_no = -1;
     fd2:	e0 91 14 01 	lds	r30, 0x0114
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	ee 5a       	subi	r30, 0xAE	; 174
     fde:	fd 4f       	sbci	r31, 0xFD	; 253
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	81 83       	std	Z+1, r24	; 0x01
				txBuffer[txReadPos].data = 0;
     fe4:	e0 91 14 01 	lds	r30, 0x0114
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	ee 5a       	subi	r30, 0xAE	; 174
     ff0:	fd 4f       	sbci	r31, 0xFD	; 253
     ff2:	10 82       	st	Z, r1
				txReadPos++;
     ff4:	80 91 14 01 	lds	r24, 0x0114
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	80 93 14 01 	sts	0x0114, r24
				txReadPos &= TX_BUFFER_SIZE_MSK;
     ffe:	80 91 14 01 	lds	r24, 0x0114
    1002:	8f 77       	andi	r24, 0x7F	; 127
    1004:	80 93 14 01 	sts	0x0114, r24
				if(txReadPos >= TX_BUFFER_SIZE){
					txReadPos=0;
				}
				*/
		}
		sei();
    1008:	78 94       	sei
    100a:	08 95       	ret

0000100c <sendResponse>:
	}
	
	return comm;
}

void sendResponse(response r){
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	29 97       	sbiw	r28, 0x09	; 9
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	09 83       	std	Y+1, r16	; 0x01
    1026:	1a 83       	std	Y+2, r17	; 0x02
    1028:	2b 83       	std	Y+3, r18	; 0x03
    102a:	3c 83       	std	Y+4, r19	; 0x04
    102c:	4d 83       	std	Y+5, r20	; 0x05
    102e:	5e 83       	std	Y+6, r21	; 0x06
    1030:	6f 83       	std	Y+7, r22	; 0x07
    1032:	97 2f       	mov	r25, r23
    1034:	78 87       	std	Y+8, r23	; 0x08
    1036:	89 87       	std	Y+9, r24	; 0x09
	
	int8_t header = r.header;
	uint16_t i = txWritePos;
    1038:	e0 91 13 01 	lds	r30, 0x0113
    103c:	4e 2f       	mov	r20, r30
    103e:	50 e0       	ldi	r21, 0x00	; 0
	
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = header;
    1040:	ef 77       	andi	r30, 0x7F	; 127
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	ee 5a       	subi	r30, 0xAE	; 174
    104a:	fd 4f       	sbci	r31, 0xFD	; 253
    104c:	00 83       	st	Z, r16
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    104e:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1050:	fa 01       	movw	r30, r20
    1052:	31 96       	adiw	r30, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
    1054:	ef 77       	andi	r30, 0x7F	; 127
    1056:	ff 27       	eor	r31, r31
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	ee 5a       	subi	r30, 0xAE	; 174
    105e:	fd 4f       	sbci	r31, 0xFD	; 253
    1060:	26 e0       	ldi	r18, 0x06	; 6
    1062:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1064:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1066:	9a 01       	movw	r18, r20
    1068:	2e 5f       	subi	r18, 0xFE	; 254
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	fe 01       	movw	r30, r28
    106e:	32 96       	adiw	r30, 0x02	; 2
    1070:	be 01       	movw	r22, r28
    1072:	68 5f       	subi	r22, 0xF8	; 248
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
    1076:	d9 01       	movw	r26, r18
    1078:	af 77       	andi	r26, 0x7F	; 127
    107a:	bb 27       	eor	r27, r27
    107c:	11 91       	ld	r17, Z+
    107e:	aa 0f       	add	r26, r26
    1080:	bb 1f       	adc	r27, r27
    1082:	ae 5a       	subi	r26, 0xAE	; 174
    1084:	bd 4f       	sbci	r27, 0xFD	; 253
    1086:	1c 93       	st	X, r17
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1088:	11 96       	adiw	r26, 0x01	; 1
    108a:	0c 93       	st	X, r16
		i++;
    108c:	2f 5f       	subi	r18, 0xFF	; 255
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
	i++;
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
    1090:	e6 17       	cp	r30, r22
    1092:	f7 07       	cpc	r31, r23
    1094:	81 f7       	brne	.-32     	; 0x1076 <sendResponse+0x6a>
    1096:	fa 01       	movw	r30, r20
    1098:	38 96       	adiw	r30, 0x08	; 8
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
		i++;
	}
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time >> 8); // first 8 bits
    109a:	ef 77       	andi	r30, 0x7F	; 127
    109c:	ff 27       	eor	r31, r31
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	ee 5a       	subi	r30, 0xAE	; 174
    10a4:	fd 4f       	sbci	r31, 0xFD	; 253
    10a6:	80 83       	st	Z, r24
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    10a8:	01 83       	std	Z+1, r16	; 0x01
	i++;
    10aa:	fa 01       	movw	r30, r20
    10ac:	39 96       	adiw	r30, 0x09	; 9
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time & 0xFF); // next 8 bits
    10ae:	ef 77       	andi	r30, 0x7F	; 127
    10b0:	ff 27       	eor	r31, r31
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	ee 5a       	subi	r30, 0xAE	; 174
    10b8:	fd 4f       	sbci	r31, 0xFD	; 253
    10ba:	90 83       	st	Z, r25
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    10bc:	01 83       	std	Z+1, r16	; 0x01
	i++;
    10be:	ba 01       	movw	r22, r20
    10c0:	66 5f       	subi	r22, 0xF6	; 246
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
    10c8:	2f ef       	ldi	r18, 0xFF	; 255
    10ca:	3f ef       	ldi	r19, 0xFF	; 255
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
    10cc:	e0 91 13 01 	lds	r30, 0x0113
    10d0:	dc 01       	movw	r26, r24
    10d2:	ae 0f       	add	r26, r30
    10d4:	b1 1d       	adc	r27, r1
    10d6:	fd 01       	movw	r30, r26
    10d8:	ef 77       	andi	r30, 0x7F	; 127
    10da:	ff 27       	eor	r31, r31
    10dc:	ee 0f       	add	r30, r30
    10de:	ff 1f       	adc	r31, r31
    10e0:	ee 5a       	subi	r30, 0xAE	; 174
    10e2:	fd 4f       	sbci	r31, 0xFD	; 253
    10e4:	e0 81       	ld	r30, Z
    10e6:	2e 27       	eor	r18, r30
    10e8:	e2 2f       	mov	r30, r18
    10ea:	e2 95       	swap	r30
    10ec:	e2 27       	eor	r30, r18
    10ee:	0e 2e       	mov	r0, r30
    10f0:	e6 95       	lsr	r30
    10f2:	e6 95       	lsr	r30
    10f4:	e0 25       	eor	r30, r0
    10f6:	0e 2e       	mov	r0, r30
    10f8:	e6 95       	lsr	r30
    10fa:	e0 25       	eor	r30, r0
    10fc:	e7 70       	andi	r30, 0x07	; 7
    10fe:	02 2e       	mov	r0, r18
    1100:	23 2f       	mov	r18, r19
    1102:	e6 95       	lsr	r30
    1104:	07 94       	ror	r0
    1106:	e7 95       	ror	r30
    1108:	30 2d       	mov	r19, r0
    110a:	2e 27       	eor	r18, r30
    110c:	06 94       	lsr	r0
    110e:	e7 95       	ror	r30
    1110:	30 25       	eor	r19, r0
    1112:	2e 27       	eor	r18, r30
    1114:	01 96       	adiw	r24, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
    1116:	8a 30       	cpi	r24, 0x0A	; 10
    1118:	91 05       	cpc	r25, r1
    111a:	c1 f6       	brne	.-80     	; 0x10cc <sendResponse+0xc0>
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
	}
	
	//send CRC in reverse order!
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc & 0xFF); // last 8 bits
    111c:	fb 01       	movw	r30, r22
    111e:	ef 77       	andi	r30, 0x7F	; 127
    1120:	ff 27       	eor	r31, r31
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	ee 5a       	subi	r30, 0xAE	; 174
    1128:	fd 4f       	sbci	r31, 0xFD	; 253
    112a:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    112c:	01 83       	std	Z+1, r16	; 0x01
	i++;
    112e:	fa 01       	movw	r30, r20
    1130:	3b 96       	adiw	r30, 0x0b	; 11
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc >> 8); // first 8 bits
    1132:	ef 77       	andi	r30, 0x7F	; 127
    1134:	ff 27       	eor	r31, r31
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ee 5a       	subi	r30, 0xAE	; 174
    113c:	fd 4f       	sbci	r31, 0xFD	; 253
    113e:	30 83       	st	Z, r19
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
    1140:	01 83       	std	Z+1, r16	; 0x01
	i++;
    1142:	44 5f       	subi	r20, 0xF4	; 244
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
	txWritePos = i & TX_BUFFER_SIZE_MSK;
    1146:	4f 77       	andi	r20, 0x7F	; 127
    1148:	40 93 13 01 	sts	0x0113, r20
	
	__tryToSend();
    114c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__tryToSend>
}
    1150:	29 96       	adiw	r28, 0x09	; 9
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <getLastCommand>:
		}
		sei();
	}
}

command getLastCommand(int8_t *success){
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	2f 97       	sbiw	r28, 0x0f	; 15
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
    1180:	fe 01       	movw	r30, r28
    1182:	38 96       	adiw	r30, 0x08	; 8
    1184:	87 e0       	ldi	r24, 0x07	; 7
    1186:	df 01       	movw	r26, r30
    1188:	1d 92       	st	X+, r1
    118a:	8a 95       	dec	r24
    118c:	e9 f7       	brne	.-6      	; 0x1188 <getLastCommand+0x22>
	*success = 0;
    118e:	f8 01       	movw	r30, r16
    1190:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
    1192:	80 91 15 01 	lds	r24, 0x0115
    1196:	0e 94 4f 06 	call	0xc9e	; 0xc9e <checkPackIsFullLength>
    119a:	88 23       	and	r24, r24
    119c:	c9 f0       	breq	.+50     	; 0x11d0 <getLastCommand+0x6a>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
    119e:	80 91 15 01 	lds	r24, 0x0115
    11a2:	be 01       	movw	r22, r28
    11a4:	61 5f       	subi	r22, 0xF1	; 241
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	0e 94 9c 06 	call	0xd38	; 0xd38 <fetchCommand>
    11ac:	28 87       	std	Y+8, r18	; 0x08
    11ae:	39 87       	std	Y+9, r19	; 0x09
    11b0:	4a 87       	std	Y+10, r20	; 0x0a
    11b2:	5b 87       	std	Y+11, r21	; 0x0b
    11b4:	6c 87       	std	Y+12, r22	; 0x0c
    11b6:	7d 87       	std	Y+13, r23	; 0x0d
    11b8:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	88 23       	and	r24, r24
    11be:	21 f0       	breq	.+8      	; 0x11c8 <getLastCommand+0x62>
		{
			*success=1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	d8 01       	movw	r26, r16
    11c4:	8c 93       	st	X, r24
    11c6:	2b c0       	rjmp	.+86     	; 0x121e <getLastCommand+0xb8>
		}else{
			*success=2;
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	f8 01       	movw	r30, r16
    11cc:	80 83       	st	Z, r24
    11ce:	27 c0       	rjmp	.+78     	; 0x121e <getLastCommand+0xb8>
		
	}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
		
		
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE) 
    11d0:	80 91 15 01 	lds	r24, 0x0115
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	07 97       	sbiw	r24, 0x07	; 7
    11d8:	80 38       	cpi	r24, 0x80	; 128
    11da:	91 05       	cpc	r25, r1
    11dc:	04 f5       	brge	.+64     	; 0x121e <getLastCommand+0xb8>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
    11de:	80 91 15 01 	lds	r24, 0x0115
    11e2:	87 50       	subi	r24, 0x07	; 7
    11e4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <checkPackIsFullLength>
    11e8:	88 23       	and	r24, r24
    11ea:	c9 f0       	breq	.+50     	; 0x121e <getLastCommand+0xb8>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
    11ec:	80 91 15 01 	lds	r24, 0x0115
    11f0:	be 01       	movw	r22, r28
    11f2:	61 5f       	subi	r22, 0xF1	; 241
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	87 50       	subi	r24, 0x07	; 7
    11f8:	0e 94 9c 06 	call	0xd38	; 0xd38 <fetchCommand>
    11fc:	28 87       	std	Y+8, r18	; 0x08
    11fe:	39 87       	std	Y+9, r19	; 0x09
    1200:	4a 87       	std	Y+10, r20	; 0x0a
    1202:	5b 87       	std	Y+11, r21	; 0x0b
    1204:	6c 87       	std	Y+12, r22	; 0x0c
    1206:	7d 87       	std	Y+13, r23	; 0x0d
    1208:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
    120a:	8f 85       	ldd	r24, Y+15	; 0x0f
    120c:	88 23       	and	r24, r24
    120e:	21 f0       	breq	.+8      	; 0x1218 <getLastCommand+0xb2>
			{
				*success=1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	d8 01       	movw	r26, r16
    1214:	8c 93       	st	X, r24
    1216:	03 c0       	rjmp	.+6      	; 0x121e <getLastCommand+0xb8>
				}else{
				*success=2;
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	f8 01       	movw	r30, r16
    121c:	80 83       	st	Z, r24
		
		}
	}
	
	
	return cmd;
    121e:	87 e0       	ldi	r24, 0x07	; 7
    1220:	fe 01       	movw	r30, r28
    1222:	38 96       	adiw	r30, 0x08	; 8
    1224:	de 01       	movw	r26, r28
    1226:	11 96       	adiw	r26, 0x01	; 1
    1228:	01 90       	ld	r0, Z+
    122a:	0d 92       	st	X+, r0
    122c:	8a 95       	dec	r24
    122e:	e1 f7       	brne	.-8      	; 0x1228 <getLastCommand+0xc2>
    1230:	29 81       	ldd	r18, Y+1	; 0x01
    1232:	3a 81       	ldd	r19, Y+2	; 0x02
    1234:	4b 81       	ldd	r20, Y+3	; 0x03
    1236:	5c 81       	ldd	r21, Y+4	; 0x04
    1238:	6d 81       	ldd	r22, Y+5	; 0x05
    123a:	7e 81       	ldd	r23, Y+6	; 0x06
}
    123c:	8f 81       	ldd	r24, Y+7	; 0x07
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	2f 96       	adiw	r28, 0x0f	; 15
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	08 95       	ret

00001256 <__vector_28>:
	
	return ret;
}
*/

ISR(USART1_RX_vect){
    1256:	1f 92       	push	r1
    1258:	0f 92       	push	r0
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	0f 92       	push	r0
    125e:	11 24       	eor	r1, r1
    1260:	8f 93       	push	r24
    1262:	9f 93       	push	r25
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
	
	uint8_t data = UDR1;
    1268:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
    126c:	90 91 17 01 	lds	r25, 0x0117
    1270:	91 11       	cpse	r25, r1
    1272:	1a c0       	rjmp	.+52     	; 0x12a8 <__vector_28+0x52>
		rxBuffer[rxWritePos].pack_no = data; //numai primi 7 biti
    1274:	e0 91 18 01 	lds	r30, 0x0118
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	ee 5a       	subi	r30, 0xAE	; 174
    1280:	fe 4f       	sbci	r31, 0xFE	; 254
    1282:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
    1284:	e0 91 18 01 	lds	r30, 0x0118
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	ee 5a       	subi	r30, 0xAE	; 174
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	80 83       	st	Z, r24
		packStarted = 1;
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	90 93 17 01 	sts	0x0117, r25
		lastPackNo = data;
    129a:	80 93 16 01 	sts	0x0116, r24
		lastPackPosInBuff = rxWritePos; 
    129e:	80 91 18 01 	lds	r24, 0x0118
    12a2:	80 93 15 01 	sts	0x0115, r24
    12a6:	1d c0       	rjmp	.+58     	; 0x12e2 <__vector_28+0x8c>
	}else{
		
		rxBuffer[rxWritePos].pack_no = lastPackNo;
    12a8:	e0 91 18 01 	lds	r30, 0x0118
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	90 91 16 01 	lds	r25, 0x0116
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	ee 5a       	subi	r30, 0xAE	; 174
    12b8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ba:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
    12bc:	e0 91 18 01 	lds	r30, 0x0118
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	ee 5a       	subi	r30, 0xAE	; 174
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	80 83       	st	Z, r24
		packStarted++ ;
    12cc:	80 91 17 01 	lds	r24, 0x0117
    12d0:	8f 5f       	subi	r24, 0xFF	; 255
    12d2:	80 93 17 01 	sts	0x0117, r24
		
		if(packStarted == COMMAND_SIZE){
    12d6:	80 91 17 01 	lds	r24, 0x0117
    12da:	87 30       	cpi	r24, 0x07	; 7
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <__vector_28+0x8c>
			packStarted = 0;
    12de:	10 92 17 01 	sts	0x0117, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
    12e2:	80 91 18 01 	lds	r24, 0x0118
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	80 93 18 01 	sts	0x0118, r24
	rxWritePos &= RX_BUFFER_SIZE_MSK;
    12ec:	80 91 18 01 	lds	r24, 0x0118
    12f0:	8f 77       	andi	r24, 0x7F	; 127
    12f2:	80 93 18 01 	sts	0x0118, r24
			rxWritePos = 0;
	}*/
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <__vector_30>:

ISR(USART1_TX_vect){
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	8f 93       	push	r24
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
    1318:	e0 91 14 01 	lds	r30, 0x0114
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	ee 5a       	subi	r30, 0xAE	; 174
    1324:	fd 4f       	sbci	r31, 0xFD	; 253
    1326:	81 81       	ldd	r24, Z+1	; 0x01
    1328:	8f 3f       	cpi	r24, 0xFF	; 255
    132a:	29 f1       	breq	.+74     	; 0x1376 <__vector_30+0x6e>
	UDR1 =  txBuffer[txReadPos].data;
    132c:	e0 91 14 01 	lds	r30, 0x0114
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	ee 5a       	subi	r30, 0xAE	; 174
    1338:	fd 4f       	sbci	r31, 0xFD	; 253
    133a:	80 81       	ld	r24, Z
    133c:	80 93 ce 00 	sts	0x00CE, r24
	txBuffer[txReadPos].data =0;
    1340:	e0 91 14 01 	lds	r30, 0x0114
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	ee 5a       	subi	r30, 0xAE	; 174
    134c:	fd 4f       	sbci	r31, 0xFD	; 253
    134e:	10 82       	st	Z, r1
	txBuffer[txReadPos].pack_no =-1;
    1350:	e0 91 14 01 	lds	r30, 0x0114
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	ee 5a       	subi	r30, 0xAE	; 174
    135c:	fd 4f       	sbci	r31, 0xFD	; 253
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	81 83       	std	Z+1, r24	; 0x01
	txReadPos++;
    1362:	80 91 14 01 	lds	r24, 0x0114
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 14 01 	sts	0x0114, r24
	txReadPos &= TX_BUFFER_SIZE_MSK;
    136c:	80 91 14 01 	lds	r24, 0x0114
    1370:	8f 77       	andi	r24, 0x7F	; 127
    1372:	80 93 14 01 	sts	0x0114, r24
			txReadPos =0;
		}
		*/
	}
	
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	8f 91       	pop	r24
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <executeCommandForTime>:
volatile uint32_t ticks = 99999;
volatile uint16_t lastCOMPARE = 0;


void executeCommandForTime(void (*startF) (uint16_t, int16_t*), void (*stopF) (uint16_t, int16_t*), 
uint16_t argc_start, int16_t* argv_start, uint16_t argc_stop, int16_t* argv_stop, uint16_t time){
    1386:	af 92       	push	r10
    1388:	bf 92       	push	r11
    138a:	cf 92       	push	r12
    138c:	df 92       	push	r13
    138e:	ef 92       	push	r14
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	5c 01       	movw	r10, r24
    139c:	ca 01       	movw	r24, r20
    139e:	a9 01       	movw	r20, r18
	//init timer


	cli();
    13a0:	f8 94       	cli
	stopFunction = stopF;
    13a2:	70 93 1d 01 	sts	0x011D, r23
    13a6:	60 93 1c 01 	sts	0x011C, r22
	argc2 = argc_stop;
    13aa:	10 93 1b 01 	sts	0x011B, r17
    13ae:	00 93 1a 01 	sts	0x011A, r16
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
    13b2:	01 15       	cp	r16, r1
    13b4:	11 05       	cpc	r17, r1
    13b6:	91 f0       	breq	.+36     	; 0x13dc <executeCommandForTime+0x56>
    13b8:	ce 2d       	mov	r28, r14
    13ba:	df 2d       	mov	r29, r15
    13bc:	a0 e0       	ldi	r26, 0x00	; 0
    13be:	b0 e0       	ldi	r27, 0x00	; 0
		argv2[i] = argv_stop[i];
    13c0:	69 91       	ld	r22, Y+
    13c2:	79 91       	ld	r23, Y+
    13c4:	9d 01       	movw	r18, r26
    13c6:	22 0f       	add	r18, r18
    13c8:	33 1f       	adc	r19, r19
    13ca:	f9 01       	movw	r30, r18
    13cc:	ee 5a       	subi	r30, 0xAE	; 174
    13ce:	fc 4f       	sbci	r31, 0xFC	; 252
    13d0:	71 83       	std	Z+1, r23	; 0x01
    13d2:	60 83       	st	Z, r22


	cli();
	stopFunction = stopF;
	argc2 = argc_stop;
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
    13d4:	11 96       	adiw	r26, 0x01	; 1
    13d6:	a0 17       	cp	r26, r16
    13d8:	b1 07       	cpc	r27, r17
    13da:	91 f7       	brne	.-28     	; 0x13c0 <executeCommandForTime+0x3a>
	//TCCR1B &= ~((1<<CS10) | (1<<CS11));

//	sei();		
	
	//call start function
	ticks = time;
    13dc:	86 01       	movw	r16, r12
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	00 93 00 01 	sts	0x0100, r16
    13e6:	10 93 01 01 	sts	0x0101, r17
    13ea:	20 93 02 01 	sts	0x0102, r18
    13ee:	30 93 03 01 	sts	0x0103, r19
	startF(argc_start, argv_start);
    13f2:	ba 01       	movw	r22, r20
    13f4:	f5 01       	movw	r30, r10
    13f6:	09 95       	icall
	LED_CMD_PORT |= (1<<LED_CMD_PINx);
    13f8:	17 9a       	sbi	0x02, 7	; 2
	sei();
    13fa:	78 94       	sei
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	08 95       	ret

00001412 <initTimer1>:

void initTimer1()
{
	//Normal port operation, OC1A/OC1B disconnected.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1A0));	
    1412:	e0 e8       	ldi	r30, 0x80	; 128
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 71       	andi	r24, 0x1F	; 31
    141a:	80 83       	st	Z, r24
	
	//Timer/Counter mode of operation: CTC, TOP = OCR1A, Update of OCR1x at Immediate TOVn flag set on MAX
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11));
    141c:	80 81       	ld	r24, Z
    141e:	8c 7f       	andi	r24, 0xFC	; 252
    1420:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
    1422:	e1 e8       	ldi	r30, 0x81	; 129
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	88 60       	ori	r24, 0x08	; 8
    142a:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
    142c:	80 81       	ld	r24, Z
    142e:	8f 7e       	andi	r24, 0xEF	; 239
    1430:	80 83       	st	Z, r24
	
	// Clock Select: clk/64 prescaler
	TCCR1B &= ~((1<<CS12));
    1432:	80 81       	ld	r24, Z
    1434:	8b 7f       	andi	r24, 0xFB	; 251
    1436:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10) | (1<<CS11);
    1438:	80 81       	ld	r24, Z
    143a:	83 60       	ori	r24, 0x03	; 3
    143c:	80 83       	st	Z, r24
	
	
	
	// reset counter
	TCNT1 = 0;
    143e:	10 92 85 00 	sts	0x0085, r1
    1442:	10 92 84 00 	sts	0x0084, r1
	// disable compare for the moment
	//OCR1A = 0;
	//OCR1B = 0;
	
	//set OCR1A for 1 ms interrupts
	OCR1A = ((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*10L;
    1446:	82 ee       	ldi	r24, 0xE2	; 226
    1448:	94 e0       	ldi	r25, 0x04	; 4
    144a:	90 93 89 00 	sts	0x0089, r25
    144e:	80 93 88 00 	sts	0x0088, r24
	
	//enable Output Compare A Match Interrupt Enable
	TIMSK1 |= (1<<OCIE1A);// (1<<OCIE1B) | (1<<OCIE1A);
    1452:	ef e6       	ldi	r30, 0x6F	; 111
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	82 60       	ori	r24, 0x02	; 2
    145a:	80 83       	st	Z, r24
    145c:	08 95       	ret

0000145e <__vector_13>:
	
}

ISR(TIMER1_COMPA_vect){
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	2f 93       	push	r18
    146a:	3f 93       	push	r19
    146c:	4f 93       	push	r20
    146e:	5f 93       	push	r21
    1470:	6f 93       	push	r22
    1472:	7f 93       	push	r23
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	af 93       	push	r26
    147a:	bf 93       	push	r27
    147c:	ef 93       	push	r30
    147e:	ff 93       	push	r31
		
	//	LED_CMD_PIN |= (1<<LED_CMD_PINx);
		
		if(ticks && ticks != 99999){
    1480:	80 91 00 01 	lds	r24, 0x0100
    1484:	90 91 01 01 	lds	r25, 0x0101
    1488:	a0 91 02 01 	lds	r26, 0x0102
    148c:	b0 91 03 01 	lds	r27, 0x0103
    1490:	89 2b       	or	r24, r25
    1492:	8a 2b       	or	r24, r26
    1494:	8b 2b       	or	r24, r27
    1496:	09 f1       	breq	.+66     	; 0x14da <__vector_13+0x7c>
    1498:	80 91 00 01 	lds	r24, 0x0100
    149c:	90 91 01 01 	lds	r25, 0x0101
    14a0:	a0 91 02 01 	lds	r26, 0x0102
    14a4:	b0 91 03 01 	lds	r27, 0x0103
    14a8:	8f 39       	cpi	r24, 0x9F	; 159
    14aa:	96 48       	sbci	r25, 0x86	; 134
    14ac:	a1 40       	sbci	r26, 0x01	; 1
    14ae:	b1 05       	cpc	r27, r1
    14b0:	a1 f0       	breq	.+40     	; 0x14da <__vector_13+0x7c>
			ticks--;
    14b2:	80 91 00 01 	lds	r24, 0x0100
    14b6:	90 91 01 01 	lds	r25, 0x0101
    14ba:	a0 91 02 01 	lds	r26, 0x0102
    14be:	b0 91 03 01 	lds	r27, 0x0103
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	a1 09       	sbc	r26, r1
    14c6:	b1 09       	sbc	r27, r1
    14c8:	80 93 00 01 	sts	0x0100, r24
    14cc:	90 93 01 01 	sts	0x0101, r25
    14d0:	a0 93 02 01 	sts	0x0102, r26
    14d4:	b0 93 03 01 	sts	0x0103, r27
    14d8:	24 c0       	rjmp	.+72     	; 0x1522 <__vector_13+0xc4>
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
		}else if(ticks == 0){
    14da:	80 91 00 01 	lds	r24, 0x0100
    14de:	90 91 01 01 	lds	r25, 0x0101
    14e2:	a0 91 02 01 	lds	r26, 0x0102
    14e6:	b0 91 03 01 	lds	r27, 0x0103
    14ea:	89 2b       	or	r24, r25
    14ec:	8a 2b       	or	r24, r26
    14ee:	8b 2b       	or	r24, r27
    14f0:	c1 f4       	brne	.+48     	; 0x1522 <__vector_13+0xc4>
			ticks = 99999;
    14f2:	8f e9       	ldi	r24, 0x9F	; 159
    14f4:	96 e8       	ldi	r25, 0x86	; 134
    14f6:	a1 e0       	ldi	r26, 0x01	; 1
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	80 93 00 01 	sts	0x0100, r24
    14fe:	90 93 01 01 	sts	0x0101, r25
    1502:	a0 93 02 01 	sts	0x0102, r26
    1506:	b0 93 03 01 	sts	0x0103, r27
			stopFunction(argc2,argv2);
    150a:	80 91 1a 01 	lds	r24, 0x011A
    150e:	90 91 1b 01 	lds	r25, 0x011B
    1512:	e0 91 1c 01 	lds	r30, 0x011C
    1516:	f0 91 1d 01 	lds	r31, 0x011D
    151a:	62 e5       	ldi	r22, 0x52	; 82
    151c:	73 e0       	ldi	r23, 0x03	; 3
    151e:	09 95       	icall
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
			LED_CMD_PORT &= ~(1<<LED_CMD_PINx);
    1520:	17 98       	cbi	0x02, 7	; 2
	//call the stop function
	stopFunction(argc2, argv2);
	}

*/
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <__subsf3>:
    1544:	50 58       	subi	r21, 0x80	; 128

00001546 <__addsf3>:
    1546:	bb 27       	eor	r27, r27
    1548:	aa 27       	eor	r26, r26
    154a:	0e d0       	rcall	.+28     	; 0x1568 <__addsf3x>
    154c:	84 c1       	rjmp	.+776    	; 0x1856 <__fp_round>
    154e:	75 d1       	rcall	.+746    	; 0x183a <__fp_pscA>
    1550:	30 f0       	brcs	.+12     	; 0x155e <__addsf3+0x18>
    1552:	7a d1       	rcall	.+756    	; 0x1848 <__fp_pscB>
    1554:	20 f0       	brcs	.+8      	; 0x155e <__addsf3+0x18>
    1556:	31 f4       	brne	.+12     	; 0x1564 <__addsf3+0x1e>
    1558:	9f 3f       	cpi	r25, 0xFF	; 255
    155a:	11 f4       	brne	.+4      	; 0x1560 <__addsf3+0x1a>
    155c:	1e f4       	brtc	.+6      	; 0x1564 <__addsf3+0x1e>
    155e:	6a c1       	rjmp	.+724    	; 0x1834 <__fp_nan>
    1560:	0e f4       	brtc	.+2      	; 0x1564 <__addsf3+0x1e>
    1562:	e0 95       	com	r30
    1564:	e7 fb       	bst	r30, 7
    1566:	37 c1       	rjmp	.+622    	; 0x17d6 <__fp_inf>

00001568 <__addsf3x>:
    1568:	e9 2f       	mov	r30, r25
    156a:	86 d1       	rcall	.+780    	; 0x1878 <__fp_split3>
    156c:	80 f3       	brcs	.-32     	; 0x154e <__addsf3+0x8>
    156e:	ba 17       	cp	r27, r26
    1570:	62 07       	cpc	r22, r18
    1572:	73 07       	cpc	r23, r19
    1574:	84 07       	cpc	r24, r20
    1576:	95 07       	cpc	r25, r21
    1578:	18 f0       	brcs	.+6      	; 0x1580 <__addsf3x+0x18>
    157a:	71 f4       	brne	.+28     	; 0x1598 <__addsf3x+0x30>
    157c:	9e f5       	brtc	.+102    	; 0x15e4 <__addsf3x+0x7c>
    157e:	b5 c1       	rjmp	.+874    	; 0x18ea <__fp_zero>
    1580:	0e f4       	brtc	.+2      	; 0x1584 <__addsf3x+0x1c>
    1582:	e0 95       	com	r30
    1584:	0b 2e       	mov	r0, r27
    1586:	ba 2f       	mov	r27, r26
    1588:	a0 2d       	mov	r26, r0
    158a:	0b 01       	movw	r0, r22
    158c:	b9 01       	movw	r22, r18
    158e:	90 01       	movw	r18, r0
    1590:	0c 01       	movw	r0, r24
    1592:	ca 01       	movw	r24, r20
    1594:	a0 01       	movw	r20, r0
    1596:	11 24       	eor	r1, r1
    1598:	ff 27       	eor	r31, r31
    159a:	59 1b       	sub	r21, r25
    159c:	99 f0       	breq	.+38     	; 0x15c4 <__addsf3x+0x5c>
    159e:	59 3f       	cpi	r21, 0xF9	; 249
    15a0:	50 f4       	brcc	.+20     	; 0x15b6 <__addsf3x+0x4e>
    15a2:	50 3e       	cpi	r21, 0xE0	; 224
    15a4:	68 f1       	brcs	.+90     	; 0x1600 <__addsf3x+0x98>
    15a6:	1a 16       	cp	r1, r26
    15a8:	f0 40       	sbci	r31, 0x00	; 0
    15aa:	a2 2f       	mov	r26, r18
    15ac:	23 2f       	mov	r18, r19
    15ae:	34 2f       	mov	r19, r20
    15b0:	44 27       	eor	r20, r20
    15b2:	58 5f       	subi	r21, 0xF8	; 248
    15b4:	f3 cf       	rjmp	.-26     	; 0x159c <__addsf3x+0x34>
    15b6:	46 95       	lsr	r20
    15b8:	37 95       	ror	r19
    15ba:	27 95       	ror	r18
    15bc:	a7 95       	ror	r26
    15be:	f0 40       	sbci	r31, 0x00	; 0
    15c0:	53 95       	inc	r21
    15c2:	c9 f7       	brne	.-14     	; 0x15b6 <__addsf3x+0x4e>
    15c4:	7e f4       	brtc	.+30     	; 0x15e4 <__addsf3x+0x7c>
    15c6:	1f 16       	cp	r1, r31
    15c8:	ba 0b       	sbc	r27, r26
    15ca:	62 0b       	sbc	r22, r18
    15cc:	73 0b       	sbc	r23, r19
    15ce:	84 0b       	sbc	r24, r20
    15d0:	ba f0       	brmi	.+46     	; 0x1600 <__addsf3x+0x98>
    15d2:	91 50       	subi	r25, 0x01	; 1
    15d4:	a1 f0       	breq	.+40     	; 0x15fe <__addsf3x+0x96>
    15d6:	ff 0f       	add	r31, r31
    15d8:	bb 1f       	adc	r27, r27
    15da:	66 1f       	adc	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	c2 f7       	brpl	.-16     	; 0x15d2 <__addsf3x+0x6a>
    15e2:	0e c0       	rjmp	.+28     	; 0x1600 <__addsf3x+0x98>
    15e4:	ba 0f       	add	r27, r26
    15e6:	62 1f       	adc	r22, r18
    15e8:	73 1f       	adc	r23, r19
    15ea:	84 1f       	adc	r24, r20
    15ec:	48 f4       	brcc	.+18     	; 0x1600 <__addsf3x+0x98>
    15ee:	87 95       	ror	r24
    15f0:	77 95       	ror	r23
    15f2:	67 95       	ror	r22
    15f4:	b7 95       	ror	r27
    15f6:	f7 95       	ror	r31
    15f8:	9e 3f       	cpi	r25, 0xFE	; 254
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <__addsf3x+0x96>
    15fc:	b3 cf       	rjmp	.-154    	; 0x1564 <__addsf3+0x1e>
    15fe:	93 95       	inc	r25
    1600:	88 0f       	add	r24, r24
    1602:	08 f0       	brcs	.+2      	; 0x1606 <__addsf3x+0x9e>
    1604:	99 27       	eor	r25, r25
    1606:	ee 0f       	add	r30, r30
    1608:	97 95       	ror	r25
    160a:	87 95       	ror	r24
    160c:	08 95       	ret

0000160e <__divsf3>:
    160e:	0c d0       	rcall	.+24     	; 0x1628 <__divsf3x>
    1610:	22 c1       	rjmp	.+580    	; 0x1856 <__fp_round>
    1612:	1a d1       	rcall	.+564    	; 0x1848 <__fp_pscB>
    1614:	40 f0       	brcs	.+16     	; 0x1626 <__divsf3+0x18>
    1616:	11 d1       	rcall	.+546    	; 0x183a <__fp_pscA>
    1618:	30 f0       	brcs	.+12     	; 0x1626 <__divsf3+0x18>
    161a:	21 f4       	brne	.+8      	; 0x1624 <__divsf3+0x16>
    161c:	5f 3f       	cpi	r21, 0xFF	; 255
    161e:	19 f0       	breq	.+6      	; 0x1626 <__divsf3+0x18>
    1620:	da c0       	rjmp	.+436    	; 0x17d6 <__fp_inf>
    1622:	51 11       	cpse	r21, r1
    1624:	63 c1       	rjmp	.+710    	; 0x18ec <__fp_szero>
    1626:	06 c1       	rjmp	.+524    	; 0x1834 <__fp_nan>

00001628 <__divsf3x>:
    1628:	27 d1       	rcall	.+590    	; 0x1878 <__fp_split3>
    162a:	98 f3       	brcs	.-26     	; 0x1612 <__divsf3+0x4>

0000162c <__divsf3_pse>:
    162c:	99 23       	and	r25, r25
    162e:	c9 f3       	breq	.-14     	; 0x1622 <__divsf3+0x14>
    1630:	55 23       	and	r21, r21
    1632:	b1 f3       	breq	.-20     	; 0x1620 <__divsf3+0x12>
    1634:	95 1b       	sub	r25, r21
    1636:	55 0b       	sbc	r21, r21
    1638:	bb 27       	eor	r27, r27
    163a:	aa 27       	eor	r26, r26
    163c:	62 17       	cp	r22, r18
    163e:	73 07       	cpc	r23, r19
    1640:	84 07       	cpc	r24, r20
    1642:	38 f0       	brcs	.+14     	; 0x1652 <__divsf3_pse+0x26>
    1644:	9f 5f       	subi	r25, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	22 0f       	add	r18, r18
    164a:	33 1f       	adc	r19, r19
    164c:	44 1f       	adc	r20, r20
    164e:	aa 1f       	adc	r26, r26
    1650:	a9 f3       	breq	.-22     	; 0x163c <__divsf3_pse+0x10>
    1652:	33 d0       	rcall	.+102    	; 0x16ba <__divsf3_pse+0x8e>
    1654:	0e 2e       	mov	r0, r30
    1656:	3a f0       	brmi	.+14     	; 0x1666 <__divsf3_pse+0x3a>
    1658:	e0 e8       	ldi	r30, 0x80	; 128
    165a:	30 d0       	rcall	.+96     	; 0x16bc <__divsf3_pse+0x90>
    165c:	91 50       	subi	r25, 0x01	; 1
    165e:	50 40       	sbci	r21, 0x00	; 0
    1660:	e6 95       	lsr	r30
    1662:	00 1c       	adc	r0, r0
    1664:	ca f7       	brpl	.-14     	; 0x1658 <__divsf3_pse+0x2c>
    1666:	29 d0       	rcall	.+82     	; 0x16ba <__divsf3_pse+0x8e>
    1668:	fe 2f       	mov	r31, r30
    166a:	27 d0       	rcall	.+78     	; 0x16ba <__divsf3_pse+0x8e>
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	bb 1f       	adc	r27, r27
    1674:	26 17       	cp	r18, r22
    1676:	37 07       	cpc	r19, r23
    1678:	48 07       	cpc	r20, r24
    167a:	ab 07       	cpc	r26, r27
    167c:	b0 e8       	ldi	r27, 0x80	; 128
    167e:	09 f0       	breq	.+2      	; 0x1682 <__divsf3_pse+0x56>
    1680:	bb 0b       	sbc	r27, r27
    1682:	80 2d       	mov	r24, r0
    1684:	bf 01       	movw	r22, r30
    1686:	ff 27       	eor	r31, r31
    1688:	93 58       	subi	r25, 0x83	; 131
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	2a f0       	brmi	.+10     	; 0x1698 <__divsf3_pse+0x6c>
    168e:	9e 3f       	cpi	r25, 0xFE	; 254
    1690:	51 05       	cpc	r21, r1
    1692:	68 f0       	brcs	.+26     	; 0x16ae <__divsf3_pse+0x82>
    1694:	a0 c0       	rjmp	.+320    	; 0x17d6 <__fp_inf>
    1696:	2a c1       	rjmp	.+596    	; 0x18ec <__fp_szero>
    1698:	5f 3f       	cpi	r21, 0xFF	; 255
    169a:	ec f3       	brlt	.-6      	; 0x1696 <__divsf3_pse+0x6a>
    169c:	98 3e       	cpi	r25, 0xE8	; 232
    169e:	dc f3       	brlt	.-10     	; 0x1696 <__divsf3_pse+0x6a>
    16a0:	86 95       	lsr	r24
    16a2:	77 95       	ror	r23
    16a4:	67 95       	ror	r22
    16a6:	b7 95       	ror	r27
    16a8:	f7 95       	ror	r31
    16aa:	9f 5f       	subi	r25, 0xFF	; 255
    16ac:	c9 f7       	brne	.-14     	; 0x16a0 <__divsf3_pse+0x74>
    16ae:	88 0f       	add	r24, r24
    16b0:	91 1d       	adc	r25, r1
    16b2:	96 95       	lsr	r25
    16b4:	87 95       	ror	r24
    16b6:	97 f9       	bld	r25, 7
    16b8:	08 95       	ret
    16ba:	e1 e0       	ldi	r30, 0x01	; 1
    16bc:	66 0f       	add	r22, r22
    16be:	77 1f       	adc	r23, r23
    16c0:	88 1f       	adc	r24, r24
    16c2:	bb 1f       	adc	r27, r27
    16c4:	62 17       	cp	r22, r18
    16c6:	73 07       	cpc	r23, r19
    16c8:	84 07       	cpc	r24, r20
    16ca:	ba 07       	cpc	r27, r26
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <__divsf3_pse+0xaa>
    16ce:	62 1b       	sub	r22, r18
    16d0:	73 0b       	sbc	r23, r19
    16d2:	84 0b       	sbc	r24, r20
    16d4:	ba 0b       	sbc	r27, r26
    16d6:	ee 1f       	adc	r30, r30
    16d8:	88 f7       	brcc	.-30     	; 0x16bc <__divsf3_pse+0x90>
    16da:	e0 95       	com	r30
    16dc:	08 95       	ret

000016de <__fixunssfsi>:
    16de:	d4 d0       	rcall	.+424    	; 0x1888 <__fp_splitA>
    16e0:	88 f0       	brcs	.+34     	; 0x1704 <__fixunssfsi+0x26>
    16e2:	9f 57       	subi	r25, 0x7F	; 127
    16e4:	90 f0       	brcs	.+36     	; 0x170a <__fixunssfsi+0x2c>
    16e6:	b9 2f       	mov	r27, r25
    16e8:	99 27       	eor	r25, r25
    16ea:	b7 51       	subi	r27, 0x17	; 23
    16ec:	a0 f0       	brcs	.+40     	; 0x1716 <__fixunssfsi+0x38>
    16ee:	d1 f0       	breq	.+52     	; 0x1724 <__fixunssfsi+0x46>
    16f0:	66 0f       	add	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	1a f0       	brmi	.+6      	; 0x1700 <__fixunssfsi+0x22>
    16fa:	ba 95       	dec	r27
    16fc:	c9 f7       	brne	.-14     	; 0x16f0 <__fixunssfsi+0x12>
    16fe:	12 c0       	rjmp	.+36     	; 0x1724 <__fixunssfsi+0x46>
    1700:	b1 30       	cpi	r27, 0x01	; 1
    1702:	81 f0       	breq	.+32     	; 0x1724 <__fixunssfsi+0x46>
    1704:	f2 d0       	rcall	.+484    	; 0x18ea <__fp_zero>
    1706:	b1 e0       	ldi	r27, 0x01	; 1
    1708:	08 95       	ret
    170a:	ef c0       	rjmp	.+478    	; 0x18ea <__fp_zero>
    170c:	67 2f       	mov	r22, r23
    170e:	78 2f       	mov	r23, r24
    1710:	88 27       	eor	r24, r24
    1712:	b8 5f       	subi	r27, 0xF8	; 248
    1714:	39 f0       	breq	.+14     	; 0x1724 <__fixunssfsi+0x46>
    1716:	b9 3f       	cpi	r27, 0xF9	; 249
    1718:	cc f3       	brlt	.-14     	; 0x170c <__fixunssfsi+0x2e>
    171a:	86 95       	lsr	r24
    171c:	77 95       	ror	r23
    171e:	67 95       	ror	r22
    1720:	b3 95       	inc	r27
    1722:	d9 f7       	brne	.-10     	; 0x171a <__fixunssfsi+0x3c>
    1724:	3e f4       	brtc	.+14     	; 0x1734 <__fixunssfsi+0x56>
    1726:	90 95       	com	r25
    1728:	80 95       	com	r24
    172a:	70 95       	com	r23
    172c:	61 95       	neg	r22
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	08 95       	ret

00001736 <__floatunsisf>:
    1736:	e8 94       	clt
    1738:	09 c0       	rjmp	.+18     	; 0x174c <__floatsisf+0x12>

0000173a <__floatsisf>:
    173a:	97 fb       	bst	r25, 7
    173c:	3e f4       	brtc	.+14     	; 0x174c <__floatsisf+0x12>
    173e:	90 95       	com	r25
    1740:	80 95       	com	r24
    1742:	70 95       	com	r23
    1744:	61 95       	neg	r22
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	8f 4f       	sbci	r24, 0xFF	; 255
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	99 23       	and	r25, r25
    174e:	a9 f0       	breq	.+42     	; 0x177a <__floatsisf+0x40>
    1750:	f9 2f       	mov	r31, r25
    1752:	96 e9       	ldi	r25, 0x96	; 150
    1754:	bb 27       	eor	r27, r27
    1756:	93 95       	inc	r25
    1758:	f6 95       	lsr	r31
    175a:	87 95       	ror	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	b7 95       	ror	r27
    1762:	f1 11       	cpse	r31, r1
    1764:	f8 cf       	rjmp	.-16     	; 0x1756 <__floatsisf+0x1c>
    1766:	fa f4       	brpl	.+62     	; 0x17a6 <__floatsisf+0x6c>
    1768:	bb 0f       	add	r27, r27
    176a:	11 f4       	brne	.+4      	; 0x1770 <__floatsisf+0x36>
    176c:	60 ff       	sbrs	r22, 0
    176e:	1b c0       	rjmp	.+54     	; 0x17a6 <__floatsisf+0x6c>
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	16 c0       	rjmp	.+44     	; 0x17a6 <__floatsisf+0x6c>
    177a:	88 23       	and	r24, r24
    177c:	11 f0       	breq	.+4      	; 0x1782 <__floatsisf+0x48>
    177e:	96 e9       	ldi	r25, 0x96	; 150
    1780:	11 c0       	rjmp	.+34     	; 0x17a4 <__floatsisf+0x6a>
    1782:	77 23       	and	r23, r23
    1784:	21 f0       	breq	.+8      	; 0x178e <__floatsisf+0x54>
    1786:	9e e8       	ldi	r25, 0x8E	; 142
    1788:	87 2f       	mov	r24, r23
    178a:	76 2f       	mov	r23, r22
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <__floatsisf+0x5e>
    178e:	66 23       	and	r22, r22
    1790:	71 f0       	breq	.+28     	; 0x17ae <__floatsisf+0x74>
    1792:	96 e8       	ldi	r25, 0x86	; 134
    1794:	86 2f       	mov	r24, r22
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	2a f0       	brmi	.+10     	; 0x17a6 <__floatsisf+0x6c>
    179c:	9a 95       	dec	r25
    179e:	66 0f       	add	r22, r22
    17a0:	77 1f       	adc	r23, r23
    17a2:	88 1f       	adc	r24, r24
    17a4:	da f7       	brpl	.-10     	; 0x179c <__floatsisf+0x62>
    17a6:	88 0f       	add	r24, r24
    17a8:	96 95       	lsr	r25
    17aa:	87 95       	ror	r24
    17ac:	97 f9       	bld	r25, 7
    17ae:	08 95       	ret

000017b0 <floor>:
    17b0:	85 d0       	rcall	.+266    	; 0x18bc <__fp_trunc>
    17b2:	80 f0       	brcs	.+32     	; 0x17d4 <floor+0x24>
    17b4:	9f 37       	cpi	r25, 0x7F	; 127
    17b6:	40 f4       	brcc	.+16     	; 0x17c8 <floor+0x18>
    17b8:	91 11       	cpse	r25, r1
    17ba:	0e f0       	brts	.+2      	; 0x17be <floor+0xe>
    17bc:	97 c0       	rjmp	.+302    	; 0x18ec <__fp_szero>
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	80 e8       	ldi	r24, 0x80	; 128
    17c4:	9f eb       	ldi	r25, 0xBF	; 191
    17c6:	08 95       	ret
    17c8:	26 f4       	brtc	.+8      	; 0x17d2 <floor+0x22>
    17ca:	1b 16       	cp	r1, r27
    17cc:	61 1d       	adc	r22, r1
    17ce:	71 1d       	adc	r23, r1
    17d0:	81 1d       	adc	r24, r1
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <__fp_mintl>
    17d4:	21 c0       	rjmp	.+66     	; 0x1818 <__fp_mpack>

000017d6 <__fp_inf>:
    17d6:	97 f9       	bld	r25, 7
    17d8:	9f 67       	ori	r25, 0x7F	; 127
    17da:	80 e8       	ldi	r24, 0x80	; 128
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	08 95       	ret

000017e2 <__fp_mintl>:
    17e2:	88 23       	and	r24, r24
    17e4:	71 f4       	brne	.+28     	; 0x1802 <__fp_mintl+0x20>
    17e6:	77 23       	and	r23, r23
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <__fp_mintl+0x10>
    17ea:	98 50       	subi	r25, 0x08	; 8
    17ec:	87 2b       	or	r24, r23
    17ee:	76 2f       	mov	r23, r22
    17f0:	07 c0       	rjmp	.+14     	; 0x1800 <__fp_mintl+0x1e>
    17f2:	66 23       	and	r22, r22
    17f4:	11 f4       	brne	.+4      	; 0x17fa <__fp_mintl+0x18>
    17f6:	99 27       	eor	r25, r25
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <__fp_mintl+0x32>
    17fa:	90 51       	subi	r25, 0x10	; 16
    17fc:	86 2b       	or	r24, r22
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	2a f0       	brmi	.+10     	; 0x180e <__fp_mintl+0x2c>
    1804:	9a 95       	dec	r25
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	da f7       	brpl	.-10     	; 0x1804 <__fp_mintl+0x22>
    180e:	88 0f       	add	r24, r24
    1810:	96 95       	lsr	r25
    1812:	87 95       	ror	r24
    1814:	97 f9       	bld	r25, 7
    1816:	08 95       	ret

00001818 <__fp_mpack>:
    1818:	9f 3f       	cpi	r25, 0xFF	; 255
    181a:	31 f0       	breq	.+12     	; 0x1828 <__fp_mpack_finite+0xc>

0000181c <__fp_mpack_finite>:
    181c:	91 50       	subi	r25, 0x01	; 1
    181e:	20 f4       	brcc	.+8      	; 0x1828 <__fp_mpack_finite+0xc>
    1820:	87 95       	ror	r24
    1822:	77 95       	ror	r23
    1824:	67 95       	ror	r22
    1826:	b7 95       	ror	r27
    1828:	88 0f       	add	r24, r24
    182a:	91 1d       	adc	r25, r1
    182c:	96 95       	lsr	r25
    182e:	87 95       	ror	r24
    1830:	97 f9       	bld	r25, 7
    1832:	08 95       	ret

00001834 <__fp_nan>:
    1834:	9f ef       	ldi	r25, 0xFF	; 255
    1836:	80 ec       	ldi	r24, 0xC0	; 192
    1838:	08 95       	ret

0000183a <__fp_pscA>:
    183a:	00 24       	eor	r0, r0
    183c:	0a 94       	dec	r0
    183e:	16 16       	cp	r1, r22
    1840:	17 06       	cpc	r1, r23
    1842:	18 06       	cpc	r1, r24
    1844:	09 06       	cpc	r0, r25
    1846:	08 95       	ret

00001848 <__fp_pscB>:
    1848:	00 24       	eor	r0, r0
    184a:	0a 94       	dec	r0
    184c:	12 16       	cp	r1, r18
    184e:	13 06       	cpc	r1, r19
    1850:	14 06       	cpc	r1, r20
    1852:	05 06       	cpc	r0, r21
    1854:	08 95       	ret

00001856 <__fp_round>:
    1856:	09 2e       	mov	r0, r25
    1858:	03 94       	inc	r0
    185a:	00 0c       	add	r0, r0
    185c:	11 f4       	brne	.+4      	; 0x1862 <__fp_round+0xc>
    185e:	88 23       	and	r24, r24
    1860:	52 f0       	brmi	.+20     	; 0x1876 <__fp_round+0x20>
    1862:	bb 0f       	add	r27, r27
    1864:	40 f4       	brcc	.+16     	; 0x1876 <__fp_round+0x20>
    1866:	bf 2b       	or	r27, r31
    1868:	11 f4       	brne	.+4      	; 0x186e <__fp_round+0x18>
    186a:	60 ff       	sbrs	r22, 0
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <__fp_round+0x20>
    186e:	6f 5f       	subi	r22, 0xFF	; 255
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	8f 4f       	sbci	r24, 0xFF	; 255
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	08 95       	ret

00001878 <__fp_split3>:
    1878:	57 fd       	sbrc	r21, 7
    187a:	90 58       	subi	r25, 0x80	; 128
    187c:	44 0f       	add	r20, r20
    187e:	55 1f       	adc	r21, r21
    1880:	59 f0       	breq	.+22     	; 0x1898 <__fp_splitA+0x10>
    1882:	5f 3f       	cpi	r21, 0xFF	; 255
    1884:	71 f0       	breq	.+28     	; 0x18a2 <__fp_splitA+0x1a>
    1886:	47 95       	ror	r20

00001888 <__fp_splitA>:
    1888:	88 0f       	add	r24, r24
    188a:	97 fb       	bst	r25, 7
    188c:	99 1f       	adc	r25, r25
    188e:	61 f0       	breq	.+24     	; 0x18a8 <__fp_splitA+0x20>
    1890:	9f 3f       	cpi	r25, 0xFF	; 255
    1892:	79 f0       	breq	.+30     	; 0x18b2 <__fp_splitA+0x2a>
    1894:	87 95       	ror	r24
    1896:	08 95       	ret
    1898:	12 16       	cp	r1, r18
    189a:	13 06       	cpc	r1, r19
    189c:	14 06       	cpc	r1, r20
    189e:	55 1f       	adc	r21, r21
    18a0:	f2 cf       	rjmp	.-28     	; 0x1886 <__fp_split3+0xe>
    18a2:	46 95       	lsr	r20
    18a4:	f1 df       	rcall	.-30     	; 0x1888 <__fp_splitA>
    18a6:	08 c0       	rjmp	.+16     	; 0x18b8 <__fp_splitA+0x30>
    18a8:	16 16       	cp	r1, r22
    18aa:	17 06       	cpc	r1, r23
    18ac:	18 06       	cpc	r1, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	f1 cf       	rjmp	.-30     	; 0x1894 <__fp_splitA+0xc>
    18b2:	86 95       	lsr	r24
    18b4:	71 05       	cpc	r23, r1
    18b6:	61 05       	cpc	r22, r1
    18b8:	08 94       	sec
    18ba:	08 95       	ret

000018bc <__fp_trunc>:
    18bc:	e5 df       	rcall	.-54     	; 0x1888 <__fp_splitA>
    18be:	a0 f0       	brcs	.+40     	; 0x18e8 <__fp_trunc+0x2c>
    18c0:	be e7       	ldi	r27, 0x7E	; 126
    18c2:	b9 17       	cp	r27, r25
    18c4:	88 f4       	brcc	.+34     	; 0x18e8 <__fp_trunc+0x2c>
    18c6:	bb 27       	eor	r27, r27
    18c8:	9f 38       	cpi	r25, 0x8F	; 143
    18ca:	60 f4       	brcc	.+24     	; 0x18e4 <__fp_trunc+0x28>
    18cc:	16 16       	cp	r1, r22
    18ce:	b1 1d       	adc	r27, r1
    18d0:	67 2f       	mov	r22, r23
    18d2:	78 2f       	mov	r23, r24
    18d4:	88 27       	eor	r24, r24
    18d6:	98 5f       	subi	r25, 0xF8	; 248
    18d8:	f7 cf       	rjmp	.-18     	; 0x18c8 <__fp_trunc+0xc>
    18da:	86 95       	lsr	r24
    18dc:	77 95       	ror	r23
    18de:	67 95       	ror	r22
    18e0:	b1 1d       	adc	r27, r1
    18e2:	93 95       	inc	r25
    18e4:	96 39       	cpi	r25, 0x96	; 150
    18e6:	c8 f3       	brcs	.-14     	; 0x18da <__fp_trunc+0x1e>
    18e8:	08 95       	ret

000018ea <__fp_zero>:
    18ea:	e8 94       	clt

000018ec <__fp_szero>:
    18ec:	bb 27       	eor	r27, r27
    18ee:	66 27       	eor	r22, r22
    18f0:	77 27       	eor	r23, r23
    18f2:	cb 01       	movw	r24, r22
    18f4:	97 f9       	bld	r25, 7
    18f6:	08 95       	ret

000018f8 <lrint>:
    18f8:	c7 df       	rcall	.-114    	; 0x1888 <__fp_splitA>
    18fa:	a8 f1       	brcs	.+106    	; 0x1966 <lrint+0x6e>
    18fc:	9e 57       	subi	r25, 0x7E	; 126
    18fe:	a8 f1       	brcs	.+106    	; 0x196a <lrint+0x72>
    1900:	98 51       	subi	r25, 0x18	; 24
    1902:	60 f0       	brcs	.+24     	; 0x191c <lrint+0x24>
    1904:	39 f1       	breq	.+78     	; 0x1954 <lrint+0x5c>
    1906:	98 30       	cpi	r25, 0x08	; 8
    1908:	70 f5       	brcc	.+92     	; 0x1966 <lrint+0x6e>
    190a:	09 2e       	mov	r0, r25
    190c:	99 27       	eor	r25, r25
    190e:	66 0f       	add	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	88 1f       	adc	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	d1 f7       	brne	.-12     	; 0x190e <lrint+0x16>
    191a:	1c c0       	rjmp	.+56     	; 0x1954 <lrint+0x5c>
    191c:	bb 27       	eor	r27, r27
    191e:	99 3f       	cpi	r25, 0xF9	; 249
    1920:	4c f4       	brge	.+18     	; 0x1934 <lrint+0x3c>
    1922:	b1 11       	cpse	r27, r1
    1924:	b1 e0       	ldi	r27, 0x01	; 1
    1926:	b6 2b       	or	r27, r22
    1928:	67 2f       	mov	r22, r23
    192a:	78 2f       	mov	r23, r24
    192c:	88 27       	eor	r24, r24
    192e:	98 5f       	subi	r25, 0xF8	; 248
    1930:	b1 f7       	brne	.-20     	; 0x191e <lrint+0x26>
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <lrint+0x4c>
    1934:	86 95       	lsr	r24
    1936:	77 95       	ror	r23
    1938:	67 95       	ror	r22
    193a:	b7 95       	ror	r27
    193c:	08 f4       	brcc	.+2      	; 0x1940 <lrint+0x48>
    193e:	b1 60       	ori	r27, 0x01	; 1
    1940:	93 95       	inc	r25
    1942:	c1 f7       	brne	.-16     	; 0x1934 <lrint+0x3c>
    1944:	bb 0f       	add	r27, r27
    1946:	30 f4       	brcc	.+12     	; 0x1954 <lrint+0x5c>
    1948:	11 f4       	brne	.+4      	; 0x194e <lrint+0x56>
    194a:	60 ff       	sbrs	r22, 0
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <lrint+0x5c>
    194e:	6f 5f       	subi	r22, 0xFF	; 255
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	8f 4f       	sbci	r24, 0xFF	; 255
    1954:	3e f4       	brtc	.+14     	; 0x1964 <lrint+0x6c>
    1956:	90 95       	com	r25
    1958:	80 95       	com	r24
    195a:	70 95       	com	r23
    195c:	61 95       	neg	r22
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	08 95       	ret
    1966:	68 94       	set
    1968:	c1 cf       	rjmp	.-126    	; 0x18ec <__fp_szero>
    196a:	bf cf       	rjmp	.-130    	; 0x18ea <__fp_zero>

0000196c <__mulsf3>:
    196c:	0b d0       	rcall	.+22     	; 0x1984 <__mulsf3x>
    196e:	73 cf       	rjmp	.-282    	; 0x1856 <__fp_round>
    1970:	64 df       	rcall	.-312    	; 0x183a <__fp_pscA>
    1972:	28 f0       	brcs	.+10     	; 0x197e <__mulsf3+0x12>
    1974:	69 df       	rcall	.-302    	; 0x1848 <__fp_pscB>
    1976:	18 f0       	brcs	.+6      	; 0x197e <__mulsf3+0x12>
    1978:	95 23       	and	r25, r21
    197a:	09 f0       	breq	.+2      	; 0x197e <__mulsf3+0x12>
    197c:	2c cf       	rjmp	.-424    	; 0x17d6 <__fp_inf>
    197e:	5a cf       	rjmp	.-332    	; 0x1834 <__fp_nan>
    1980:	11 24       	eor	r1, r1
    1982:	b4 cf       	rjmp	.-152    	; 0x18ec <__fp_szero>

00001984 <__mulsf3x>:
    1984:	79 df       	rcall	.-270    	; 0x1878 <__fp_split3>
    1986:	a0 f3       	brcs	.-24     	; 0x1970 <__mulsf3+0x4>

00001988 <__mulsf3_pse>:
    1988:	95 9f       	mul	r25, r21
    198a:	d1 f3       	breq	.-12     	; 0x1980 <__mulsf3+0x14>
    198c:	95 0f       	add	r25, r21
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	55 1f       	adc	r21, r21
    1992:	62 9f       	mul	r22, r18
    1994:	f0 01       	movw	r30, r0
    1996:	72 9f       	mul	r23, r18
    1998:	bb 27       	eor	r27, r27
    199a:	f0 0d       	add	r31, r0
    199c:	b1 1d       	adc	r27, r1
    199e:	63 9f       	mul	r22, r19
    19a0:	aa 27       	eor	r26, r26
    19a2:	f0 0d       	add	r31, r0
    19a4:	b1 1d       	adc	r27, r1
    19a6:	aa 1f       	adc	r26, r26
    19a8:	64 9f       	mul	r22, r20
    19aa:	66 27       	eor	r22, r22
    19ac:	b0 0d       	add	r27, r0
    19ae:	a1 1d       	adc	r26, r1
    19b0:	66 1f       	adc	r22, r22
    19b2:	82 9f       	mul	r24, r18
    19b4:	22 27       	eor	r18, r18
    19b6:	b0 0d       	add	r27, r0
    19b8:	a1 1d       	adc	r26, r1
    19ba:	62 1f       	adc	r22, r18
    19bc:	73 9f       	mul	r23, r19
    19be:	b0 0d       	add	r27, r0
    19c0:	a1 1d       	adc	r26, r1
    19c2:	62 1f       	adc	r22, r18
    19c4:	83 9f       	mul	r24, r19
    19c6:	a0 0d       	add	r26, r0
    19c8:	61 1d       	adc	r22, r1
    19ca:	22 1f       	adc	r18, r18
    19cc:	74 9f       	mul	r23, r20
    19ce:	33 27       	eor	r19, r19
    19d0:	a0 0d       	add	r26, r0
    19d2:	61 1d       	adc	r22, r1
    19d4:	23 1f       	adc	r18, r19
    19d6:	84 9f       	mul	r24, r20
    19d8:	60 0d       	add	r22, r0
    19da:	21 1d       	adc	r18, r1
    19dc:	82 2f       	mov	r24, r18
    19de:	76 2f       	mov	r23, r22
    19e0:	6a 2f       	mov	r22, r26
    19e2:	11 24       	eor	r1, r1
    19e4:	9f 57       	subi	r25, 0x7F	; 127
    19e6:	50 40       	sbci	r21, 0x00	; 0
    19e8:	8a f0       	brmi	.+34     	; 0x1a0c <__mulsf3_pse+0x84>
    19ea:	e1 f0       	breq	.+56     	; 0x1a24 <__mulsf3_pse+0x9c>
    19ec:	88 23       	and	r24, r24
    19ee:	4a f0       	brmi	.+18     	; 0x1a02 <__mulsf3_pse+0x7a>
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	bb 1f       	adc	r27, r27
    19f6:	66 1f       	adc	r22, r22
    19f8:	77 1f       	adc	r23, r23
    19fa:	88 1f       	adc	r24, r24
    19fc:	91 50       	subi	r25, 0x01	; 1
    19fe:	50 40       	sbci	r21, 0x00	; 0
    1a00:	a9 f7       	brne	.-22     	; 0x19ec <__mulsf3_pse+0x64>
    1a02:	9e 3f       	cpi	r25, 0xFE	; 254
    1a04:	51 05       	cpc	r21, r1
    1a06:	70 f0       	brcs	.+28     	; 0x1a24 <__mulsf3_pse+0x9c>
    1a08:	e6 ce       	rjmp	.-564    	; 0x17d6 <__fp_inf>
    1a0a:	70 cf       	rjmp	.-288    	; 0x18ec <__fp_szero>
    1a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0e:	ec f3       	brlt	.-6      	; 0x1a0a <__mulsf3_pse+0x82>
    1a10:	98 3e       	cpi	r25, 0xE8	; 232
    1a12:	dc f3       	brlt	.-10     	; 0x1a0a <__mulsf3_pse+0x82>
    1a14:	86 95       	lsr	r24
    1a16:	77 95       	ror	r23
    1a18:	67 95       	ror	r22
    1a1a:	b7 95       	ror	r27
    1a1c:	f7 95       	ror	r31
    1a1e:	e7 95       	ror	r30
    1a20:	9f 5f       	subi	r25, 0xFF	; 255
    1a22:	c1 f7       	brne	.-16     	; 0x1a14 <__mulsf3_pse+0x8c>
    1a24:	fe 2b       	or	r31, r30
    1a26:	88 0f       	add	r24, r24
    1a28:	91 1d       	adc	r25, r1
    1a2a:	96 95       	lsr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	97 f9       	bld	r25, 7
    1a30:	08 95       	ret

00001a32 <__udivmodsi4>:
    1a32:	a1 e2       	ldi	r26, 0x21	; 33
    1a34:	1a 2e       	mov	r1, r26
    1a36:	aa 1b       	sub	r26, r26
    1a38:	bb 1b       	sub	r27, r27
    1a3a:	fd 01       	movw	r30, r26
    1a3c:	0d c0       	rjmp	.+26     	; 0x1a58 <__udivmodsi4_ep>

00001a3e <__udivmodsi4_loop>:
    1a3e:	aa 1f       	adc	r26, r26
    1a40:	bb 1f       	adc	r27, r27
    1a42:	ee 1f       	adc	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	a2 17       	cp	r26, r18
    1a48:	b3 07       	cpc	r27, r19
    1a4a:	e4 07       	cpc	r30, r20
    1a4c:	f5 07       	cpc	r31, r21
    1a4e:	20 f0       	brcs	.+8      	; 0x1a58 <__udivmodsi4_ep>
    1a50:	a2 1b       	sub	r26, r18
    1a52:	b3 0b       	sbc	r27, r19
    1a54:	e4 0b       	sbc	r30, r20
    1a56:	f5 0b       	sbc	r31, r21

00001a58 <__udivmodsi4_ep>:
    1a58:	66 1f       	adc	r22, r22
    1a5a:	77 1f       	adc	r23, r23
    1a5c:	88 1f       	adc	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	1a 94       	dec	r1
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <__udivmodsi4_loop>
    1a64:	60 95       	com	r22
    1a66:	70 95       	com	r23
    1a68:	80 95       	com	r24
    1a6a:	90 95       	com	r25
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	ac 01       	movw	r20, r24
    1a70:	bd 01       	movw	r22, r26
    1a72:	cf 01       	movw	r24, r30
    1a74:	08 95       	ret

00001a76 <__divmodsi4>:
    1a76:	05 2e       	mov	r0, r21
    1a78:	97 fb       	bst	r25, 7
    1a7a:	1e f4       	brtc	.+6      	; 0x1a82 <__divmodsi4+0xc>
    1a7c:	00 94       	com	r0
    1a7e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__negsi2>
    1a82:	57 fd       	sbrc	r21, 7
    1a84:	07 d0       	rcall	.+14     	; 0x1a94 <__divmodsi4_neg2>
    1a86:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__udivmodsi4>
    1a8a:	07 fc       	sbrc	r0, 7
    1a8c:	03 d0       	rcall	.+6      	; 0x1a94 <__divmodsi4_neg2>
    1a8e:	4e f4       	brtc	.+18     	; 0x1aa2 <__divmodsi4_exit>
    1a90:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__negsi2>

00001a94 <__divmodsi4_neg2>:
    1a94:	50 95       	com	r21
    1a96:	40 95       	com	r20
    1a98:	30 95       	com	r19
    1a9a:	21 95       	neg	r18
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa0:	5f 4f       	sbci	r21, 0xFF	; 255

00001aa2 <__divmodsi4_exit>:
    1aa2:	08 95       	ret

00001aa4 <__negsi2>:
    1aa4:	90 95       	com	r25
    1aa6:	80 95       	com	r24
    1aa8:	70 95       	com	r23
    1aaa:	61 95       	neg	r22
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	08 95       	ret

00001ab4 <_exit>:
    1ab4:	f8 94       	cli

00001ab6 <__stop_program>:
    1ab6:	ff cf       	rjmp	.-2      	; 0x1ab6 <__stop_program>
