
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000015ae  00001642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025f  00800104  00800104  00001646  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013a7  00000000  00000000  00001836  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000821  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000946  00000000  00000000  000033fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000584  00000000  00000000  00003d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007fd  00000000  00000000  000042c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001239  00000000  00000000  00004ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00005cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ee ea       	ldi	r30, 0xAE	; 174
      90:	f5 e1       	ldi	r31, 0x15	; 21
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 30       	cpi	r26, 0x04	; 4
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a4 e0       	ldi	r26, 0x04	; 4
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a3 36       	cpi	r26, 0x63	; 99
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
      b2:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initAll>:
int turning=0;



void initAll(){
	initUSART1(9600);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 90 04 	call	0x920	; 0x920 <initUSART1>
	initTimer0();
      c2:	0e 94 ce 01 	call	0x39c	; 0x39c <initTimer0>
	initTimer1();
      c6:	0e 94 9c 07 	call	0xf38	; 0xf38 <initTimer1>
	initTimer2();
      ca:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <initTimer2>
	initSensors();
      ce:	0e 94 af 02 	call	0x55e	; 0x55e <initSensors>
      d2:	08 95       	ret

000000d4 <executeCommands>:
	}
	
}


void executeCommands(){
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	28 97       	sbiw	r28, 0x08	; 8
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	f8 94       	cli
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	cd bf       	out	0x3d, r28	; 61
		//startUltrasonicMeasure();
	int8_t s;
	command lastcmd = getLastCommand(&s);
      ec:	ce 01       	movw	r24, r28
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	0e 94 46 06 	call	0xc8c	; 0xc8c <getLastCommand>
      f4:	3b 83       	std	Y+3, r19	; 0x03
      f6:	5d 83       	std	Y+5, r21	; 0x05
      f8:	6e 83       	std	Y+6, r22	; 0x06
	if(s==1){
      fa:	89 81       	ldd	r24, Y+1	; 0x01
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	d1 f4       	brne	.+52     	; 0x134 <executeCommands+0x60>
		//CHECK CRC
		
		if(lastcmd.time){
     100:	2d 81       	ldd	r18, Y+5	; 0x05
     102:	3e 81       	ldd	r19, Y+6	; 0x06
     104:	23 2b       	or	r18, r19
     106:	b1 f0       	breq	.+44     	; 0x134 <executeCommands+0x60>
			uint16_t arg1[] = {lastcmd.forward, lastcmd.forward};
			uint16_t arg2[2];
			arg2[0]= 0;
			arg2[1]=0;
			
			if(lastcmd.right>0){
     108:	8b 81       	ldd	r24, Y+3	; 0x03
     10a:	18 16       	cp	r1, r24
     10c:	1c f4       	brge	.+6      	; 0x114 <executeCommands+0x40>
				turnRight_90degrees();
     10e:	0e 94 0c 01 	call	0x218	; 0x218 <turnRight_90degrees>
     112:	10 c0       	rjmp	.+32     	; 0x134 <executeCommands+0x60>
			}else{
				//executeCommandForTime(&move, &move, 2, arg1, 2, arg2, lastcmd.time);
				changePwm_MotorLB(lastcmd.forward);
     114:	04 2f       	mov	r16, r20
     116:	11 27       	eor	r17, r17
     118:	07 fd       	sbrc	r16, 7
     11a:	10 95       	com	r17
     11c:	c8 01       	movw	r24, r16
     11e:	0e 94 c5 00 	call	0x18a	; 0x18a <changePwm_MotorLB>
				changePwm_MotorRB(lastcmd.forward);
     122:	c8 01       	movw	r24, r16
     124:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <changePwm_MotorRB>
				changePwm_MotorLF(lastcmd.forward);
     128:	c8 01       	movw	r24, r16
     12a:	0e 94 ae 00 	call	0x15c	; 0x15c <changePwm_MotorLF>
				changePwm_MotorRF(lastcmd.forward);
     12e:	c8 01       	movw	r24, r16
     130:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <changePwm_MotorRF>
		changeMotorDirectionRF();
	
	}
	*/
	
     134:	28 96       	adiw	r28, 0x08	; 8
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	1f 91       	pop	r17
     146:	0f 91       	pop	r16
     148:	08 95       	ret

0000014a <main>:


int main(void)
{
	
	initAll();
     14a:	0e 94 5d 00 	call	0xba	; 0xba <initAll>
	initTimer2();
	initSensors();
	*/

	
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
     14e:	0f 9a       	sbi	0x01, 7	; 1
	
	sei();
     150:	78 94       	sei

	breakAll();
     152:	0e 94 bd 01 	call	0x37a	; 0x37a <breakAll>

	
	while(1)
	{
		executeCommands();		
     156:	0e 94 6a 00 	call	0xd4	; 0xd4 <executeCommands>
     15a:	fd cf       	rjmp	.-6      	; 0x156 <main+0xc>

0000015c <changePwm_MotorLF>:
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     15c:	bc 01       	movw	r22, r24
     15e:	88 27       	eor	r24, r24
     160:	77 fd       	sbrc	r23, 7
     162:	80 95       	com	r24
     164:	98 2f       	mov	r25, r24
     166:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	48 ec       	ldi	r20, 0xC8	; 200
     170:	52 e4       	ldi	r21, 0x42	; 66
     172:	0e 94 9e 08 	call	0x113c	; 0x113c <__divsf3>
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	4f e7       	ldi	r20, 0x7F	; 127
     17c:	53 e4       	ldi	r21, 0x43	; 67
     17e:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     182:	0e 94 06 09 	call	0x120c	; 0x120c <__fixunssfsi>
     186:	67 bd       	out	0x27, r22	; 39
     188:	08 95       	ret

0000018a <changePwm_MotorLB>:
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     18a:	bc 01       	movw	r22, r24
     18c:	88 27       	eor	r24, r24
     18e:	77 fd       	sbrc	r23, 7
     190:	80 95       	com	r24
     192:	98 2f       	mov	r25, r24
     194:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	48 ec       	ldi	r20, 0xC8	; 200
     19e:	52 e4       	ldi	r21, 0x42	; 66
     1a0:	0e 94 9e 08 	call	0x113c	; 0x113c <__divsf3>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	4f e7       	ldi	r20, 0x7F	; 127
     1aa:	53 e4       	ldi	r21, 0x43	; 67
     1ac:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     1b0:	0e 94 06 09 	call	0x120c	; 0x120c <__fixunssfsi>
     1b4:	68 bd       	out	0x28, r22	; 40
     1b6:	08 95       	ret

000001b8 <changePwm_MotorRF>:
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     1b8:	bc 01       	movw	r22, r24
     1ba:	88 27       	eor	r24, r24
     1bc:	77 fd       	sbrc	r23, 7
     1be:	80 95       	com	r24
     1c0:	98 2f       	mov	r25, r24
     1c2:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	48 ec       	ldi	r20, 0xC8	; 200
     1cc:	52 e4       	ldi	r21, 0x42	; 66
     1ce:	0e 94 9e 08 	call	0x113c	; 0x113c <__divsf3>
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	4f e7       	ldi	r20, 0x7F	; 127
     1d8:	53 e4       	ldi	r21, 0x43	; 67
     1da:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     1de:	0e 94 06 09 	call	0x120c	; 0x120c <__fixunssfsi>
     1e2:	60 93 b3 00 	sts	0x00B3, r22
     1e6:	08 95       	ret

000001e8 <changePwm_MotorRB>:
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     1e8:	bc 01       	movw	r22, r24
     1ea:	88 27       	eor	r24, r24
     1ec:	77 fd       	sbrc	r23, 7
     1ee:	80 95       	com	r24
     1f0:	98 2f       	mov	r25, r24
     1f2:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	48 ec       	ldi	r20, 0xC8	; 200
     1fc:	52 e4       	ldi	r21, 0x42	; 66
     1fe:	0e 94 9e 08 	call	0x113c	; 0x113c <__divsf3>
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	4f e7       	ldi	r20, 0x7F	; 127
     208:	53 e4       	ldi	r21, 0x43	; 67
     20a:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     20e:	0e 94 06 09 	call	0x120c	; 0x120c <__fixunssfsi>
     212:	60 93 b4 00 	sts	0x00B4, r22
     216:	08 95       	ret

00000218 <turnRight_90degrees>:
}
	 


void turnRight_90degrees(){
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	28 97       	sbiw	r28, 0x08	; 8
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
	
	
	
	int16_t arg1[] = {0xB0B0, 0x5050};
     238:	80 eb       	ldi	r24, 0xB0	; 176
     23a:	90 eb       	ldi	r25, 0xB0	; 176
     23c:	9a 83       	std	Y+2, r25	; 0x02
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	80 e5       	ldi	r24, 0x50	; 80
     242:	90 e5       	ldi	r25, 0x50	; 80
     244:	9c 83       	std	Y+4, r25	; 0x04
     246:	8b 83       	std	Y+3, r24	; 0x03
	//arg1[1] = inv << 8;
	arg1[1] |= inv;
	arg1[1] <<=8;
	arg1[1] |= inv;
		*/
	int16_t arg2[] = {0, 0};
     248:	1e 82       	std	Y+6, r1	; 0x06
     24a:	1d 82       	std	Y+5, r1	; 0x05
     24c:	18 86       	std	Y+8, r1	; 0x08
     24e:	1f 82       	std	Y+7, r1	; 0x07
	executeCommandForTime(&move, &move, 2, arg1,2, arg2,90);
     250:	0f 2e       	mov	r0, r31
     252:	f4 e6       	ldi	r31, 0x64	; 100
     254:	cf 2e       	mov	r12, r31
     256:	d1 2c       	mov	r13, r1
     258:	f0 2d       	mov	r31, r0
     25a:	ce 01       	movw	r24, r28
     25c:	05 96       	adiw	r24, 0x05	; 5
     25e:	7c 01       	movw	r14, r24
     260:	02 e0       	ldi	r16, 0x02	; 2
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	9e 01       	movw	r18, r28
     266:	2f 5f       	subi	r18, 0xFF	; 255
     268:	3f 4f       	sbci	r19, 0xFF	; 255
     26a:	42 e0       	ldi	r20, 0x02	; 2
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	67 e5       	ldi	r22, 0x57	; 87
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	cb 01       	movw	r24, r22
     274:	0e 94 58 07 	call	0xeb0	; 0xeb0 <executeCommandForTime>
	
	
}
     278:	28 96       	adiw	r28, 0x08	; 8
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	ff 90       	pop	r15
     28e:	ef 90       	pop	r14
     290:	df 90       	pop	r13
     292:	cf 90       	pop	r12
     294:	08 95       	ret

00000296 <changeMotorDirectionLF>:
	changeMotorDirectionRF();
}


void changeMotorDirectionLF(){
	MOTOR_LF_DIR_PIN1 |= (1<<MOTOR_LF_DIR_PIN1x);
     296:	18 9a       	sbi	0x03, 0	; 3
	MOTOR_LF_DIR_PIN2 |= (1<<MOTOR_LF_DIR_PIN2x);
     298:	19 9a       	sbi	0x03, 1	; 3
     29a:	08 95       	ret

0000029c <changeMotorDirectionLB>:
}
	
void changeMotorDirectionLB(){
	MOTOR_LB_DIR_PIN1 |= (1<<MOTOR_LB_DIR_PIN1x);
     29c:	1a 9a       	sbi	0x03, 2	; 3
	MOTOR_LB_DIR_PIN2 |= (1<<MOTOR_LB_DIR_PIN2x);
     29e:	1d 9a       	sbi	0x03, 5	; 3
     2a0:	08 95       	ret

000002a2 <changeMotorDirectionRF>:
}
	  
void changeMotorDirectionRF(){
	MOTOR_RF_DIR_PIN1 |= (1<<MOTOR_RF_DIR_PIN1x);	
     2a2:	36 9a       	sbi	0x06, 6	; 6
	MOTOR_RF_DIR_PIN2 |= (1<<MOTOR_RF_DIR_PIN2x);
     2a4:	37 9a       	sbi	0x06, 7	; 6
     2a6:	08 95       	ret

000002a8 <changeMotorDirectionRB>:
}
	 
void changeMotorDirectionRB(){
	MOTOR_RB_DIR_PIN1 |= (1<<MOTOR_RB_DIR_PIN1x);
     2a8:	30 9a       	sbi	0x06, 0	; 6
	MOTOR_RB_DIR_PIN2 |= (1<<MOTOR_RB_DIR_PIN2x);
     2aa:	31 9a       	sbi	0x06, 1	; 6
     2ac:	08 95       	ret

000002ae <move>:
		MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);
	
	
}

void move(uint16_t argc, int16_t* argv){
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	eb 01       	movw	r28, r22
	//setez directia initiala
	MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     2b6:	29 9a       	sbi	0x05, 1	; 5
	MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     2b8:	28 98       	cbi	0x05, 0	; 5
	MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     2ba:	2d 9a       	sbi	0x05, 5	; 5
	MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     2bc:	2a 98       	cbi	0x05, 2	; 5
	
	
	MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     2be:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     2c0:	46 98       	cbi	0x08, 6	; 8
	MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     2c2:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);
     2c4:	40 98       	cbi	0x08, 0	; 8
	
	changePwm_MotorLF(argv[0] >> 8);
     2c6:	99 81       	ldd	r25, Y+1	; 0x01
     2c8:	89 2f       	mov	r24, r25
     2ca:	99 0f       	add	r25, r25
     2cc:	99 0b       	sbc	r25, r25
     2ce:	0e 94 ae 00 	call	0x15c	; 0x15c <changePwm_MotorLF>
	changePwm_MotorLB(argv[0] & 0xff);
     2d2:	88 81       	ld	r24, Y
     2d4:	99 81       	ldd	r25, Y+1	; 0x01
     2d6:	99 27       	eor	r25, r25
     2d8:	0e 94 c5 00 	call	0x18a	; 0x18a <changePwm_MotorLB>
	changePwm_MotorRF(argv[1] >> 8);
     2dc:	9b 81       	ldd	r25, Y+3	; 0x03
     2de:	89 2f       	mov	r24, r25
     2e0:	99 0f       	add	r25, r25
     2e2:	99 0b       	sbc	r25, r25
     2e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <changePwm_MotorRF>
	changePwm_MotorRB(argv[1] & 0xff);
     2e8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ea:	9b 81       	ldd	r25, Y+3	; 0x03
     2ec:	99 27       	eor	r25, r25
     2ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <changePwm_MotorRB>
	
	int8_t d;
	
	d = argv[0] >> 8;
     2f2:	99 81       	ldd	r25, Y+1	; 0x01
     2f4:	19 2f       	mov	r17, r25
	
	if (d < 0){
     2f6:	99 23       	and	r25, r25
     2f8:	1c f4       	brge	.+6      	; 0x300 <move+0x52>
		d=-d;
     2fa:	11 95       	neg	r17
		changeMotorDirectionLF();
     2fc:	0e 94 4b 01 	call	0x296	; 0x296 <changeMotorDirectionLF>
	}
	changePwm_MotorLF(d);
     300:	81 2f       	mov	r24, r17
     302:	99 27       	eor	r25, r25
     304:	87 fd       	sbrc	r24, 7
     306:	90 95       	com	r25
     308:	0e 94 ae 00 	call	0x15c	; 0x15c <changePwm_MotorLF>
	
	
	d = argv[0] & 0xff;
     30c:	98 81       	ld	r25, Y
     30e:	19 2f       	mov	r17, r25
	
	if (d < 0){
     310:	99 23       	and	r25, r25
     312:	1c f4       	brge	.+6      	; 0x31a <move+0x6c>
		d=-d;
     314:	11 95       	neg	r17
		changeMotorDirectionLB();
     316:	0e 94 4e 01 	call	0x29c	; 0x29c <changeMotorDirectionLB>
	}
	changePwm_MotorLB(d);
     31a:	81 2f       	mov	r24, r17
     31c:	99 27       	eor	r25, r25
     31e:	87 fd       	sbrc	r24, 7
     320:	90 95       	com	r25
     322:	0e 94 c5 00 	call	0x18a	; 0x18a <changePwm_MotorLB>

	d = argv[1] >> 8;
     326:	9b 81       	ldd	r25, Y+3	; 0x03
     328:	19 2f       	mov	r17, r25
	if (d < 0){
     32a:	99 23       	and	r25, r25
     32c:	1c f4       	brge	.+6      	; 0x334 <move+0x86>
		d=-d;
     32e:	11 95       	neg	r17
		changeMotorDirectionRF();
     330:	0e 94 51 01 	call	0x2a2	; 0x2a2 <changeMotorDirectionRF>
	}
	changePwm_MotorRF(d);
     334:	81 2f       	mov	r24, r17
     336:	99 27       	eor	r25, r25
     338:	87 fd       	sbrc	r24, 7
     33a:	90 95       	com	r25
     33c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <changePwm_MotorRF>
	
	d = argv[1] & 0xff;
     340:	9a 81       	ldd	r25, Y+2	; 0x02
     342:	19 2f       	mov	r17, r25
	
	if (d < 0){
     344:	99 23       	and	r25, r25
     346:	1c f4       	brge	.+6      	; 0x34e <move+0xa0>
		d=-d;
     348:	11 95       	neg	r17
		changeMotorDirectionRB();
     34a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <changeMotorDirectionRB>
	}	
	changePwm_MotorRB(d);
     34e:	81 2f       	mov	r24, r17
     350:	99 27       	eor	r25, r25
     352:	87 fd       	sbrc	r24, 7
     354:	90 95       	com	r25
     356:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <changePwm_MotorRB>
	
	sendResponse(argv[0] >> 8);
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	0e 94 22 06 	call	0xc44	; 0xc44 <sendResponse>
	sendResponse(argv[0] & 0xff);
     360:	88 81       	ld	r24, Y
     362:	0e 94 22 06 	call	0xc44	; 0xc44 <sendResponse>
	sendResponse(argv[1] >>8);
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	0e 94 22 06 	call	0xc44	; 0xc44 <sendResponse>
	sendResponse(argv[1] & 0xff);
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	0e 94 22 06 	call	0xc44	; 0xc44 <sendResponse>
	
	
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	08 95       	ret

0000037a <breakAll>:
}



void breakAll(){
	changePwm_MotorLF(0);
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 ae 00 	call	0x15c	; 0x15c <changePwm_MotorLF>
	changePwm_MotorLB(0);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 c5 00 	call	0x18a	; 0x18a <changePwm_MotorLB>
	changePwm_MotorRF(0);
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <changePwm_MotorRF>
	changePwm_MotorRB(0);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <changePwm_MotorRB>
     39a:	08 95       	ret

0000039c <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LF_DIR_DDR1 |= (1<<MOTOR_LF_DIR_PIN1x);
     39c:	20 9a       	sbi	0x04, 0	; 4
	MOTOR_LF_DIR_DDR2 |= (1<<MOTOR_LF_DIR_PIN2x);
     39e:	21 9a       	sbi	0x04, 1	; 4
	MOTOR_LB_DIR_DDR1 |= (1<<MOTOR_LB_DIR_PIN1x);
     3a0:	22 9a       	sbi	0x04, 2	; 4
	MOTOR_LB_DIR_DDR2 |= (1<<MOTOR_LB_DIR_PIN1x);
     3a2:	22 9a       	sbi	0x04, 2	; 4
	
	//setez directia initiala
	MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     3a4:	29 9a       	sbi	0x05, 1	; 5
	MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     3a6:	28 98       	cbi	0x05, 0	; 5
	MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     3a8:	2d 9a       	sbi	0x05, 5	; 5
	MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     3aa:	2a 98       	cbi	0x05, 2	; 5
	
	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     3ac:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     3ae:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     3b0:	84 b5       	in	r24, 0x24	; 36
     3b2:	80 68       	ori	r24, 0x80	; 128
     3b4:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     3b6:	84 b5       	in	r24, 0x24	; 36
     3b8:	8f 7b       	andi	r24, 0xBF	; 191
     3ba:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     3bc:	84 b5       	in	r24, 0x24	; 36
     3be:	80 62       	ori	r24, 0x20	; 32
     3c0:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     3c2:	84 b5       	in	r24, 0x24	; 36
     3c4:	8f 7e       	andi	r24, 0xEF	; 239
     3c6:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     3c8:	84 b5       	in	r24, 0x24	; 36
     3ca:	83 60       	ori	r24, 0x03	; 3
     3cc:	84 bd       	out	0x24, r24	; 36
	
	// setez factorul de umplere
	changePwm_MotorLF(0);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 ae 00 	call	0x15c	; 0x15c <changePwm_MotorLF>
	changePwm_MotorLB(0);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 c5 00 	call	0x18a	; 0x18a <changePwm_MotorLB>
	
	// reset counter
	TCNT0 = 0;
     3de:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	85 bd       	out	0x25, r24	; 37
     3e4:	08 95       	ret

000003e6 <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RF_DIR_DDR1 |= (1<<MOTOR_RF_DIR_PIN1x);
     3e6:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RF_DIR_DDR2 |= (1<<MOTOR_RF_DIR_PIN2x);
     3e8:	3f 9a       	sbi	0x07, 7	; 7
	MOTOR_RB_DIR_DDR1 |= (1<<MOTOR_RB_DIR_PIN1x);
     3ea:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_RB_DIR_DDR2 |= (1<<MOTOR_RB_DIR_PIN2x);
     3ec:	39 9a       	sbi	0x07, 1	; 7
	
	//setez directia initiala
	MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     3ee:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     3f0:	46 98       	cbi	0x08, 6	; 8
	MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     3f2:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);	
     3f4:	40 98       	cbi	0x08, 0	; 8
	
	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     3f6:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     3f8:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     3fa:	e0 eb       	ldi	r30, 0xB0	; 176
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	80 68       	ori	r24, 0x80	; 128
     402:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     404:	80 81       	ld	r24, Z
     406:	8f 7b       	andi	r24, 0xBF	; 191
     408:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     40a:	80 81       	ld	r24, Z
     40c:	80 62       	ori	r24, 0x20	; 32
     40e:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     410:	80 81       	ld	r24, Z
     412:	8f 7e       	andi	r24, 0xEF	; 239
     414:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     416:	80 81       	ld	r24, Z
     418:	83 60       	ori	r24, 0x03	; 3
     41a:	80 83       	st	Z, r24
	
	// setez factorul de umplere
	changePwm_MotorRF(0);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <changePwm_MotorRF>
	changePwm_MotorRB(0);
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <changePwm_MotorRB>

	// reset counter
	TCNT2 = 0;
     42c:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     430:	e1 eb       	ldi	r30, 0xB1	; 177
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	8c 7f       	andi	r24, 0xFC	; 252
     438:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     43a:	80 81       	ld	r24, Z
     43c:	84 60       	ori	r24, 0x04	; 4
     43e:	80 83       	st	Z, r24
     440:	08 95       	ret

00000442 <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	9c 01       	movw	r18, r24
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0.0;
     44c:	fa 01       	movw	r30, r20
     44e:	ee 0f       	add	r30, r30
     450:	ff 1f       	adc	r31, r31
     452:	ee 0f       	add	r30, r30
     454:	ff 1f       	adc	r31, r31
     456:	e9 5e       	subi	r30, 0xE9	; 233
     458:	fe 4f       	sbci	r31, 0xFE	; 254
     45a:	10 82       	st	Z, r1
     45c:	11 82       	std	Z+1, r1	; 0x01
     45e:	12 82       	std	Z+2, r1	; 0x02
     460:	13 82       	std	Z+3, r1	; 0x03
     462:	4f 5f       	subi	r20, 0xFF	; 255
     464:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     466:	4a 30       	cpi	r20, 0x0A	; 10
     468:	51 05       	cpc	r21, r1
     46a:	81 f7       	brne	.-32     	; 0x44c <initUSART0+0xa>
		UltraSonicValues[i] = 0.0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     46c:	10 92 3f 01 	sts	0x013F, r1
     470:	10 92 40 01 	sts	0x0140, r1
     474:	10 92 41 01 	sts	0x0141, r1
     478:	10 92 42 01 	sts	0x0142, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     47c:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     47e:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     480:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     482:	c2 ec       	ldi	r28, 0xC2	; 194
     484:	d0 e0       	ldi	r29, 0x00	; 0
     486:	88 81       	ld	r24, Y
     488:	8f 73       	andi	r24, 0x3F	; 63
     48a:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     48c:	e0 ec       	ldi	r30, 0xC0	; 192
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	8d 7f       	andi	r24, 0xFD	; 253
     494:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     496:	c9 01       	movw	r24, r18
     498:	aa 27       	eor	r26, r26
     49a:	97 fd       	sbrc	r25, 7
     49c:	a0 95       	com	r26
     49e:	ba 2f       	mov	r27, r26
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	aa 1f       	adc	r26, r26
     4a6:	bb 1f       	adc	r27, r27
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	aa 1f       	adc	r26, r26
     4ae:	bb 1f       	adc	r27, r27
     4b0:	9c 01       	movw	r18, r24
     4b2:	ad 01       	movw	r20, r26
     4b4:	22 0f       	add	r18, r18
     4b6:	33 1f       	adc	r19, r19
     4b8:	44 1f       	adc	r20, r20
     4ba:	55 1f       	adc	r21, r21
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	44 1f       	adc	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	72 e1       	ldi	r23, 0x12	; 18
     4c8:	8a e7       	ldi	r24, 0x7A	; 122
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 85 0a 	call	0x150a	; 0x150a <__divmodsi4>
     4d0:	ca 01       	movw	r24, r20
     4d2:	b9 01       	movw	r22, r18
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
     4dc:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     4e0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     4e4:	27 2f       	mov	r18, r23
     4e6:	33 27       	eor	r19, r19
     4e8:	27 fd       	sbrc	r18, 7
     4ea:	3a 95       	dec	r19
     4ec:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     4f0:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     4f4:	e1 ec       	ldi	r30, 0xC1	; 193
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 e1       	ldi	r24, 0x10	; 16
     4fa:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     4fc:	88 81       	ld	r24, Y
     4fe:	86 60       	ori	r24, 0x06	; 6
     500:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     502:	80 81       	ld	r24, Z
     504:	8b 7f       	andi	r24, 0xFB	; 251
     506:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     508:	88 81       	ld	r24, Y
     50a:	87 7f       	andi	r24, 0xF7	; 247
     50c:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     50e:	88 81       	ld	r24, Y
     510:	8f 7c       	andi	r24, 0xCF	; 207
     512:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     514:	80 81       	ld	r24, Z
     516:	80 68       	ori	r24, 0x80	; 128
     518:	80 83       	st	Z, r24
	
		
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <initADC>:

void  initADC(void)
{

	//set Vref to Vcc
	ADMUX |= (1<<REFS0);
     520:	ec e7       	ldi	r30, 0x7C	; 124
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	80 64       	ori	r24, 0x40	; 64
     528:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     52a:	80 81       	ld	r24, Z
     52c:	8f 77       	andi	r24, 0x7F	; 127
     52e:	80 83       	st	Z, r24
	
	//select ADC0
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     530:	80 81       	ld	r24, Z
     532:	80 7e       	andi	r24, 0xE0	; 224
     534:	80 83       	st	Z, r24

	//enable the ADC
	ADCSRA |= (1<<ADEN);
     536:	ea e7       	ldi	r30, 0x7A	; 122
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	80 68       	ori	r24, 0x80	; 128
     53e:	80 83       	st	Z, r24
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     540:	80 81       	ld	r24, Z
     542:	88 60       	ori	r24, 0x08	; 8
     544:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     546:	80 81       	ld	r24, Z
     548:	87 60       	ori	r24, 0x07	; 7
     54a:	80 83       	st	Z, r24
	//select free running mode
	//ADCSRB &= ~( (1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2) );


	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC0D) | (1<<ADC1D) | (1<<ADC2D) | (1<<ADC3D) ;
     54c:	ae e7       	ldi	r26, 0x7E	; 126
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	8c 91       	ld	r24, X
     552:	8f 60       	ori	r24, 0x0F	; 15
     554:	8c 93       	st	X, r24


	//start conversion
	ADCSRA |= (1<<ADSC);
     556:	80 81       	ld	r24, Z
     558:	80 64       	ori	r24, 0x40	; 64
     55a:	80 83       	st	Z, r24
     55c:	08 95       	ret

0000055e <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     55e:	08 98       	cbi	0x01, 0	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     560:	09 98       	cbi	0x01, 1	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     562:	0a 98       	cbi	0x01, 2	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     564:	0b 98       	cbi	0x01, 3	; 1
	
	initADC();
     566:	0e 94 90 02 	call	0x520	; 0x520 <initADC>
	initUSART0(9600);
     56a:	80 e8       	ldi	r24, 0x80	; 128
     56c:	95 e2       	ldi	r25, 0x25	; 37
     56e:	0e 94 21 02 	call	0x442	; 0x442 <initUSART0>
     572:	08 95       	ret

00000574 <__vector_24>:
	//start conversion
	ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	2f 93       	push	r18
     580:	3f 93       	push	r19
     582:	4f 93       	push	r20
     584:	5f 93       	push	r21
     586:	6f 93       	push	r22
     588:	7f 93       	push	r23
     58a:	8f 93       	push	r24
     58c:	9f 93       	push	r25
     58e:	af 93       	push	r26
     590:	bf 93       	push	r27
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	ef 93       	push	r30
     598:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     59a:	40 91 78 00 	lds	r20, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     59e:	80 91 79 00 	lds	r24, 0x0079
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	58 2b       	or	r21, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     5a6:	40 31       	cpi	r20, 0x10	; 16
     5a8:	51 05       	cpc	r21, r1
     5aa:	10 f4       	brcc	.+4      	; 0x5b0 <__vector_24+0x3c>
     5ac:	40 e1       	ldi	r20, 0x10	; 16
     5ae:	50 e0       	ldi	r21, 0x00	; 0
		distance = 30.0;
	}
	*/
	
		
		dis[i%MAX] = 2076.0 / (theTenBitResult - 11.0);
     5b0:	e0 91 0b 01 	lds	r30, 0x010B
     5b4:	f0 91 0c 01 	lds	r31, 0x010C
     5b8:	9f 01       	movw	r18, r30
     5ba:	ab ea       	ldi	r26, 0xAB	; 171
     5bc:	ba ea       	ldi	r27, 0xAA	; 170
     5be:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__umulhisi3>
     5c2:	ec 01       	movw	r28, r24
     5c4:	d6 95       	lsr	r29
     5c6:	c7 95       	ror	r28
     5c8:	ce 01       	movw	r24, r28
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	c8 0f       	add	r28, r24
     5d0:	d9 1f       	adc	r29, r25
     5d2:	2c 1b       	sub	r18, r28
     5d4:	3d 0b       	sbc	r19, r29
     5d6:	e9 01       	movw	r28, r18
     5d8:	ba 01       	movw	r22, r20
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 32 09 	call	0x1264	; 0x1264 <__floatunsisf>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e3       	ldi	r20, 0x30	; 48
     5e8:	51 e4       	ldi	r21, 0x41	; 65
     5ea:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 ec       	ldi	r23, 0xC0	; 192
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	95 e4       	ldi	r25, 0x45	; 69
     5fa:	0e 94 9e 08 	call	0x113c	; 0x113c <__divsf3>
     5fe:	cc 0f       	add	r28, r28
     600:	dd 1f       	adc	r29, r29
     602:	cc 0f       	add	r28, r28
     604:	dd 1f       	adc	r29, r29
     606:	cd 5b       	subi	r28, 0xBD	; 189
     608:	de 4f       	sbci	r29, 0xFE	; 254
     60a:	68 83       	st	Y, r22
     60c:	79 83       	std	Y+1, r23	; 0x01
     60e:	8a 83       	std	Y+2, r24	; 0x02
     610:	9b 83       	std	Y+3, r25	; 0x03
		
		//under lower limit
		if (dis[i%MAX] < 4.0)
     612:	40 91 0b 01 	lds	r20, 0x010B
     616:	50 91 0c 01 	lds	r21, 0x010C
     61a:	9a 01       	movw	r18, r20
     61c:	ab ea       	ldi	r26, 0xAB	; 171
     61e:	ba ea       	ldi	r27, 0xAA	; 170
     620:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__umulhisi3>
     624:	96 95       	lsr	r25
     626:	87 95       	ror	r24
     628:	9c 01       	movw	r18, r24
     62a:	22 0f       	add	r18, r18
     62c:	33 1f       	adc	r19, r19
     62e:	82 0f       	add	r24, r18
     630:	93 1f       	adc	r25, r19
     632:	9a 01       	movw	r18, r20
     634:	28 1b       	sub	r18, r24
     636:	39 0b       	sbc	r19, r25
     638:	f9 01       	movw	r30, r18
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	ee 0f       	add	r30, r30
     640:	ff 1f       	adc	r31, r31
     642:	ed 5b       	subi	r30, 0xBD	; 189
     644:	fe 4f       	sbci	r31, 0xFE	; 254
     646:	60 81       	ld	r22, Z
     648:	71 81       	ldd	r23, Z+1	; 0x01
     64a:	82 81       	ldd	r24, Z+2	; 0x02
     64c:	93 81       	ldd	r25, Z+3	; 0x03
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e8       	ldi	r20, 0x80	; 128
     654:	50 e4       	ldi	r21, 0x40	; 64
     656:	0e 94 9a 08 	call	0x1134	; 0x1134 <__cmpsf2>
     65a:	88 23       	and	r24, r24
     65c:	14 f5       	brge	.+68     	; 0x6a2 <__vector_24+0x12e>
		{
			dis[i%MAX] =4.0;
     65e:	40 91 0b 01 	lds	r20, 0x010B
     662:	50 91 0c 01 	lds	r21, 0x010C
     666:	9a 01       	movw	r18, r20
     668:	ab ea       	ldi	r26, 0xAB	; 171
     66a:	ba ea       	ldi	r27, 0xAA	; 170
     66c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__umulhisi3>
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	9c 01       	movw	r18, r24
     676:	22 0f       	add	r18, r18
     678:	33 1f       	adc	r19, r19
     67a:	82 0f       	add	r24, r18
     67c:	93 1f       	adc	r25, r19
     67e:	9a 01       	movw	r18, r20
     680:	28 1b       	sub	r18, r24
     682:	39 0b       	sbc	r19, r25
     684:	f9 01       	movw	r30, r18
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ed 5b       	subi	r30, 0xBD	; 189
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e8       	ldi	r26, 0x80	; 128
     698:	b0 e4       	ldi	r27, 0x40	; 64
     69a:	80 83       	st	Z, r24
     69c:	91 83       	std	Z+1, r25	; 0x01
     69e:	a2 83       	std	Z+2, r26	; 0x02
     6a0:	b3 83       	std	Z+3, r27	; 0x03
		}
		
		//above upper limit
		if (dis[i%MAX] > 30.0)
     6a2:	40 91 0b 01 	lds	r20, 0x010B
     6a6:	50 91 0c 01 	lds	r21, 0x010C
     6aa:	9a 01       	movw	r18, r20
     6ac:	ab ea       	ldi	r26, 0xAB	; 171
     6ae:	ba ea       	ldi	r27, 0xAA	; 170
     6b0:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__umulhisi3>
     6b4:	96 95       	lsr	r25
     6b6:	87 95       	ror	r24
     6b8:	9c 01       	movw	r18, r24
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
     6be:	82 0f       	add	r24, r18
     6c0:	93 1f       	adc	r25, r19
     6c2:	9a 01       	movw	r18, r20
     6c4:	28 1b       	sub	r18, r24
     6c6:	39 0b       	sbc	r19, r25
     6c8:	f9 01       	movw	r30, r18
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ed 5b       	subi	r30, 0xBD	; 189
     6d4:	fe 4f       	sbci	r31, 0xFE	; 254
     6d6:	60 81       	ld	r22, Z
     6d8:	71 81       	ldd	r23, Z+1	; 0x01
     6da:	82 81       	ldd	r24, Z+2	; 0x02
     6dc:	93 81       	ldd	r25, Z+3	; 0x03
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 ef       	ldi	r20, 0xF0	; 240
     6e4:	51 e4       	ldi	r21, 0x41	; 65
     6e6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__gesf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	14 f5       	brge	.+68     	; 0x732 <__vector_24+0x1be>
		{
			
			dis[i%MAX] = 30.0;
     6ee:	40 91 0b 01 	lds	r20, 0x010B
     6f2:	50 91 0c 01 	lds	r21, 0x010C
     6f6:	9a 01       	movw	r18, r20
     6f8:	ab ea       	ldi	r26, 0xAB	; 171
     6fa:	ba ea       	ldi	r27, 0xAA	; 170
     6fc:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__umulhisi3>
     700:	96 95       	lsr	r25
     702:	87 95       	ror	r24
     704:	9c 01       	movw	r18, r24
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	82 0f       	add	r24, r18
     70c:	93 1f       	adc	r25, r19
     70e:	9a 01       	movw	r18, r20
     710:	28 1b       	sub	r18, r24
     712:	39 0b       	sbc	r19, r25
     714:	f9 01       	movw	r30, r18
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	ed 5b       	subi	r30, 0xBD	; 189
     720:	fe 4f       	sbci	r31, 0xFE	; 254
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	a0 ef       	ldi	r26, 0xF0	; 240
     728:	b1 e4       	ldi	r27, 0x41	; 65
     72a:	80 83       	st	Z, r24
     72c:	91 83       	std	Z+1, r25	; 0x01
     72e:	a2 83       	std	Z+2, r26	; 0x02
     730:	b3 83       	std	Z+3, r27	; 0x03
		}
	
	
	i++;
     732:	80 91 0b 01 	lds	r24, 0x010B
     736:	90 91 0c 01 	lds	r25, 0x010C
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	90 93 0c 01 	sts	0x010C, r25
     740:	80 93 0b 01 	sts	0x010B, r24
	ADCSRA |= 1<<ADSC;
     744:	ea e7       	ldi	r30, 0x7A	; 122
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	80 64       	ori	r24, 0x40	; 64
     74c:	80 83       	st	Z, r24
}
     74e:	ff 91       	pop	r31
     750:	ef 91       	pop	r30
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	7f 91       	pop	r23
     760:	6f 91       	pop	r22
     762:	5f 91       	pop	r21
     764:	4f 91       	pop	r20
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__vector_20>:

ISR(USART0_RX_vect){
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	1f 93       	push	r17
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	6f 93       	push	r22
     792:	7f 93       	push	r23
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ef 93       	push	r30
     7a2:	ff 93       	push	r31


	uint8_t data;
	data = UDR0;
     7a4:	c0 91 c6 00 	lds	r28, 0x00C6
	
	if(data == 0x52){ //start of data
     7a8:	c2 35       	cpi	r28, 0x52	; 82
     7aa:	39 f4       	brne	.+14     	; 0x7ba <__vector_20+0x46>
		ultrasonicDataPack[0] = 'R';
     7ac:	82 e5       	ldi	r24, 0x52	; 82
     7ae:	80 93 3f 01 	sts	0x013F, r24
		US_data_part_no=1;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	80 93 06 01 	sts	0x0106, r24
     7b8:	9b c0       	rjmp	.+310    	; 0x8f0 <__vector_20+0x17c>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     7ba:	80 91 3f 01 	lds	r24, 0x013F
     7be:	82 35       	cpi	r24, 0x52	; 82
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <__vector_20+0x50>
     7c2:	63 c0       	rjmp	.+198    	; 0x88a <__vector_20+0x116>
     7c4:	80 91 06 01 	lds	r24, 0x0106
     7c8:	84 30       	cpi	r24, 0x04	; 4
     7ca:	09 f0       	breq	.+2      	; 0x7ce <__vector_20+0x5a>
     7cc:	5e c0       	rjmp	.+188    	; 0x88a <__vector_20+0x116>
     7ce:	cd 30       	cpi	r28, 0x0D	; 13
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_20+0x60>
     7d2:	5b c0       	rjmp	.+182    	; 0x88a <__vector_20+0x116>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     7d4:	60 91 40 01 	lds	r22, 0x0140
     7d8:	10 91 41 01 	lds	r17, 0x0141
     7dc:	d0 91 42 01 	lds	r29, 0x0142
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	48 ec       	ldi	r20, 0xC8	; 200
     7f0:	52 e4       	ldi	r21, 0x42	; 66
     7f2:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     7f6:	6b 01       	movw	r12, r22
     7f8:	7c 01       	movw	r14, r24
     7fa:	61 2f       	mov	r22, r17
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e2       	ldi	r20, 0x20	; 32
     80c:	51 e4       	ldi	r21, 0x41	; 65
     80e:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     812:	9b 01       	movw	r18, r22
     814:	ac 01       	movw	r20, r24
     816:	c7 01       	movw	r24, r14
     818:	b6 01       	movw	r22, r12
     81a:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     81e:	6b 01       	movw	r12, r22
     820:	7c 01       	movw	r14, r24
     822:	6d 2f       	mov	r22, r29
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     82e:	9b 01       	movw	r18, r22
     830:	ac 01       	movw	r20, r24
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
			//transform from inch to cm
			val *= 2.54;
     83a:	2c e5       	ldi	r18, 0x5C	; 92
     83c:	3f e8       	ldi	r19, 0x8F	; 143
     83e:	42 e2       	ldi	r20, 0x22	; 34
     840:	50 e4       	ldi	r21, 0x40	; 64
     842:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
			UltraSonicValues[US_pos_in_buffer] = val;
     846:	e0 91 05 01 	lds	r30, 0x0105
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	e9 5e       	subi	r30, 0xE9	; 233
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	60 83       	st	Z, r22
     85a:	71 83       	std	Z+1, r23	; 0x01
     85c:	82 83       	std	Z+2, r24	; 0x02
     85e:	93 83       	std	Z+3, r25	; 0x03
			lastUSonicValue = val;
     860:	60 93 07 01 	sts	0x0107, r22
     864:	70 93 08 01 	sts	0x0108, r23
     868:	80 93 09 01 	sts	0x0109, r24
     86c:	90 93 0a 01 	sts	0x010A, r25
			US_pos_in_buffer++;
     870:	80 91 05 01 	lds	r24, 0x0105
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	80 93 05 01 	sts	0x0105, r24

			if (US_pos_in_buffer>=MAX_ULTRASONIC_VALUES){ //reset buff pos
     87a:	80 91 05 01 	lds	r24, 0x0105
     87e:	8a 30       	cpi	r24, 0x0A	; 10
     880:	40 f1       	brcs	.+80     	; 0x8d2 <__vector_20+0x15e>
				US_pos_in_buffer =0;
     882:	10 92 05 01 	sts	0x0105, r1
     886:	25 c0       	rjmp	.+74     	; 0x8d2 <__vector_20+0x15e>
					ultrasonicDataPack[i] = 0;
				}
				US_data_part_no=0;
				
				if(US_manual_start){//stop measuring if it is on manual
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     888:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     88a:	80 91 06 01 	lds	r24, 0x0106
     88e:	84 30       	cpi	r24, 0x04	; 4
     890:	50 f0       	brcs	.+20     	; 0x8a6 <__vector_20+0x132>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     892:	10 92 3f 01 	sts	0x013F, r1
     896:	10 92 40 01 	sts	0x0140, r1
     89a:	10 92 41 01 	sts	0x0141, r1
     89e:	10 92 42 01 	sts	0x0142, r1
			}
			US_data_part_no=0;
     8a2:	10 92 06 01 	sts	0x0106, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     8a6:	80 91 3f 01 	lds	r24, 0x013F
     8aa:	82 35       	cpi	r24, 0x52	; 82
     8ac:	09 f5       	brne	.+66     	; 0x8f0 <__vector_20+0x17c>
			if (isdigit(data))
     8ae:	8c 2f       	mov	r24, r28
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	c0 97       	sbiw	r24, 0x30	; 48
     8b4:	0a 97       	sbiw	r24, 0x0a	; 10
     8b6:	e0 f4       	brcc	.+56     	; 0x8f0 <__vector_20+0x17c>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     8b8:	e0 91 06 01 	lds	r30, 0x0106
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	c0 53       	subi	r28, 0x30	; 48
     8c0:	e1 5c       	subi	r30, 0xC1	; 193
     8c2:	fe 4f       	sbci	r31, 0xFE	; 254
     8c4:	c0 83       	st	Z, r28
				US_data_part_no++;
     8c6:	80 91 06 01 	lds	r24, 0x0106
     8ca:	8f 5f       	subi	r24, 0xFF	; 255
     8cc:	80 93 06 01 	sts	0x0106, r24
     8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <__vector_20+0x17c>
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     8d2:	10 92 3f 01 	sts	0x013F, r1
     8d6:	10 92 40 01 	sts	0x0140, r1
     8da:	10 92 41 01 	sts	0x0141, r1
     8de:	10 92 42 01 	sts	0x0142, r1
				}
				US_data_part_no=0;
     8e2:	10 92 06 01 	sts	0x0106, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     8e6:	80 91 04 01 	lds	r24, 0x0104
     8ea:	81 11       	cpse	r24, r1
     8ec:	cd cf       	rjmp	.-102    	; 0x888 <__vector_20+0x114>
     8ee:	cd cf       	rjmp	.-102    	; 0x88a <__vector_20+0x116>
			
		}
				
	}

}
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	1f 91       	pop	r17
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	9c 01       	movw	r18, r24
	
	//init buffer
	int16_t i;
	for(i=0; i<RX_BUFFER_SIZE; i++){
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	50 e0       	ldi	r21, 0x00	; 0
		rxBuffer[i].pack_no =-1;
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	fa 01       	movw	r30, r20
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	df 01       	movw	r26, r30
     934:	a1 5b       	subi	r26, 0xB1	; 177
     936:	be 4f       	sbci	r27, 0xFE	; 254
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	8c 93       	st	X, r24
		
		///TEST////
		txBuffer[i].pack_no =-1;
     93c:	e1 5b       	subi	r30, 0xB1	; 177
     93e:	fd 4f       	sbci	r31, 0xFD	; 253
     940:	81 83       	std	Z+1, r24	; 0x01
		txBuffer[i].data =0;
     942:	10 82       	st	Z, r1

void initUSART1(int baud){
	
	//init buffer
	int16_t i;
	for(i=0; i<RX_BUFFER_SIZE; i++){
     944:	4f 5f       	subi	r20, 0xFF	; 255
     946:	5f 4f       	sbci	r21, 0xFF	; 255
     948:	40 38       	cpi	r20, 0x80	; 128
     94a:	51 05       	cpc	r21, r1
     94c:	79 f7       	brne	.-34     	; 0x92c <initUSART1+0xc>
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
     94e:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
     950:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
     952:	ca ec       	ldi	r28, 0xCA	; 202
     954:	d0 e0       	ldi	r29, 0x00	; 0
     956:	88 81       	ld	r24, Y
     958:	8f 73       	andi	r24, 0x3F	; 63
     95a:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
     95c:	e8 ec       	ldi	r30, 0xC8	; 200
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	8d 7f       	andi	r24, 0xFD	; 253
     964:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     966:	c9 01       	movw	r24, r18
     968:	aa 27       	eor	r26, r26
     96a:	97 fd       	sbrc	r25, 7
     96c:	a0 95       	com	r26
     96e:	ba 2f       	mov	r27, r26
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	aa 1f       	adc	r26, r26
     976:	bb 1f       	adc	r27, r27
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	aa 1f       	adc	r26, r26
     97e:	bb 1f       	adc	r27, r27
     980:	9c 01       	movw	r18, r24
     982:	ad 01       	movw	r20, r26
     984:	22 0f       	add	r18, r18
     986:	33 1f       	adc	r19, r19
     988:	44 1f       	adc	r20, r20
     98a:	55 1f       	adc	r21, r21
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	44 1f       	adc	r20, r20
     992:	55 1f       	adc	r21, r21
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	72 e1       	ldi	r23, 0x12	; 18
     998:	8a e7       	ldi	r24, 0x7A	; 122
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 85 0a 	call	0x150a	; 0x150a <__divmodsi4>
     9a0:	ca 01       	movw	r24, r20
     9a2:	b9 01       	movw	r22, r18
     9a4:	61 50       	subi	r22, 0x01	; 1
     9a6:	71 09       	sbc	r23, r1
     9a8:	81 09       	sbc	r24, r1
     9aa:	91 09       	sbc	r25, r1
     9ac:	0e 94 34 09 	call	0x1268	; 0x1268 <__floatsisf>
     9b0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
     9b4:	27 2f       	mov	r18, r23
     9b6:	33 27       	eor	r19, r19
     9b8:	27 fd       	sbrc	r18, 7
     9ba:	3a 95       	dec	r19
     9bc:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
     9c0:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     9c4:	e9 ec       	ldi	r30, 0xC9	; 201
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	88 e1       	ldi	r24, 0x18	; 24
     9ca:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
     9cc:	88 81       	ld	r24, Y
     9ce:	86 60       	ori	r24, 0x06	; 6
     9d0:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
     9d2:	80 81       	ld	r24, Z
     9d4:	8b 7f       	andi	r24, 0xFB	; 251
     9d6:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
     9d8:	88 81       	ld	r24, Y
     9da:	87 7f       	andi	r24, 0xF7	; 247
     9dc:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
     9de:	88 81       	ld	r24, Y
     9e0:	8f 7c       	andi	r24, 0xCF	; 207
     9e2:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
     9e4:	80 81       	ld	r24, Z
     9e6:	80 68       	ori	r24, 0x80	; 128
     9e8:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
     9ea:	80 81       	ld	r24, Z
     9ec:	80 64       	ori	r24, 0x40	; 64
     9ee:	80 83       	st	Z, r24
	
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <checkPackIsFullLength>:

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no == -1){
     9f6:	28 2f       	mov	r18, r24
     9f8:	2f 77       	andi	r18, 0x7F	; 127
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	f9 01       	movw	r30, r18
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	e1 5b       	subi	r30, 0xB1	; 177
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	9f 3f       	cpi	r25, 0xFF	; 255
     a0a:	09 f4       	brne	.+2      	; 0xa0e <checkPackIsFullLength+0x18>
     a0c:	46 c0       	rjmp	.+140    	; 0xa9a <checkPackIsFullLength+0xa4>
		return 0;
	}else{
		pc_no = rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no;
     a0e:	f9 01       	movw	r30, r18
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e1 5b       	subi	r30, 0xB1	; 177
     a16:	fe 4f       	sbci	r31, 0xFE	; 254
     a18:	61 81       	ldd	r22, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	9c 01       	movw	r18, r24
     a1e:	2f 77       	andi	r18, 0x7F	; 127
     a20:	30 78       	andi	r19, 0x80	; 128
     a22:	f9 01       	movw	r30, r18
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	e1 5b       	subi	r30, 0xB1	; 177
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	41 81       	ldd	r20, Z+1	; 0x01
     a2e:	4f 3f       	cpi	r20, 0xFF	; 255
     a30:	b1 f1       	breq	.+108    	; 0xa9e <checkPackIsFullLength+0xa8>
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
     a32:	f9 01       	movw	r30, r18
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	e1 5b       	subi	r30, 0xB1	; 177
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	41 81       	ldd	r20, Z+1	; 0x01
     a3e:	55 27       	eor	r21, r21
     a40:	47 fd       	sbrc	r20, 7
     a42:	50 95       	com	r21
     a44:	26 2f       	mov	r18, r22
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	42 17       	cp	r20, r18
     a4a:	53 07       	cpc	r21, r19
     a4c:	51 f5       	brne	.+84     	; 0xaa2 <checkPackIsFullLength+0xac>
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	66 e0       	ldi	r22, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
     a52:	9c 01       	movw	r18, r24
     a54:	2f 77       	andi	r18, 0x7F	; 127
     a56:	30 78       	andi	r19, 0x80	; 128
     a58:	33 23       	and	r19, r19
     a5a:	34 f4       	brge	.+12     	; 0xa68 <checkPackIsFullLength+0x72>
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	31 09       	sbc	r19, r1
     a60:	20 68       	ori	r18, 0x80	; 128
     a62:	3f 6f       	ori	r19, 0xFF	; 255
     a64:	2f 5f       	subi	r18, 0xFF	; 255
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	f9 01       	movw	r30, r18
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	e1 5b       	subi	r30, 0xB1	; 177
     a70:	fe 4f       	sbci	r31, 0xFE	; 254
     a72:	71 81       	ldd	r23, Z+1	; 0x01
     a74:	7f 3f       	cpi	r23, 0xFF	; 255
     a76:	b9 f0       	breq	.+46     	; 0xaa6 <checkPackIsFullLength+0xb0>
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
     a78:	f9 01       	movw	r30, r18
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	e1 5b       	subi	r30, 0xB1	; 177
     a80:	fe 4f       	sbci	r31, 0xFE	; 254
     a82:	21 81       	ldd	r18, Z+1	; 0x01
     a84:	33 27       	eor	r19, r19
     a86:	27 fd       	sbrc	r18, 7
     a88:	30 95       	com	r19
     a8a:	24 17       	cp	r18, r20
     a8c:	35 07       	cpc	r19, r21
     a8e:	69 f4       	brne	.+26     	; 0xaaa <checkPackIsFullLength+0xb4>
     a90:	61 50       	subi	r22, 0x01	; 1
     a92:	01 96       	adiw	r24, 0x01	; 1
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     a94:	61 11       	cpse	r22, r1
     a96:	dd cf       	rjmp	.-70     	; 0xa52 <checkPackIsFullLength+0x5c>
     a98:	0a c0       	rjmp	.+20     	; 0xaae <checkPackIsFullLength+0xb8>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no == -1){
		return 0;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	08 95       	ret
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
			return 0;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	08 95       	ret
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	08 95       	ret
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 95       	ret
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	08 95       	ret
		}
	}
	return 1;
     aae:	81 e0       	ldi	r24, 0x01	; 1
}
     ab0:	08 95       	ret

00000ab2 <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	27 97       	sbiw	r28, 0x07	; 7
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
	
	
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff % RX_BUFFER_SIZE].data;
     ad6:	e0 91 0f 01 	lds	r30, 0x010F
     ada:	ef 77       	andi	r30, 0x7F	; 127
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	e1 5b       	subi	r30, 0xB1	; 177
     ae4:	fe 4f       	sbci	r31, 0xFE	; 254
     ae6:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) % RX_BUFFER_SIZE].data; //recover the sign
     ae8:	e0 91 0f 01 	lds	r30, 0x010F
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	31 96       	adiw	r30, 0x01	; 1
     af0:	ef 77       	andi	r30, 0x7F	; 127
     af2:	f0 78       	andi	r31, 0x80	; 128
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	e1 5b       	subi	r30, 0xB1	; 177
     afa:	fe 4f       	sbci	r31, 0xFE	; 254
     afc:	30 81       	ld	r19, Z
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) % RX_BUFFER_SIZE].data;
     afe:	e0 91 0f 01 	lds	r30, 0x010F
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	32 96       	adiw	r30, 0x02	; 2
     b06:	ef 77       	andi	r30, 0x7F	; 127
     b08:	f0 78       	andi	r31, 0x80	; 128
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	e1 5b       	subi	r30, 0xB1	; 177
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	40 81       	ld	r20, Z
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
     b14:	e0 91 0f 01 	lds	r30, 0x010F
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	33 96       	adiw	r30, 0x03	; 3
     b1c:	ef 77       	andi	r30, 0x7F	; 127
     b1e:	f0 78       	andi	r31, 0x80	; 128
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	e1 5b       	subi	r30, 0xB1	; 177
     b26:	fe 4f       	sbci	r31, 0xFE	; 254
     b28:	80 81       	ld	r24, Z
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
     b2a:	e0 91 0f 01 	lds	r30, 0x010F
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	34 96       	adiw	r30, 0x04	; 4
     b32:	ef 77       	andi	r30, 0x7F	; 127
     b34:	f0 78       	andi	r31, 0x80	; 128
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	e1 5b       	subi	r30, 0xB1	; 177
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	c0 80       	ld	r12, Z
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
     b40:	d1 2c       	mov	r13, r1
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
     b42:	d8 2a       	or	r13, r24
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) % RX_BUFFER_SIZE].data << 8;
     b44:	e0 91 0f 01 	lds	r30, 0x010F
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	35 96       	adiw	r30, 0x05	; 5
     b4c:	ef 77       	andi	r30, 0x7F	; 127
     b4e:	f0 78       	andi	r31, 0x80	; 128
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	e1 5b       	subi	r30, 0xB1	; 177
     b56:	fe 4f       	sbci	r31, 0xFE	; 254
     b58:	80 81       	ld	r24, Z
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) % RX_BUFFER_SIZE].data;
     b5a:	e0 91 0f 01 	lds	r30, 0x010F
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	36 96       	adiw	r30, 0x06	; 6
     b62:	ef 77       	andi	r30, 0x7F	; 127
     b64:	f0 78       	andi	r31, 0x80	; 128
     b66:	ee 0f       	add	r30, r30
     b68:	ff 1f       	adc	r31, r31
     b6a:	e1 5b       	subi	r30, 0xB1	; 177
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	e0 80       	ld	r14, Z
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) % RX_BUFFER_SIZE].data << 8;
     b70:	f1 2c       	mov	r15, r1
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) % RX_BUFFER_SIZE].data;
     b72:	f8 2a       	or	r15, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
	//sendResponse( rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data);
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
     b78:	0f ef       	ldi	r16, 0xFF	; 255
     b7a:	1f ef       	ldi	r17, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
     b7c:	5f ef       	ldi	r21, 0xFF	; 255

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
     b7e:	a0 91 0f 01 	lds	r26, 0x010F
     b82:	fc 01       	movw	r30, r24
     b84:	5c 01       	movw	r10, r24
     b86:	aa 0e       	add	r10, r26
     b88:	b1 1c       	adc	r11, r1
     b8a:	d5 01       	movw	r26, r10
     b8c:	af 77       	andi	r26, 0x7F	; 127
     b8e:	b0 78       	andi	r27, 0x80	; 128
     b90:	bb 23       	and	r27, r27
     b92:	24 f4       	brge	.+8      	; 0xb9c <fetchCommand+0xea>
     b94:	11 97       	sbiw	r26, 0x01	; 1
     b96:	a0 68       	ori	r26, 0x80	; 128
     b98:	bf 6f       	ori	r27, 0xFF	; 255
     b9a:	11 96       	adiw	r26, 0x01	; 1
     b9c:	aa 0f       	add	r26, r26
     b9e:	bb 1f       	adc	r27, r27
     ba0:	a1 5b       	subi	r26, 0xB1	; 177
     ba2:	be 4f       	sbci	r27, 0xFE	; 254
     ba4:	ac 91       	ld	r26, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     ba6:	0a 27       	eor	r16, r26
     ba8:	a0 2f       	mov	r26, r16
     baa:	a2 95       	swap	r26
     bac:	a0 27       	eor	r26, r16
     bae:	0a 2e       	mov	r0, r26
     bb0:	a6 95       	lsr	r26
     bb2:	a6 95       	lsr	r26
     bb4:	a0 25       	eor	r26, r0
     bb6:	0a 2e       	mov	r0, r26
     bb8:	a6 95       	lsr	r26
     bba:	a0 25       	eor	r26, r0
     bbc:	a7 70       	andi	r26, 0x07	; 7
     bbe:	00 2e       	mov	r0, r16
     bc0:	01 2f       	mov	r16, r17
     bc2:	a6 95       	lsr	r26
     bc4:	07 94       	ror	r0
     bc6:	a7 95       	ror	r26
     bc8:	10 2d       	mov	r17, r0
     bca:	0a 27       	eor	r16, r26
     bcc:	06 94       	lsr	r0
     bce:	a7 95       	ror	r26
     bd0:	10 25       	eor	r17, r0
     bd2:	0a 27       	eor	r16, r26
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
     bd4:	a0 91 0f 01 	lds	r26, 0x010F
     bd8:	ea 0f       	add	r30, r26
     bda:	f1 1d       	adc	r31, r1
     bdc:	ef 77       	andi	r30, 0x7F	; 127
     bde:	f0 78       	andi	r31, 0x80	; 128
     be0:	ff 23       	and	r31, r31
     be2:	24 f4       	brge	.+8      	; 0xbec <fetchCommand+0x13a>
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	e0 68       	ori	r30, 0x80	; 128
     be8:	ff 6f       	ori	r31, 0xFF	; 255
     bea:	31 96       	adiw	r30, 0x01	; 1
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e1 5b       	subi	r30, 0xB1	; 177
     bf2:	fe 4f       	sbci	r31, 0xFE	; 254
     bf4:	51 83       	std	Z+1, r21	; 0x01
     bf6:	01 96       	adiw	r24, 0x01	; 1
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     bf8:	87 30       	cpi	r24, 0x07	; 7
     bfa:	91 05       	cpc	r25, r1
     bfc:	09 f0       	breq	.+2      	; 0xc00 <fetchCommand+0x14e>
     bfe:	bf cf       	rjmp	.-130    	; 0xb7e <fetchCommand+0xcc>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
	}
	
	if (crc == 0){
     c00:	01 2b       	or	r16, r17
     c02:	21 f4       	brne	.+8      	; 0xc0c <fetchCommand+0x15a>
		*CRC_correct = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	fb 01       	movw	r30, r22
     c08:	80 83       	st	Z, r24
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <fetchCommand+0x15e>
		}else{
		*CRC_correct = 0;
     c0c:	fb 01       	movw	r30, r22
     c0e:	10 82       	st	Z, r1
	}
	
	return comm;
     c10:	dd 82       	std	Y+5, r13	; 0x05
     c12:	cc 82       	std	Y+4, r12	; 0x04
     c14:	ff 82       	std	Y+7, r15	; 0x07
     c16:	ee 82       	std	Y+6, r14	; 0x06
     c18:	5c 2d       	mov	r21, r12
     c1a:	6d 81       	ldd	r22, Y+5	; 0x05
     c1c:	7e 2d       	mov	r23, r14
}
     c1e:	8f 81       	ldd	r24, Y+7	; 0x07
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	27 96       	adiw	r28, 0x07	; 7
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	08 95       	ret

00000c44 <sendResponse>:


void sendResponse(uint8_t r){
	
//UDR1 = r;
	if (UCSR1A & (1<<UDRE1))
     c44:	90 91 c8 00 	lds	r25, 0x00C8
     c48:	95 ff       	sbrs	r25, 5
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <sendResponse+0xe>
	{
		UDR1 = r;
     c4c:	80 93 ce 00 	sts	0x00CE, r24
     c50:	08 95       	ret
	} 
	else
	{
		txBuffer[txWritePos].data = r;
     c52:	e0 91 0d 01 	lds	r30, 0x010D
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	e1 5b       	subi	r30, 0xB1	; 177
     c5e:	fd 4f       	sbci	r31, 0xFD	; 253
     c60:	80 83       	st	Z, r24
		txBuffer[txWritePos].pack_no = 1;
     c62:	e0 91 0d 01 	lds	r30, 0x010D
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	e1 5b       	subi	r30, 0xB1	; 177
     c6e:	fd 4f       	sbci	r31, 0xFD	; 253
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	81 83       	std	Z+1, r24	; 0x01
		txWritePos++;
     c74:	80 91 0d 01 	lds	r24, 0x010D
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 0d 01 	sts	0x010D, r24
		if(txWritePos > TX_BUFFER_SIZE){
     c7e:	80 91 0d 01 	lds	r24, 0x010D
     c82:	81 38       	cpi	r24, 0x81	; 129
     c84:	10 f0       	brcs	.+4      	; 0xc8a <sendResponse+0x46>
			txWritePos=0;
     c86:	10 92 0d 01 	sts	0x010D, r1
     c8a:	08 95       	ret

00000c8c <getLastCommand>:
	}
	
}


command getLastCommand(int8_t *success){
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	2f 97       	sbiw	r28, 0x0f	; 15
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     ca6:	fe 01       	movw	r30, r28
     ca8:	38 96       	adiw	r30, 0x08	; 8
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	df 01       	movw	r26, r30
     cae:	1d 92       	st	X+, r1
     cb0:	8a 95       	dec	r24
     cb2:	e9 f7       	brne	.-6      	; 0xcae <getLastCommand+0x22>
	*success = 0;
     cb4:	f8 01       	movw	r30, r16
     cb6:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
     cb8:	80 91 0f 01 	lds	r24, 0x010F
     cbc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <checkPackIsFullLength>
     cc0:	88 23       	and	r24, r24
     cc2:	c9 f0       	breq	.+50     	; 0xcf6 <getLastCommand+0x6a>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
     cc4:	80 91 0f 01 	lds	r24, 0x010F
     cc8:	be 01       	movw	r22, r28
     cca:	61 5f       	subi	r22, 0xF1	; 241
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	0e 94 59 05 	call	0xab2	; 0xab2 <fetchCommand>
     cd2:	28 87       	std	Y+8, r18	; 0x08
     cd4:	39 87       	std	Y+9, r19	; 0x09
     cd6:	4a 87       	std	Y+10, r20	; 0x0a
     cd8:	5b 87       	std	Y+11, r21	; 0x0b
     cda:	6c 87       	std	Y+12, r22	; 0x0c
     cdc:	7d 87       	std	Y+13, r23	; 0x0d
     cde:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
     ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce2:	88 23       	and	r24, r24
     ce4:	21 f0       	breq	.+8      	; 0xcee <getLastCommand+0x62>
		{
			*success=1;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	d8 01       	movw	r26, r16
     cea:	8c 93       	st	X, r24
     cec:	2b c0       	rjmp	.+86     	; 0xd44 <getLastCommand+0xb8>
		}else{
			*success=2;
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	f8 01       	movw	r30, r16
     cf2:	80 83       	st	Z, r24
     cf4:	27 c0       	rjmp	.+78     	; 0xd44 <getLastCommand+0xb8>
		
	}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
		
		
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE) 
     cf6:	80 91 0f 01 	lds	r24, 0x010F
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	07 97       	sbiw	r24, 0x07	; 7
     cfe:	80 38       	cpi	r24, 0x80	; 128
     d00:	91 05       	cpc	r25, r1
     d02:	04 f5       	brge	.+64     	; 0xd44 <getLastCommand+0xb8>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
     d04:	80 91 0f 01 	lds	r24, 0x010F
     d08:	87 50       	subi	r24, 0x07	; 7
     d0a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <checkPackIsFullLength>
     d0e:	88 23       	and	r24, r24
     d10:	c9 f0       	breq	.+50     	; 0xd44 <getLastCommand+0xb8>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
     d12:	80 91 0f 01 	lds	r24, 0x010F
     d16:	be 01       	movw	r22, r28
     d18:	61 5f       	subi	r22, 0xF1	; 241
     d1a:	7f 4f       	sbci	r23, 0xFF	; 255
     d1c:	87 50       	subi	r24, 0x07	; 7
     d1e:	0e 94 59 05 	call	0xab2	; 0xab2 <fetchCommand>
     d22:	28 87       	std	Y+8, r18	; 0x08
     d24:	39 87       	std	Y+9, r19	; 0x09
     d26:	4a 87       	std	Y+10, r20	; 0x0a
     d28:	5b 87       	std	Y+11, r21	; 0x0b
     d2a:	6c 87       	std	Y+12, r22	; 0x0c
     d2c:	7d 87       	std	Y+13, r23	; 0x0d
     d2e:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
     d30:	8f 85       	ldd	r24, Y+15	; 0x0f
     d32:	88 23       	and	r24, r24
     d34:	21 f0       	breq	.+8      	; 0xd3e <getLastCommand+0xb2>
			{
				*success=1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	d8 01       	movw	r26, r16
     d3a:	8c 93       	st	X, r24
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <getLastCommand+0xb8>
				}else{
				*success=2;
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	f8 01       	movw	r30, r16
     d42:	80 83       	st	Z, r24
		
		}
	}
	
	
	return cmd;
     d44:	87 e0       	ldi	r24, 0x07	; 7
     d46:	fe 01       	movw	r30, r28
     d48:	38 96       	adiw	r30, 0x08	; 8
     d4a:	de 01       	movw	r26, r28
     d4c:	11 96       	adiw	r26, 0x01	; 1
     d4e:	01 90       	ld	r0, Z+
     d50:	0d 92       	st	X+, r0
     d52:	8a 95       	dec	r24
     d54:	e1 f7       	brne	.-8      	; 0xd4e <getLastCommand+0xc2>
     d56:	29 81       	ldd	r18, Y+1	; 0x01
     d58:	3a 81       	ldd	r19, Y+2	; 0x02
     d5a:	4b 81       	ldd	r20, Y+3	; 0x03
     d5c:	5c 81       	ldd	r21, Y+4	; 0x04
     d5e:	6d 81       	ldd	r22, Y+5	; 0x05
     d60:	7e 81       	ldd	r23, Y+6	; 0x06
}
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	2f 96       	adiw	r28, 0x0f	; 15
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <__vector_28>:
	
	return ret;
}
*/

ISR(USART1_RX_vect){
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
	
	uint8_t data = UDR1;
     d8e:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
     d92:	90 91 11 01 	lds	r25, 0x0111
     d96:	91 11       	cpse	r25, r1
     d98:	1a c0       	rjmp	.+52     	; 0xdce <__vector_28+0x52>
		rxBuffer[rxWritePos].pack_no = data; //numai primi 7 biti
     d9a:	e0 91 12 01 	lds	r30, 0x0112
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	e1 5b       	subi	r30, 0xB1	; 177
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
     daa:	e0 91 12 01 	lds	r30, 0x0112
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	e1 5b       	subi	r30, 0xB1	; 177
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	80 83       	st	Z, r24
		packStarted = 1;
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	90 93 11 01 	sts	0x0111, r25
		lastPackNo = data;
     dc0:	80 93 10 01 	sts	0x0110, r24
		lastPackPosInBuff = rxWritePos; 
     dc4:	80 91 12 01 	lds	r24, 0x0112
     dc8:	80 93 0f 01 	sts	0x010F, r24
     dcc:	1d c0       	rjmp	.+58     	; 0xe08 <__vector_28+0x8c>
	}else{
		
		rxBuffer[rxWritePos].pack_no = lastPackNo;
     dce:	e0 91 12 01 	lds	r30, 0x0112
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	90 91 10 01 	lds	r25, 0x0110
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	e1 5b       	subi	r30, 0xB1	; 177
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
     de2:	e0 91 12 01 	lds	r30, 0x0112
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	e1 5b       	subi	r30, 0xB1	; 177
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	80 83       	st	Z, r24
		packStarted++ ;
     df2:	80 91 11 01 	lds	r24, 0x0111
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	80 93 11 01 	sts	0x0111, r24
		
		if(packStarted == COMMAND_SIZE){
     dfc:	80 91 11 01 	lds	r24, 0x0111
     e00:	87 30       	cpi	r24, 0x07	; 7
     e02:	11 f4       	brne	.+4      	; 0xe08 <__vector_28+0x8c>
			packStarted = 0;
     e04:	10 92 11 01 	sts	0x0111, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
     e08:	80 91 12 01 	lds	r24, 0x0112
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	80 93 12 01 	sts	0x0112, r24
	
	if(rxWritePos>=RX_BUFFER_SIZE){
     e12:	80 91 12 01 	lds	r24, 0x0112
     e16:	88 23       	and	r24, r24
     e18:	14 f4       	brge	.+4      	; 0xe1e <__vector_28+0xa2>
			rxWritePos = 0;
     e1a:	10 92 12 01 	sts	0x0112, r1
	}
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <__vector_30>:

ISR(USART1_TX_vect){
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	8f 93       	push	r24
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
     e40:	e0 91 0e 01 	lds	r30, 0x010E
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	e1 5b       	subi	r30, 0xB1	; 177
     e4c:	fd 4f       	sbci	r31, 0xFD	; 253
     e4e:	81 81       	ldd	r24, Z+1	; 0x01
     e50:	8f 3f       	cpi	r24, 0xFF	; 255
     e52:	31 f1       	breq	.+76     	; 0xea0 <__vector_30+0x70>
	UDR1 =  txBuffer[txReadPos].data;
     e54:	e0 91 0e 01 	lds	r30, 0x010E
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	e1 5b       	subi	r30, 0xB1	; 177
     e60:	fd 4f       	sbci	r31, 0xFD	; 253
     e62:	80 81       	ld	r24, Z
     e64:	80 93 ce 00 	sts	0x00CE, r24
	txBuffer[txReadPos].data =0;
     e68:	e0 91 0e 01 	lds	r30, 0x010E
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	e1 5b       	subi	r30, 0xB1	; 177
     e74:	fd 4f       	sbci	r31, 0xFD	; 253
     e76:	10 82       	st	Z, r1
	txBuffer[txReadPos].pack_no =-1;
     e78:	e0 91 0e 01 	lds	r30, 0x010E
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	e1 5b       	subi	r30, 0xB1	; 177
     e84:	fd 4f       	sbci	r31, 0xFD	; 253
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	81 83       	std	Z+1, r24	; 0x01
	txReadPos++;
     e8a:	80 91 0e 01 	lds	r24, 0x010E
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	80 93 0e 01 	sts	0x010E, r24
		if(txReadPos>TX_BUFFER_SIZE){
     e94:	80 91 0e 01 	lds	r24, 0x010E
     e98:	81 38       	cpi	r24, 0x81	; 129
     e9a:	10 f0       	brcs	.+4      	; 0xea0 <__vector_30+0x70>
			txReadPos =0;
     e9c:	10 92 0e 01 	sts	0x010E, r1
		}
	}
	
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	8f 91       	pop	r24
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <executeCommandForTime>:
volatile uint32_t ticks = 99999;
volatile uint16_t lastCOMPARE = 0;


void executeCommandForTime(void (*startF) (uint16_t, int16_t*), void (*stopF) (uint16_t, int16_t*), 
uint16_t argc_start, int16_t* argv_start, uint16_t argc_stop, int16_t* argv_stop, uint16_t time){
     eb0:	af 92       	push	r10
     eb2:	bf 92       	push	r11
     eb4:	cf 92       	push	r12
     eb6:	df 92       	push	r13
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	5c 01       	movw	r10, r24
     ec6:	ca 01       	movw	r24, r20
     ec8:	a9 01       	movw	r20, r18
	//init timer

	stopFunction = stopF;
     eca:	70 93 16 01 	sts	0x0116, r23
     ece:	60 93 15 01 	sts	0x0115, r22
	argc2 = argc_stop;
     ed2:	10 93 14 01 	sts	0x0114, r17
     ed6:	00 93 13 01 	sts	0x0113, r16
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
     eda:	01 15       	cp	r16, r1
     edc:	11 05       	cpc	r17, r1
     ede:	91 f0       	breq	.+36     	; 0xf04 <executeCommandForTime+0x54>
     ee0:	ce 2d       	mov	r28, r14
     ee2:	df 2d       	mov	r29, r15
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
		argv2[i] = argv_stop[i];
     ee8:	69 91       	ld	r22, Y+
     eea:	79 91       	ld	r23, Y+
     eec:	9d 01       	movw	r18, r26
     eee:	22 0f       	add	r18, r18
     ef0:	33 1f       	adc	r19, r19
     ef2:	f9 01       	movw	r30, r18
     ef4:	e1 5b       	subi	r30, 0xB1	; 177
     ef6:	fc 4f       	sbci	r31, 0xFC	; 252
     ef8:	71 83       	std	Z+1, r23	; 0x01
     efa:	60 83       	st	Z, r22
uint16_t argc_start, int16_t* argv_start, uint16_t argc_stop, int16_t* argv_stop, uint16_t time){
	//init timer

	stopFunction = stopF;
	argc2 = argc_stop;
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	a0 17       	cp	r26, r16
     f00:	b1 07       	cpc	r27, r17
     f02:	91 f7       	brne	.-28     	; 0xee8 <executeCommandForTime+0x38>
	//TCCR1B &= ~((1<<CS10) | (1<<CS11));

//	sei();		
	
	//call start function
	ticks = time;
     f04:	86 01       	movw	r16, r12
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	00 93 00 01 	sts	0x0100, r16
     f0e:	10 93 01 01 	sts	0x0101, r17
     f12:	20 93 02 01 	sts	0x0102, r18
     f16:	30 93 03 01 	sts	0x0103, r19
	startF(argc_start, argv_start);
     f1a:	ba 01       	movw	r22, r20
     f1c:	f5 01       	movw	r30, r10
     f1e:	09 95       	icall
				LED_CMD_PORT |= (1<<LED_CMD_PINx);
     f20:	17 9a       	sbi	0x02, 7	; 2
}
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	08 95       	ret

00000f38 <initTimer1>:

void initTimer1()
{
	//Normal port operation, OC1A/OC1B disconnected.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1A0));	
     f38:	e0 e8       	ldi	r30, 0x80	; 128
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 71       	andi	r24, 0x1F	; 31
     f40:	80 83       	st	Z, r24
	
	//Timer/Counter mode of operation: CTC, TOP = OCR1A, Update of OCR1x at Immediate TOVn flag set on MAX
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11));
     f42:	80 81       	ld	r24, Z
     f44:	8c 7f       	andi	r24, 0xFC	; 252
     f46:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
     f48:	e1 e8       	ldi	r30, 0x81	; 129
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
     f52:	80 81       	ld	r24, Z
     f54:	8f 7e       	andi	r24, 0xEF	; 239
     f56:	80 83       	st	Z, r24
	
	// Clock Select: clk/64 prescaler
	TCCR1B &= ~((1<<CS12));
     f58:	80 81       	ld	r24, Z
     f5a:	8b 7f       	andi	r24, 0xFB	; 251
     f5c:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10) | (1<<CS11);
     f5e:	80 81       	ld	r24, Z
     f60:	83 60       	ori	r24, 0x03	; 3
     f62:	80 83       	st	Z, r24
	
	
	
	// reset counter
	TCNT1 = 0;
     f64:	10 92 85 00 	sts	0x0085, r1
     f68:	10 92 84 00 	sts	0x0084, r1
	// disable compare for the moment
	//OCR1A = 0;
	//OCR1B = 0;
	
	//set OCR1A for 1 ms interrupts
	OCR1A = ((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*10L;
     f6c:	82 ee       	ldi	r24, 0xE2	; 226
     f6e:	94 e0       	ldi	r25, 0x04	; 4
     f70:	90 93 89 00 	sts	0x0089, r25
     f74:	80 93 88 00 	sts	0x0088, r24
	
	//enable Output Compare A Match Interrupt Enable
	TIMSK1 |= (1<<OCIE1A);// (1<<OCIE1B) | (1<<OCIE1A);
     f78:	ef e6       	ldi	r30, 0x6F	; 111
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	82 60       	ori	r24, 0x02	; 2
     f80:	80 83       	st	Z, r24
     f82:	08 95       	ret

00000f84 <__vector_13>:
	
}

ISR(TIMER1_COMPA_vect){
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
		
	//	LED_CMD_PIN |= (1<<LED_CMD_PINx);
		
		if(ticks && ticks != 99999){
     fa6:	80 91 00 01 	lds	r24, 0x0100
     faa:	90 91 01 01 	lds	r25, 0x0101
     fae:	a0 91 02 01 	lds	r26, 0x0102
     fb2:	b0 91 03 01 	lds	r27, 0x0103
     fb6:	89 2b       	or	r24, r25
     fb8:	8a 2b       	or	r24, r26
     fba:	8b 2b       	or	r24, r27
     fbc:	09 f1       	breq	.+66     	; 0x1000 <__vector_13+0x7c>
     fbe:	80 91 00 01 	lds	r24, 0x0100
     fc2:	90 91 01 01 	lds	r25, 0x0101
     fc6:	a0 91 02 01 	lds	r26, 0x0102
     fca:	b0 91 03 01 	lds	r27, 0x0103
     fce:	8f 39       	cpi	r24, 0x9F	; 159
     fd0:	96 48       	sbci	r25, 0x86	; 134
     fd2:	a1 40       	sbci	r26, 0x01	; 1
     fd4:	b1 05       	cpc	r27, r1
     fd6:	a1 f0       	breq	.+40     	; 0x1000 <__vector_13+0x7c>
			ticks--;
     fd8:	80 91 00 01 	lds	r24, 0x0100
     fdc:	90 91 01 01 	lds	r25, 0x0101
     fe0:	a0 91 02 01 	lds	r26, 0x0102
     fe4:	b0 91 03 01 	lds	r27, 0x0103
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	a1 09       	sbc	r26, r1
     fec:	b1 09       	sbc	r27, r1
     fee:	80 93 00 01 	sts	0x0100, r24
     ff2:	90 93 01 01 	sts	0x0101, r25
     ff6:	a0 93 02 01 	sts	0x0102, r26
     ffa:	b0 93 03 01 	sts	0x0103, r27
     ffe:	24 c0       	rjmp	.+72     	; 0x1048 <__vector_13+0xc4>
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
		}else if(ticks == 0){
    1000:	80 91 00 01 	lds	r24, 0x0100
    1004:	90 91 01 01 	lds	r25, 0x0101
    1008:	a0 91 02 01 	lds	r26, 0x0102
    100c:	b0 91 03 01 	lds	r27, 0x0103
    1010:	89 2b       	or	r24, r25
    1012:	8a 2b       	or	r24, r26
    1014:	8b 2b       	or	r24, r27
    1016:	c1 f4       	brne	.+48     	; 0x1048 <__vector_13+0xc4>
			stopFunction(argc2,argv2);
    1018:	80 91 13 01 	lds	r24, 0x0113
    101c:	90 91 14 01 	lds	r25, 0x0114
    1020:	e0 91 15 01 	lds	r30, 0x0115
    1024:	f0 91 16 01 	lds	r31, 0x0116
    1028:	6f e4       	ldi	r22, 0x4F	; 79
    102a:	73 e0       	ldi	r23, 0x03	; 3
    102c:	09 95       	icall
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
			LED_CMD_PORT &= ~(1<<LED_CMD_PINx);
    102e:	17 98       	cbi	0x02, 7	; 2
			ticks = 99999;
    1030:	8f e9       	ldi	r24, 0x9F	; 159
    1032:	96 e8       	ldi	r25, 0x86	; 134
    1034:	a1 e0       	ldi	r26, 0x01	; 1
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	80 93 00 01 	sts	0x0100, r24
    103c:	90 93 01 01 	sts	0x0101, r25
    1040:	a0 93 02 01 	sts	0x0102, r26
    1044:	b0 93 03 01 	sts	0x0103, r27
	//call the stop function
	stopFunction(argc2, argv2);
	}

*/
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__subsf3>:
    106a:	50 58       	subi	r21, 0x80	; 128

0000106c <__addsf3>:
    106c:	bb 27       	eor	r27, r27
    106e:	aa 27       	eor	r26, r26
    1070:	0e d0       	rcall	.+28     	; 0x108e <__addsf3x>
    1072:	70 c1       	rjmp	.+736    	; 0x1354 <__fp_round>
    1074:	61 d1       	rcall	.+706    	; 0x1338 <__fp_pscA>
    1076:	30 f0       	brcs	.+12     	; 0x1084 <__addsf3+0x18>
    1078:	66 d1       	rcall	.+716    	; 0x1346 <__fp_pscB>
    107a:	20 f0       	brcs	.+8      	; 0x1084 <__addsf3+0x18>
    107c:	31 f4       	brne	.+12     	; 0x108a <__addsf3+0x1e>
    107e:	9f 3f       	cpi	r25, 0xFF	; 255
    1080:	11 f4       	brne	.+4      	; 0x1086 <__addsf3+0x1a>
    1082:	1e f4       	brtc	.+6      	; 0x108a <__addsf3+0x1e>
    1084:	56 c1       	rjmp	.+684    	; 0x1332 <__fp_nan>
    1086:	0e f4       	brtc	.+2      	; 0x108a <__addsf3+0x1e>
    1088:	e0 95       	com	r30
    108a:	e7 fb       	bst	r30, 7
    108c:	4c c1       	rjmp	.+664    	; 0x1326 <__fp_inf>

0000108e <__addsf3x>:
    108e:	e9 2f       	mov	r30, r25
    1090:	72 d1       	rcall	.+740    	; 0x1376 <__fp_split3>
    1092:	80 f3       	brcs	.-32     	; 0x1074 <__addsf3+0x8>
    1094:	ba 17       	cp	r27, r26
    1096:	62 07       	cpc	r22, r18
    1098:	73 07       	cpc	r23, r19
    109a:	84 07       	cpc	r24, r20
    109c:	95 07       	cpc	r25, r21
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <__addsf3x+0x18>
    10a0:	71 f4       	brne	.+28     	; 0x10be <__addsf3x+0x30>
    10a2:	9e f5       	brtc	.+102    	; 0x110a <__addsf3x+0x7c>
    10a4:	8a c1       	rjmp	.+788    	; 0x13ba <__fp_zero>
    10a6:	0e f4       	brtc	.+2      	; 0x10aa <__addsf3x+0x1c>
    10a8:	e0 95       	com	r30
    10aa:	0b 2e       	mov	r0, r27
    10ac:	ba 2f       	mov	r27, r26
    10ae:	a0 2d       	mov	r26, r0
    10b0:	0b 01       	movw	r0, r22
    10b2:	b9 01       	movw	r22, r18
    10b4:	90 01       	movw	r18, r0
    10b6:	0c 01       	movw	r0, r24
    10b8:	ca 01       	movw	r24, r20
    10ba:	a0 01       	movw	r20, r0
    10bc:	11 24       	eor	r1, r1
    10be:	ff 27       	eor	r31, r31
    10c0:	59 1b       	sub	r21, r25
    10c2:	99 f0       	breq	.+38     	; 0x10ea <__addsf3x+0x5c>
    10c4:	59 3f       	cpi	r21, 0xF9	; 249
    10c6:	50 f4       	brcc	.+20     	; 0x10dc <__addsf3x+0x4e>
    10c8:	50 3e       	cpi	r21, 0xE0	; 224
    10ca:	68 f1       	brcs	.+90     	; 0x1126 <__addsf3x+0x98>
    10cc:	1a 16       	cp	r1, r26
    10ce:	f0 40       	sbci	r31, 0x00	; 0
    10d0:	a2 2f       	mov	r26, r18
    10d2:	23 2f       	mov	r18, r19
    10d4:	34 2f       	mov	r19, r20
    10d6:	44 27       	eor	r20, r20
    10d8:	58 5f       	subi	r21, 0xF8	; 248
    10da:	f3 cf       	rjmp	.-26     	; 0x10c2 <__addsf3x+0x34>
    10dc:	46 95       	lsr	r20
    10de:	37 95       	ror	r19
    10e0:	27 95       	ror	r18
    10e2:	a7 95       	ror	r26
    10e4:	f0 40       	sbci	r31, 0x00	; 0
    10e6:	53 95       	inc	r21
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__addsf3x+0x4e>
    10ea:	7e f4       	brtc	.+30     	; 0x110a <__addsf3x+0x7c>
    10ec:	1f 16       	cp	r1, r31
    10ee:	ba 0b       	sbc	r27, r26
    10f0:	62 0b       	sbc	r22, r18
    10f2:	73 0b       	sbc	r23, r19
    10f4:	84 0b       	sbc	r24, r20
    10f6:	ba f0       	brmi	.+46     	; 0x1126 <__addsf3x+0x98>
    10f8:	91 50       	subi	r25, 0x01	; 1
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <__addsf3x+0x96>
    10fc:	ff 0f       	add	r31, r31
    10fe:	bb 1f       	adc	r27, r27
    1100:	66 1f       	adc	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	c2 f7       	brpl	.-16     	; 0x10f8 <__addsf3x+0x6a>
    1108:	0e c0       	rjmp	.+28     	; 0x1126 <__addsf3x+0x98>
    110a:	ba 0f       	add	r27, r26
    110c:	62 1f       	adc	r22, r18
    110e:	73 1f       	adc	r23, r19
    1110:	84 1f       	adc	r24, r20
    1112:	48 f4       	brcc	.+18     	; 0x1126 <__addsf3x+0x98>
    1114:	87 95       	ror	r24
    1116:	77 95       	ror	r23
    1118:	67 95       	ror	r22
    111a:	b7 95       	ror	r27
    111c:	f7 95       	ror	r31
    111e:	9e 3f       	cpi	r25, 0xFE	; 254
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__addsf3x+0x96>
    1122:	b3 cf       	rjmp	.-154    	; 0x108a <__addsf3+0x1e>
    1124:	93 95       	inc	r25
    1126:	88 0f       	add	r24, r24
    1128:	08 f0       	brcs	.+2      	; 0x112c <__addsf3x+0x9e>
    112a:	99 27       	eor	r25, r25
    112c:	ee 0f       	add	r30, r30
    112e:	97 95       	ror	r25
    1130:	87 95       	ror	r24
    1132:	08 95       	ret

00001134 <__cmpsf2>:
    1134:	d4 d0       	rcall	.+424    	; 0x12de <__fp_cmp>
    1136:	08 f4       	brcc	.+2      	; 0x113a <__cmpsf2+0x6>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	08 95       	ret

0000113c <__divsf3>:
    113c:	0c d0       	rcall	.+24     	; 0x1156 <__divsf3x>
    113e:	0a c1       	rjmp	.+532    	; 0x1354 <__fp_round>
    1140:	02 d1       	rcall	.+516    	; 0x1346 <__fp_pscB>
    1142:	40 f0       	brcs	.+16     	; 0x1154 <__divsf3+0x18>
    1144:	f9 d0       	rcall	.+498    	; 0x1338 <__fp_pscA>
    1146:	30 f0       	brcs	.+12     	; 0x1154 <__divsf3+0x18>
    1148:	21 f4       	brne	.+8      	; 0x1152 <__divsf3+0x16>
    114a:	5f 3f       	cpi	r21, 0xFF	; 255
    114c:	19 f0       	breq	.+6      	; 0x1154 <__divsf3+0x18>
    114e:	eb c0       	rjmp	.+470    	; 0x1326 <__fp_inf>
    1150:	51 11       	cpse	r21, r1
    1152:	34 c1       	rjmp	.+616    	; 0x13bc <__fp_szero>
    1154:	ee c0       	rjmp	.+476    	; 0x1332 <__fp_nan>

00001156 <__divsf3x>:
    1156:	0f d1       	rcall	.+542    	; 0x1376 <__fp_split3>
    1158:	98 f3       	brcs	.-26     	; 0x1140 <__divsf3+0x4>

0000115a <__divsf3_pse>:
    115a:	99 23       	and	r25, r25
    115c:	c9 f3       	breq	.-14     	; 0x1150 <__divsf3+0x14>
    115e:	55 23       	and	r21, r21
    1160:	b1 f3       	breq	.-20     	; 0x114e <__divsf3+0x12>
    1162:	95 1b       	sub	r25, r21
    1164:	55 0b       	sbc	r21, r21
    1166:	bb 27       	eor	r27, r27
    1168:	aa 27       	eor	r26, r26
    116a:	62 17       	cp	r22, r18
    116c:	73 07       	cpc	r23, r19
    116e:	84 07       	cpc	r24, r20
    1170:	38 f0       	brcs	.+14     	; 0x1180 <__divsf3_pse+0x26>
    1172:	9f 5f       	subi	r25, 0xFF	; 255
    1174:	5f 4f       	sbci	r21, 0xFF	; 255
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	44 1f       	adc	r20, r20
    117c:	aa 1f       	adc	r26, r26
    117e:	a9 f3       	breq	.-22     	; 0x116a <__divsf3_pse+0x10>
    1180:	33 d0       	rcall	.+102    	; 0x11e8 <__divsf3_pse+0x8e>
    1182:	0e 2e       	mov	r0, r30
    1184:	3a f0       	brmi	.+14     	; 0x1194 <__divsf3_pse+0x3a>
    1186:	e0 e8       	ldi	r30, 0x80	; 128
    1188:	30 d0       	rcall	.+96     	; 0x11ea <__divsf3_pse+0x90>
    118a:	91 50       	subi	r25, 0x01	; 1
    118c:	50 40       	sbci	r21, 0x00	; 0
    118e:	e6 95       	lsr	r30
    1190:	00 1c       	adc	r0, r0
    1192:	ca f7       	brpl	.-14     	; 0x1186 <__divsf3_pse+0x2c>
    1194:	29 d0       	rcall	.+82     	; 0x11e8 <__divsf3_pse+0x8e>
    1196:	fe 2f       	mov	r31, r30
    1198:	27 d0       	rcall	.+78     	; 0x11e8 <__divsf3_pse+0x8e>
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	bb 1f       	adc	r27, r27
    11a2:	26 17       	cp	r18, r22
    11a4:	37 07       	cpc	r19, r23
    11a6:	48 07       	cpc	r20, r24
    11a8:	ab 07       	cpc	r26, r27
    11aa:	b0 e8       	ldi	r27, 0x80	; 128
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__divsf3_pse+0x56>
    11ae:	bb 0b       	sbc	r27, r27
    11b0:	80 2d       	mov	r24, r0
    11b2:	bf 01       	movw	r22, r30
    11b4:	ff 27       	eor	r31, r31
    11b6:	93 58       	subi	r25, 0x83	; 131
    11b8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ba:	2a f0       	brmi	.+10     	; 0x11c6 <__divsf3_pse+0x6c>
    11bc:	9e 3f       	cpi	r25, 0xFE	; 254
    11be:	51 05       	cpc	r21, r1
    11c0:	68 f0       	brcs	.+26     	; 0x11dc <__divsf3_pse+0x82>
    11c2:	b1 c0       	rjmp	.+354    	; 0x1326 <__fp_inf>
    11c4:	fb c0       	rjmp	.+502    	; 0x13bc <__fp_szero>
    11c6:	5f 3f       	cpi	r21, 0xFF	; 255
    11c8:	ec f3       	brlt	.-6      	; 0x11c4 <__divsf3_pse+0x6a>
    11ca:	98 3e       	cpi	r25, 0xE8	; 232
    11cc:	dc f3       	brlt	.-10     	; 0x11c4 <__divsf3_pse+0x6a>
    11ce:	86 95       	lsr	r24
    11d0:	77 95       	ror	r23
    11d2:	67 95       	ror	r22
    11d4:	b7 95       	ror	r27
    11d6:	f7 95       	ror	r31
    11d8:	9f 5f       	subi	r25, 0xFF	; 255
    11da:	c9 f7       	brne	.-14     	; 0x11ce <__divsf3_pse+0x74>
    11dc:	88 0f       	add	r24, r24
    11de:	91 1d       	adc	r25, r1
    11e0:	96 95       	lsr	r25
    11e2:	87 95       	ror	r24
    11e4:	97 f9       	bld	r25, 7
    11e6:	08 95       	ret
    11e8:	e1 e0       	ldi	r30, 0x01	; 1
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	bb 1f       	adc	r27, r27
    11f2:	62 17       	cp	r22, r18
    11f4:	73 07       	cpc	r23, r19
    11f6:	84 07       	cpc	r24, r20
    11f8:	ba 07       	cpc	r27, r26
    11fa:	20 f0       	brcs	.+8      	; 0x1204 <__divsf3_pse+0xaa>
    11fc:	62 1b       	sub	r22, r18
    11fe:	73 0b       	sbc	r23, r19
    1200:	84 0b       	sbc	r24, r20
    1202:	ba 0b       	sbc	r27, r26
    1204:	ee 1f       	adc	r30, r30
    1206:	88 f7       	brcc	.-30     	; 0x11ea <__divsf3_pse+0x90>
    1208:	e0 95       	com	r30
    120a:	08 95       	ret

0000120c <__fixunssfsi>:
    120c:	bc d0       	rcall	.+376    	; 0x1386 <__fp_splitA>
    120e:	88 f0       	brcs	.+34     	; 0x1232 <__fixunssfsi+0x26>
    1210:	9f 57       	subi	r25, 0x7F	; 127
    1212:	90 f0       	brcs	.+36     	; 0x1238 <__fixunssfsi+0x2c>
    1214:	b9 2f       	mov	r27, r25
    1216:	99 27       	eor	r25, r25
    1218:	b7 51       	subi	r27, 0x17	; 23
    121a:	a0 f0       	brcs	.+40     	; 0x1244 <__fixunssfsi+0x38>
    121c:	d1 f0       	breq	.+52     	; 0x1252 <__fixunssfsi+0x46>
    121e:	66 0f       	add	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	1a f0       	brmi	.+6      	; 0x122e <__fixunssfsi+0x22>
    1228:	ba 95       	dec	r27
    122a:	c9 f7       	brne	.-14     	; 0x121e <__fixunssfsi+0x12>
    122c:	12 c0       	rjmp	.+36     	; 0x1252 <__fixunssfsi+0x46>
    122e:	b1 30       	cpi	r27, 0x01	; 1
    1230:	81 f0       	breq	.+32     	; 0x1252 <__fixunssfsi+0x46>
    1232:	c3 d0       	rcall	.+390    	; 0x13ba <__fp_zero>
    1234:	b1 e0       	ldi	r27, 0x01	; 1
    1236:	08 95       	ret
    1238:	c0 c0       	rjmp	.+384    	; 0x13ba <__fp_zero>
    123a:	67 2f       	mov	r22, r23
    123c:	78 2f       	mov	r23, r24
    123e:	88 27       	eor	r24, r24
    1240:	b8 5f       	subi	r27, 0xF8	; 248
    1242:	39 f0       	breq	.+14     	; 0x1252 <__fixunssfsi+0x46>
    1244:	b9 3f       	cpi	r27, 0xF9	; 249
    1246:	cc f3       	brlt	.-14     	; 0x123a <__fixunssfsi+0x2e>
    1248:	86 95       	lsr	r24
    124a:	77 95       	ror	r23
    124c:	67 95       	ror	r22
    124e:	b3 95       	inc	r27
    1250:	d9 f7       	brne	.-10     	; 0x1248 <__fixunssfsi+0x3c>
    1252:	3e f4       	brtc	.+14     	; 0x1262 <__fixunssfsi+0x56>
    1254:	90 95       	com	r25
    1256:	80 95       	com	r24
    1258:	70 95       	com	r23
    125a:	61 95       	neg	r22
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	08 95       	ret

00001264 <__floatunsisf>:
    1264:	e8 94       	clt
    1266:	09 c0       	rjmp	.+18     	; 0x127a <__floatsisf+0x12>

00001268 <__floatsisf>:
    1268:	97 fb       	bst	r25, 7
    126a:	3e f4       	brtc	.+14     	; 0x127a <__floatsisf+0x12>
    126c:	90 95       	com	r25
    126e:	80 95       	com	r24
    1270:	70 95       	com	r23
    1272:	61 95       	neg	r22
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	8f 4f       	sbci	r24, 0xFF	; 255
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	99 23       	and	r25, r25
    127c:	a9 f0       	breq	.+42     	; 0x12a8 <__floatsisf+0x40>
    127e:	f9 2f       	mov	r31, r25
    1280:	96 e9       	ldi	r25, 0x96	; 150
    1282:	bb 27       	eor	r27, r27
    1284:	93 95       	inc	r25
    1286:	f6 95       	lsr	r31
    1288:	87 95       	ror	r24
    128a:	77 95       	ror	r23
    128c:	67 95       	ror	r22
    128e:	b7 95       	ror	r27
    1290:	f1 11       	cpse	r31, r1
    1292:	f8 cf       	rjmp	.-16     	; 0x1284 <__floatsisf+0x1c>
    1294:	fa f4       	brpl	.+62     	; 0x12d4 <__floatsisf+0x6c>
    1296:	bb 0f       	add	r27, r27
    1298:	11 f4       	brne	.+4      	; 0x129e <__floatsisf+0x36>
    129a:	60 ff       	sbrs	r22, 0
    129c:	1b c0       	rjmp	.+54     	; 0x12d4 <__floatsisf+0x6c>
    129e:	6f 5f       	subi	r22, 0xFF	; 255
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	8f 4f       	sbci	r24, 0xFF	; 255
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	16 c0       	rjmp	.+44     	; 0x12d4 <__floatsisf+0x6c>
    12a8:	88 23       	and	r24, r24
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <__floatsisf+0x48>
    12ac:	96 e9       	ldi	r25, 0x96	; 150
    12ae:	11 c0       	rjmp	.+34     	; 0x12d2 <__floatsisf+0x6a>
    12b0:	77 23       	and	r23, r23
    12b2:	21 f0       	breq	.+8      	; 0x12bc <__floatsisf+0x54>
    12b4:	9e e8       	ldi	r25, 0x8E	; 142
    12b6:	87 2f       	mov	r24, r23
    12b8:	76 2f       	mov	r23, r22
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <__floatsisf+0x5e>
    12bc:	66 23       	and	r22, r22
    12be:	71 f0       	breq	.+28     	; 0x12dc <__floatsisf+0x74>
    12c0:	96 e8       	ldi	r25, 0x86	; 134
    12c2:	86 2f       	mov	r24, r22
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	2a f0       	brmi	.+10     	; 0x12d4 <__floatsisf+0x6c>
    12ca:	9a 95       	dec	r25
    12cc:	66 0f       	add	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	da f7       	brpl	.-10     	; 0x12ca <__floatsisf+0x62>
    12d4:	88 0f       	add	r24, r24
    12d6:	96 95       	lsr	r25
    12d8:	87 95       	ror	r24
    12da:	97 f9       	bld	r25, 7
    12dc:	08 95       	ret

000012de <__fp_cmp>:
    12de:	99 0f       	add	r25, r25
    12e0:	00 08       	sbc	r0, r0
    12e2:	55 0f       	add	r21, r21
    12e4:	aa 0b       	sbc	r26, r26
    12e6:	e0 e8       	ldi	r30, 0x80	; 128
    12e8:	fe ef       	ldi	r31, 0xFE	; 254
    12ea:	16 16       	cp	r1, r22
    12ec:	17 06       	cpc	r1, r23
    12ee:	e8 07       	cpc	r30, r24
    12f0:	f9 07       	cpc	r31, r25
    12f2:	c0 f0       	brcs	.+48     	; 0x1324 <__fp_cmp+0x46>
    12f4:	12 16       	cp	r1, r18
    12f6:	13 06       	cpc	r1, r19
    12f8:	e4 07       	cpc	r30, r20
    12fa:	f5 07       	cpc	r31, r21
    12fc:	98 f0       	brcs	.+38     	; 0x1324 <__fp_cmp+0x46>
    12fe:	62 1b       	sub	r22, r18
    1300:	73 0b       	sbc	r23, r19
    1302:	84 0b       	sbc	r24, r20
    1304:	95 0b       	sbc	r25, r21
    1306:	39 f4       	brne	.+14     	; 0x1316 <__fp_cmp+0x38>
    1308:	0a 26       	eor	r0, r26
    130a:	61 f0       	breq	.+24     	; 0x1324 <__fp_cmp+0x46>
    130c:	23 2b       	or	r18, r19
    130e:	24 2b       	or	r18, r20
    1310:	25 2b       	or	r18, r21
    1312:	21 f4       	brne	.+8      	; 0x131c <__fp_cmp+0x3e>
    1314:	08 95       	ret
    1316:	0a 26       	eor	r0, r26
    1318:	09 f4       	brne	.+2      	; 0x131c <__fp_cmp+0x3e>
    131a:	a1 40       	sbci	r26, 0x01	; 1
    131c:	a6 95       	lsr	r26
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	81 1d       	adc	r24, r1
    1322:	81 1d       	adc	r24, r1
    1324:	08 95       	ret

00001326 <__fp_inf>:
    1326:	97 f9       	bld	r25, 7
    1328:	9f 67       	ori	r25, 0x7F	; 127
    132a:	80 e8       	ldi	r24, 0x80	; 128
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	08 95       	ret

00001332 <__fp_nan>:
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	80 ec       	ldi	r24, 0xC0	; 192
    1336:	08 95       	ret

00001338 <__fp_pscA>:
    1338:	00 24       	eor	r0, r0
    133a:	0a 94       	dec	r0
    133c:	16 16       	cp	r1, r22
    133e:	17 06       	cpc	r1, r23
    1340:	18 06       	cpc	r1, r24
    1342:	09 06       	cpc	r0, r25
    1344:	08 95       	ret

00001346 <__fp_pscB>:
    1346:	00 24       	eor	r0, r0
    1348:	0a 94       	dec	r0
    134a:	12 16       	cp	r1, r18
    134c:	13 06       	cpc	r1, r19
    134e:	14 06       	cpc	r1, r20
    1350:	05 06       	cpc	r0, r21
    1352:	08 95       	ret

00001354 <__fp_round>:
    1354:	09 2e       	mov	r0, r25
    1356:	03 94       	inc	r0
    1358:	00 0c       	add	r0, r0
    135a:	11 f4       	brne	.+4      	; 0x1360 <__fp_round+0xc>
    135c:	88 23       	and	r24, r24
    135e:	52 f0       	brmi	.+20     	; 0x1374 <__fp_round+0x20>
    1360:	bb 0f       	add	r27, r27
    1362:	40 f4       	brcc	.+16     	; 0x1374 <__fp_round+0x20>
    1364:	bf 2b       	or	r27, r31
    1366:	11 f4       	brne	.+4      	; 0x136c <__fp_round+0x18>
    1368:	60 ff       	sbrs	r22, 0
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <__fp_round+0x20>
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	08 95       	ret

00001376 <__fp_split3>:
    1376:	57 fd       	sbrc	r21, 7
    1378:	90 58       	subi	r25, 0x80	; 128
    137a:	44 0f       	add	r20, r20
    137c:	55 1f       	adc	r21, r21
    137e:	59 f0       	breq	.+22     	; 0x1396 <__fp_splitA+0x10>
    1380:	5f 3f       	cpi	r21, 0xFF	; 255
    1382:	71 f0       	breq	.+28     	; 0x13a0 <__fp_splitA+0x1a>
    1384:	47 95       	ror	r20

00001386 <__fp_splitA>:
    1386:	88 0f       	add	r24, r24
    1388:	97 fb       	bst	r25, 7
    138a:	99 1f       	adc	r25, r25
    138c:	61 f0       	breq	.+24     	; 0x13a6 <__fp_splitA+0x20>
    138e:	9f 3f       	cpi	r25, 0xFF	; 255
    1390:	79 f0       	breq	.+30     	; 0x13b0 <__fp_splitA+0x2a>
    1392:	87 95       	ror	r24
    1394:	08 95       	ret
    1396:	12 16       	cp	r1, r18
    1398:	13 06       	cpc	r1, r19
    139a:	14 06       	cpc	r1, r20
    139c:	55 1f       	adc	r21, r21
    139e:	f2 cf       	rjmp	.-28     	; 0x1384 <__fp_split3+0xe>
    13a0:	46 95       	lsr	r20
    13a2:	f1 df       	rcall	.-30     	; 0x1386 <__fp_splitA>
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <__fp_splitA+0x30>
    13a6:	16 16       	cp	r1, r22
    13a8:	17 06       	cpc	r1, r23
    13aa:	18 06       	cpc	r1, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	f1 cf       	rjmp	.-30     	; 0x1392 <__fp_splitA+0xc>
    13b0:	86 95       	lsr	r24
    13b2:	71 05       	cpc	r23, r1
    13b4:	61 05       	cpc	r22, r1
    13b6:	08 94       	sec
    13b8:	08 95       	ret

000013ba <__fp_zero>:
    13ba:	e8 94       	clt

000013bc <__fp_szero>:
    13bc:	bb 27       	eor	r27, r27
    13be:	66 27       	eor	r22, r22
    13c0:	77 27       	eor	r23, r23
    13c2:	cb 01       	movw	r24, r22
    13c4:	97 f9       	bld	r25, 7
    13c6:	08 95       	ret

000013c8 <__gesf2>:
    13c8:	8a df       	rcall	.-236    	; 0x12de <__fp_cmp>
    13ca:	08 f4       	brcc	.+2      	; 0x13ce <__gesf2+0x6>
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	08 95       	ret

000013d0 <lrint>:
    13d0:	da df       	rcall	.-76     	; 0x1386 <__fp_splitA>
    13d2:	a8 f1       	brcs	.+106    	; 0x143e <lrint+0x6e>
    13d4:	9e 57       	subi	r25, 0x7E	; 126
    13d6:	a8 f1       	brcs	.+106    	; 0x1442 <lrint+0x72>
    13d8:	98 51       	subi	r25, 0x18	; 24
    13da:	60 f0       	brcs	.+24     	; 0x13f4 <lrint+0x24>
    13dc:	39 f1       	breq	.+78     	; 0x142c <lrint+0x5c>
    13de:	98 30       	cpi	r25, 0x08	; 8
    13e0:	70 f5       	brcc	.+92     	; 0x143e <lrint+0x6e>
    13e2:	09 2e       	mov	r0, r25
    13e4:	99 27       	eor	r25, r25
    13e6:	66 0f       	add	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	d1 f7       	brne	.-12     	; 0x13e6 <lrint+0x16>
    13f2:	1c c0       	rjmp	.+56     	; 0x142c <lrint+0x5c>
    13f4:	bb 27       	eor	r27, r27
    13f6:	99 3f       	cpi	r25, 0xF9	; 249
    13f8:	4c f4       	brge	.+18     	; 0x140c <lrint+0x3c>
    13fa:	b1 11       	cpse	r27, r1
    13fc:	b1 e0       	ldi	r27, 0x01	; 1
    13fe:	b6 2b       	or	r27, r22
    1400:	67 2f       	mov	r22, r23
    1402:	78 2f       	mov	r23, r24
    1404:	88 27       	eor	r24, r24
    1406:	98 5f       	subi	r25, 0xF8	; 248
    1408:	b1 f7       	brne	.-20     	; 0x13f6 <lrint+0x26>
    140a:	08 c0       	rjmp	.+16     	; 0x141c <lrint+0x4c>
    140c:	86 95       	lsr	r24
    140e:	77 95       	ror	r23
    1410:	67 95       	ror	r22
    1412:	b7 95       	ror	r27
    1414:	08 f4       	brcc	.+2      	; 0x1418 <lrint+0x48>
    1416:	b1 60       	ori	r27, 0x01	; 1
    1418:	93 95       	inc	r25
    141a:	c1 f7       	brne	.-16     	; 0x140c <lrint+0x3c>
    141c:	bb 0f       	add	r27, r27
    141e:	30 f4       	brcc	.+12     	; 0x142c <lrint+0x5c>
    1420:	11 f4       	brne	.+4      	; 0x1426 <lrint+0x56>
    1422:	60 ff       	sbrs	r22, 0
    1424:	03 c0       	rjmp	.+6      	; 0x142c <lrint+0x5c>
    1426:	6f 5f       	subi	r22, 0xFF	; 255
    1428:	7f 4f       	sbci	r23, 0xFF	; 255
    142a:	8f 4f       	sbci	r24, 0xFF	; 255
    142c:	3e f4       	brtc	.+14     	; 0x143c <lrint+0x6c>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	08 95       	ret
    143e:	68 94       	set
    1440:	bd cf       	rjmp	.-134    	; 0x13bc <__fp_szero>
    1442:	bb cf       	rjmp	.-138    	; 0x13ba <__fp_zero>

00001444 <__mulsf3>:
    1444:	0b d0       	rcall	.+22     	; 0x145c <__mulsf3x>
    1446:	86 cf       	rjmp	.-244    	; 0x1354 <__fp_round>
    1448:	77 df       	rcall	.-274    	; 0x1338 <__fp_pscA>
    144a:	28 f0       	brcs	.+10     	; 0x1456 <__mulsf3+0x12>
    144c:	7c df       	rcall	.-264    	; 0x1346 <__fp_pscB>
    144e:	18 f0       	brcs	.+6      	; 0x1456 <__mulsf3+0x12>
    1450:	95 23       	and	r25, r21
    1452:	09 f0       	breq	.+2      	; 0x1456 <__mulsf3+0x12>
    1454:	68 cf       	rjmp	.-304    	; 0x1326 <__fp_inf>
    1456:	6d cf       	rjmp	.-294    	; 0x1332 <__fp_nan>
    1458:	11 24       	eor	r1, r1
    145a:	b0 cf       	rjmp	.-160    	; 0x13bc <__fp_szero>

0000145c <__mulsf3x>:
    145c:	8c df       	rcall	.-232    	; 0x1376 <__fp_split3>
    145e:	a0 f3       	brcs	.-24     	; 0x1448 <__mulsf3+0x4>

00001460 <__mulsf3_pse>:
    1460:	95 9f       	mul	r25, r21
    1462:	d1 f3       	breq	.-12     	; 0x1458 <__mulsf3+0x14>
    1464:	95 0f       	add	r25, r21
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	55 1f       	adc	r21, r21
    146a:	62 9f       	mul	r22, r18
    146c:	f0 01       	movw	r30, r0
    146e:	72 9f       	mul	r23, r18
    1470:	bb 27       	eor	r27, r27
    1472:	f0 0d       	add	r31, r0
    1474:	b1 1d       	adc	r27, r1
    1476:	63 9f       	mul	r22, r19
    1478:	aa 27       	eor	r26, r26
    147a:	f0 0d       	add	r31, r0
    147c:	b1 1d       	adc	r27, r1
    147e:	aa 1f       	adc	r26, r26
    1480:	64 9f       	mul	r22, r20
    1482:	66 27       	eor	r22, r22
    1484:	b0 0d       	add	r27, r0
    1486:	a1 1d       	adc	r26, r1
    1488:	66 1f       	adc	r22, r22
    148a:	82 9f       	mul	r24, r18
    148c:	22 27       	eor	r18, r18
    148e:	b0 0d       	add	r27, r0
    1490:	a1 1d       	adc	r26, r1
    1492:	62 1f       	adc	r22, r18
    1494:	73 9f       	mul	r23, r19
    1496:	b0 0d       	add	r27, r0
    1498:	a1 1d       	adc	r26, r1
    149a:	62 1f       	adc	r22, r18
    149c:	83 9f       	mul	r24, r19
    149e:	a0 0d       	add	r26, r0
    14a0:	61 1d       	adc	r22, r1
    14a2:	22 1f       	adc	r18, r18
    14a4:	74 9f       	mul	r23, r20
    14a6:	33 27       	eor	r19, r19
    14a8:	a0 0d       	add	r26, r0
    14aa:	61 1d       	adc	r22, r1
    14ac:	23 1f       	adc	r18, r19
    14ae:	84 9f       	mul	r24, r20
    14b0:	60 0d       	add	r22, r0
    14b2:	21 1d       	adc	r18, r1
    14b4:	82 2f       	mov	r24, r18
    14b6:	76 2f       	mov	r23, r22
    14b8:	6a 2f       	mov	r22, r26
    14ba:	11 24       	eor	r1, r1
    14bc:	9f 57       	subi	r25, 0x7F	; 127
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	8a f0       	brmi	.+34     	; 0x14e4 <__mulsf3_pse+0x84>
    14c2:	e1 f0       	breq	.+56     	; 0x14fc <__mulsf3_pse+0x9c>
    14c4:	88 23       	and	r24, r24
    14c6:	4a f0       	brmi	.+18     	; 0x14da <__mulsf3_pse+0x7a>
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	bb 1f       	adc	r27, r27
    14ce:	66 1f       	adc	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	91 50       	subi	r25, 0x01	; 1
    14d6:	50 40       	sbci	r21, 0x00	; 0
    14d8:	a9 f7       	brne	.-22     	; 0x14c4 <__mulsf3_pse+0x64>
    14da:	9e 3f       	cpi	r25, 0xFE	; 254
    14dc:	51 05       	cpc	r21, r1
    14de:	70 f0       	brcs	.+28     	; 0x14fc <__mulsf3_pse+0x9c>
    14e0:	22 cf       	rjmp	.-444    	; 0x1326 <__fp_inf>
    14e2:	6c cf       	rjmp	.-296    	; 0x13bc <__fp_szero>
    14e4:	5f 3f       	cpi	r21, 0xFF	; 255
    14e6:	ec f3       	brlt	.-6      	; 0x14e2 <__mulsf3_pse+0x82>
    14e8:	98 3e       	cpi	r25, 0xE8	; 232
    14ea:	dc f3       	brlt	.-10     	; 0x14e2 <__mulsf3_pse+0x82>
    14ec:	86 95       	lsr	r24
    14ee:	77 95       	ror	r23
    14f0:	67 95       	ror	r22
    14f2:	b7 95       	ror	r27
    14f4:	f7 95       	ror	r31
    14f6:	e7 95       	ror	r30
    14f8:	9f 5f       	subi	r25, 0xFF	; 255
    14fa:	c1 f7       	brne	.-16     	; 0x14ec <__mulsf3_pse+0x8c>
    14fc:	fe 2b       	or	r31, r30
    14fe:	88 0f       	add	r24, r24
    1500:	91 1d       	adc	r25, r1
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	97 f9       	bld	r25, 7
    1508:	08 95       	ret

0000150a <__divmodsi4>:
    150a:	05 2e       	mov	r0, r21
    150c:	97 fb       	bst	r25, 7
    150e:	1e f4       	brtc	.+6      	; 0x1516 <__divmodsi4+0xc>
    1510:	00 94       	com	r0
    1512:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__negsi2>
    1516:	57 fd       	sbrc	r21, 7
    1518:	07 d0       	rcall	.+14     	; 0x1528 <__divmodsi4_neg2>
    151a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__udivmodsi4>
    151e:	07 fc       	sbrc	r0, 7
    1520:	03 d0       	rcall	.+6      	; 0x1528 <__divmodsi4_neg2>
    1522:	4e f4       	brtc	.+18     	; 0x1536 <__divmodsi4_exit>
    1524:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__negsi2>

00001528 <__divmodsi4_neg2>:
    1528:	50 95       	com	r21
    152a:	40 95       	com	r20
    152c:	30 95       	com	r19
    152e:	21 95       	neg	r18
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	4f 4f       	sbci	r20, 0xFF	; 255
    1534:	5f 4f       	sbci	r21, 0xFF	; 255

00001536 <__divmodsi4_exit>:
    1536:	08 95       	ret

00001538 <__negsi2>:
    1538:	90 95       	com	r25
    153a:	80 95       	com	r24
    153c:	70 95       	com	r23
    153e:	61 95       	neg	r22
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	8f 4f       	sbci	r24, 0xFF	; 255
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	08 95       	ret

00001548 <__umulhisi3>:
    1548:	a2 9f       	mul	r26, r18
    154a:	b0 01       	movw	r22, r0
    154c:	b3 9f       	mul	r27, r19
    154e:	c0 01       	movw	r24, r0
    1550:	a3 9f       	mul	r26, r19
    1552:	70 0d       	add	r23, r0
    1554:	81 1d       	adc	r24, r1
    1556:	11 24       	eor	r1, r1
    1558:	91 1d       	adc	r25, r1
    155a:	b2 9f       	mul	r27, r18
    155c:	70 0d       	add	r23, r0
    155e:	81 1d       	adc	r24, r1
    1560:	11 24       	eor	r1, r1
    1562:	91 1d       	adc	r25, r1
    1564:	08 95       	ret

00001566 <__udivmodsi4>:
    1566:	a1 e2       	ldi	r26, 0x21	; 33
    1568:	1a 2e       	mov	r1, r26
    156a:	aa 1b       	sub	r26, r26
    156c:	bb 1b       	sub	r27, r27
    156e:	fd 01       	movw	r30, r26
    1570:	0d c0       	rjmp	.+26     	; 0x158c <__udivmodsi4_ep>

00001572 <__udivmodsi4_loop>:
    1572:	aa 1f       	adc	r26, r26
    1574:	bb 1f       	adc	r27, r27
    1576:	ee 1f       	adc	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	a2 17       	cp	r26, r18
    157c:	b3 07       	cpc	r27, r19
    157e:	e4 07       	cpc	r30, r20
    1580:	f5 07       	cpc	r31, r21
    1582:	20 f0       	brcs	.+8      	; 0x158c <__udivmodsi4_ep>
    1584:	a2 1b       	sub	r26, r18
    1586:	b3 0b       	sbc	r27, r19
    1588:	e4 0b       	sbc	r30, r20
    158a:	f5 0b       	sbc	r31, r21

0000158c <__udivmodsi4_ep>:
    158c:	66 1f       	adc	r22, r22
    158e:	77 1f       	adc	r23, r23
    1590:	88 1f       	adc	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	1a 94       	dec	r1
    1596:	69 f7       	brne	.-38     	; 0x1572 <__udivmodsi4_loop>
    1598:	60 95       	com	r22
    159a:	70 95       	com	r23
    159c:	80 95       	com	r24
    159e:	90 95       	com	r25
    15a0:	9b 01       	movw	r18, r22
    15a2:	ac 01       	movw	r20, r24
    15a4:	bd 01       	movw	r22, r26
    15a6:	cf 01       	movw	r24, r30
    15a8:	08 95       	ret

000015aa <_exit>:
    15aa:	f8 94       	cli

000015ac <__stop_program>:
    15ac:	ff cf       	rjmp	.-2      	; 0x15ac <__stop_program>
