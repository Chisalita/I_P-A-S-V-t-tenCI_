
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000015b8  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025e  00800104  00800104  00001650  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ea1  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a55  00000000  00000000  00003771  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b23  00000000  00000000  000041c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000828  00000000  00000000  00004cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009f8  00000000  00000000  00005514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020bd  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00007fc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 eb       	ldi	r30, 0xB8	; 184
      90:	f5 e1       	ldi	r31, 0x15	; 21
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 30       	cpi	r26, 0x04	; 4
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a4 e0       	ldi	r26, 0x04	; 4
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 36       	cpi	r26, 0x62	; 98
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 a8 00 	call	0x150	; 0x150 <main>
      b2:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initAll>:

int bune =0; //teste


void initAll(){
	initUSART1(9600);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 02 05 	call	0xa04	; 0xa04 <initUSART1>
	initTimer0();
      c2:	0e 94 b8 00 	call	0x170	; 0x170 <initTimer0>
	initTimer1();
      c6:	0e 94 92 07 	call	0xf24	; 0xf24 <initTimer1>
	initTimer2();
      ca:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <initTimer2>
	initSensors();
      ce:	0e 94 4e 02 	call	0x49c	; 0x49c <initSensors>
      d2:	08 95       	ret

000000d4 <executeCommands>:
	}
	
}


void executeCommands(){
      d4:	ff 92       	push	r15
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	28 97       	sbiw	r28, 0x08	; 8
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	f8 94       	cli
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	cd bf       	out	0x3d, r28	; 61
	//startUltrasonicMeasure();
	int8_t s;
	command lastcmd = getLastCommand(&s);
      ee:	ce 01       	movw	r24, r28
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	0e 94 42 06 	call	0xc84	; 0xc84 <getLastCommand>
      f6:	4c 83       	std	Y+4, r20	; 0x04
      f8:	5d 83       	std	Y+5, r21	; 0x05
      fa:	6e 83       	std	Y+6, r22	; 0x06
      fc:	f2 2e       	mov	r15, r18
      fe:	0d 81       	ldd	r16, Y+5	; 0x05
     100:	1e 81       	ldd	r17, Y+6	; 0x06
	//sendStatusUpdate();
	//CHECK CRCs	
	if(s==1){
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	c1 f4       	brne	.+48     	; 0x138 <executeCommands+0x64>
		//LED_CMD_PIN |= (1<<LED_CMD_PINx);
		sendStatusUpdate();//// sar putea sa nu poata transmite atat de repede + intreruperile la 10 ms nu cred ca il lasa sa transmita bine...
     108:	0e 94 bf 06 	call	0xd7e	; 0xd7e <sendStatusUpdate>
						resp.sensorInfo[1]=33;
						resp.time=lastcmd.time;
						sendResponse(resp);		
	*/

		if(lastcmd.header == Header_StatusUpdate){ // is just status update
     10c:	8f e7       	ldi	r24, 0x7F	; 127
     10e:	f8 12       	cpse	r15, r24
     110:	03 c0       	rjmp	.+6      	; 0x118 <executeCommands+0x44>
		
			sendStatusUpdate();
     112:	0e 94 bf 06 	call	0xd7e	; 0xd7e <sendStatusUpdate>
     116:	10 c0       	rjmp	.+32     	; 0x138 <executeCommands+0x64>

			
			}else{
			if(lastcmd.time){
     118:	01 2b       	or	r16, r17
     11a:	29 f0       	breq	.+10     	; 0x126 <executeCommands+0x52>
				
				isAutonomous = 0;
     11c:	10 92 06 01 	sts	0x0106, r1
     120:	10 92 05 01 	sts	0x0105, r1
     124:	09 c0       	rjmp	.+18     	; 0x138 <executeCommands+0x64>
				//	driveRightForTime(lastcmd.right, lastcmd.time);//1
					}else{
				//	driveForwardForTime(lastcmd.forward, lastcmd.time);//1
				}
				}else{
				isAutonomous=1;
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	90 93 06 01 	sts	0x0106, r25
     12e:	80 93 05 01 	sts	0x0105, r24
				car_speed = lastcmd.forward;
     132:	8c 81       	ldd	r24, Y+4	; 0x04
     134:	80 93 04 01 	sts	0x0104, r24



	}
	
     138:	28 96       	adiw	r28, 0x08	; 8
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	ff 90       	pop	r15
     14e:	08 95       	ret

00000150 <main>:


int main(void)
{
	
	initAll();
     150:	0e 94 5d 00 	call	0xba	; 0xba <initAll>
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
     154:	08 9a       	sbi	0x01, 0	; 1
	
	sei();
     156:	78 94       	sei

	breakAll();
     158:	0e 94 b1 00 	call	0x162	; 0x162 <breakAll>
	
	
	while(1)
	{
		executeCommands();
     15c:	0e 94 6a 00 	call	0xd4	; 0xd4 <executeCommands>
     160:	fd cf       	rjmp	.-6      	; 0x15c <main+0xc>

00000162 <breakAll>:

volatile uint16_t TIME_TO_TURN_MS = 830; // 900 pe parchet , 1400 pe mocheta Conti
volatile uint16_t TURN_SPEED = 80;

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     162:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     164:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     166:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     16a:	10 92 b4 00 	sts	0x00B4, r1
     16e:	08 95       	ret

00000170 <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LEFT_DIR_DDR1 |= (1<<MOTOR_LEFT_DIR_PIN1x);
     170:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_LEFT_DIR_DDR2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     172:	39 9a       	sbi	0x07, 1	; 7

	//setez directia initiala
	MOTOR_LEFT_DIR_PORT2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     174:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_LEFT_DIR_PORT1 &= ~(1<<MOTOR_LEFT_DIR_PIN1x);
     176:	40 98       	cbi	0x08, 0	; 8

	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     178:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     17a:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     17c:	84 b5       	in	r24, 0x24	; 36
     17e:	80 68       	ori	r24, 0x80	; 128
     180:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     182:	84 b5       	in	r24, 0x24	; 36
     184:	8f 7b       	andi	r24, 0xBF	; 191
     186:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     188:	84 b5       	in	r24, 0x24	; 36
     18a:	80 62       	ori	r24, 0x20	; 32
     18c:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     18e:	84 b5       	in	r24, 0x24	; 36
     190:	8f 7e       	andi	r24, 0xEF	; 239
     192:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     194:	84 b5       	in	r24, 0x24	; 36
     196:	83 60       	ori	r24, 0x03	; 3
     198:	84 bd       	out	0x24, r24	; 36

volatile uint16_t TIME_TO_TURN_MS = 830; // 900 pe parchet , 1400 pe mocheta Conti
volatile uint16_t TURN_SPEED = 80;

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     19a:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     19c:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
     19e:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	85 bd       	out	0x25, r24	; 37
     1a4:	08 95       	ret

000001a6 <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RIGHT_DIR_DDR1 |= (1<<MOTOR_RIGHT_DIR_PIN1x);
     1a6:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RIGHT_DIR_DDR2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     1a8:	3f 9a       	sbi	0x07, 7	; 7
	
	//setez directia initiala
	MOTOR_RIGHT_DIR_PORT2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     1aa:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RIGHT_DIR_PORT1 &= ~(1<<MOTOR_RIGHT_DIR_PIN1x);
     1ac:	46 98       	cbi	0x08, 6	; 8

	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     1ae:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     1b0:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     1b2:	e0 eb       	ldi	r30, 0xB0	; 176
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 68       	ori	r24, 0x80	; 128
     1ba:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     1bc:	80 81       	ld	r24, Z
     1be:	8f 7b       	andi	r24, 0xBF	; 191
     1c0:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     1c2:	80 81       	ld	r24, Z
     1c4:	80 62       	ori	r24, 0x20	; 32
     1c6:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     1c8:	80 81       	ld	r24, Z
     1ca:	8f 7e       	andi	r24, 0xEF	; 239
     1cc:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     1ce:	80 81       	ld	r24, Z
     1d0:	83 60       	ori	r24, 0x03	; 3
     1d2:	80 83       	st	Z, r24
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     1d4:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     1d8:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
     1dc:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     1e0:	e1 eb       	ldi	r30, 0xB1	; 177
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8c 7f       	andi	r24, 0xFC	; 252
     1e8:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     1ea:	80 81       	ld	r24, Z
     1ec:	84 60       	ori	r24, 0x04	; 4
     1ee:	80 83       	st	Z, r24
     1f0:	08 95       	ret

000001f2 <getInfraredForwardDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES; j++)
	{
		avreage += InfraredValues[j];
     1f2:	20 91 3a 01 	lds	r18, 0x013A
     1f6:	80 91 3b 01 	lds	r24, 0x013B
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	82 0f       	add	r24, r18
     202:	91 1d       	adc	r25, r1
     204:	a1 1d       	adc	r26, r1
     206:	b1 1d       	adc	r27, r1
     208:	20 91 3c 01 	lds	r18, 0x013C
     20c:	82 0f       	add	r24, r18
     20e:	91 1d       	adc	r25, r1
     210:	a1 1d       	adc	r26, r1
     212:	b1 1d       	adc	r27, r1
     214:	20 91 3d 01 	lds	r18, 0x013D
     218:	82 0f       	add	r24, r18
     21a:	91 1d       	adc	r25, r1
     21c:	a1 1d       	adc	r26, r1
     21e:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     220:	b6 95       	lsr	r27
     222:	a7 95       	ror	r26
     224:	97 95       	ror	r25
     226:	87 95       	ror	r24
     228:	b6 95       	lsr	r27
     22a:	a7 95       	ror	r26
     22c:	97 95       	ror	r25
     22e:	87 95       	ror	r24
}
     230:	08 95       	ret

00000232 <getInfraredRightDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+NO_OF_IR_SENSORS];
     232:	20 91 3e 01 	lds	r18, 0x013E
     236:	80 91 3f 01 	lds	r24, 0x013F
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	82 0f       	add	r24, r18
     242:	91 1d       	adc	r25, r1
     244:	a1 1d       	adc	r26, r1
     246:	b1 1d       	adc	r27, r1
     248:	20 91 40 01 	lds	r18, 0x0140
     24c:	82 0f       	add	r24, r18
     24e:	91 1d       	adc	r25, r1
     250:	a1 1d       	adc	r26, r1
     252:	b1 1d       	adc	r27, r1
     254:	20 91 41 01 	lds	r18, 0x0141
     258:	82 0f       	add	r24, r18
     25a:	91 1d       	adc	r25, r1
     25c:	a1 1d       	adc	r26, r1
     25e:	b1 1d       	adc	r27, r1
	}

	return avreage/MAX_INFRARED_VALUES;
     260:	b6 95       	lsr	r27
     262:	a7 95       	ror	r26
     264:	97 95       	ror	r25
     266:	87 95       	ror	r24
     268:	b6 95       	lsr	r27
     26a:	a7 95       	ror	r26
     26c:	97 95       	ror	r25
     26e:	87 95       	ror	r24
}
     270:	08 95       	ret

00000272 <getInfraredBackDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+(2*NO_OF_IR_SENSORS)];
     272:	20 91 42 01 	lds	r18, 0x0142
     276:	80 91 43 01 	lds	r24, 0x0143
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	82 0f       	add	r24, r18
     282:	91 1d       	adc	r25, r1
     284:	a1 1d       	adc	r26, r1
     286:	b1 1d       	adc	r27, r1
     288:	20 91 44 01 	lds	r18, 0x0144
     28c:	82 0f       	add	r24, r18
     28e:	91 1d       	adc	r25, r1
     290:	a1 1d       	adc	r26, r1
     292:	b1 1d       	adc	r27, r1
     294:	20 91 45 01 	lds	r18, 0x0145
     298:	82 0f       	add	r24, r18
     29a:	91 1d       	adc	r25, r1
     29c:	a1 1d       	adc	r26, r1
     29e:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     2a0:	b6 95       	lsr	r27
     2a2:	a7 95       	ror	r26
     2a4:	97 95       	ror	r25
     2a6:	87 95       	ror	r24
     2a8:	b6 95       	lsr	r27
     2aa:	a7 95       	ror	r26
     2ac:	97 95       	ror	r25
     2ae:	87 95       	ror	r24
}
     2b0:	08 95       	ret

000002b2 <getInfraredLeftDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+(3*NO_OF_IR_SENSORS)];
     2b2:	20 91 46 01 	lds	r18, 0x0146
     2b6:	80 91 47 01 	lds	r24, 0x0147
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	82 0f       	add	r24, r18
     2c2:	91 1d       	adc	r25, r1
     2c4:	a1 1d       	adc	r26, r1
     2c6:	b1 1d       	adc	r27, r1
     2c8:	20 91 48 01 	lds	r18, 0x0148
     2cc:	82 0f       	add	r24, r18
     2ce:	91 1d       	adc	r25, r1
     2d0:	a1 1d       	adc	r26, r1
     2d2:	b1 1d       	adc	r27, r1
     2d4:	20 91 49 01 	lds	r18, 0x0149
     2d8:	82 0f       	add	r24, r18
     2da:	91 1d       	adc	r25, r1
     2dc:	a1 1d       	adc	r26, r1
     2de:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     2e0:	b6 95       	lsr	r27
     2e2:	a7 95       	ror	r26
     2e4:	97 95       	ror	r25
     2e6:	87 95       	ror	r24
     2e8:	b6 95       	lsr	r27
     2ea:	a7 95       	ror	r26
     2ec:	97 95       	ror	r25
     2ee:	87 95       	ror	r24
}
     2f0:	08 95       	ret

000002f2 <getAverageUltrasonicValue>:

uint16_t getLastUltrasonicValue(){
	return UltraSonicValues[US_pos_in_buffer-1];//because it is always the next position
}

uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
     2f2:	cf 93       	push	r28
     2f4:	38 2f       	mov	r19, r24
     2f6:	81 31       	cpi	r24, 0x11	; 17
     2f8:	08 f0       	brcs	.+2      	; 0x2fc <getAverageUltrasonicValue+0xa>
     2fa:	30 e1       	ldi	r19, 0x10	; 16
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     2fc:	33 23       	and	r19, r19
     2fe:	a9 f1       	breq	.+106    	; 0x36a <getAverageUltrasonicValue+0x78>
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     304:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	cb 01       	movw	r24, r22
     30c:	a0 e1       	ldi	r26, 0x10	; 16
     30e:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
	{
		uint16_t aux;
		if(US_pos_in_buffer-i >= 0){ 
     310:	e0 91 08 01 	lds	r30, 0x0108
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	e4 1b       	sub	r30, r20
     318:	f5 0b       	sbc	r31, r21
     31a:	6a f0       	brmi	.+26     	; 0x336 <getAverageUltrasonicValue+0x44>
			aux = UltraSonicValues[US_pos_in_buffer-i];
     31c:	e0 91 08 01 	lds	r30, 0x0108
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	e4 1b       	sub	r30, r20
     324:	f5 0b       	sbc	r31, r21
     326:	ee 0f       	add	r30, r30
     328:	ff 1f       	adc	r31, r31
     32a:	e6 5e       	subi	r30, 0xE6	; 230
     32c:	fe 4f       	sbci	r31, 0xFE	; 254
     32e:	01 90       	ld	r0, Z+
     330:	f0 81       	ld	r31, Z
     332:	e0 2d       	mov	r30, r0
     334:	0e c0       	rjmp	.+28     	; 0x352 <getAverageUltrasonicValue+0x60>
		}else{// rap around
			aux = UltraSonicValues[MAX_ULTRASONIC_VALUES - i + US_pos_in_buffer];
     336:	c0 91 08 01 	lds	r28, 0x0108
     33a:	fd 01       	movw	r30, r26
     33c:	e4 1b       	sub	r30, r20
     33e:	f5 0b       	sbc	r31, r21
     340:	ec 0f       	add	r30, r28
     342:	f1 1d       	adc	r31, r1
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	e6 5e       	subi	r30, 0xE6	; 230
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	01 90       	ld	r0, Z+
     34e:	f0 81       	ld	r31, Z
     350:	e0 2d       	mov	r30, r0
		}
		
		averrage += aux;
     352:	6e 0f       	add	r22, r30
     354:	7f 1f       	adc	r23, r31
     356:	81 1d       	adc	r24, r1
     358:	91 1d       	adc	r25, r1
		
		if(aux){ // only if the value is nonzero
     35a:	ef 2b       	or	r30, r31
     35c:	09 f0       	breq	.+2      	; 0x360 <getAverageUltrasonicValue+0x6e>
			good_vals++;
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	4f 5f       	subi	r20, 0xFF	; 255
     362:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     364:	43 17       	cp	r20, r19
     366:	a0 f2       	brcs	.-88     	; 0x310 <getAverageUltrasonicValue+0x1e>
     368:	04 c0       	rjmp	.+8      	; 0x372 <getAverageUltrasonicValue+0x80>
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     36a:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	cb 01       	movw	r24, r22
			good_vals++;
		}
		
	}
	
	averrage /= good_vals; //it may be better to round it up to the nearest
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	0e 94 99 0a 	call	0x1532	; 0x1532 <__udivmodsi4>
	
	return averrage;
}
     37c:	c9 01       	movw	r24, r18
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	9c 01       	movw	r18, r24
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0;
     38c:	fa 01       	movw	r30, r20
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	e6 5e       	subi	r30, 0xE6	; 230
     394:	fe 4f       	sbci	r31, 0xFE	; 254
     396:	11 82       	std	Z+1, r1	; 0x01
     398:	10 82       	st	Z, r1
     39a:	4f 5f       	subi	r20, 0xFF	; 255
     39c:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     39e:	40 31       	cpi	r20, 0x10	; 16
     3a0:	51 05       	cpc	r21, r1
     3a2:	a1 f7       	brne	.-24     	; 0x38c <initUSART0+0xa>
		UltraSonicValues[i] = 0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     3a4:	10 92 4a 01 	sts	0x014A, r1
     3a8:	10 92 4b 01 	sts	0x014B, r1
     3ac:	10 92 4c 01 	sts	0x014C, r1
     3b0:	10 92 4d 01 	sts	0x014D, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     3b4:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     3b6:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     3b8:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     3ba:	c2 ec       	ldi	r28, 0xC2	; 194
     3bc:	d0 e0       	ldi	r29, 0x00	; 0
     3be:	88 81       	ld	r24, Y
     3c0:	8f 73       	andi	r24, 0x3F	; 63
     3c2:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     3c4:	e0 ec       	ldi	r30, 0xC0	; 192
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8d 7f       	andi	r24, 0xFD	; 253
     3cc:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     3ce:	c9 01       	movw	r24, r18
     3d0:	aa 27       	eor	r26, r26
     3d2:	97 fd       	sbrc	r25, 7
     3d4:	a0 95       	com	r26
     3d6:	ba 2f       	mov	r27, r26
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	aa 1f       	adc	r26, r26
     3de:	bb 1f       	adc	r27, r27
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	aa 1f       	adc	r26, r26
     3e6:	bb 1f       	adc	r27, r27
     3e8:	9c 01       	movw	r18, r24
     3ea:	ad 01       	movw	r20, r26
     3ec:	22 0f       	add	r18, r18
     3ee:	33 1f       	adc	r19, r19
     3f0:	44 1f       	adc	r20, r20
     3f2:	55 1f       	adc	r21, r21
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	44 1f       	adc	r20, r20
     3fa:	55 1f       	adc	r21, r21
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	72 e1       	ldi	r23, 0x12	; 18
     400:	8a e7       	ldi	r24, 0x7A	; 122
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__divmodsi4>
     408:	ca 01       	movw	r24, r20
     40a:	b9 01       	movw	r22, r18
     40c:	61 50       	subi	r22, 0x01	; 1
     40e:	71 09       	sbc	r23, r1
     410:	81 09       	sbc	r24, r1
     412:	91 09       	sbc	r25, r1
     414:	0e 94 1d 09 	call	0x123a	; 0x123a <__floatsisf>
     418:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     41c:	27 2f       	mov	r18, r23
     41e:	33 27       	eor	r19, r19
     420:	27 fd       	sbrc	r18, 7
     422:	3a 95       	dec	r19
     424:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     428:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     42c:	e1 ec       	ldi	r30, 0xC1	; 193
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 e1       	ldi	r24, 0x10	; 16
     432:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     434:	88 81       	ld	r24, Y
     436:	86 60       	ori	r24, 0x06	; 6
     438:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     43a:	80 81       	ld	r24, Z
     43c:	8b 7f       	andi	r24, 0xFB	; 251
     43e:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     440:	88 81       	ld	r24, Y
     442:	87 7f       	andi	r24, 0xF7	; 247
     444:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     446:	88 81       	ld	r24, Y
     448:	8f 7c       	andi	r24, 0xCF	; 207
     44a:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     44c:	80 81       	ld	r24, Z
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	80 83       	st	Z, r24
	
		
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <initADC>:

void  initADC(void)
{

	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC4D) | (1<<ADC5D) | (1<<ADC6D) | (1<<ADC7D) ;
     458:	ee e7       	ldi	r30, 0x7E	; 126
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	80 6f       	ori	r24, 0xF0	; 240
     460:	80 83       	st	Z, r24

	//set Vref to Vcc, va trebui sa fie referinta externa !!
	ADMUX |= (1<<REFS0);
     462:	ec e7       	ldi	r30, 0x7C	; 124
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     46c:	80 81       	ld	r24, Z
     46e:	8f 77       	andi	r24, 0x7F	; 127
     470:	80 83       	st	Z, r24
	
	//select ADC4
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     472:	80 81       	ld	r24, Z
     474:	80 7e       	andi	r24, 0xE0	; 224
     476:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX2);
     478:	80 81       	ld	r24, Z
     47a:	84 60       	ori	r24, 0x04	; 4
     47c:	80 83       	st	Z, r24
	
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     47e:	ea e7       	ldi	r30, 0x7A	; 122
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	88 60       	ori	r24, 0x08	; 8
     486:	80 83       	st	Z, r24
	
	
	//enable the ADC
	ADCSRA |= (1<<ADEN);
     488:	80 81       	ld	r24, Z
     48a:	80 68       	ori	r24, 0x80	; 128
     48c:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     48e:	80 81       	ld	r24, Z
     490:	87 60       	ori	r24, 0x07	; 7
     492:	80 83       	st	Z, r24
	//select free running mode
	//ADCSRB &= ~( (1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2) );


	//start conversion
	ADCSRA |= (1<<ADSC);
     494:	80 81       	ld	r24, Z
     496:	80 64       	ori	r24, 0x40	; 64
     498:	80 83       	st	Z, r24
     49a:	08 95       	ret

0000049c <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     49c:	0c 98       	cbi	0x01, 4	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     49e:	0d 98       	cbi	0x01, 5	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     4a0:	0e 98       	cbi	0x01, 6	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     4a2:	0f 98       	cbi	0x01, 7	; 1
	
	initADC();
     4a4:	0e 94 2c 02 	call	0x458	; 0x458 <initADC>
	initUSART0(9600);
     4a8:	80 e8       	ldi	r24, 0x80	; 128
     4aa:	95 e2       	ldi	r25, 0x25	; 37
     4ac:	0e 94 c1 01 	call	0x382	; 0x382 <initUSART0>
     4b0:	08 95       	ret

000004b2 <__vector_24>:
	//start conversion
	ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	2f 93       	push	r18
     4be:	3f 93       	push	r19
     4c0:	4f 93       	push	r20
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     4d8:	60 91 78 00 	lds	r22, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     4dc:	80 91 79 00 	lds	r24, 0x0079
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	78 2b       	or	r23, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     4e4:	60 31       	cpi	r22, 0x10	; 16
     4e6:	71 05       	cpc	r23, r1
     4e8:	10 f4       	brcc	.+4      	; 0x4ee <__vector_24+0x3c>
     4ea:	60 e1       	ldi	r22, 0x10	; 16
     4ec:	70 e0       	ldi	r23, 0x00	; 0
		distance = 30.0;
	}
	*/
		
		//dont forget to set IR_pos_in_buffer = 0 when changing the active sensor
		int pos_in_buff = (activeInfraredSensor * NO_OF_IR_SENSORS) + IR_pos_in_buffer; //(IR_pos_in_buffer&MAX_INFRARED_VALUES_MSK) 
     4ee:	80 91 0d 01 	lds	r24, 0x010D
     4f2:	c0 91 0c 01 	lds	r28, 0x010C
     4f6:	d0 e0       	ldi	r29, 0x00	; 0
     4f8:	94 e0       	ldi	r25, 0x04	; 4
     4fa:	89 9f       	mul	r24, r25
     4fc:	c0 0d       	add	r28, r0
     4fe:	d1 1d       	adc	r29, r1
     500:	11 24       	eor	r1, r1
		InfraredValues[pos_in_buff] = floor((2076.0 / (theTenBitResult - 11.0)) + 0.5);
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 1b 09 	call	0x1236	; 0x1236 <__floatunsisf>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e3       	ldi	r20, 0x30	; 48
     510:	51 e4       	ldi	r21, 0x41	; 65
     512:	0e 94 22 08 	call	0x1044	; 0x1044 <__subsf3>
     516:	9b 01       	movw	r18, r22
     518:	ac 01       	movw	r20, r24
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 ec       	ldi	r23, 0xC0	; 192
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	95 e4       	ldi	r25, 0x45	; 69
     522:	0e 94 87 08 	call	0x110e	; 0x110e <__divsf3>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	5f e3       	ldi	r21, 0x3F	; 63
     52e:	0e 94 23 08 	call	0x1046	; 0x1046 <__addsf3>
     532:	0e 94 58 09 	call	0x12b0	; 0x12b0 <floor>
     536:	0e 94 ef 08 	call	0x11de	; 0x11de <__fixunssfsi>
     53a:	fe 01       	movw	r30, r28
     53c:	e6 5c       	subi	r30, 0xC6	; 198
     53e:	fe 4f       	sbci	r31, 0xFE	; 254
     540:	60 83       	st	Z, r22
		
		//under lower limit
		if (InfraredValues[pos_in_buff] < 4)
     542:	80 81       	ld	r24, Z
     544:	84 30       	cpi	r24, 0x04	; 4
     546:	28 f4       	brcc	.+10     	; 0x552 <__vector_24+0xa0>
		{
			InfraredValues[pos_in_buff] = 4;
     548:	84 e0       	ldi	r24, 0x04	; 4
     54a:	fe 01       	movw	r30, r28
     54c:	e6 5c       	subi	r30, 0xC6	; 198
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
     550:	80 83       	st	Z, r24
		}
		
		//above upper limit
		if (InfraredValues[pos_in_buff] > 30)
     552:	fe 01       	movw	r30, r28
     554:	e6 5c       	subi	r30, 0xC6	; 198
     556:	fe 4f       	sbci	r31, 0xFE	; 254
     558:	80 81       	ld	r24, Z
     55a:	8f 31       	cpi	r24, 0x1F	; 31
     55c:	10 f0       	brcs	.+4      	; 0x562 <__vector_24+0xb0>
		{
			
			InfraredValues[pos_in_buff] = 30;
     55e:	8e e1       	ldi	r24, 0x1E	; 30
     560:	80 83       	st	Z, r24
		}
	
	
	IR_pos_in_buffer++;
     562:	80 91 0c 01 	lds	r24, 0x010C
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	80 93 0c 01 	sts	0x010C, r24
	
	if (IR_pos_in_buffer == MAX_INFRARED_VALUES)
     56c:	80 91 0c 01 	lds	r24, 0x010C
     570:	84 30       	cpi	r24, 0x04	; 4
     572:	39 f4       	brne	.+14     	; 0x582 <__vector_24+0xd0>
	{
		IR_pos_in_buffer = 0;
     574:	10 92 0c 01 	sts	0x010C, r1
		activeInfraredSensor++;
     578:	80 91 0d 01 	lds	r24, 0x010D
     57c:	8f 5f       	subi	r24, 0xFF	; 255
     57e:	80 93 0d 01 	sts	0x010D, r24
	}
	
	if (activeInfraredSensor == NO_OF_IR_SENSORS)
     582:	80 91 0d 01 	lds	r24, 0x010D
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	11 f4       	brne	.+4      	; 0x58e <__vector_24+0xdc>
	{
		activeInfraredSensor = 0;
     58a:	10 92 0d 01 	sts	0x010D, r1
	}
	
	//if the sensors are connected starting with pin 4, then add 4 as a offset
	
	//clear the MUX bits first
	ADMUX &= 0xF0;
     58e:	ec e7       	ldi	r30, 0x7C	; 124
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	80 7f       	andi	r24, 0xF0	; 240
     596:	80 83       	st	Z, r24
	
	
	//select the sensor
	ADMUX |= activeInfraredSensor + 4; //+offset
     598:	90 81       	ld	r25, Z
     59a:	80 91 0d 01 	lds	r24, 0x010D
     59e:	8c 5f       	subi	r24, 0xFC	; 252
     5a0:	89 2b       	or	r24, r25
     5a2:	80 83       	st	Z, r24
	
	//start a new conversion
	ADCSRA |= 1<<ADSC;
     5a4:	ea e7       	ldi	r30, 0x7A	; 122
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	80 64       	ori	r24, 0x40	; 64
     5ac:	80 83       	st	Z, r24
}
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	bf 91       	pop	r27
     5b8:	af 91       	pop	r26
     5ba:	9f 91       	pop	r25
     5bc:	8f 91       	pop	r24
     5be:	7f 91       	pop	r23
     5c0:	6f 91       	pop	r22
     5c2:	5f 91       	pop	r21
     5c4:	4f 91       	pop	r20
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <__vector_20>:

ISR(USART0_RX_vect){
     5d4:	1f 92       	push	r1
     5d6:	0f 92       	push	r0
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	0f 92       	push	r0
     5dc:	11 24       	eor	r1, r1
     5de:	4f 92       	push	r4
     5e0:	5f 92       	push	r5
     5e2:	7f 92       	push	r7
     5e4:	8f 92       	push	r8
     5e6:	9f 92       	push	r9
     5e8:	af 92       	push	r10
     5ea:	bf 92       	push	r11
     5ec:	cf 92       	push	r12
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	1f 93       	push	r17
     5f4:	2f 93       	push	r18
     5f6:	3f 93       	push	r19
     5f8:	4f 93       	push	r20
     5fa:	5f 93       	push	r21
     5fc:	6f 93       	push	r22
     5fe:	7f 93       	push	r23
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ef 93       	push	r30
     60e:	ff 93       	push	r31


	uint8_t data;
	data = UDR0;
     610:	10 91 c6 00 	lds	r17, 0x00C6
	
	if(data == 0x52){ //start of data
     614:	12 35       	cpi	r17, 0x52	; 82
     616:	39 f4       	brne	.+14     	; 0x626 <__vector_20+0x52>
		ultrasonicDataPack[0] = 'R';
     618:	82 e5       	ldi	r24, 0x52	; 82
     61a:	80 93 4a 01 	sts	0x014A, r24
		US_data_part_no=1;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 09 01 	sts	0x0109, r24
     624:	a5 c0       	rjmp	.+330    	; 0x770 <__vector_20+0x19c>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     626:	80 91 4a 01 	lds	r24, 0x014A
     62a:	82 35       	cpi	r24, 0x52	; 82
     62c:	09 f0       	breq	.+2      	; 0x630 <__vector_20+0x5c>
     62e:	7c c0       	rjmp	.+248    	; 0x728 <__vector_20+0x154>
     630:	80 91 09 01 	lds	r24, 0x0109
     634:	84 30       	cpi	r24, 0x04	; 4
     636:	09 f0       	breq	.+2      	; 0x63a <__vector_20+0x66>
     638:	77 c0       	rjmp	.+238    	; 0x728 <__vector_20+0x154>
     63a:	1d 30       	cpi	r17, 0x0D	; 13
     63c:	09 f0       	breq	.+2      	; 0x640 <__vector_20+0x6c>
     63e:	74 c0       	rjmp	.+232    	; 0x728 <__vector_20+0x154>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     640:	0f 2e       	mov	r0, r31
     642:	fb e4       	ldi	r31, 0x4B	; 75
     644:	ef 2e       	mov	r14, r31
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	ff 2e       	mov	r15, r31
     64a:	f0 2d       	mov	r31, r0
     64c:	f7 01       	movw	r30, r14
     64e:	60 81       	ld	r22, Z
     650:	0f 2e       	mov	r0, r31
     652:	fc e4       	ldi	r31, 0x4C	; 76
     654:	4f 2e       	mov	r4, r31
     656:	f1 e0       	ldi	r31, 0x01	; 1
     658:	5f 2e       	mov	r5, r31
     65a:	f0 2d       	mov	r31, r0
     65c:	f2 01       	movw	r30, r4
     65e:	70 80       	ld	r7, Z
     660:	cd e4       	ldi	r28, 0x4D	; 77
     662:	d1 e0       	ldi	r29, 0x01	; 1
     664:	c8 80       	ld	r12, Y
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 1d 09 	call	0x123a	; 0x123a <__floatsisf>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	48 ec       	ldi	r20, 0xC8	; 200
     676:	52 e4       	ldi	r21, 0x42	; 66
     678:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     67c:	4b 01       	movw	r8, r22
     67e:	5c 01       	movw	r10, r24
     680:	67 2d       	mov	r22, r7
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 1d 09 	call	0x123a	; 0x123a <__floatsisf>
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 e2       	ldi	r20, 0x20	; 32
     692:	51 e4       	ldi	r21, 0x41	; 65
     694:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
     698:	9b 01       	movw	r18, r22
     69a:	ac 01       	movw	r20, r24
     69c:	c5 01       	movw	r24, r10
     69e:	b4 01       	movw	r22, r8
     6a0:	0e 94 23 08 	call	0x1046	; 0x1046 <__addsf3>
     6a4:	4b 01       	movw	r8, r22
     6a6:	5c 01       	movw	r10, r24
     6a8:	6c 2d       	mov	r22, r12
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 1d 09 	call	0x123a	; 0x123a <__floatsisf>
     6b4:	9b 01       	movw	r18, r22
     6b6:	ac 01       	movw	r20, r24
     6b8:	c5 01       	movw	r24, r10
     6ba:	b4 01       	movw	r22, r8
     6bc:	0e 94 23 08 	call	0x1046	; 0x1046 <__addsf3>
			//transform from inch to mm
			val *= 25.4;
     6c0:	23 e3       	ldi	r18, 0x33	; 51
     6c2:	33 e3       	ldi	r19, 0x33	; 51
     6c4:	4b ec       	ldi	r20, 0xCB	; 203
     6c6:	51 e4       	ldi	r21, 0x41	; 65
     6c8:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3>
			uint16_t mm = floor(val+0.5); // round to the nearest
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	5f e3       	ldi	r21, 0x3F	; 63
     6d4:	0e 94 23 08 	call	0x1046	; 0x1046 <__addsf3>
     6d8:	0e 94 58 09 	call	0x12b0	; 0x12b0 <floor>
     6dc:	0e 94 ef 08 	call	0x11de	; 0x11de <__fixunssfsi>
			UltraSonicValues[US_pos_in_buffer] = mm; 
     6e0:	e0 91 08 01 	lds	r30, 0x0108
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	e6 5e       	subi	r30, 0xE6	; 230
     6ec:	fe 4f       	sbci	r31, 0xFE	; 254
     6ee:	71 83       	std	Z+1, r23	; 0x01
     6f0:	60 83       	st	Z, r22
			lastUSonicValue = mm;
     6f2:	70 93 0b 01 	sts	0x010B, r23
     6f6:	60 93 0a 01 	sts	0x010A, r22
			US_pos_in_buffer++;
     6fa:	80 91 08 01 	lds	r24, 0x0108
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	80 93 08 01 	sts	0x0108, r24

			US_pos_in_buffer &= MAX_ULTRASONIC_VALUES_MSK;
     704:	80 91 08 01 	lds	r24, 0x0108
     708:	8f 70       	andi	r24, 0x0F	; 15
     70a:	80 93 08 01 	sts	0x0108, r24
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     70e:	10 92 4a 01 	sts	0x014A, r1
     712:	f7 01       	movw	r30, r14
     714:	10 82       	st	Z, r1
     716:	f2 01       	movw	r30, r4
     718:	10 82       	st	Z, r1
     71a:	18 82       	st	Y, r1
				}
				US_data_part_no=0;
     71c:	10 92 09 01 	sts	0x0109, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     720:	80 91 07 01 	lds	r24, 0x0107
     724:	81 11       	cpse	r24, r1
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     726:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     728:	80 91 09 01 	lds	r24, 0x0109
     72c:	84 30       	cpi	r24, 0x04	; 4
     72e:	50 f0       	brcs	.+20     	; 0x744 <__vector_20+0x170>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     730:	10 92 4a 01 	sts	0x014A, r1
     734:	10 92 4b 01 	sts	0x014B, r1
     738:	10 92 4c 01 	sts	0x014C, r1
     73c:	10 92 4d 01 	sts	0x014D, r1
			}
			US_data_part_no=0;
     740:	10 92 09 01 	sts	0x0109, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     744:	80 91 4a 01 	lds	r24, 0x014A
     748:	82 35       	cpi	r24, 0x52	; 82
     74a:	91 f4       	brne	.+36     	; 0x770 <__vector_20+0x19c>
			if (isdigit(data))
     74c:	81 2f       	mov	r24, r17
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	c0 97       	sbiw	r24, 0x30	; 48
     752:	0a 97       	sbiw	r24, 0x0a	; 10
     754:	68 f4       	brcc	.+26     	; 0x770 <__vector_20+0x19c>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     756:	e0 91 09 01 	lds	r30, 0x0109
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 ed       	ldi	r24, 0xD0	; 208
     75e:	81 0f       	add	r24, r17
     760:	e6 5b       	subi	r30, 0xB6	; 182
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	80 83       	st	Z, r24
				US_data_part_no++;
     766:	80 91 09 01 	lds	r24, 0x0109
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 09 01 	sts	0x0109, r24
			
		}
				
	}

}
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	bf 91       	pop	r27
     77a:	af 91       	pop	r26
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	7f 91       	pop	r23
     782:	6f 91       	pop	r22
     784:	5f 91       	pop	r21
     786:	4f 91       	pop	r20
     788:	3f 91       	pop	r19
     78a:	2f 91       	pop	r18
     78c:	1f 91       	pop	r17
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	9f 90       	pop	r9
     79a:	8f 90       	pop	r8
     79c:	7f 90       	pop	r7
     79e:	5f 90       	pop	r5
     7a0:	4f 90       	pop	r4
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <checkPackIsFullLength>:
}

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
     7ac:	28 2f       	mov	r18, r24
     7ae:	2f 77       	andi	r18, 0x7F	; 127
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	f9 01       	movw	r30, r18
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	e2 5b       	subi	r30, 0xB2	; 178
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	9f 3f       	cpi	r25, 0xFF	; 255
     7c0:	b1 f1       	breq	.+108    	; 0x82e <checkPackIsFullLength+0x82>
		return 0;
		}else{
		pc_no = rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no;
     7c2:	f9 01       	movw	r30, r18
     7c4:	ee 0f       	add	r30, r30
     7c6:	ff 1f       	adc	r31, r31
     7c8:	e2 5b       	subi	r30, 0xB2	; 178
     7ca:	fe 4f       	sbci	r31, 0xFE	; 254
     7cc:	61 81       	ldd	r22, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	41 81       	ldd	r20, Z+1	; 0x01
     7d2:	4f 3f       	cpi	r20, 0xFF	; 255
     7d4:	71 f1       	breq	.+92     	; 0x832 <checkPackIsFullLength+0x86>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     7d6:	f9 01       	movw	r30, r18
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	e2 5b       	subi	r30, 0xB2	; 178
     7de:	fe 4f       	sbci	r31, 0xFE	; 254
     7e0:	41 81       	ldd	r20, Z+1	; 0x01
     7e2:	55 27       	eor	r21, r21
     7e4:	47 fd       	sbrc	r20, 7
     7e6:	50 95       	com	r21
     7e8:	26 2f       	mov	r18, r22
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	42 17       	cp	r20, r18
     7ee:	53 07       	cpc	r21, r19
     7f0:	11 f5       	brne	.+68     	; 0x836 <checkPackIsFullLength+0x8a>
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	66 e0       	ldi	r22, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
     7f6:	9c 01       	movw	r18, r24
     7f8:	2f 77       	andi	r18, 0x7F	; 127
     7fa:	33 27       	eor	r19, r19
     7fc:	f9 01       	movw	r30, r18
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	e2 5b       	subi	r30, 0xB2	; 178
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	71 81       	ldd	r23, Z+1	; 0x01
     808:	7f 3f       	cpi	r23, 0xFF	; 255
     80a:	b9 f0       	breq	.+46     	; 0x83a <checkPackIsFullLength+0x8e>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     80c:	f9 01       	movw	r30, r18
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	e2 5b       	subi	r30, 0xB2	; 178
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	21 81       	ldd	r18, Z+1	; 0x01
     818:	33 27       	eor	r19, r19
     81a:	27 fd       	sbrc	r18, 7
     81c:	30 95       	com	r19
     81e:	24 17       	cp	r18, r20
     820:	35 07       	cpc	r19, r21
     822:	69 f4       	brne	.+26     	; 0x83e <checkPackIsFullLength+0x92>
     824:	61 50       	subi	r22, 0x01	; 1
     826:	01 96       	adiw	r24, 0x01	; 1
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     828:	61 11       	cpse	r22, r1
     82a:	e5 cf       	rjmp	.-54     	; 0x7f6 <checkPackIsFullLength+0x4a>
     82c:	0a c0       	rjmp	.+20     	; 0x842 <checkPackIsFullLength+0x96>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
		return 0;
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	08 95       	ret
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
			return 0;
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	08 95       	ret
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	08 95       	ret
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 95       	ret
		}
	}
	return 1;
     842:	81 e0       	ldi	r24, 0x01	; 1
}
     844:	08 95       	ret

00000846 <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	27 97       	sbiw	r28, 0x07	; 7
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
	
	
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
     866:	e0 91 11 01 	lds	r30, 0x0111
     86a:	ef 77       	andi	r30, 0x7F	; 127
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	e2 5b       	subi	r30, 0xB2	; 178
     874:	fe 4f       	sbci	r31, 0xFE	; 254
     876:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
     878:	e0 91 11 01 	lds	r30, 0x0111
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	31 96       	adiw	r30, 0x01	; 1
     880:	ef 77       	andi	r30, 0x7F	; 127
     882:	ff 27       	eor	r31, r31
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	e2 5b       	subi	r30, 0xB2	; 178
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	30 81       	ld	r19, Z
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
     88e:	e0 91 11 01 	lds	r30, 0x0111
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	32 96       	adiw	r30, 0x02	; 2
     896:	ef 77       	andi	r30, 0x7F	; 127
     898:	ff 27       	eor	r31, r31
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	e2 5b       	subi	r30, 0xB2	; 178
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	40 81       	ld	r20, Z
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     8a4:	e0 91 11 01 	lds	r30, 0x0111
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	33 96       	adiw	r30, 0x03	; 3
     8ac:	ef 77       	andi	r30, 0x7F	; 127
     8ae:	ff 27       	eor	r31, r31
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	e2 5b       	subi	r30, 0xB2	; 178
     8b6:	fe 4f       	sbci	r31, 0xFE	; 254
     8b8:	80 81       	ld	r24, Z
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     8ba:	e0 91 11 01 	lds	r30, 0x0111
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	34 96       	adiw	r30, 0x04	; 4
     8c2:	ef 77       	andi	r30, 0x7F	; 127
     8c4:	ff 27       	eor	r31, r31
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	e2 5b       	subi	r30, 0xB2	; 178
     8cc:	fe 4f       	sbci	r31, 0xFE	; 254
     8ce:	e0 80       	ld	r14, Z
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     8d0:	f1 2c       	mov	r15, r1
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     8d2:	f8 2a       	or	r15, r24
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     8d4:	e0 91 11 01 	lds	r30, 0x0111
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	35 96       	adiw	r30, 0x05	; 5
     8dc:	ef 77       	andi	r30, 0x7F	; 127
     8de:	ff 27       	eor	r31, r31
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e2 5b       	subi	r30, 0xB2	; 178
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	80 81       	ld	r24, Z
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     8ea:	e0 91 11 01 	lds	r30, 0x0111
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	36 96       	adiw	r30, 0x06	; 6
     8f2:	ef 77       	andi	r30, 0x7F	; 127
     8f4:	ff 27       	eor	r31, r31
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	e2 5b       	subi	r30, 0xB2	; 178
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
     8fe:	00 81       	ld	r16, Z
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     900:	10 e0       	ldi	r17, 0x00	; 0
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     902:	18 2b       	or	r17, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0


	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
     908:	ef ef       	ldi	r30, 0xFF	; 255
     90a:	ff ef       	ldi	r31, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     90c:	5f ef       	ldi	r21, 0xFF	; 255

	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
     90e:	a0 91 11 01 	lds	r26, 0x0111
     912:	6c 01       	movw	r12, r24
     914:	ca 0e       	add	r12, r26
     916:	d1 1c       	adc	r13, r1
     918:	d6 01       	movw	r26, r12
     91a:	af 77       	andi	r26, 0x7F	; 127
     91c:	bb 27       	eor	r27, r27
     91e:	aa 0f       	add	r26, r26
     920:	bb 1f       	adc	r27, r27
     922:	a2 5b       	subi	r26, 0xB2	; 178
     924:	be 4f       	sbci	r27, 0xFE	; 254
     926:	ac 91       	ld	r26, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     928:	ea 27       	eor	r30, r26
     92a:	ae 2f       	mov	r26, r30
     92c:	a2 95       	swap	r26
     92e:	ae 27       	eor	r26, r30
     930:	0a 2e       	mov	r0, r26
     932:	a6 95       	lsr	r26
     934:	a6 95       	lsr	r26
     936:	a0 25       	eor	r26, r0
     938:	0a 2e       	mov	r0, r26
     93a:	a6 95       	lsr	r26
     93c:	a0 25       	eor	r26, r0
     93e:	a7 70       	andi	r26, 0x07	; 7
     940:	0e 2e       	mov	r0, r30
     942:	ef 2f       	mov	r30, r31
     944:	a6 95       	lsr	r26
     946:	07 94       	ror	r0
     948:	a7 95       	ror	r26
     94a:	f0 2d       	mov	r31, r0
     94c:	ea 27       	eor	r30, r26
     94e:	06 94       	lsr	r0
     950:	a7 95       	ror	r26
     952:	f0 25       	eor	r31, r0
     954:	ea 27       	eor	r30, r26
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
     956:	a0 91 11 01 	lds	r26, 0x0111
     95a:	6c 01       	movw	r12, r24
     95c:	ca 0e       	add	r12, r26
     95e:	d1 1c       	adc	r13, r1
     960:	d6 01       	movw	r26, r12
     962:	af 77       	andi	r26, 0x7F	; 127
     964:	bb 27       	eor	r27, r27
     966:	aa 0f       	add	r26, r26
     968:	bb 1f       	adc	r27, r27
     96a:	a2 5b       	subi	r26, 0xB2	; 178
     96c:	be 4f       	sbci	r27, 0xFE	; 254
     96e:	11 96       	adiw	r26, 0x01	; 1
     970:	5c 93       	st	X, r21
     972:	01 96       	adiw	r24, 0x01	; 1


	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     974:	87 30       	cpi	r24, 0x07	; 7
     976:	91 05       	cpc	r25, r1
     978:	09 f0       	breq	.+2      	; 0x97c <__stack+0x7d>
     97a:	c9 cf       	rjmp	.-110    	; 0x90e <__stack+0xf>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1;
	}
	
	if (crc == 0){
     97c:	ef 2b       	or	r30, r31
     97e:	21 f4       	brne	.+8      	; 0x988 <__stack+0x89>
		*CRC_correct = 1;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	fb 01       	movw	r30, r22
     984:	80 83       	st	Z, r24
     986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x8d>
		}else{
		*CRC_correct = 0;
     988:	fb 01       	movw	r30, r22
     98a:	10 82       	st	Z, r1
	}
	
	return comm;
     98c:	fd 82       	std	Y+5, r15	; 0x05
     98e:	ec 82       	std	Y+4, r14	; 0x04
     990:	1f 83       	std	Y+7, r17	; 0x07
     992:	0e 83       	std	Y+6, r16	; 0x06
     994:	5e 2d       	mov	r21, r14
     996:	6d 81       	ldd	r22, Y+5	; 0x05
     998:	70 2f       	mov	r23, r16
}
     99a:	8f 81       	ldd	r24, Y+7	; 0x07
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	27 96       	adiw	r28, 0x07	; 7
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	08 95       	ret

000009bc <__clearBuffers>:
	}
	
}

void __clearBuffers(){
	for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
		rxBuffer[i].pack_no =-1;
     9c0:	2f ef       	ldi	r18, 0xFF	; 255
     9c2:	fc 01       	movw	r30, r24
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	df 01       	movw	r26, r30
     9ca:	a2 5b       	subi	r26, 0xB2	; 178
     9cc:	be 4f       	sbci	r27, 0xFE	; 254
     9ce:	11 96       	adiw	r26, 0x01	; 1
     9d0:	2c 93       	st	X, r18
		txBuffer[i].pack_no =-1;
     9d2:	e2 5b       	subi	r30, 0xB2	; 178
     9d4:	fd 4f       	sbci	r31, 0xFD	; 253
     9d6:	21 83       	std	Z+1, r18	; 0x01
		txBuffer[i].data =0;
     9d8:	10 82       	st	Z, r1
	}
	
}

void __clearBuffers(){
	for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	80 38       	cpi	r24, 0x80	; 128
     9de:	91 05       	cpc	r25, r1
     9e0:	81 f7       	brne	.-32     	; 0x9c2 <__clearBuffers+0x6>
		rxBuffer[i].pack_no =-1;
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}
	txWritePos = 0;
     9e2:	10 92 0e 01 	sts	0x010E, r1
	txReadPos = 0;
     9e6:	10 92 0f 01 	sts	0x010F, r1
	rxReadPos = 0;
     9ea:	10 92 15 01 	sts	0x0115, r1
	rxWritePos = 0;
     9ee:	10 92 14 01 	sts	0x0114, r1
	lastCommandHeader = 0;
     9f2:	10 92 10 01 	sts	0x0110, r1
	lastPackNo = 0;
     9f6:	10 92 12 01 	sts	0x0112, r1
	lastPackPosInBuff = 0;
     9fa:	10 92 11 01 	sts	0x0111, r1
	packStarted = 0;
     9fe:	10 92 13 01 	sts	0x0113, r1
     a02:	08 95       	ret

00000a04 <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	8c 01       	movw	r16, r24
	
	///TEST////
	txBuffer[i].pack_no =-1;
	txBuffer[i].data =0;
	}*/
	__clearBuffers();
     a0e:	0e 94 de 04 	call	0x9bc	; 0x9bc <__clearBuffers>
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
     a12:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
     a14:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
     a16:	ca ec       	ldi	r28, 0xCA	; 202
     a18:	d0 e0       	ldi	r29, 0x00	; 0
     a1a:	88 81       	ld	r24, Y
     a1c:	8f 73       	andi	r24, 0x3F	; 63
     a1e:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
     a20:	e8 ec       	ldi	r30, 0xC8	; 200
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	8d 7f       	andi	r24, 0xFD	; 253
     a28:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     a2a:	c8 01       	movw	r24, r16
     a2c:	aa 27       	eor	r26, r26
     a2e:	97 fd       	sbrc	r25, 7
     a30:	a0 95       	com	r26
     a32:	ba 2f       	mov	r27, r26
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	aa 1f       	adc	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	aa 1f       	adc	r26, r26
     a42:	bb 1f       	adc	r27, r27
     a44:	9c 01       	movw	r18, r24
     a46:	ad 01       	movw	r20, r26
     a48:	22 0f       	add	r18, r18
     a4a:	33 1f       	adc	r19, r19
     a4c:	44 1f       	adc	r20, r20
     a4e:	55 1f       	adc	r21, r21
     a50:	22 0f       	add	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	44 1f       	adc	r20, r20
     a56:	55 1f       	adc	r21, r21
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	72 e1       	ldi	r23, 0x12	; 18
     a5c:	8a e7       	ldi	r24, 0x7A	; 122
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__divmodsi4>
     a64:	ca 01       	movw	r24, r20
     a66:	b9 01       	movw	r22, r18
     a68:	61 50       	subi	r22, 0x01	; 1
     a6a:	71 09       	sbc	r23, r1
     a6c:	81 09       	sbc	r24, r1
     a6e:	91 09       	sbc	r25, r1
     a70:	0e 94 1d 09 	call	0x123a	; 0x123a <__floatsisf>
     a74:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
     a78:	27 2f       	mov	r18, r23
     a7a:	33 27       	eor	r19, r19
     a7c:	27 fd       	sbrc	r18, 7
     a7e:	3a 95       	dec	r19
     a80:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
     a84:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     a88:	e9 ec       	ldi	r30, 0xC9	; 201
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	88 e1       	ldi	r24, 0x18	; 24
     a8e:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
     a90:	88 81       	ld	r24, Y
     a92:	86 60       	ori	r24, 0x06	; 6
     a94:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
     a96:	80 81       	ld	r24, Z
     a98:	8b 7f       	andi	r24, 0xFB	; 251
     a9a:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
     a9c:	88 81       	ld	r24, Y
     a9e:	87 7f       	andi	r24, 0xF7	; 247
     aa0:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
     aa2:	88 81       	ld	r24, Y
     aa4:	8f 7c       	andi	r24, 0xCF	; 207
     aa6:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
     aa8:	80 81       	ld	r24, Z
     aaa:	80 68       	ori	r24, 0x80	; 128
     aac:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
     aae:	80 81       	ld	r24, Z
     ab0:	80 64       	ori	r24, 0x40	; 64
     ab2:	80 83       	st	Z, r24
	
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret

00000abe <__tryToSend>:
	packStarted = 0;
}

//this is used to send data so that USART1_TX_vect can be triggered
void __tryToSend(){
	if (UCSR1A & (1<<UDRE1)) //if data register is empty send a byte
     abe:	80 91 c8 00 	lds	r24, 0x00C8
     ac2:	85 ff       	sbrs	r24, 5
     ac4:	31 c0       	rjmp	.+98     	; 0xb28 <__tryToSend+0x6a>
	{
		cli();
     ac6:	f8 94       	cli
		if(txBuffer[txReadPos].pack_no != -1){
     ac8:	e0 91 0f 01 	lds	r30, 0x010F
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	e2 5b       	subi	r30, 0xB2	; 178
     ad4:	fd 4f       	sbci	r31, 0xFD	; 253
     ad6:	81 81       	ldd	r24, Z+1	; 0x01
     ad8:	8f 3f       	cpi	r24, 0xFF	; 255
     ada:	29 f1       	breq	.+74     	; 0xb26 <__tryToSend+0x68>
			UDR1 = txBuffer[txReadPos].data;
     adc:	e0 91 0f 01 	lds	r30, 0x010F
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	e2 5b       	subi	r30, 0xB2	; 178
     ae8:	fd 4f       	sbci	r31, 0xFD	; 253
     aea:	80 81       	ld	r24, Z
     aec:	80 93 ce 00 	sts	0x00CE, r24
			txBuffer[txReadPos].pack_no = -1;
     af0:	e0 91 0f 01 	lds	r30, 0x010F
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	e2 5b       	subi	r30, 0xB2	; 178
     afc:	fd 4f       	sbci	r31, 0xFD	; 253
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	81 83       	std	Z+1, r24	; 0x01
			txBuffer[txReadPos].data = 0;
     b02:	e0 91 0f 01 	lds	r30, 0x010F
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	e2 5b       	subi	r30, 0xB2	; 178
     b0e:	fd 4f       	sbci	r31, 0xFD	; 253
     b10:	10 82       	st	Z, r1
			txReadPos++;
     b12:	80 91 0f 01 	lds	r24, 0x010F
     b16:	8f 5f       	subi	r24, 0xFF	; 255
     b18:	80 93 0f 01 	sts	0x010F, r24
			txReadPos &= TX_BUFFER_SIZE_MSK;
     b1c:	80 91 0f 01 	lds	r24, 0x010F
     b20:	8f 77       	andi	r24, 0x7F	; 127
     b22:	80 93 0f 01 	sts	0x010F, r24
			if(txReadPos >= TX_BUFFER_SIZE){
			txReadPos=0;
			}
			*/
		}
		sei();
     b26:	78 94       	sei
     b28:	08 95       	ret

00000b2a <sendResponse>:
	}
	
	return comm;
}

void sendResponse(response r){
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	29 97       	sbiw	r28, 0x09	; 9
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	09 83       	std	Y+1, r16	; 0x01
     b44:	1a 83       	std	Y+2, r17	; 0x02
     b46:	2b 83       	std	Y+3, r18	; 0x03
     b48:	3c 83       	std	Y+4, r19	; 0x04
     b4a:	4d 83       	std	Y+5, r20	; 0x05
     b4c:	5e 83       	std	Y+6, r21	; 0x06
     b4e:	6f 83       	std	Y+7, r22	; 0x07
     b50:	97 2f       	mov	r25, r23
     b52:	78 87       	std	Y+8, r23	; 0x08
     b54:	89 87       	std	Y+9, r24	; 0x09
	
	int8_t header = r.header;
	uint16_t i = txWritePos;
     b56:	e0 91 0e 01 	lds	r30, 0x010E
     b5a:	4e 2f       	mov	r20, r30
     b5c:	50 e0       	ldi	r21, 0x00	; 0
	
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = header;
     b5e:	ef 77       	andi	r30, 0x7F	; 127
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	ee 0f       	add	r30, r30
     b64:	ff 1f       	adc	r31, r31
     b66:	e2 5b       	subi	r30, 0xB2	; 178
     b68:	fd 4f       	sbci	r31, 0xFD	; 253
     b6a:	00 83       	st	Z, r16
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     b6c:	01 83       	std	Z+1, r16	; 0x01
	i++;
     b6e:	fa 01       	movw	r30, r20
     b70:	31 96       	adiw	r30, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
     b72:	ef 77       	andi	r30, 0x7F	; 127
     b74:	ff 27       	eor	r31, r31
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	e2 5b       	subi	r30, 0xB2	; 178
     b7c:	fd 4f       	sbci	r31, 0xFD	; 253
     b7e:	26 e0       	ldi	r18, 0x06	; 6
     b80:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     b82:	01 83       	std	Z+1, r16	; 0x01
	i++;
     b84:	9a 01       	movw	r18, r20
     b86:	2e 5f       	subi	r18, 0xFE	; 254
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	fe 01       	movw	r30, r28
     b8c:	32 96       	adiw	r30, 0x02	; 2
     b8e:	be 01       	movw	r22, r28
     b90:	68 5f       	subi	r22, 0xF8	; 248
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
     b94:	d9 01       	movw	r26, r18
     b96:	af 77       	andi	r26, 0x7F	; 127
     b98:	bb 27       	eor	r27, r27
     b9a:	11 91       	ld	r17, Z+
     b9c:	aa 0f       	add	r26, r26
     b9e:	bb 1f       	adc	r27, r27
     ba0:	a2 5b       	subi	r26, 0xB2	; 178
     ba2:	bd 4f       	sbci	r27, 0xFD	; 253
     ba4:	1c 93       	st	X, r17
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	0c 93       	st	X, r16
		i++;
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
	i++;
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
     bae:	e6 17       	cp	r30, r22
     bb0:	f7 07       	cpc	r31, r23
     bb2:	81 f7       	brne	.-32     	; 0xb94 <sendResponse+0x6a>
     bb4:	fa 01       	movw	r30, r20
     bb6:	38 96       	adiw	r30, 0x08	; 8
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
		i++;
	}
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time >> 8); // first 8 bits
     bb8:	ef 77       	andi	r30, 0x7F	; 127
     bba:	ff 27       	eor	r31, r31
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	e2 5b       	subi	r30, 0xB2	; 178
     bc2:	fd 4f       	sbci	r31, 0xFD	; 253
     bc4:	80 83       	st	Z, r24
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     bc6:	01 83       	std	Z+1, r16	; 0x01
	i++;
     bc8:	fa 01       	movw	r30, r20
     bca:	39 96       	adiw	r30, 0x09	; 9
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time & 0xFF); // next 8 bits
     bcc:	ef 77       	andi	r30, 0x7F	; 127
     bce:	ff 27       	eor	r31, r31
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	e2 5b       	subi	r30, 0xB2	; 178
     bd6:	fd 4f       	sbci	r31, 0xFD	; 253
     bd8:	90 83       	st	Z, r25
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     bda:	01 83       	std	Z+1, r16	; 0x01
	i++;
     bdc:	ba 01       	movw	r22, r20
     bde:	66 5f       	subi	r22, 0xF6	; 246
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
     be6:	2f ef       	ldi	r18, 0xFF	; 255
     be8:	3f ef       	ldi	r19, 0xFF	; 255
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
     bea:	e0 91 0e 01 	lds	r30, 0x010E
     bee:	dc 01       	movw	r26, r24
     bf0:	ae 0f       	add	r26, r30
     bf2:	b1 1d       	adc	r27, r1
     bf4:	fd 01       	movw	r30, r26
     bf6:	ef 77       	andi	r30, 0x7F	; 127
     bf8:	ff 27       	eor	r31, r31
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	e2 5b       	subi	r30, 0xB2	; 178
     c00:	fd 4f       	sbci	r31, 0xFD	; 253
     c02:	e0 81       	ld	r30, Z
     c04:	2e 27       	eor	r18, r30
     c06:	e2 2f       	mov	r30, r18
     c08:	e2 95       	swap	r30
     c0a:	e2 27       	eor	r30, r18
     c0c:	0e 2e       	mov	r0, r30
     c0e:	e6 95       	lsr	r30
     c10:	e6 95       	lsr	r30
     c12:	e0 25       	eor	r30, r0
     c14:	0e 2e       	mov	r0, r30
     c16:	e6 95       	lsr	r30
     c18:	e0 25       	eor	r30, r0
     c1a:	e7 70       	andi	r30, 0x07	; 7
     c1c:	02 2e       	mov	r0, r18
     c1e:	23 2f       	mov	r18, r19
     c20:	e6 95       	lsr	r30
     c22:	07 94       	ror	r0
     c24:	e7 95       	ror	r30
     c26:	30 2d       	mov	r19, r0
     c28:	2e 27       	eor	r18, r30
     c2a:	06 94       	lsr	r0
     c2c:	e7 95       	ror	r30
     c2e:	30 25       	eor	r19, r0
     c30:	2e 27       	eor	r18, r30
     c32:	01 96       	adiw	r24, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
     c34:	8a 30       	cpi	r24, 0x0A	; 10
     c36:	91 05       	cpc	r25, r1
     c38:	c1 f6       	brne	.-80     	; 0xbea <sendResponse+0xc0>
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
	}
	
	//send CRC in reverse order!
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc & 0xFF); // last 8 bits
     c3a:	fb 01       	movw	r30, r22
     c3c:	ef 77       	andi	r30, 0x7F	; 127
     c3e:	ff 27       	eor	r31, r31
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	e2 5b       	subi	r30, 0xB2	; 178
     c46:	fd 4f       	sbci	r31, 0xFD	; 253
     c48:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     c4a:	01 83       	std	Z+1, r16	; 0x01
	i++;
     c4c:	fa 01       	movw	r30, r20
     c4e:	3b 96       	adiw	r30, 0x0b	; 11
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc >> 8); // first 8 bits
     c50:	ef 77       	andi	r30, 0x7F	; 127
     c52:	ff 27       	eor	r31, r31
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	e2 5b       	subi	r30, 0xB2	; 178
     c5a:	fd 4f       	sbci	r31, 0xFD	; 253
     c5c:	30 83       	st	Z, r19
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     c5e:	01 83       	std	Z+1, r16	; 0x01
	i++;
     c60:	44 5f       	subi	r20, 0xF4	; 244
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
	txWritePos = i & TX_BUFFER_SIZE_MSK;
     c64:	4f 77       	andi	r20, 0x7F	; 127
     c66:	40 93 0e 01 	sts	0x010E, r20
	
	__tryToSend();
     c6a:	0e 94 5f 05 	call	0xabe	; 0xabe <__tryToSend>
}
     c6e:	29 96       	adiw	r28, 0x09	; 9
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	08 95       	ret

00000c84 <getLastCommand>:
		}
		sei();
	}
}

command getLastCommand(int8_t *success){
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	2f 97       	sbiw	r28, 0x0f	; 15
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     c9e:	fe 01       	movw	r30, r28
     ca0:	38 96       	adiw	r30, 0x08	; 8
     ca2:	87 e0       	ldi	r24, 0x07	; 7
     ca4:	df 01       	movw	r26, r30
     ca6:	1d 92       	st	X+, r1
     ca8:	8a 95       	dec	r24
     caa:	e9 f7       	brne	.-6      	; 0xca6 <getLastCommand+0x22>
	*success = 0;
     cac:	f8 01       	movw	r30, r16
     cae:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
     cb0:	80 91 11 01 	lds	r24, 0x0111
     cb4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <checkPackIsFullLength>
     cb8:	88 23       	and	r24, r24
     cba:	c1 f0       	breq	.+48     	; 0xcec <getLastCommand+0x68>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
     cbc:	80 91 11 01 	lds	r24, 0x0111
     cc0:	be 01       	movw	r22, r28
     cc2:	61 5f       	subi	r22, 0xF1	; 241
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	0e 94 23 04 	call	0x846	; 0x846 <fetchCommand>
     cca:	39 87       	std	Y+9, r19	; 0x09
     ccc:	4a 87       	std	Y+10, r20	; 0x0a
     cce:	5b 87       	std	Y+11, r21	; 0x0b
     cd0:	6c 87       	std	Y+12, r22	; 0x0c
     cd2:	7d 87       	std	Y+13, r23	; 0x0d
     cd4:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
     cd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd8:	88 23       	and	r24, r24
     cda:	21 f0       	breq	.+8      	; 0xce4 <getLastCommand+0x60>
		{
			*success=1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	d8 01       	movw	r26, r16
     ce0:	8c 93       	st	X, r24
     ce2:	2e c0       	rjmp	.+92     	; 0xd40 <getLastCommand+0xbc>
			}else{
			*success=2;
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	f8 01       	movw	r30, r16
     ce8:	80 83       	st	Z, r24
     cea:	2a c0       	rjmp	.+84     	; 0xd40 <getLastCommand+0xbc>
		
		
		}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
									
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE)
     cec:	80 91 11 01 	lds	r24, 0x0111
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	07 97       	sbiw	r24, 0x07	; 7
     cf4:	80 38       	cpi	r24, 0x80	; 128
     cf6:	91 05       	cpc	r25, r1
     cf8:	04 f5       	brge	.+64     	; 0xd3a <getLastCommand+0xb6>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
     cfa:	80 91 11 01 	lds	r24, 0x0111
     cfe:	87 50       	subi	r24, 0x07	; 7
     d00:	0e 94 d6 03 	call	0x7ac	; 0x7ac <checkPackIsFullLength>
     d04:	88 23       	and	r24, r24
     d06:	d9 f0       	breq	.+54     	; 0xd3e <getLastCommand+0xba>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
     d08:	80 91 11 01 	lds	r24, 0x0111
     d0c:	be 01       	movw	r22, r28
     d0e:	61 5f       	subi	r22, 0xF1	; 241
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	87 50       	subi	r24, 0x07	; 7
     d14:	0e 94 23 04 	call	0x846	; 0x846 <fetchCommand>
     d18:	39 87       	std	Y+9, r19	; 0x09
     d1a:	4a 87       	std	Y+10, r20	; 0x0a
     d1c:	5b 87       	std	Y+11, r21	; 0x0b
     d1e:	6c 87       	std	Y+12, r22	; 0x0c
     d20:	7d 87       	std	Y+13, r23	; 0x0d
     d22:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
     d24:	8f 85       	ldd	r24, Y+15	; 0x0f
     d26:	88 23       	and	r24, r24
     d28:	21 f0       	breq	.+8      	; 0xd32 <getLastCommand+0xae>
			{
				*success=1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	d8 01       	movw	r26, r16
     d2e:	8c 93       	st	X, r24
     d30:	07 c0       	rjmp	.+14     	; 0xd40 <getLastCommand+0xbc>
				}else{
				*success=2;//it retrived something but the CRC was not matching
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	f8 01       	movw	r30, r16
     d36:	80 83       	st	Z, r24
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <getLastCommand+0xbc>
}

command getLastCommand(int8_t *success){
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <getLastCommand+0xbc>
     d3e:	20 e0       	ldi	r18, 0x00	; 0
			
		}
	}
	
	//if(cmd.header != Header_StatusUpdate){
		lastCommandHeader = cmd.header;
     d40:	20 93 10 01 	sts	0x0110, r18
	//}
	
	return cmd;
     d44:	28 87       	std	Y+8, r18	; 0x08
     d46:	87 e0       	ldi	r24, 0x07	; 7
     d48:	fe 01       	movw	r30, r28
     d4a:	38 96       	adiw	r30, 0x08	; 8
     d4c:	de 01       	movw	r26, r28
     d4e:	11 96       	adiw	r26, 0x01	; 1
     d50:	01 90       	ld	r0, Z+
     d52:	0d 92       	st	X+, r0
     d54:	8a 95       	dec	r24
     d56:	e1 f7       	brne	.-8      	; 0xd50 <getLastCommand+0xcc>
     d58:	29 81       	ldd	r18, Y+1	; 0x01
     d5a:	3a 81       	ldd	r19, Y+2	; 0x02
     d5c:	4b 81       	ldd	r20, Y+3	; 0x03
     d5e:	5c 81       	ldd	r21, Y+4	; 0x04
     d60:	6d 81       	ldd	r22, Y+5	; 0x05
     d62:	7e 81       	ldd	r23, Y+6	; 0x06
}
     d64:	8f 81       	ldd	r24, Y+7	; 0x07
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	2f 96       	adiw	r28, 0x0f	; 15
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <sendStatusUpdate>:


void sendStatusUpdate(){
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	29 97       	sbiw	r28, 0x09	; 9
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
	
	response status;
	status.header = lastCommandHeader;
     d96:	80 91 10 01 	lds	r24, 0x0110
     d9a:	89 83       	std	Y+1, r24	; 0x01
	//set info to send
	status.sensorInfo[0] = getInfraredForwardDistance();
     d9c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <getInfraredForwardDistance>
     da0:	8a 83       	std	Y+2, r24	; 0x02
	status.sensorInfo[1] = getInfraredRightDistance();
     da2:	0e 94 19 01 	call	0x232	; 0x232 <getInfraredRightDistance>
     da6:	8b 83       	std	Y+3, r24	; 0x03
	status.sensorInfo[2] = getInfraredBackDistance();
     da8:	0e 94 39 01 	call	0x272	; 0x272 <getInfraredBackDistance>
     dac:	8c 83       	std	Y+4, r24	; 0x04
	status.sensorInfo[3] = getInfraredLeftDistance();
     dae:	0e 94 59 01 	call	0x2b2	; 0x2b2 <getInfraredLeftDistance>
     db2:	8d 83       	std	Y+5, r24	; 0x05
	//add speed/distance
	
	uint16_t US_distance = getAverageUltrasonicValue(3);
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <getAverageUltrasonicValue>
	status.sensorInfo[NO_OF_SENSORS-2] = US_distance >> 8;
     dba:	9e 83       	std	Y+6, r25	; 0x06
	status.sensorInfo[NO_OF_SENSORS-1] = US_distance & 0xff;
     dbc:	8f 83       	std	Y+7, r24	; 0x07
	status.time = getTimeExecutedLastCmd();
     dbe:	0e 94 b8 07 	call	0xf70	; 0xf70 <getTimeExecutedLastCmd>
     dc2:	78 2f       	mov	r23, r24
     dc4:	88 87       	std	Y+8, r24	; 0x08
     dc6:	99 87       	std	Y+9, r25	; 0x09
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	sendResponse(status);
     dc8:	09 81       	ldd	r16, Y+1	; 0x01
     dca:	1a 81       	ldd	r17, Y+2	; 0x02
     dcc:	2b 81       	ldd	r18, Y+3	; 0x03
     dce:	3c 81       	ldd	r19, Y+4	; 0x04
     dd0:	4d 81       	ldd	r20, Y+5	; 0x05
     dd2:	5e 81       	ldd	r21, Y+6	; 0x06
     dd4:	6f 81       	ldd	r22, Y+7	; 0x07
     dd6:	89 2f       	mov	r24, r25
     dd8:	0e 94 95 05 	call	0xb2a	; 0xb2a <sendResponse>
		
}
     ddc:	29 96       	adiw	r28, 0x09	; 9
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <__vector_28>:

return ret;
}
*/

ISR(USART1_RX_vect){
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	ef 93       	push	r30
     e02:	ff 93       	push	r31

	uint8_t data = UDR1;
     e04:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
     e08:	90 91 13 01 	lds	r25, 0x0113
     e0c:	91 11       	cpse	r25, r1
     e0e:	1b c0       	rjmp	.+54     	; 0xe46 <__vector_28+0x54>
		
		LED_CMD_PIN |= (1<<LED_CMD_PINx);
     e10:	00 9a       	sbi	0x00, 0	; 0
		
		rxBuffer[rxWritePos].pack_no = data; //numai ultimi 7 biti va trebui sa ii consider
     e12:	e0 91 14 01 	lds	r30, 0x0114
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	e2 5b       	subi	r30, 0xB2	; 178
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
     e22:	e0 91 14 01 	lds	r30, 0x0114
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	e2 5b       	subi	r30, 0xB2	; 178
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	80 83       	st	Z, r24
		packStarted = 1;
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	90 93 13 01 	sts	0x0113, r25
		lastPackNo = data;
     e38:	80 93 12 01 	sts	0x0112, r24
		lastPackPosInBuff = rxWritePos;
     e3c:	80 91 14 01 	lds	r24, 0x0114
     e40:	80 93 11 01 	sts	0x0111, r24
     e44:	1d c0       	rjmp	.+58     	; 0xe80 <__vector_28+0x8e>
		
				
		}else{
	
		rxBuffer[rxWritePos].pack_no = lastPackNo;
     e46:	e0 91 14 01 	lds	r30, 0x0114
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	90 91 12 01 	lds	r25, 0x0112
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	e2 5b       	subi	r30, 0xB2	; 178
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
     e5a:	e0 91 14 01 	lds	r30, 0x0114
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	e2 5b       	subi	r30, 0xB2	; 178
     e66:	fe 4f       	sbci	r31, 0xFE	; 254
     e68:	80 83       	st	Z, r24
		packStarted++ ;
     e6a:	80 91 13 01 	lds	r24, 0x0113
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	80 93 13 01 	sts	0x0113, r24
		
		if(packStarted == COMMAND_SIZE){//fara -3
     e74:	80 91 13 01 	lds	r24, 0x0113
     e78:	87 30       	cpi	r24, 0x07	; 7
     e7a:	11 f4       	brne	.+4      	; 0xe80 <__vector_28+0x8e>
			packStarted = 0;
     e7c:	10 92 13 01 	sts	0x0113, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
     e80:	80 91 14 01 	lds	r24, 0x0114
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	80 93 14 01 	sts	0x0114, r24
	rxWritePos &= RX_BUFFER_SIZE_MSK;
     e8a:	80 91 14 01 	lds	r24, 0x0114
     e8e:	8f 77       	andi	r24, 0x7F	; 127
     e90:	80 93 14 01 	sts	0x0114, r24
	rxWritePos = 0;
	}*/
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
     e94:	ff 91       	pop	r31
     e96:	ef 91       	pop	r30
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <__vector_30>:

ISR(USART1_TX_vect){
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	8f 93       	push	r24
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
     eb6:	e0 91 0f 01 	lds	r30, 0x010F
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	e2 5b       	subi	r30, 0xB2	; 178
     ec2:	fd 4f       	sbci	r31, 0xFD	; 253
     ec4:	81 81       	ldd	r24, Z+1	; 0x01
     ec6:	8f 3f       	cpi	r24, 0xFF	; 255
     ec8:	29 f1       	breq	.+74     	; 0xf14 <__vector_30+0x6e>
		UDR1 =  txBuffer[txReadPos].data;
     eca:	e0 91 0f 01 	lds	r30, 0x010F
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	e2 5b       	subi	r30, 0xB2	; 178
     ed6:	fd 4f       	sbci	r31, 0xFD	; 253
     ed8:	80 81       	ld	r24, Z
     eda:	80 93 ce 00 	sts	0x00CE, r24
		txBuffer[txReadPos].data =0;
     ede:	e0 91 0f 01 	lds	r30, 0x010F
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	e2 5b       	subi	r30, 0xB2	; 178
     eea:	fd 4f       	sbci	r31, 0xFD	; 253
     eec:	10 82       	st	Z, r1
		txBuffer[txReadPos].pack_no =-1;
     eee:	e0 91 0f 01 	lds	r30, 0x010F
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	e2 5b       	subi	r30, 0xB2	; 178
     efa:	fd 4f       	sbci	r31, 0xFD	; 253
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	81 83       	std	Z+1, r24	; 0x01
		txReadPos++;
     f00:	80 91 0f 01 	lds	r24, 0x010F
     f04:	8f 5f       	subi	r24, 0xFF	; 255
     f06:	80 93 0f 01 	sts	0x010F, r24
		txReadPos &= TX_BUFFER_SIZE_MSK;
     f0a:	80 91 0f 01 	lds	r24, 0x010F
     f0e:	8f 77       	andi	r24, 0x7F	; 127
     f10:	80 93 0f 01 	sts	0x010F, r24
		txReadPos =0;
		}
		*/
	}
	
     f14:	ff 91       	pop	r31
     f16:	ef 91       	pop	r30
     f18:	8f 91       	pop	r24
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <initTimer1>:
}

void initTimer1()
{
	//Normal port operation, OC1A/OC1B disconnected.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0));	
     f24:	e0 e8       	ldi	r30, 0x80	; 128
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8f 70       	andi	r24, 0x0F	; 15
     f2c:	80 83       	st	Z, r24
	
	//Timer/Counter mode of operation: CTC, TOP = OCR1A, Update of OCR1x at Immediate TOVn flag set on MAX
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11));
     f2e:	80 81       	ld	r24, Z
     f30:	8c 7f       	andi	r24, 0xFC	; 252
     f32:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
     f34:	e1 e8       	ldi	r30, 0x81	; 129
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 60       	ori	r24, 0x08	; 8
     f3c:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
     f3e:	80 81       	ld	r24, Z
     f40:	8f 7e       	andi	r24, 0xEF	; 239
     f42:	80 83       	st	Z, r24

	
	// reset counter
	TCNT1 = 0;
     f44:	10 92 85 00 	sts	0x0085, r1
     f48:	10 92 84 00 	sts	0x0084, r1
	
	OCR1A = ((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*1000L; //100
     f4c:	88 e5       	ldi	r24, 0x58	; 88
     f4e:	9b e1       	ldi	r25, 0x1B	; 27
     f50:	90 93 89 00 	sts	0x0089, r25
     f54:	80 93 88 00 	sts	0x0088, r24
		//Clock Select: clk/64 prescaler
		TCCR1B &= ~((1<<CS11)); //1024
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	80 83       	st	Z, r24
		TCCR1B |= (1<<CS10) | (1<<CS12);
     f5e:	80 81       	ld	r24, Z
     f60:	85 60       	ori	r24, 0x05	; 5
     f62:	80 83       	st	Z, r24
	
	//OCR1A = 0;
	//OCR1B = (((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*3000L) -1; //1 s
	
	//enable Output Compare A/B Match Interrupt Enable
	TIMSK1 |= (1<<OCIE1A);/* | (1<<OCIE1B); */
     f64:	ef e6       	ldi	r30, 0x6F	; 111
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	80 83       	st	Z, r24
     f6e:	08 95       	ret

00000f70 <getTimeExecutedLastCmd>:

uint16_t getTimeExecutedLastCmd(){
	
	
	return 0;
}
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	08 95       	ret

00000f76 <__vector_13>:

ISR(TIMER1_COMPA_vect){		
     f76:	1f 92       	push	r1
     f78:	0f 92       	push	r0
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	2f 93       	push	r18
     f82:	3f 93       	push	r19
     f84:	4f 93       	push	r20
     f86:	5f 93       	push	r21
     f88:	6f 93       	push	r22
     f8a:	7f 93       	push	r23
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	af 93       	push	r26
     f92:	bf 93       	push	r27
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
			OCR1A = ticks;
			ticks = 0;
		}
*/
	
	LED_CMD_PIN |= (1<<LED_CMD_PINx);	
     f98:	00 9a       	sbi	0x00, 0	; 0
	if(ticks && ticks != 999999){
     f9a:	80 91 00 01 	lds	r24, 0x0100
     f9e:	90 91 01 01 	lds	r25, 0x0101
     fa2:	a0 91 02 01 	lds	r26, 0x0102
     fa6:	b0 91 03 01 	lds	r27, 0x0103
     faa:	89 2b       	or	r24, r25
     fac:	8a 2b       	or	r24, r26
     fae:	8b 2b       	or	r24, r27
     fb0:	09 f1       	breq	.+66     	; 0xff4 <__vector_13+0x7e>
     fb2:	80 91 00 01 	lds	r24, 0x0100
     fb6:	90 91 01 01 	lds	r25, 0x0101
     fba:	a0 91 02 01 	lds	r26, 0x0102
     fbe:	b0 91 03 01 	lds	r27, 0x0103
     fc2:	8f 33       	cpi	r24, 0x3F	; 63
     fc4:	92 44       	sbci	r25, 0x42	; 66
     fc6:	af 40       	sbci	r26, 0x0F	; 15
     fc8:	b1 05       	cpc	r27, r1
     fca:	a1 f0       	breq	.+40     	; 0xff4 <__vector_13+0x7e>
		ticks--;
     fcc:	80 91 00 01 	lds	r24, 0x0100
     fd0:	90 91 01 01 	lds	r25, 0x0101
     fd4:	a0 91 02 01 	lds	r26, 0x0102
     fd8:	b0 91 03 01 	lds	r27, 0x0103
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	a1 09       	sbc	r26, r1
     fe0:	b1 09       	sbc	r27, r1
     fe2:	80 93 00 01 	sts	0x0100, r24
     fe6:	90 93 01 01 	sts	0x0101, r25
     fea:	a0 93 02 01 	sts	0x0102, r26
     fee:	b0 93 03 01 	sts	0x0103, r27
     ff2:	17 c0       	rjmp	.+46     	; 0x1022 <__vector_13+0xac>
	}else if (ticks==0){
     ff4:	80 91 00 01 	lds	r24, 0x0100
     ff8:	90 91 01 01 	lds	r25, 0x0101
     ffc:	a0 91 02 01 	lds	r26, 0x0102
    1000:	b0 91 03 01 	lds	r27, 0x0103
    1004:	89 2b       	or	r24, r25
    1006:	8a 2b       	or	r24, r26
    1008:	8b 2b       	or	r24, r27
    100a:	59 f4       	brne	.+22     	; 0x1022 <__vector_13+0xac>
		//stop timer, it MUST be called first!!!
		TCCR1B &= ~((1<<CS10) | (1<<CS11) | (1<<CS12)); 
		OCR1A = 0; 
		LED_CMD_PORT &= ~(1<<LED_CMD_PINx);			
		*/
		stopFunction(argc2,argv2);						
    100c:	80 91 16 01 	lds	r24, 0x0116
    1010:	90 91 17 01 	lds	r25, 0x0117
    1014:	e0 91 18 01 	lds	r30, 0x0118
    1018:	f0 91 19 01 	lds	r31, 0x0119
    101c:	6e e4       	ldi	r22, 0x4E	; 78
    101e:	73 e0       	ldi	r23, 0x03	; 3
    1020:	09 95       	icall
	}		
}
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	bf 91       	pop	r27
    1028:	af 91       	pop	r26
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	7f 91       	pop	r23
    1030:	6f 91       	pop	r22
    1032:	5f 91       	pop	r21
    1034:	4f 91       	pop	r20
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <__subsf3>:
    1044:	50 58       	subi	r21, 0x80	; 128

00001046 <__addsf3>:
    1046:	bb 27       	eor	r27, r27
    1048:	aa 27       	eor	r26, r26
    104a:	0e d0       	rcall	.+28     	; 0x1068 <__addsf3x>
    104c:	84 c1       	rjmp	.+776    	; 0x1356 <__fp_round>
    104e:	75 d1       	rcall	.+746    	; 0x133a <__fp_pscA>
    1050:	30 f0       	brcs	.+12     	; 0x105e <__addsf3+0x18>
    1052:	7a d1       	rcall	.+756    	; 0x1348 <__fp_pscB>
    1054:	20 f0       	brcs	.+8      	; 0x105e <__addsf3+0x18>
    1056:	31 f4       	brne	.+12     	; 0x1064 <__addsf3+0x1e>
    1058:	9f 3f       	cpi	r25, 0xFF	; 255
    105a:	11 f4       	brne	.+4      	; 0x1060 <__addsf3+0x1a>
    105c:	1e f4       	brtc	.+6      	; 0x1064 <__addsf3+0x1e>
    105e:	6a c1       	rjmp	.+724    	; 0x1334 <__fp_nan>
    1060:	0e f4       	brtc	.+2      	; 0x1064 <__addsf3+0x1e>
    1062:	e0 95       	com	r30
    1064:	e7 fb       	bst	r30, 7
    1066:	37 c1       	rjmp	.+622    	; 0x12d6 <__fp_inf>

00001068 <__addsf3x>:
    1068:	e9 2f       	mov	r30, r25
    106a:	86 d1       	rcall	.+780    	; 0x1378 <__fp_split3>
    106c:	80 f3       	brcs	.-32     	; 0x104e <__addsf3+0x8>
    106e:	ba 17       	cp	r27, r26
    1070:	62 07       	cpc	r22, r18
    1072:	73 07       	cpc	r23, r19
    1074:	84 07       	cpc	r24, r20
    1076:	95 07       	cpc	r25, r21
    1078:	18 f0       	brcs	.+6      	; 0x1080 <__addsf3x+0x18>
    107a:	71 f4       	brne	.+28     	; 0x1098 <__addsf3x+0x30>
    107c:	9e f5       	brtc	.+102    	; 0x10e4 <__addsf3x+0x7c>
    107e:	b5 c1       	rjmp	.+874    	; 0x13ea <__fp_zero>
    1080:	0e f4       	brtc	.+2      	; 0x1084 <__addsf3x+0x1c>
    1082:	e0 95       	com	r30
    1084:	0b 2e       	mov	r0, r27
    1086:	ba 2f       	mov	r27, r26
    1088:	a0 2d       	mov	r26, r0
    108a:	0b 01       	movw	r0, r22
    108c:	b9 01       	movw	r22, r18
    108e:	90 01       	movw	r18, r0
    1090:	0c 01       	movw	r0, r24
    1092:	ca 01       	movw	r24, r20
    1094:	a0 01       	movw	r20, r0
    1096:	11 24       	eor	r1, r1
    1098:	ff 27       	eor	r31, r31
    109a:	59 1b       	sub	r21, r25
    109c:	99 f0       	breq	.+38     	; 0x10c4 <__addsf3x+0x5c>
    109e:	59 3f       	cpi	r21, 0xF9	; 249
    10a0:	50 f4       	brcc	.+20     	; 0x10b6 <__addsf3x+0x4e>
    10a2:	50 3e       	cpi	r21, 0xE0	; 224
    10a4:	68 f1       	brcs	.+90     	; 0x1100 <__addsf3x+0x98>
    10a6:	1a 16       	cp	r1, r26
    10a8:	f0 40       	sbci	r31, 0x00	; 0
    10aa:	a2 2f       	mov	r26, r18
    10ac:	23 2f       	mov	r18, r19
    10ae:	34 2f       	mov	r19, r20
    10b0:	44 27       	eor	r20, r20
    10b2:	58 5f       	subi	r21, 0xF8	; 248
    10b4:	f3 cf       	rjmp	.-26     	; 0x109c <__addsf3x+0x34>
    10b6:	46 95       	lsr	r20
    10b8:	37 95       	ror	r19
    10ba:	27 95       	ror	r18
    10bc:	a7 95       	ror	r26
    10be:	f0 40       	sbci	r31, 0x00	; 0
    10c0:	53 95       	inc	r21
    10c2:	c9 f7       	brne	.-14     	; 0x10b6 <__addsf3x+0x4e>
    10c4:	7e f4       	brtc	.+30     	; 0x10e4 <__addsf3x+0x7c>
    10c6:	1f 16       	cp	r1, r31
    10c8:	ba 0b       	sbc	r27, r26
    10ca:	62 0b       	sbc	r22, r18
    10cc:	73 0b       	sbc	r23, r19
    10ce:	84 0b       	sbc	r24, r20
    10d0:	ba f0       	brmi	.+46     	; 0x1100 <__addsf3x+0x98>
    10d2:	91 50       	subi	r25, 0x01	; 1
    10d4:	a1 f0       	breq	.+40     	; 0x10fe <__addsf3x+0x96>
    10d6:	ff 0f       	add	r31, r31
    10d8:	bb 1f       	adc	r27, r27
    10da:	66 1f       	adc	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	88 1f       	adc	r24, r24
    10e0:	c2 f7       	brpl	.-16     	; 0x10d2 <__addsf3x+0x6a>
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <__addsf3x+0x98>
    10e4:	ba 0f       	add	r27, r26
    10e6:	62 1f       	adc	r22, r18
    10e8:	73 1f       	adc	r23, r19
    10ea:	84 1f       	adc	r24, r20
    10ec:	48 f4       	brcc	.+18     	; 0x1100 <__addsf3x+0x98>
    10ee:	87 95       	ror	r24
    10f0:	77 95       	ror	r23
    10f2:	67 95       	ror	r22
    10f4:	b7 95       	ror	r27
    10f6:	f7 95       	ror	r31
    10f8:	9e 3f       	cpi	r25, 0xFE	; 254
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <__addsf3x+0x96>
    10fc:	b3 cf       	rjmp	.-154    	; 0x1064 <__addsf3+0x1e>
    10fe:	93 95       	inc	r25
    1100:	88 0f       	add	r24, r24
    1102:	08 f0       	brcs	.+2      	; 0x1106 <__addsf3x+0x9e>
    1104:	99 27       	eor	r25, r25
    1106:	ee 0f       	add	r30, r30
    1108:	97 95       	ror	r25
    110a:	87 95       	ror	r24
    110c:	08 95       	ret

0000110e <__divsf3>:
    110e:	0c d0       	rcall	.+24     	; 0x1128 <__divsf3x>
    1110:	22 c1       	rjmp	.+580    	; 0x1356 <__fp_round>
    1112:	1a d1       	rcall	.+564    	; 0x1348 <__fp_pscB>
    1114:	40 f0       	brcs	.+16     	; 0x1126 <__divsf3+0x18>
    1116:	11 d1       	rcall	.+546    	; 0x133a <__fp_pscA>
    1118:	30 f0       	brcs	.+12     	; 0x1126 <__divsf3+0x18>
    111a:	21 f4       	brne	.+8      	; 0x1124 <__divsf3+0x16>
    111c:	5f 3f       	cpi	r21, 0xFF	; 255
    111e:	19 f0       	breq	.+6      	; 0x1126 <__divsf3+0x18>
    1120:	da c0       	rjmp	.+436    	; 0x12d6 <__fp_inf>
    1122:	51 11       	cpse	r21, r1
    1124:	63 c1       	rjmp	.+710    	; 0x13ec <__fp_szero>
    1126:	06 c1       	rjmp	.+524    	; 0x1334 <__fp_nan>

00001128 <__divsf3x>:
    1128:	27 d1       	rcall	.+590    	; 0x1378 <__fp_split3>
    112a:	98 f3       	brcs	.-26     	; 0x1112 <__divsf3+0x4>

0000112c <__divsf3_pse>:
    112c:	99 23       	and	r25, r25
    112e:	c9 f3       	breq	.-14     	; 0x1122 <__divsf3+0x14>
    1130:	55 23       	and	r21, r21
    1132:	b1 f3       	breq	.-20     	; 0x1120 <__divsf3+0x12>
    1134:	95 1b       	sub	r25, r21
    1136:	55 0b       	sbc	r21, r21
    1138:	bb 27       	eor	r27, r27
    113a:	aa 27       	eor	r26, r26
    113c:	62 17       	cp	r22, r18
    113e:	73 07       	cpc	r23, r19
    1140:	84 07       	cpc	r24, r20
    1142:	38 f0       	brcs	.+14     	; 0x1152 <__divsf3_pse+0x26>
    1144:	9f 5f       	subi	r25, 0xFF	; 255
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	44 1f       	adc	r20, r20
    114e:	aa 1f       	adc	r26, r26
    1150:	a9 f3       	breq	.-22     	; 0x113c <__divsf3_pse+0x10>
    1152:	33 d0       	rcall	.+102    	; 0x11ba <__divsf3_pse+0x8e>
    1154:	0e 2e       	mov	r0, r30
    1156:	3a f0       	brmi	.+14     	; 0x1166 <__divsf3_pse+0x3a>
    1158:	e0 e8       	ldi	r30, 0x80	; 128
    115a:	30 d0       	rcall	.+96     	; 0x11bc <__divsf3_pse+0x90>
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	50 40       	sbci	r21, 0x00	; 0
    1160:	e6 95       	lsr	r30
    1162:	00 1c       	adc	r0, r0
    1164:	ca f7       	brpl	.-14     	; 0x1158 <__divsf3_pse+0x2c>
    1166:	29 d0       	rcall	.+82     	; 0x11ba <__divsf3_pse+0x8e>
    1168:	fe 2f       	mov	r31, r30
    116a:	27 d0       	rcall	.+78     	; 0x11ba <__divsf3_pse+0x8e>
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	bb 1f       	adc	r27, r27
    1174:	26 17       	cp	r18, r22
    1176:	37 07       	cpc	r19, r23
    1178:	48 07       	cpc	r20, r24
    117a:	ab 07       	cpc	r26, r27
    117c:	b0 e8       	ldi	r27, 0x80	; 128
    117e:	09 f0       	breq	.+2      	; 0x1182 <__divsf3_pse+0x56>
    1180:	bb 0b       	sbc	r27, r27
    1182:	80 2d       	mov	r24, r0
    1184:	bf 01       	movw	r22, r30
    1186:	ff 27       	eor	r31, r31
    1188:	93 58       	subi	r25, 0x83	; 131
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	2a f0       	brmi	.+10     	; 0x1198 <__divsf3_pse+0x6c>
    118e:	9e 3f       	cpi	r25, 0xFE	; 254
    1190:	51 05       	cpc	r21, r1
    1192:	68 f0       	brcs	.+26     	; 0x11ae <__divsf3_pse+0x82>
    1194:	a0 c0       	rjmp	.+320    	; 0x12d6 <__fp_inf>
    1196:	2a c1       	rjmp	.+596    	; 0x13ec <__fp_szero>
    1198:	5f 3f       	cpi	r21, 0xFF	; 255
    119a:	ec f3       	brlt	.-6      	; 0x1196 <__divsf3_pse+0x6a>
    119c:	98 3e       	cpi	r25, 0xE8	; 232
    119e:	dc f3       	brlt	.-10     	; 0x1196 <__divsf3_pse+0x6a>
    11a0:	86 95       	lsr	r24
    11a2:	77 95       	ror	r23
    11a4:	67 95       	ror	r22
    11a6:	b7 95       	ror	r27
    11a8:	f7 95       	ror	r31
    11aa:	9f 5f       	subi	r25, 0xFF	; 255
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <__divsf3_pse+0x74>
    11ae:	88 0f       	add	r24, r24
    11b0:	91 1d       	adc	r25, r1
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret
    11ba:	e1 e0       	ldi	r30, 0x01	; 1
    11bc:	66 0f       	add	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	bb 1f       	adc	r27, r27
    11c4:	62 17       	cp	r22, r18
    11c6:	73 07       	cpc	r23, r19
    11c8:	84 07       	cpc	r24, r20
    11ca:	ba 07       	cpc	r27, r26
    11cc:	20 f0       	brcs	.+8      	; 0x11d6 <__divsf3_pse+0xaa>
    11ce:	62 1b       	sub	r22, r18
    11d0:	73 0b       	sbc	r23, r19
    11d2:	84 0b       	sbc	r24, r20
    11d4:	ba 0b       	sbc	r27, r26
    11d6:	ee 1f       	adc	r30, r30
    11d8:	88 f7       	brcc	.-30     	; 0x11bc <__divsf3_pse+0x90>
    11da:	e0 95       	com	r30
    11dc:	08 95       	ret

000011de <__fixunssfsi>:
    11de:	d4 d0       	rcall	.+424    	; 0x1388 <__fp_splitA>
    11e0:	88 f0       	brcs	.+34     	; 0x1204 <__fixunssfsi+0x26>
    11e2:	9f 57       	subi	r25, 0x7F	; 127
    11e4:	90 f0       	brcs	.+36     	; 0x120a <__fixunssfsi+0x2c>
    11e6:	b9 2f       	mov	r27, r25
    11e8:	99 27       	eor	r25, r25
    11ea:	b7 51       	subi	r27, 0x17	; 23
    11ec:	a0 f0       	brcs	.+40     	; 0x1216 <__fixunssfsi+0x38>
    11ee:	d1 f0       	breq	.+52     	; 0x1224 <__fixunssfsi+0x46>
    11f0:	66 0f       	add	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	88 1f       	adc	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	1a f0       	brmi	.+6      	; 0x1200 <__fixunssfsi+0x22>
    11fa:	ba 95       	dec	r27
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <__fixunssfsi+0x12>
    11fe:	12 c0       	rjmp	.+36     	; 0x1224 <__fixunssfsi+0x46>
    1200:	b1 30       	cpi	r27, 0x01	; 1
    1202:	81 f0       	breq	.+32     	; 0x1224 <__fixunssfsi+0x46>
    1204:	f2 d0       	rcall	.+484    	; 0x13ea <__fp_zero>
    1206:	b1 e0       	ldi	r27, 0x01	; 1
    1208:	08 95       	ret
    120a:	ef c0       	rjmp	.+478    	; 0x13ea <__fp_zero>
    120c:	67 2f       	mov	r22, r23
    120e:	78 2f       	mov	r23, r24
    1210:	88 27       	eor	r24, r24
    1212:	b8 5f       	subi	r27, 0xF8	; 248
    1214:	39 f0       	breq	.+14     	; 0x1224 <__fixunssfsi+0x46>
    1216:	b9 3f       	cpi	r27, 0xF9	; 249
    1218:	cc f3       	brlt	.-14     	; 0x120c <__fixunssfsi+0x2e>
    121a:	86 95       	lsr	r24
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	b3 95       	inc	r27
    1222:	d9 f7       	brne	.-10     	; 0x121a <__fixunssfsi+0x3c>
    1224:	3e f4       	brtc	.+14     	; 0x1234 <__fixunssfsi+0x56>
    1226:	90 95       	com	r25
    1228:	80 95       	com	r24
    122a:	70 95       	com	r23
    122c:	61 95       	neg	r22
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	08 95       	ret

00001236 <__floatunsisf>:
    1236:	e8 94       	clt
    1238:	09 c0       	rjmp	.+18     	; 0x124c <__floatsisf+0x12>

0000123a <__floatsisf>:
    123a:	97 fb       	bst	r25, 7
    123c:	3e f4       	brtc	.+14     	; 0x124c <__floatsisf+0x12>
    123e:	90 95       	com	r25
    1240:	80 95       	com	r24
    1242:	70 95       	com	r23
    1244:	61 95       	neg	r22
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	99 23       	and	r25, r25
    124e:	a9 f0       	breq	.+42     	; 0x127a <__floatsisf+0x40>
    1250:	f9 2f       	mov	r31, r25
    1252:	96 e9       	ldi	r25, 0x96	; 150
    1254:	bb 27       	eor	r27, r27
    1256:	93 95       	inc	r25
    1258:	f6 95       	lsr	r31
    125a:	87 95       	ror	r24
    125c:	77 95       	ror	r23
    125e:	67 95       	ror	r22
    1260:	b7 95       	ror	r27
    1262:	f1 11       	cpse	r31, r1
    1264:	f8 cf       	rjmp	.-16     	; 0x1256 <__floatsisf+0x1c>
    1266:	fa f4       	brpl	.+62     	; 0x12a6 <__floatsisf+0x6c>
    1268:	bb 0f       	add	r27, r27
    126a:	11 f4       	brne	.+4      	; 0x1270 <__floatsisf+0x36>
    126c:	60 ff       	sbrs	r22, 0
    126e:	1b c0       	rjmp	.+54     	; 0x12a6 <__floatsisf+0x6c>
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	8f 4f       	sbci	r24, 0xFF	; 255
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	16 c0       	rjmp	.+44     	; 0x12a6 <__floatsisf+0x6c>
    127a:	88 23       	and	r24, r24
    127c:	11 f0       	breq	.+4      	; 0x1282 <__floatsisf+0x48>
    127e:	96 e9       	ldi	r25, 0x96	; 150
    1280:	11 c0       	rjmp	.+34     	; 0x12a4 <__floatsisf+0x6a>
    1282:	77 23       	and	r23, r23
    1284:	21 f0       	breq	.+8      	; 0x128e <__floatsisf+0x54>
    1286:	9e e8       	ldi	r25, 0x8E	; 142
    1288:	87 2f       	mov	r24, r23
    128a:	76 2f       	mov	r23, r22
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <__floatsisf+0x5e>
    128e:	66 23       	and	r22, r22
    1290:	71 f0       	breq	.+28     	; 0x12ae <__floatsisf+0x74>
    1292:	96 e8       	ldi	r25, 0x86	; 134
    1294:	86 2f       	mov	r24, r22
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	2a f0       	brmi	.+10     	; 0x12a6 <__floatsisf+0x6c>
    129c:	9a 95       	dec	r25
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	da f7       	brpl	.-10     	; 0x129c <__floatsisf+0x62>
    12a6:	88 0f       	add	r24, r24
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
    12ac:	97 f9       	bld	r25, 7
    12ae:	08 95       	ret

000012b0 <floor>:
    12b0:	85 d0       	rcall	.+266    	; 0x13bc <__fp_trunc>
    12b2:	80 f0       	brcs	.+32     	; 0x12d4 <floor+0x24>
    12b4:	9f 37       	cpi	r25, 0x7F	; 127
    12b6:	40 f4       	brcc	.+16     	; 0x12c8 <floor+0x18>
    12b8:	91 11       	cpse	r25, r1
    12ba:	0e f0       	brts	.+2      	; 0x12be <floor+0xe>
    12bc:	97 c0       	rjmp	.+302    	; 0x13ec <__fp_szero>
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	80 e8       	ldi	r24, 0x80	; 128
    12c4:	9f eb       	ldi	r25, 0xBF	; 191
    12c6:	08 95       	ret
    12c8:	26 f4       	brtc	.+8      	; 0x12d2 <floor+0x22>
    12ca:	1b 16       	cp	r1, r27
    12cc:	61 1d       	adc	r22, r1
    12ce:	71 1d       	adc	r23, r1
    12d0:	81 1d       	adc	r24, r1
    12d2:	07 c0       	rjmp	.+14     	; 0x12e2 <__fp_mintl>
    12d4:	21 c0       	rjmp	.+66     	; 0x1318 <__fp_mpack>

000012d6 <__fp_inf>:
    12d6:	97 f9       	bld	r25, 7
    12d8:	9f 67       	ori	r25, 0x7F	; 127
    12da:	80 e8       	ldi	r24, 0x80	; 128
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	08 95       	ret

000012e2 <__fp_mintl>:
    12e2:	88 23       	and	r24, r24
    12e4:	71 f4       	brne	.+28     	; 0x1302 <__fp_mintl+0x20>
    12e6:	77 23       	and	r23, r23
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <__fp_mintl+0x10>
    12ea:	98 50       	subi	r25, 0x08	; 8
    12ec:	87 2b       	or	r24, r23
    12ee:	76 2f       	mov	r23, r22
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <__fp_mintl+0x1e>
    12f2:	66 23       	and	r22, r22
    12f4:	11 f4       	brne	.+4      	; 0x12fa <__fp_mintl+0x18>
    12f6:	99 27       	eor	r25, r25
    12f8:	0d c0       	rjmp	.+26     	; 0x1314 <__fp_mintl+0x32>
    12fa:	90 51       	subi	r25, 0x10	; 16
    12fc:	86 2b       	or	r24, r22
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	2a f0       	brmi	.+10     	; 0x130e <__fp_mintl+0x2c>
    1304:	9a 95       	dec	r25
    1306:	66 0f       	add	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	da f7       	brpl	.-10     	; 0x1304 <__fp_mintl+0x22>
    130e:	88 0f       	add	r24, r24
    1310:	96 95       	lsr	r25
    1312:	87 95       	ror	r24
    1314:	97 f9       	bld	r25, 7
    1316:	08 95       	ret

00001318 <__fp_mpack>:
    1318:	9f 3f       	cpi	r25, 0xFF	; 255
    131a:	31 f0       	breq	.+12     	; 0x1328 <__fp_mpack_finite+0xc>

0000131c <__fp_mpack_finite>:
    131c:	91 50       	subi	r25, 0x01	; 1
    131e:	20 f4       	brcc	.+8      	; 0x1328 <__fp_mpack_finite+0xc>
    1320:	87 95       	ror	r24
    1322:	77 95       	ror	r23
    1324:	67 95       	ror	r22
    1326:	b7 95       	ror	r27
    1328:	88 0f       	add	r24, r24
    132a:	91 1d       	adc	r25, r1
    132c:	96 95       	lsr	r25
    132e:	87 95       	ror	r24
    1330:	97 f9       	bld	r25, 7
    1332:	08 95       	ret

00001334 <__fp_nan>:
    1334:	9f ef       	ldi	r25, 0xFF	; 255
    1336:	80 ec       	ldi	r24, 0xC0	; 192
    1338:	08 95       	ret

0000133a <__fp_pscA>:
    133a:	00 24       	eor	r0, r0
    133c:	0a 94       	dec	r0
    133e:	16 16       	cp	r1, r22
    1340:	17 06       	cpc	r1, r23
    1342:	18 06       	cpc	r1, r24
    1344:	09 06       	cpc	r0, r25
    1346:	08 95       	ret

00001348 <__fp_pscB>:
    1348:	00 24       	eor	r0, r0
    134a:	0a 94       	dec	r0
    134c:	12 16       	cp	r1, r18
    134e:	13 06       	cpc	r1, r19
    1350:	14 06       	cpc	r1, r20
    1352:	05 06       	cpc	r0, r21
    1354:	08 95       	ret

00001356 <__fp_round>:
    1356:	09 2e       	mov	r0, r25
    1358:	03 94       	inc	r0
    135a:	00 0c       	add	r0, r0
    135c:	11 f4       	brne	.+4      	; 0x1362 <__fp_round+0xc>
    135e:	88 23       	and	r24, r24
    1360:	52 f0       	brmi	.+20     	; 0x1376 <__fp_round+0x20>
    1362:	bb 0f       	add	r27, r27
    1364:	40 f4       	brcc	.+16     	; 0x1376 <__fp_round+0x20>
    1366:	bf 2b       	or	r27, r31
    1368:	11 f4       	brne	.+4      	; 0x136e <__fp_round+0x18>
    136a:	60 ff       	sbrs	r22, 0
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <__fp_round+0x20>
    136e:	6f 5f       	subi	r22, 0xFF	; 255
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	8f 4f       	sbci	r24, 0xFF	; 255
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	08 95       	ret

00001378 <__fp_split3>:
    1378:	57 fd       	sbrc	r21, 7
    137a:	90 58       	subi	r25, 0x80	; 128
    137c:	44 0f       	add	r20, r20
    137e:	55 1f       	adc	r21, r21
    1380:	59 f0       	breq	.+22     	; 0x1398 <__fp_splitA+0x10>
    1382:	5f 3f       	cpi	r21, 0xFF	; 255
    1384:	71 f0       	breq	.+28     	; 0x13a2 <__fp_splitA+0x1a>
    1386:	47 95       	ror	r20

00001388 <__fp_splitA>:
    1388:	88 0f       	add	r24, r24
    138a:	97 fb       	bst	r25, 7
    138c:	99 1f       	adc	r25, r25
    138e:	61 f0       	breq	.+24     	; 0x13a8 <__fp_splitA+0x20>
    1390:	9f 3f       	cpi	r25, 0xFF	; 255
    1392:	79 f0       	breq	.+30     	; 0x13b2 <__fp_splitA+0x2a>
    1394:	87 95       	ror	r24
    1396:	08 95       	ret
    1398:	12 16       	cp	r1, r18
    139a:	13 06       	cpc	r1, r19
    139c:	14 06       	cpc	r1, r20
    139e:	55 1f       	adc	r21, r21
    13a0:	f2 cf       	rjmp	.-28     	; 0x1386 <__fp_split3+0xe>
    13a2:	46 95       	lsr	r20
    13a4:	f1 df       	rcall	.-30     	; 0x1388 <__fp_splitA>
    13a6:	08 c0       	rjmp	.+16     	; 0x13b8 <__fp_splitA+0x30>
    13a8:	16 16       	cp	r1, r22
    13aa:	17 06       	cpc	r1, r23
    13ac:	18 06       	cpc	r1, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	f1 cf       	rjmp	.-30     	; 0x1394 <__fp_splitA+0xc>
    13b2:	86 95       	lsr	r24
    13b4:	71 05       	cpc	r23, r1
    13b6:	61 05       	cpc	r22, r1
    13b8:	08 94       	sec
    13ba:	08 95       	ret

000013bc <__fp_trunc>:
    13bc:	e5 df       	rcall	.-54     	; 0x1388 <__fp_splitA>
    13be:	a0 f0       	brcs	.+40     	; 0x13e8 <__fp_trunc+0x2c>
    13c0:	be e7       	ldi	r27, 0x7E	; 126
    13c2:	b9 17       	cp	r27, r25
    13c4:	88 f4       	brcc	.+34     	; 0x13e8 <__fp_trunc+0x2c>
    13c6:	bb 27       	eor	r27, r27
    13c8:	9f 38       	cpi	r25, 0x8F	; 143
    13ca:	60 f4       	brcc	.+24     	; 0x13e4 <__fp_trunc+0x28>
    13cc:	16 16       	cp	r1, r22
    13ce:	b1 1d       	adc	r27, r1
    13d0:	67 2f       	mov	r22, r23
    13d2:	78 2f       	mov	r23, r24
    13d4:	88 27       	eor	r24, r24
    13d6:	98 5f       	subi	r25, 0xF8	; 248
    13d8:	f7 cf       	rjmp	.-18     	; 0x13c8 <__fp_trunc+0xc>
    13da:	86 95       	lsr	r24
    13dc:	77 95       	ror	r23
    13de:	67 95       	ror	r22
    13e0:	b1 1d       	adc	r27, r1
    13e2:	93 95       	inc	r25
    13e4:	96 39       	cpi	r25, 0x96	; 150
    13e6:	c8 f3       	brcs	.-14     	; 0x13da <__fp_trunc+0x1e>
    13e8:	08 95       	ret

000013ea <__fp_zero>:
    13ea:	e8 94       	clt

000013ec <__fp_szero>:
    13ec:	bb 27       	eor	r27, r27
    13ee:	66 27       	eor	r22, r22
    13f0:	77 27       	eor	r23, r23
    13f2:	cb 01       	movw	r24, r22
    13f4:	97 f9       	bld	r25, 7
    13f6:	08 95       	ret

000013f8 <lrint>:
    13f8:	c7 df       	rcall	.-114    	; 0x1388 <__fp_splitA>
    13fa:	a8 f1       	brcs	.+106    	; 0x1466 <lrint+0x6e>
    13fc:	9e 57       	subi	r25, 0x7E	; 126
    13fe:	a8 f1       	brcs	.+106    	; 0x146a <lrint+0x72>
    1400:	98 51       	subi	r25, 0x18	; 24
    1402:	60 f0       	brcs	.+24     	; 0x141c <lrint+0x24>
    1404:	39 f1       	breq	.+78     	; 0x1454 <lrint+0x5c>
    1406:	98 30       	cpi	r25, 0x08	; 8
    1408:	70 f5       	brcc	.+92     	; 0x1466 <lrint+0x6e>
    140a:	09 2e       	mov	r0, r25
    140c:	99 27       	eor	r25, r25
    140e:	66 0f       	add	r22, r22
    1410:	77 1f       	adc	r23, r23
    1412:	88 1f       	adc	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	d1 f7       	brne	.-12     	; 0x140e <lrint+0x16>
    141a:	1c c0       	rjmp	.+56     	; 0x1454 <lrint+0x5c>
    141c:	bb 27       	eor	r27, r27
    141e:	99 3f       	cpi	r25, 0xF9	; 249
    1420:	4c f4       	brge	.+18     	; 0x1434 <lrint+0x3c>
    1422:	b1 11       	cpse	r27, r1
    1424:	b1 e0       	ldi	r27, 0x01	; 1
    1426:	b6 2b       	or	r27, r22
    1428:	67 2f       	mov	r22, r23
    142a:	78 2f       	mov	r23, r24
    142c:	88 27       	eor	r24, r24
    142e:	98 5f       	subi	r25, 0xF8	; 248
    1430:	b1 f7       	brne	.-20     	; 0x141e <lrint+0x26>
    1432:	08 c0       	rjmp	.+16     	; 0x1444 <lrint+0x4c>
    1434:	86 95       	lsr	r24
    1436:	77 95       	ror	r23
    1438:	67 95       	ror	r22
    143a:	b7 95       	ror	r27
    143c:	08 f4       	brcc	.+2      	; 0x1440 <lrint+0x48>
    143e:	b1 60       	ori	r27, 0x01	; 1
    1440:	93 95       	inc	r25
    1442:	c1 f7       	brne	.-16     	; 0x1434 <lrint+0x3c>
    1444:	bb 0f       	add	r27, r27
    1446:	30 f4       	brcc	.+12     	; 0x1454 <lrint+0x5c>
    1448:	11 f4       	brne	.+4      	; 0x144e <lrint+0x56>
    144a:	60 ff       	sbrs	r22, 0
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <lrint+0x5c>
    144e:	6f 5f       	subi	r22, 0xFF	; 255
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8f 4f       	sbci	r24, 0xFF	; 255
    1454:	3e f4       	brtc	.+14     	; 0x1464 <lrint+0x6c>
    1456:	90 95       	com	r25
    1458:	80 95       	com	r24
    145a:	70 95       	com	r23
    145c:	61 95       	neg	r22
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8f 4f       	sbci	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	08 95       	ret
    1466:	68 94       	set
    1468:	c1 cf       	rjmp	.-126    	; 0x13ec <__fp_szero>
    146a:	bf cf       	rjmp	.-130    	; 0x13ea <__fp_zero>

0000146c <__mulsf3>:
    146c:	0b d0       	rcall	.+22     	; 0x1484 <__mulsf3x>
    146e:	73 cf       	rjmp	.-282    	; 0x1356 <__fp_round>
    1470:	64 df       	rcall	.-312    	; 0x133a <__fp_pscA>
    1472:	28 f0       	brcs	.+10     	; 0x147e <__mulsf3+0x12>
    1474:	69 df       	rcall	.-302    	; 0x1348 <__fp_pscB>
    1476:	18 f0       	brcs	.+6      	; 0x147e <__mulsf3+0x12>
    1478:	95 23       	and	r25, r21
    147a:	09 f0       	breq	.+2      	; 0x147e <__mulsf3+0x12>
    147c:	2c cf       	rjmp	.-424    	; 0x12d6 <__fp_inf>
    147e:	5a cf       	rjmp	.-332    	; 0x1334 <__fp_nan>
    1480:	11 24       	eor	r1, r1
    1482:	b4 cf       	rjmp	.-152    	; 0x13ec <__fp_szero>

00001484 <__mulsf3x>:
    1484:	79 df       	rcall	.-270    	; 0x1378 <__fp_split3>
    1486:	a0 f3       	brcs	.-24     	; 0x1470 <__mulsf3+0x4>

00001488 <__mulsf3_pse>:
    1488:	95 9f       	mul	r25, r21
    148a:	d1 f3       	breq	.-12     	; 0x1480 <__mulsf3+0x14>
    148c:	95 0f       	add	r25, r21
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	55 1f       	adc	r21, r21
    1492:	62 9f       	mul	r22, r18
    1494:	f0 01       	movw	r30, r0
    1496:	72 9f       	mul	r23, r18
    1498:	bb 27       	eor	r27, r27
    149a:	f0 0d       	add	r31, r0
    149c:	b1 1d       	adc	r27, r1
    149e:	63 9f       	mul	r22, r19
    14a0:	aa 27       	eor	r26, r26
    14a2:	f0 0d       	add	r31, r0
    14a4:	b1 1d       	adc	r27, r1
    14a6:	aa 1f       	adc	r26, r26
    14a8:	64 9f       	mul	r22, r20
    14aa:	66 27       	eor	r22, r22
    14ac:	b0 0d       	add	r27, r0
    14ae:	a1 1d       	adc	r26, r1
    14b0:	66 1f       	adc	r22, r22
    14b2:	82 9f       	mul	r24, r18
    14b4:	22 27       	eor	r18, r18
    14b6:	b0 0d       	add	r27, r0
    14b8:	a1 1d       	adc	r26, r1
    14ba:	62 1f       	adc	r22, r18
    14bc:	73 9f       	mul	r23, r19
    14be:	b0 0d       	add	r27, r0
    14c0:	a1 1d       	adc	r26, r1
    14c2:	62 1f       	adc	r22, r18
    14c4:	83 9f       	mul	r24, r19
    14c6:	a0 0d       	add	r26, r0
    14c8:	61 1d       	adc	r22, r1
    14ca:	22 1f       	adc	r18, r18
    14cc:	74 9f       	mul	r23, r20
    14ce:	33 27       	eor	r19, r19
    14d0:	a0 0d       	add	r26, r0
    14d2:	61 1d       	adc	r22, r1
    14d4:	23 1f       	adc	r18, r19
    14d6:	84 9f       	mul	r24, r20
    14d8:	60 0d       	add	r22, r0
    14da:	21 1d       	adc	r18, r1
    14dc:	82 2f       	mov	r24, r18
    14de:	76 2f       	mov	r23, r22
    14e0:	6a 2f       	mov	r22, r26
    14e2:	11 24       	eor	r1, r1
    14e4:	9f 57       	subi	r25, 0x7F	; 127
    14e6:	50 40       	sbci	r21, 0x00	; 0
    14e8:	8a f0       	brmi	.+34     	; 0x150c <__mulsf3_pse+0x84>
    14ea:	e1 f0       	breq	.+56     	; 0x1524 <__mulsf3_pse+0x9c>
    14ec:	88 23       	and	r24, r24
    14ee:	4a f0       	brmi	.+18     	; 0x1502 <__mulsf3_pse+0x7a>
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	bb 1f       	adc	r27, r27
    14f6:	66 1f       	adc	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	88 1f       	adc	r24, r24
    14fc:	91 50       	subi	r25, 0x01	; 1
    14fe:	50 40       	sbci	r21, 0x00	; 0
    1500:	a9 f7       	brne	.-22     	; 0x14ec <__mulsf3_pse+0x64>
    1502:	9e 3f       	cpi	r25, 0xFE	; 254
    1504:	51 05       	cpc	r21, r1
    1506:	70 f0       	brcs	.+28     	; 0x1524 <__mulsf3_pse+0x9c>
    1508:	e6 ce       	rjmp	.-564    	; 0x12d6 <__fp_inf>
    150a:	70 cf       	rjmp	.-288    	; 0x13ec <__fp_szero>
    150c:	5f 3f       	cpi	r21, 0xFF	; 255
    150e:	ec f3       	brlt	.-6      	; 0x150a <__mulsf3_pse+0x82>
    1510:	98 3e       	cpi	r25, 0xE8	; 232
    1512:	dc f3       	brlt	.-10     	; 0x150a <__mulsf3_pse+0x82>
    1514:	86 95       	lsr	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b7 95       	ror	r27
    151c:	f7 95       	ror	r31
    151e:	e7 95       	ror	r30
    1520:	9f 5f       	subi	r25, 0xFF	; 255
    1522:	c1 f7       	brne	.-16     	; 0x1514 <__mulsf3_pse+0x8c>
    1524:	fe 2b       	or	r31, r30
    1526:	88 0f       	add	r24, r24
    1528:	91 1d       	adc	r25, r1
    152a:	96 95       	lsr	r25
    152c:	87 95       	ror	r24
    152e:	97 f9       	bld	r25, 7
    1530:	08 95       	ret

00001532 <__udivmodsi4>:
    1532:	a1 e2       	ldi	r26, 0x21	; 33
    1534:	1a 2e       	mov	r1, r26
    1536:	aa 1b       	sub	r26, r26
    1538:	bb 1b       	sub	r27, r27
    153a:	fd 01       	movw	r30, r26
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <__udivmodsi4_ep>

0000153e <__udivmodsi4_loop>:
    153e:	aa 1f       	adc	r26, r26
    1540:	bb 1f       	adc	r27, r27
    1542:	ee 1f       	adc	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	a2 17       	cp	r26, r18
    1548:	b3 07       	cpc	r27, r19
    154a:	e4 07       	cpc	r30, r20
    154c:	f5 07       	cpc	r31, r21
    154e:	20 f0       	brcs	.+8      	; 0x1558 <__udivmodsi4_ep>
    1550:	a2 1b       	sub	r26, r18
    1552:	b3 0b       	sbc	r27, r19
    1554:	e4 0b       	sbc	r30, r20
    1556:	f5 0b       	sbc	r31, r21

00001558 <__udivmodsi4_ep>:
    1558:	66 1f       	adc	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	1a 94       	dec	r1
    1562:	69 f7       	brne	.-38     	; 0x153e <__udivmodsi4_loop>
    1564:	60 95       	com	r22
    1566:	70 95       	com	r23
    1568:	80 95       	com	r24
    156a:	90 95       	com	r25
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
    1570:	bd 01       	movw	r22, r26
    1572:	cf 01       	movw	r24, r30
    1574:	08 95       	ret

00001576 <__divmodsi4>:
    1576:	05 2e       	mov	r0, r21
    1578:	97 fb       	bst	r25, 7
    157a:	1e f4       	brtc	.+6      	; 0x1582 <__divmodsi4+0xc>
    157c:	00 94       	com	r0
    157e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__negsi2>
    1582:	57 fd       	sbrc	r21, 7
    1584:	07 d0       	rcall	.+14     	; 0x1594 <__divmodsi4_neg2>
    1586:	0e 94 99 0a 	call	0x1532	; 0x1532 <__udivmodsi4>
    158a:	07 fc       	sbrc	r0, 7
    158c:	03 d0       	rcall	.+6      	; 0x1594 <__divmodsi4_neg2>
    158e:	4e f4       	brtc	.+18     	; 0x15a2 <__divmodsi4_exit>
    1590:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__negsi2>

00001594 <__divmodsi4_neg2>:
    1594:	50 95       	com	r21
    1596:	40 95       	com	r20
    1598:	30 95       	com	r19
    159a:	21 95       	neg	r18
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	4f 4f       	sbci	r20, 0xFF	; 255
    15a0:	5f 4f       	sbci	r21, 0xFF	; 255

000015a2 <__divmodsi4_exit>:
    15a2:	08 95       	ret

000015a4 <__negsi2>:
    15a4:	90 95       	com	r25
    15a6:	80 95       	com	r24
    15a8:	70 95       	com	r23
    15aa:	61 95       	neg	r22
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <_exit>:
    15b4:	f8 94       	cli

000015b6 <__stop_program>:
    15b6:	ff cf       	rjmp	.-2      	; 0x15b6 <__stop_program>
