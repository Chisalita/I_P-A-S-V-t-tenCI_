
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001820  000018b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  00800104  00800104  000018b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000153d  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000883  00000000  00000000  00003005  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f0  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000654  00000000  00000000  00004278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000084d  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014e7  00000000  00000000  00005119  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  00006600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 e2       	ldi	r30, 0x20	; 32
      90:	f8 e1       	ldi	r31, 0x18	; 24
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 30       	cpi	r26, 0x04	; 4
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a4 e0       	ldi	r26, 0x04	; 4
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a0 36       	cpi	r26, 0x60	; 96
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 9c 00 	call	0x138	; 0x138 <main>
      b2:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initAll>:
int turning=0;



void initAll(){
	initUSART1(9600);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 58 05 	call	0xab0	; 0xab0 <initUSART1>
	initTimer0();
      c2:	0e 94 14 01 	call	0x228	; 0x228 <initTimer0>
	initTimer1();
      c6:	0e 94 ad 08 	call	0x115a	; 0x115a <initTimer1>
	initTimer2();
      ca:	0e 94 39 01 	call	0x272	; 0x272 <initTimer2>
	initSensors();
      ce:	0e 94 f5 01 	call	0x3ea	; 0x3ea <initSensors>
      d2:	08 95       	ret

000000d4 <executeCommands>:
	}
	
}


void executeCommands(){
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	61 97       	sbiw	r28, 0x11	; 17
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	f8 94       	cli
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	cd bf       	out	0x3d, r28	; 61
		//startUltrasonicMeasure();
	int8_t s;
	command lastcmd = getLastCommand(&s);
      ec:	ce 01       	movw	r24, r28
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	0e 94 9b 07 	call	0xf36	; 0xf36 <getLastCommand>
      f4:	2a 83       	std	Y+2, r18	; 0x02
      f6:	5d 83       	std	Y+5, r21	; 0x05
      f8:	6e 83       	std	Y+6, r22	; 0x06
      fa:	8d 81       	ldd	r24, Y+5	; 0x05
      fc:	9e 81       	ldd	r25, Y+6	; 0x06
	if(s==1){
      fe:	29 81       	ldd	r18, Y+1	; 0x01
     100:	21 30       	cpi	r18, 0x01	; 1
     102:	79 f4       	brne	.+30     	; 0x122 <executeCommands+0x4e>
		//CHECK CRC
		
		if(lastcmd.time){
     104:	00 97       	sbiw	r24, 0x00	; 0
     106:	69 f0       	breq	.+26     	; 0x122 <executeCommands+0x4e>

				sendByte((crc >> 8));//crc2	
					*/		
				
				response resp;
				resp.header = lastcmd.header;
     108:	0a 81       	ldd	r16, Y+2	; 0x02
				resp.sensorInfo[0]=2;
				resp.sensorInfo[1]=3;
				resp.time=lastcmd.time;
     10a:	78 2f       	mov	r23, r24
     10c:	99 8b       	std	Y+17, r25	; 0x11
     10e:	88 8b       	std	Y+16, r24	; 0x10
				sendResponse(resp);
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	23 e0       	ldi	r18, 0x03	; 3
     114:	3c 85       	ldd	r19, Y+12	; 0x0c
     116:	4d 85       	ldd	r20, Y+13	; 0x0d
     118:	5e 85       	ldd	r21, Y+14	; 0x0e
     11a:	6f 85       	ldd	r22, Y+15	; 0x0f
     11c:	89 89       	ldd	r24, Y+17	; 0x11
     11e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <sendResponse>
		changeMotorDirectionRF();
	
	}
	*/
	
     122:	61 96       	adiw	r28, 0x11	; 17
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	1f 91       	pop	r17
     134:	0f 91       	pop	r16
     136:	08 95       	ret

00000138 <main>:


int main(void)
{
	
	initAll();
     138:	0e 94 5d 00 	call	0xba	; 0xba <initAll>
	initTimer2();
	initSensors();
	*/

	
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
     13c:	0f 9a       	sbi	0x01, 7	; 1
	
	sei();
     13e:	78 94       	sei

	breakAll();
     140:	0e 94 03 01 	call	0x206	; 0x206 <breakAll>
		
	
	while(1)
	{
		executeCommands();		
     144:	0e 94 6a 00 	call	0xd4	; 0xd4 <executeCommands>
     148:	fd cf       	rjmp	.-6      	; 0x144 <main+0xc>

0000014a <changePwm_MotorLF>:
#include <Time/time.h>
////
#include <Communication/communication.h> //TESTE

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     14a:	bc 01       	movw	r22, r24
     14c:	88 27       	eor	r24, r24
     14e:	77 fd       	sbrc	r23, 7
     150:	80 95       	com	r24
     152:	98 2f       	mov	r25, r24
     154:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	48 ec       	ldi	r20, 0xC8	; 200
     15e:	52 e4       	ldi	r21, 0x42	; 66
     160:	0e 94 af 09 	call	0x135e	; 0x135e <__divsf3>
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	4f e7       	ldi	r20, 0x7F	; 127
     16a:	53 e4       	ldi	r21, 0x43	; 67
     16c:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     170:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     174:	67 bd       	out	0x27, r22	; 39
     176:	08 95       	ret

00000178 <changePwm_MotorLB>:
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     178:	bc 01       	movw	r22, r24
     17a:	88 27       	eor	r24, r24
     17c:	77 fd       	sbrc	r23, 7
     17e:	80 95       	com	r24
     180:	98 2f       	mov	r25, r24
     182:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	48 ec       	ldi	r20, 0xC8	; 200
     18c:	52 e4       	ldi	r21, 0x42	; 66
     18e:	0e 94 af 09 	call	0x135e	; 0x135e <__divsf3>
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	4f e7       	ldi	r20, 0x7F	; 127
     198:	53 e4       	ldi	r21, 0x43	; 67
     19a:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     19e:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     1a2:	68 bd       	out	0x28, r22	; 40
     1a4:	08 95       	ret

000001a6 <changePwm_MotorRF>:
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     1a6:	bc 01       	movw	r22, r24
     1a8:	88 27       	eor	r24, r24
     1aa:	77 fd       	sbrc	r23, 7
     1ac:	80 95       	com	r24
     1ae:	98 2f       	mov	r25, r24
     1b0:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	48 ec       	ldi	r20, 0xC8	; 200
     1ba:	52 e4       	ldi	r21, 0x42	; 66
     1bc:	0e 94 af 09 	call	0x135e	; 0x135e <__divsf3>
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	4f e7       	ldi	r20, 0x7F	; 127
     1c6:	53 e4       	ldi	r21, 0x43	; 67
     1c8:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     1cc:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     1d0:	60 93 b3 00 	sts	0x00B3, r22
     1d4:	08 95       	ret

000001d6 <changePwm_MotorRB>:
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     1d6:	bc 01       	movw	r22, r24
     1d8:	88 27       	eor	r24, r24
     1da:	77 fd       	sbrc	r23, 7
     1dc:	80 95       	com	r24
     1de:	98 2f       	mov	r25, r24
     1e0:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	48 ec       	ldi	r20, 0xC8	; 200
     1ea:	52 e4       	ldi	r21, 0x42	; 66
     1ec:	0e 94 af 09 	call	0x135e	; 0x135e <__divsf3>
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	4f e7       	ldi	r20, 0x7F	; 127
     1f6:	53 e4       	ldi	r21, 0x43	; 67
     1f8:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     1fc:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     200:	60 93 b4 00 	sts	0x00B4, r22
     204:	08 95       	ret

00000206 <breakAll>:
}



void breakAll(){
	changePwm_MotorLF(0);
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 a5 00 	call	0x14a	; 0x14a <changePwm_MotorLF>
	changePwm_MotorLB(0);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 bc 00 	call	0x178	; 0x178 <changePwm_MotorLB>
	changePwm_MotorRF(0);
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <changePwm_MotorRF>
	changePwm_MotorRB(0);
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <changePwm_MotorRB>
     226:	08 95       	ret

00000228 <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LF_DIR_DDR1 |= (1<<MOTOR_LF_DIR_PIN1x);
     228:	20 9a       	sbi	0x04, 0	; 4
	MOTOR_LF_DIR_DDR2 |= (1<<MOTOR_LF_DIR_PIN2x);
     22a:	21 9a       	sbi	0x04, 1	; 4
	MOTOR_LB_DIR_DDR1 |= (1<<MOTOR_LB_DIR_PIN1x);
     22c:	22 9a       	sbi	0x04, 2	; 4
	MOTOR_LB_DIR_DDR2 |= (1<<MOTOR_LB_DIR_PIN1x);
     22e:	22 9a       	sbi	0x04, 2	; 4
	
	//setez directia initiala
	MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     230:	29 9a       	sbi	0x05, 1	; 5
	MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     232:	28 98       	cbi	0x05, 0	; 5
	MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     234:	2d 9a       	sbi	0x05, 5	; 5
	MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     236:	2a 98       	cbi	0x05, 2	; 5
	
	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     238:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     23a:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     23c:	84 b5       	in	r24, 0x24	; 36
     23e:	80 68       	ori	r24, 0x80	; 128
     240:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     242:	84 b5       	in	r24, 0x24	; 36
     244:	8f 7b       	andi	r24, 0xBF	; 191
     246:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     248:	84 b5       	in	r24, 0x24	; 36
     24a:	80 62       	ori	r24, 0x20	; 32
     24c:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     24e:	84 b5       	in	r24, 0x24	; 36
     250:	8f 7e       	andi	r24, 0xEF	; 239
     252:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     254:	84 b5       	in	r24, 0x24	; 36
     256:	83 60       	ori	r24, 0x03	; 3
     258:	84 bd       	out	0x24, r24	; 36
	
	// setez factorul de umplere
	changePwm_MotorLF(0);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 a5 00 	call	0x14a	; 0x14a <changePwm_MotorLF>
	changePwm_MotorLB(0);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 bc 00 	call	0x178	; 0x178 <changePwm_MotorLB>
	
	// reset counter
	TCNT0 = 0;
     26a:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	85 bd       	out	0x25, r24	; 37
     270:	08 95       	ret

00000272 <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RF_DIR_DDR1 |= (1<<MOTOR_RF_DIR_PIN1x);
     272:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RF_DIR_DDR2 |= (1<<MOTOR_RF_DIR_PIN2x);
     274:	3f 9a       	sbi	0x07, 7	; 7
	MOTOR_RB_DIR_DDR1 |= (1<<MOTOR_RB_DIR_PIN1x);
     276:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_RB_DIR_DDR2 |= (1<<MOTOR_RB_DIR_PIN2x);
     278:	39 9a       	sbi	0x07, 1	; 7
	
	//setez directia initiala
	MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     27a:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     27c:	46 98       	cbi	0x08, 6	; 8
	MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     27e:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);	
     280:	40 98       	cbi	0x08, 0	; 8
	
	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     282:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     284:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     286:	e0 eb       	ldi	r30, 0xB0	; 176
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	80 68       	ori	r24, 0x80	; 128
     28e:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     290:	80 81       	ld	r24, Z
     292:	8f 7b       	andi	r24, 0xBF	; 191
     294:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     296:	80 81       	ld	r24, Z
     298:	80 62       	ori	r24, 0x20	; 32
     29a:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     29c:	80 81       	ld	r24, Z
     29e:	8f 7e       	andi	r24, 0xEF	; 239
     2a0:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     2a2:	80 81       	ld	r24, Z
     2a4:	83 60       	ori	r24, 0x03	; 3
     2a6:	80 83       	st	Z, r24
	
	// setez factorul de umplere
	changePwm_MotorRF(0);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <changePwm_MotorRF>
	changePwm_MotorRB(0);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <changePwm_MotorRB>

	// reset counter
	TCNT2 = 0;
     2b8:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     2bc:	e1 eb       	ldi	r30, 0xB1	; 177
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8c 7f       	andi	r24, 0xFC	; 252
     2c4:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     2c6:	80 81       	ld	r24, Z
     2c8:	84 60       	ori	r24, 0x04	; 4
     2ca:	80 83       	st	Z, r24
     2cc:	08 95       	ret

000002ce <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	9c 01       	movw	r18, r24
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0.0;
     2d8:	fa 01       	movw	r30, r20
     2da:	ee 0f       	add	r30, r30
     2dc:	ff 1f       	adc	r31, r31
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	e8 5e       	subi	r30, 0xE8	; 232
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	10 82       	st	Z, r1
     2e8:	11 82       	std	Z+1, r1	; 0x01
     2ea:	12 82       	std	Z+2, r1	; 0x02
     2ec:	13 82       	std	Z+3, r1	; 0x03
     2ee:	4f 5f       	subi	r20, 0xFF	; 255
     2f0:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     2f2:	4a 30       	cpi	r20, 0x0A	; 10
     2f4:	51 05       	cpc	r21, r1
     2f6:	81 f7       	brne	.-32     	; 0x2d8 <initUSART0+0xa>
		UltraSonicValues[i] = 0.0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     2f8:	10 92 40 01 	sts	0x0140, r1
     2fc:	10 92 41 01 	sts	0x0141, r1
     300:	10 92 42 01 	sts	0x0142, r1
     304:	10 92 43 01 	sts	0x0143, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     308:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     30a:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     30c:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     30e:	c2 ec       	ldi	r28, 0xC2	; 194
     310:	d0 e0       	ldi	r29, 0x00	; 0
     312:	88 81       	ld	r24, Y
     314:	8f 73       	andi	r24, 0x3F	; 63
     316:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     318:	e0 ec       	ldi	r30, 0xC0	; 192
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	8d 7f       	andi	r24, 0xFD	; 253
     320:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     322:	c9 01       	movw	r24, r18
     324:	aa 27       	eor	r26, r26
     326:	97 fd       	sbrc	r25, 7
     328:	a0 95       	com	r26
     32a:	ba 2f       	mov	r27, r26
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	aa 1f       	adc	r26, r26
     332:	bb 1f       	adc	r27, r27
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	aa 1f       	adc	r26, r26
     33a:	bb 1f       	adc	r27, r27
     33c:	9c 01       	movw	r18, r24
     33e:	ad 01       	movw	r20, r26
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	44 1f       	adc	r20, r20
     346:	55 1f       	adc	r21, r21
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	44 1f       	adc	r20, r20
     34e:	55 1f       	adc	r21, r21
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	72 e1       	ldi	r23, 0x12	; 18
     354:	8a e7       	ldi	r24, 0x7A	; 122
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__divmodsi4>
     35c:	ca 01       	movw	r24, r20
     35e:	b9 01       	movw	r22, r18
     360:	61 50       	subi	r22, 0x01	; 1
     362:	71 09       	sbc	r23, r1
     364:	81 09       	sbc	r24, r1
     366:	91 09       	sbc	r25, r1
     368:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     36c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     370:	27 2f       	mov	r18, r23
     372:	33 27       	eor	r19, r19
     374:	27 fd       	sbrc	r18, 7
     376:	3a 95       	dec	r19
     378:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     37c:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     380:	e1 ec       	ldi	r30, 0xC1	; 193
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 e1       	ldi	r24, 0x10	; 16
     386:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     388:	88 81       	ld	r24, Y
     38a:	86 60       	ori	r24, 0x06	; 6
     38c:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     38e:	80 81       	ld	r24, Z
     390:	8b 7f       	andi	r24, 0xFB	; 251
     392:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     394:	88 81       	ld	r24, Y
     396:	87 7f       	andi	r24, 0xF7	; 247
     398:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     39a:	88 81       	ld	r24, Y
     39c:	8f 7c       	andi	r24, 0xCF	; 207
     39e:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     3a0:	80 81       	ld	r24, Z
     3a2:	80 68       	ori	r24, 0x80	; 128
     3a4:	80 83       	st	Z, r24
	
		
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <initADC>:

void  initADC(void)
{

	//set Vref to Vcc
	ADMUX |= (1<<REFS0);
     3ac:	ec e7       	ldi	r30, 0x7C	; 124
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     3b6:	80 81       	ld	r24, Z
     3b8:	8f 77       	andi	r24, 0x7F	; 127
     3ba:	80 83       	st	Z, r24
	
	//select ADC0
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     3bc:	80 81       	ld	r24, Z
     3be:	80 7e       	andi	r24, 0xE0	; 224
     3c0:	80 83       	st	Z, r24

	//enable the ADC
	ADCSRA |= (1<<ADEN);
     3c2:	ea e7       	ldi	r30, 0x7A	; 122
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	80 68       	ori	r24, 0x80	; 128
     3ca:	80 83       	st	Z, r24
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     3cc:	80 81       	ld	r24, Z
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     3d2:	80 81       	ld	r24, Z
     3d4:	87 60       	ori	r24, 0x07	; 7
     3d6:	80 83       	st	Z, r24
	//select free running mode
	//ADCSRB &= ~( (1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2) );


	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC0D) | (1<<ADC1D) | (1<<ADC2D) | (1<<ADC3D) ;
     3d8:	ae e7       	ldi	r26, 0x7E	; 126
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	8c 91       	ld	r24, X
     3de:	8f 60       	ori	r24, 0x0F	; 15
     3e0:	8c 93       	st	X, r24


	//start conversion
	ADCSRA |= (1<<ADSC);
     3e2:	80 81       	ld	r24, Z
     3e4:	80 64       	ori	r24, 0x40	; 64
     3e6:	80 83       	st	Z, r24
     3e8:	08 95       	ret

000003ea <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     3ea:	08 98       	cbi	0x01, 0	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     3ec:	09 98       	cbi	0x01, 1	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     3ee:	0a 98       	cbi	0x01, 2	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     3f0:	0b 98       	cbi	0x01, 3	; 1
	
	initADC();
     3f2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <initADC>
	initUSART0(9600);
     3f6:	80 e8       	ldi	r24, 0x80	; 128
     3f8:	95 e2       	ldi	r25, 0x25	; 37
     3fa:	0e 94 67 01 	call	0x2ce	; 0x2ce <initUSART0>
     3fe:	08 95       	ret

00000400 <__vector_24>:
	//start conversion
	ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     400:	1f 92       	push	r1
     402:	0f 92       	push	r0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	0f 92       	push	r0
     408:	11 24       	eor	r1, r1
     40a:	2f 93       	push	r18
     40c:	3f 93       	push	r19
     40e:	4f 93       	push	r20
     410:	5f 93       	push	r21
     412:	6f 93       	push	r22
     414:	7f 93       	push	r23
     416:	8f 93       	push	r24
     418:	9f 93       	push	r25
     41a:	af 93       	push	r26
     41c:	bf 93       	push	r27
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     426:	40 91 78 00 	lds	r20, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     42a:	80 91 79 00 	lds	r24, 0x0079
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	58 2b       	or	r21, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     432:	40 31       	cpi	r20, 0x10	; 16
     434:	51 05       	cpc	r21, r1
     436:	10 f4       	brcc	.+4      	; 0x43c <__vector_24+0x3c>
     438:	40 e1       	ldi	r20, 0x10	; 16
     43a:	50 e0       	ldi	r21, 0x00	; 0
		distance = 30.0;
	}
	*/
	
		
		dis[i%MAX] = 2076.0 / (theTenBitResult - 11.0);
     43c:	e0 91 0b 01 	lds	r30, 0x010B
     440:	f0 91 0c 01 	lds	r31, 0x010C
     444:	9f 01       	movw	r18, r30
     446:	ab ea       	ldi	r26, 0xAB	; 171
     448:	ba ea       	ldi	r27, 0xAA	; 170
     44a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     44e:	ec 01       	movw	r28, r24
     450:	d6 95       	lsr	r29
     452:	c7 95       	ror	r28
     454:	ce 01       	movw	r24, r28
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	c8 0f       	add	r28, r24
     45c:	d9 1f       	adc	r29, r25
     45e:	2c 1b       	sub	r18, r28
     460:	3d 0b       	sbc	r19, r29
     462:	e9 01       	movw	r28, r18
     464:	ba 01       	movw	r22, r20
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 43 0a 	call	0x1486	; 0x1486 <__floatunsisf>
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e3       	ldi	r20, 0x30	; 48
     474:	51 e4       	ldi	r21, 0x41	; 65
     476:	0e 94 46 09 	call	0x128c	; 0x128c <__subsf3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 ec       	ldi	r23, 0xC0	; 192
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	95 e4       	ldi	r25, 0x45	; 69
     486:	0e 94 af 09 	call	0x135e	; 0x135e <__divsf3>
     48a:	cc 0f       	add	r28, r28
     48c:	dd 1f       	adc	r29, r29
     48e:	cc 0f       	add	r28, r28
     490:	dd 1f       	adc	r29, r29
     492:	cc 5b       	subi	r28, 0xBC	; 188
     494:	de 4f       	sbci	r29, 0xFE	; 254
     496:	68 83       	st	Y, r22
     498:	79 83       	std	Y+1, r23	; 0x01
     49a:	8a 83       	std	Y+2, r24	; 0x02
     49c:	9b 83       	std	Y+3, r25	; 0x03
		
		//under lower limit
		if (dis[i%MAX] < 4.0)
     49e:	40 91 0b 01 	lds	r20, 0x010B
     4a2:	50 91 0c 01 	lds	r21, 0x010C
     4a6:	9a 01       	movw	r18, r20
     4a8:	ab ea       	ldi	r26, 0xAB	; 171
     4aa:	ba ea       	ldi	r27, 0xAA	; 170
     4ac:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     4b0:	96 95       	lsr	r25
     4b2:	87 95       	ror	r24
     4b4:	9c 01       	movw	r18, r24
     4b6:	22 0f       	add	r18, r18
     4b8:	33 1f       	adc	r19, r19
     4ba:	82 0f       	add	r24, r18
     4bc:	93 1f       	adc	r25, r19
     4be:	9a 01       	movw	r18, r20
     4c0:	28 1b       	sub	r18, r24
     4c2:	39 0b       	sbc	r19, r25
     4c4:	f9 01       	movw	r30, r18
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	ec 5b       	subi	r30, 0xBC	; 188
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	60 81       	ld	r22, Z
     4d4:	71 81       	ldd	r23, Z+1	; 0x01
     4d6:	82 81       	ldd	r24, Z+2	; 0x02
     4d8:	93 81       	ldd	r25, Z+3	; 0x03
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	40 e8       	ldi	r20, 0x80	; 128
     4e0:	50 e4       	ldi	r21, 0x40	; 64
     4e2:	0e 94 ab 09 	call	0x1356	; 0x1356 <__cmpsf2>
     4e6:	88 23       	and	r24, r24
     4e8:	14 f5       	brge	.+68     	; 0x52e <__vector_24+0x12e>
		{
			dis[i%MAX] =4.0;
     4ea:	40 91 0b 01 	lds	r20, 0x010B
     4ee:	50 91 0c 01 	lds	r21, 0x010C
     4f2:	9a 01       	movw	r18, r20
     4f4:	ab ea       	ldi	r26, 0xAB	; 171
     4f6:	ba ea       	ldi	r27, 0xAA	; 170
     4f8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     4fc:	96 95       	lsr	r25
     4fe:	87 95       	ror	r24
     500:	9c 01       	movw	r18, r24
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	82 0f       	add	r24, r18
     508:	93 1f       	adc	r25, r19
     50a:	9a 01       	movw	r18, r20
     50c:	28 1b       	sub	r18, r24
     50e:	39 0b       	sbc	r19, r25
     510:	f9 01       	movw	r30, r18
     512:	ee 0f       	add	r30, r30
     514:	ff 1f       	adc	r31, r31
     516:	ee 0f       	add	r30, r30
     518:	ff 1f       	adc	r31, r31
     51a:	ec 5b       	subi	r30, 0xBC	; 188
     51c:	fe 4f       	sbci	r31, 0xFE	; 254
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e8       	ldi	r26, 0x80	; 128
     524:	b0 e4       	ldi	r27, 0x40	; 64
     526:	80 83       	st	Z, r24
     528:	91 83       	std	Z+1, r25	; 0x01
     52a:	a2 83       	std	Z+2, r26	; 0x02
     52c:	b3 83       	std	Z+3, r27	; 0x03
		}
		
		//above upper limit
		if (dis[i%MAX] > 30.0)
     52e:	40 91 0b 01 	lds	r20, 0x010B
     532:	50 91 0c 01 	lds	r21, 0x010C
     536:	9a 01       	movw	r18, r20
     538:	ab ea       	ldi	r26, 0xAB	; 171
     53a:	ba ea       	ldi	r27, 0xAA	; 170
     53c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     540:	96 95       	lsr	r25
     542:	87 95       	ror	r24
     544:	9c 01       	movw	r18, r24
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	82 0f       	add	r24, r18
     54c:	93 1f       	adc	r25, r19
     54e:	9a 01       	movw	r18, r20
     550:	28 1b       	sub	r18, r24
     552:	39 0b       	sbc	r19, r25
     554:	f9 01       	movw	r30, r18
     556:	ee 0f       	add	r30, r30
     558:	ff 1f       	adc	r31, r31
     55a:	ee 0f       	add	r30, r30
     55c:	ff 1f       	adc	r31, r31
     55e:	ec 5b       	subi	r30, 0xBC	; 188
     560:	fe 4f       	sbci	r31, 0xFE	; 254
     562:	60 81       	ld	r22, Z
     564:	71 81       	ldd	r23, Z+1	; 0x01
     566:	82 81       	ldd	r24, Z+2	; 0x02
     568:	93 81       	ldd	r25, Z+3	; 0x03
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 ef       	ldi	r20, 0xF0	; 240
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__gesf2>
     576:	18 16       	cp	r1, r24
     578:	14 f5       	brge	.+68     	; 0x5be <__vector_24+0x1be>
		{
			
			dis[i%MAX] = 30.0;
     57a:	40 91 0b 01 	lds	r20, 0x010B
     57e:	50 91 0c 01 	lds	r21, 0x010C
     582:	9a 01       	movw	r18, r20
     584:	ab ea       	ldi	r26, 0xAB	; 171
     586:	ba ea       	ldi	r27, 0xAA	; 170
     588:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	9c 01       	movw	r18, r24
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	9a 01       	movw	r18, r20
     59c:	28 1b       	sub	r18, r24
     59e:	39 0b       	sbc	r19, r25
     5a0:	f9 01       	movw	r30, r18
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	ec 5b       	subi	r30, 0xBC	; 188
     5ac:	fe 4f       	sbci	r31, 0xFE	; 254
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	a0 ef       	ldi	r26, 0xF0	; 240
     5b4:	b1 e4       	ldi	r27, 0x41	; 65
     5b6:	80 83       	st	Z, r24
     5b8:	91 83       	std	Z+1, r25	; 0x01
     5ba:	a2 83       	std	Z+2, r26	; 0x02
     5bc:	b3 83       	std	Z+3, r27	; 0x03
		}
	
	
	i++;
     5be:	80 91 0b 01 	lds	r24, 0x010B
     5c2:	90 91 0c 01 	lds	r25, 0x010C
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	90 93 0c 01 	sts	0x010C, r25
     5cc:	80 93 0b 01 	sts	0x010B, r24
	ADCSRA |= 1<<ADSC;
     5d0:	ea e7       	ldi	r30, 0x7A	; 122
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	80 64       	ori	r24, 0x40	; 64
     5d8:	80 83       	st	Z, r24
}
     5da:	ff 91       	pop	r31
     5dc:	ef 91       	pop	r30
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	7f 91       	pop	r23
     5ec:	6f 91       	pop	r22
     5ee:	5f 91       	pop	r21
     5f0:	4f 91       	pop	r20
     5f2:	3f 91       	pop	r19
     5f4:	2f 91       	pop	r18
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_20>:

ISR(USART0_RX_vect){
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	1f 93       	push	r17
     614:	2f 93       	push	r18
     616:	3f 93       	push	r19
     618:	4f 93       	push	r20
     61a:	5f 93       	push	r21
     61c:	6f 93       	push	r22
     61e:	7f 93       	push	r23
     620:	8f 93       	push	r24
     622:	9f 93       	push	r25
     624:	af 93       	push	r26
     626:	bf 93       	push	r27
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31


	uint8_t data;
	data = UDR0;
     630:	c0 91 c6 00 	lds	r28, 0x00C6
	
	if(data == 0x52){ //start of data
     634:	c2 35       	cpi	r28, 0x52	; 82
     636:	39 f4       	brne	.+14     	; 0x646 <__vector_20+0x46>
		ultrasonicDataPack[0] = 'R';
     638:	82 e5       	ldi	r24, 0x52	; 82
     63a:	80 93 40 01 	sts	0x0140, r24
		US_data_part_no=1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 06 01 	sts	0x0106, r24
     644:	9b c0       	rjmp	.+310    	; 0x77c <__vector_20+0x17c>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     646:	80 91 40 01 	lds	r24, 0x0140
     64a:	82 35       	cpi	r24, 0x52	; 82
     64c:	09 f0       	breq	.+2      	; 0x650 <__vector_20+0x50>
     64e:	63 c0       	rjmp	.+198    	; 0x716 <__vector_20+0x116>
     650:	80 91 06 01 	lds	r24, 0x0106
     654:	84 30       	cpi	r24, 0x04	; 4
     656:	09 f0       	breq	.+2      	; 0x65a <__vector_20+0x5a>
     658:	5e c0       	rjmp	.+188    	; 0x716 <__vector_20+0x116>
     65a:	cd 30       	cpi	r28, 0x0D	; 13
     65c:	09 f0       	breq	.+2      	; 0x660 <__vector_20+0x60>
     65e:	5b c0       	rjmp	.+182    	; 0x716 <__vector_20+0x116>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     660:	60 91 41 01 	lds	r22, 0x0141
     664:	10 91 42 01 	lds	r17, 0x0142
     668:	d0 91 43 01 	lds	r29, 0x0143
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	48 ec       	ldi	r20, 0xC8	; 200
     67c:	52 e4       	ldi	r21, 0x42	; 66
     67e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
     686:	61 2f       	mov	r22, r17
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	40 e2       	ldi	r20, 0x20	; 32
     698:	51 e4       	ldi	r21, 0x41	; 65
     69a:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	0e 94 47 09 	call	0x128e	; 0x128e <__addsf3>
     6aa:	6b 01       	movw	r12, r22
     6ac:	7c 01       	movw	r14, r24
     6ae:	6d 2f       	mov	r22, r29
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     6ba:	9b 01       	movw	r18, r22
     6bc:	ac 01       	movw	r20, r24
     6be:	c7 01       	movw	r24, r14
     6c0:	b6 01       	movw	r22, r12
     6c2:	0e 94 47 09 	call	0x128e	; 0x128e <__addsf3>
			//transform from inch to cm
			val *= 2.54;
     6c6:	2c e5       	ldi	r18, 0x5C	; 92
     6c8:	3f e8       	ldi	r19, 0x8F	; 143
     6ca:	42 e2       	ldi	r20, 0x22	; 34
     6cc:	50 e4       	ldi	r21, 0x40	; 64
     6ce:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
			UltraSonicValues[US_pos_in_buffer] = val;
     6d2:	e0 91 05 01 	lds	r30, 0x0105
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	e8 5e       	subi	r30, 0xE8	; 232
     6e2:	fe 4f       	sbci	r31, 0xFE	; 254
     6e4:	60 83       	st	Z, r22
     6e6:	71 83       	std	Z+1, r23	; 0x01
     6e8:	82 83       	std	Z+2, r24	; 0x02
     6ea:	93 83       	std	Z+3, r25	; 0x03
			lastUSonicValue = val;
     6ec:	60 93 07 01 	sts	0x0107, r22
     6f0:	70 93 08 01 	sts	0x0108, r23
     6f4:	80 93 09 01 	sts	0x0109, r24
     6f8:	90 93 0a 01 	sts	0x010A, r25
			US_pos_in_buffer++;
     6fc:	80 91 05 01 	lds	r24, 0x0105
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	80 93 05 01 	sts	0x0105, r24

			if (US_pos_in_buffer>=MAX_ULTRASONIC_VALUES){ //reset buff pos
     706:	80 91 05 01 	lds	r24, 0x0105
     70a:	8a 30       	cpi	r24, 0x0A	; 10
     70c:	40 f1       	brcs	.+80     	; 0x75e <__vector_20+0x15e>
				US_pos_in_buffer =0;
     70e:	10 92 05 01 	sts	0x0105, r1
     712:	25 c0       	rjmp	.+74     	; 0x75e <__vector_20+0x15e>
					ultrasonicDataPack[i] = 0;
				}
				US_data_part_no=0;
				
				if(US_manual_start){//stop measuring if it is on manual
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     714:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     716:	80 91 06 01 	lds	r24, 0x0106
     71a:	84 30       	cpi	r24, 0x04	; 4
     71c:	50 f0       	brcs	.+20     	; 0x732 <__vector_20+0x132>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     71e:	10 92 40 01 	sts	0x0140, r1
     722:	10 92 41 01 	sts	0x0141, r1
     726:	10 92 42 01 	sts	0x0142, r1
     72a:	10 92 43 01 	sts	0x0143, r1
			}
			US_data_part_no=0;
     72e:	10 92 06 01 	sts	0x0106, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     732:	80 91 40 01 	lds	r24, 0x0140
     736:	82 35       	cpi	r24, 0x52	; 82
     738:	09 f5       	brne	.+66     	; 0x77c <__vector_20+0x17c>
			if (isdigit(data))
     73a:	8c 2f       	mov	r24, r28
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	c0 97       	sbiw	r24, 0x30	; 48
     740:	0a 97       	sbiw	r24, 0x0a	; 10
     742:	e0 f4       	brcc	.+56     	; 0x77c <__vector_20+0x17c>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     744:	e0 91 06 01 	lds	r30, 0x0106
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	c0 53       	subi	r28, 0x30	; 48
     74c:	e0 5c       	subi	r30, 0xC0	; 192
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	c0 83       	st	Z, r28
				US_data_part_no++;
     752:	80 91 06 01 	lds	r24, 0x0106
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	80 93 06 01 	sts	0x0106, r24
     75c:	0f c0       	rjmp	.+30     	; 0x77c <__vector_20+0x17c>
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     75e:	10 92 40 01 	sts	0x0140, r1
     762:	10 92 41 01 	sts	0x0141, r1
     766:	10 92 42 01 	sts	0x0142, r1
     76a:	10 92 43 01 	sts	0x0143, r1
				}
				US_data_part_no=0;
     76e:	10 92 06 01 	sts	0x0106, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     772:	80 91 04 01 	lds	r24, 0x0104
     776:	81 11       	cpse	r24, r1
     778:	cd cf       	rjmp	.-102    	; 0x714 <__vector_20+0x114>
     77a:	cd cf       	rjmp	.-102    	; 0x716 <__vector_20+0x116>
			
		}
				
	}

}
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	bf 91       	pop	r27
     786:	af 91       	pop	r26
     788:	9f 91       	pop	r25
     78a:	8f 91       	pop	r24
     78c:	7f 91       	pop	r23
     78e:	6f 91       	pop	r22
     790:	5f 91       	pop	r21
     792:	4f 91       	pop	r20
     794:	3f 91       	pop	r19
     796:	2f 91       	pop	r18
     798:	1f 91       	pop	r17
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <checkPackIsFullLength>:
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
	
}

int8_t checkPackIsFullLength(uint8_t lastPackPos){
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
	uint8_t pc_no;
	
	if(rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no == -1){
     7b4:	23 e0       	ldi	r18, 0x03	; 3
     7b6:	82 9f       	mul	r24, r18
     7b8:	21 2d       	mov	r18, r1
     7ba:	11 24       	eor	r1, r1
     7bc:	98 2f       	mov	r25, r24
     7be:	92 1b       	sub	r25, r18
     7c0:	96 95       	lsr	r25
     7c2:	92 0f       	add	r25, r18
     7c4:	92 95       	swap	r25
     7c6:	96 95       	lsr	r25
     7c8:	96 95       	lsr	r25
     7ca:	93 70       	andi	r25, 0x03	; 3
     7cc:	29 2f       	mov	r18, r25
     7ce:	27 95       	ror	r18
     7d0:	22 27       	eor	r18, r18
     7d2:	27 95       	ror	r18
     7d4:	29 1b       	sub	r18, r25
     7d6:	48 2f       	mov	r20, r24
     7d8:	42 1b       	sub	r20, r18
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	fa 01       	movw	r30, r20
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	e0 5b       	subi	r30, 0xB0	; 176
     7e4:	fe 4f       	sbci	r31, 0xFE	; 254
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	9f 3f       	cpi	r25, 0xFF	; 255
     7ea:	09 f4       	brne	.+2      	; 0x7ee <checkPackIsFullLength+0x42>
     7ec:	46 c0       	rjmp	.+140    	; 0x87a <checkPackIsFullLength+0xce>
		return 0;
	}else{
		pc_no = rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no;
     7ee:	fa 01       	movw	r30, r20
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	e0 5b       	subi	r30, 0xB0	; 176
     7f6:	fe 4f       	sbci	r31, 0xFE	; 254
     7f8:	11 81       	ldd	r17, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
     7fa:	28 2f       	mov	r18, r24
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	c9 01       	movw	r24, r18
     800:	6f e7       	ldi	r22, 0x7F	; 127
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     808:	fc 01       	movw	r30, r24
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	e0 5b       	subi	r30, 0xB0	; 176
     810:	fe 4f       	sbci	r31, 0xFE	; 254
     812:	41 81       	ldd	r20, Z+1	; 0x01
     814:	4f 3f       	cpi	r20, 0xFF	; 255
     816:	99 f1       	breq	.+102    	; 0x87e <checkPackIsFullLength+0xd2>
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
     818:	fc 01       	movw	r30, r24
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	e0 5b       	subi	r30, 0xB0	; 176
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	c1 81       	ldd	r28, Z+1	; 0x01
     824:	dd 27       	eor	r29, r29
     826:	c7 fd       	sbrc	r28, 7
     828:	d0 95       	com	r29
     82a:	81 2f       	mov	r24, r17
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	c8 17       	cp	r28, r24
     830:	d9 07       	cpc	r29, r25
     832:	39 f5       	brne	.+78     	; 0x882 <checkPackIsFullLength+0xd6>
     834:	2f 5f       	subi	r18, 0xFF	; 255
     836:	3f 4f       	sbci	r19, 0xFF	; 255
     838:	46 e0       	ldi	r20, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
     83a:	0f e7       	ldi	r16, 0x7F	; 127
     83c:	10 e0       	ldi	r17, 0x00	; 0
     83e:	c9 01       	movw	r24, r18
     840:	b8 01       	movw	r22, r16
     842:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     846:	fc 01       	movw	r30, r24
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	e0 5b       	subi	r30, 0xB0	; 176
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	51 81       	ldd	r21, Z+1	; 0x01
     852:	5f 3f       	cpi	r21, 0xFF	; 255
     854:	c1 f0       	breq	.+48     	; 0x886 <checkPackIsFullLength+0xda>
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
     856:	fc 01       	movw	r30, r24
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	e0 5b       	subi	r30, 0xB0	; 176
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	81 81       	ldd	r24, Z+1	; 0x01
     862:	99 27       	eor	r25, r25
     864:	87 fd       	sbrc	r24, 7
     866:	90 95       	com	r25
     868:	8c 17       	cp	r24, r28
     86a:	9d 07       	cpc	r25, r29
     86c:	71 f4       	brne	.+28     	; 0x88a <checkPackIsFullLength+0xde>
     86e:	41 50       	subi	r20, 0x01	; 1
     870:	2f 5f       	subi	r18, 0xFF	; 255
     872:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     874:	41 11       	cpse	r20, r1
     876:	e3 cf       	rjmp	.-58     	; 0x83e <checkPackIsFullLength+0x92>
     878:	0a c0       	rjmp	.+20     	; 0x88e <checkPackIsFullLength+0xe2>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no == -1){
		return 0;
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	09 c0       	rjmp	.+18     	; 0x890 <checkPackIsFullLength+0xe4>
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
			return 0;
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	07 c0       	rjmp	.+14     	; 0x890 <checkPackIsFullLength+0xe4>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	05 c0       	rjmp	.+10     	; 0x890 <checkPackIsFullLength+0xe4>
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	03 c0       	rjmp	.+6      	; 0x890 <checkPackIsFullLength+0xe4>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	01 c0       	rjmp	.+2      	; 0x890 <checkPackIsFullLength+0xe4>
		}
	}
	return 1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret

0000089a <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     89a:	7f 92       	push	r7
     89c:	8f 92       	push	r8
     89e:	9f 92       	push	r9
     8a0:	af 92       	push	r10
     8a2:	bf 92       	push	r11
     8a4:	cf 92       	push	r12
     8a6:	df 92       	push	r13
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	27 97       	sbiw	r28, 0x07	; 7
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	4b 01       	movw	r8, r22
	
	
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff % RX_BUFFER_SIZE].data;
     8c6:	e0 91 0f 01 	lds	r30, 0x010F
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	e9 9f       	mul	r30, r25
     8ce:	91 2d       	mov	r25, r1
     8d0:	11 24       	eor	r1, r1
     8d2:	8e 2f       	mov	r24, r30
     8d4:	89 1b       	sub	r24, r25
     8d6:	86 95       	lsr	r24
     8d8:	89 0f       	add	r24, r25
     8da:	82 95       	swap	r24
     8dc:	86 95       	lsr	r24
     8de:	86 95       	lsr	r24
     8e0:	83 70       	andi	r24, 0x03	; 3
     8e2:	98 2f       	mov	r25, r24
     8e4:	97 95       	ror	r25
     8e6:	99 27       	eor	r25, r25
     8e8:	97 95       	ror	r25
     8ea:	98 1b       	sub	r25, r24
     8ec:	e9 1b       	sub	r30, r25
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e0 5b       	subi	r30, 0xB0	; 176
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) % RX_BUFFER_SIZE].data; //recover the sign
     8fa:	80 91 0f 01 	lds	r24, 0x010F
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	ef e7       	ldi	r30, 0x7F	; 127
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	bf 01       	movw	r22, r30
     908:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     90c:	dc 01       	movw	r26, r24
     90e:	aa 0f       	add	r26, r26
     910:	bb 1f       	adc	r27, r27
     912:	a0 5b       	subi	r26, 0xB0	; 176
     914:	be 4f       	sbci	r27, 0xFE	; 254
     916:	3c 91       	ld	r19, X
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) % RX_BUFFER_SIZE].data;
     918:	80 91 0f 01 	lds	r24, 0x010F
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	02 96       	adiw	r24, 0x02	; 2
     920:	bf 01       	movw	r22, r30
     922:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     926:	dc 01       	movw	r26, r24
     928:	aa 0f       	add	r26, r26
     92a:	bb 1f       	adc	r27, r27
     92c:	a0 5b       	subi	r26, 0xB0	; 176
     92e:	be 4f       	sbci	r27, 0xFE	; 254
     930:	4c 91       	ld	r20, X
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
     932:	80 91 0f 01 	lds	r24, 0x010F
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	03 96       	adiw	r24, 0x03	; 3
     93a:	bf 01       	movw	r22, r30
     93c:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     940:	dc 01       	movw	r26, r24
     942:	aa 0f       	add	r26, r26
     944:	bb 1f       	adc	r27, r27
     946:	a0 5b       	subi	r26, 0xB0	; 176
     948:	be 4f       	sbci	r27, 0xFE	; 254
     94a:	1c 91       	ld	r17, X
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
     94c:	80 91 0f 01 	lds	r24, 0x010F
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	04 96       	adiw	r24, 0x04	; 4
     954:	bf 01       	movw	r22, r30
     956:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     95a:	dc 01       	movw	r26, r24
     95c:	aa 0f       	add	r26, r26
     95e:	bb 1f       	adc	r27, r27
     960:	a0 5b       	subi	r26, 0xB0	; 176
     962:	be 4f       	sbci	r27, 0xFE	; 254
     964:	ac 90       	ld	r10, X
	int16_t h = 0;
	h =   rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data;
	x=  h<<8;
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
     966:	b1 2c       	mov	r11, r1
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
     968:	b1 2a       	or	r11, r17
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) % RX_BUFFER_SIZE].data << 8;
     96a:	80 91 0f 01 	lds	r24, 0x010F
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	05 96       	adiw	r24, 0x05	; 5
     972:	bf 01       	movw	r22, r30
     974:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     978:	dc 01       	movw	r26, r24
     97a:	aa 0f       	add	r26, r26
     97c:	bb 1f       	adc	r27, r27
     97e:	a0 5b       	subi	r26, 0xB0	; 176
     980:	be 4f       	sbci	r27, 0xFE	; 254
     982:	1c 91       	ld	r17, X
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) % RX_BUFFER_SIZE].data;
     984:	80 91 0f 01 	lds	r24, 0x010F
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	06 96       	adiw	r24, 0x06	; 6
     98c:	bf 01       	movw	r22, r30
     98e:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     992:	fc 01       	movw	r30, r24
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e0 5b       	subi	r30, 0xB0	; 176
     99a:	fe 4f       	sbci	r31, 0xFE	; 254
     99c:	c0 80       	ld	r12, Z
	x |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	*/
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	//comm.time = x;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) % RX_BUFFER_SIZE].data << 8;
     99e:	d1 2c       	mov	r13, r1
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) % RX_BUFFER_SIZE].data;
     9a0:	d1 2a       	or	r13, r17
     9a2:	e0 e0       	ldi	r30, 0x00	; 0
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
	//sendResponse( rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data);
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
     9a6:	0f ef       	ldi	r16, 0xFF	; 255
     9a8:	1f ef       	ldi	r17, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
     9aa:	0f 2e       	mov	r0, r31
     9ac:	ff e7       	ldi	r31, 0x7F	; 127
     9ae:	ef 2e       	mov	r14, r31
     9b0:	f1 2c       	mov	r15, r1
     9b2:	f0 2d       	mov	r31, r0
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
     9b4:	77 24       	eor	r7, r7
     9b6:	7a 94       	dec	r7

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
     9b8:	80 91 0f 01 	lds	r24, 0x010F
     9bc:	bf 01       	movw	r22, r30
     9be:	68 0f       	add	r22, r24
     9c0:	71 1d       	adc	r23, r1
     9c2:	cb 01       	movw	r24, r22
     9c4:	b7 01       	movw	r22, r14
     9c6:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     9ca:	dc 01       	movw	r26, r24
     9cc:	aa 0f       	add	r26, r26
     9ce:	bb 1f       	adc	r27, r27
     9d0:	a0 5b       	subi	r26, 0xB0	; 176
     9d2:	be 4f       	sbci	r27, 0xFE	; 254
     9d4:	8c 91       	ld	r24, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     9d6:	08 27       	eor	r16, r24
     9d8:	80 2f       	mov	r24, r16
     9da:	82 95       	swap	r24
     9dc:	80 27       	eor	r24, r16
     9de:	08 2e       	mov	r0, r24
     9e0:	86 95       	lsr	r24
     9e2:	86 95       	lsr	r24
     9e4:	80 25       	eor	r24, r0
     9e6:	08 2e       	mov	r0, r24
     9e8:	86 95       	lsr	r24
     9ea:	80 25       	eor	r24, r0
     9ec:	87 70       	andi	r24, 0x07	; 7
     9ee:	00 2e       	mov	r0, r16
     9f0:	01 2f       	mov	r16, r17
     9f2:	86 95       	lsr	r24
     9f4:	07 94       	ror	r0
     9f6:	87 95       	ror	r24
     9f8:	10 2d       	mov	r17, r0
     9fa:	08 27       	eor	r16, r24
     9fc:	06 94       	lsr	r0
     9fe:	87 95       	ror	r24
     a00:	10 25       	eor	r17, r0
     a02:	08 27       	eor	r16, r24
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
     a04:	80 91 0f 01 	lds	r24, 0x010F
     a08:	bf 01       	movw	r22, r30
     a0a:	68 0f       	add	r22, r24
     a0c:	71 1d       	adc	r23, r1
     a0e:	cb 01       	movw	r24, r22
     a10:	b7 01       	movw	r22, r14
     a12:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     a16:	dc 01       	movw	r26, r24
     a18:	aa 0f       	add	r26, r26
     a1a:	bb 1f       	adc	r27, r27
     a1c:	a0 5b       	subi	r26, 0xB0	; 176
     a1e:	be 4f       	sbci	r27, 0xFE	; 254
     a20:	11 96       	adiw	r26, 0x01	; 1
     a22:	7c 92       	st	X, r7
     a24:	31 96       	adiw	r30, 0x01	; 1
	//sendResponse(x & 0xff);

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     a26:	e7 30       	cpi	r30, 0x07	; 7
     a28:	f1 05       	cpc	r31, r1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <__stack+0x12f>
     a2c:	c5 cf       	rjmp	.-118    	; 0x9b8 <__stack+0xb9>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
	}
	
	if (crc == 0){
     a2e:	01 2b       	or	r16, r17
     a30:	21 f4       	brne	.+8      	; 0xa3a <__stack+0x13b>
		*CRC_correct = 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	f4 01       	movw	r30, r8
     a36:	80 83       	st	Z, r24
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <__stack+0x13f>
		}else{
		*CRC_correct = 0;
     a3a:	f4 01       	movw	r30, r8
     a3c:	10 82       	st	Z, r1
	}
	
	return comm;
     a3e:	bd 82       	std	Y+5, r11	; 0x05
     a40:	ac 82       	std	Y+4, r10	; 0x04
     a42:	df 82       	std	Y+7, r13	; 0x07
     a44:	ce 82       	std	Y+6, r12	; 0x06
     a46:	5a 2d       	mov	r21, r10
     a48:	6d 81       	ldd	r22, Y+5	; 0x05
     a4a:	7c 2d       	mov	r23, r12
}
     a4c:	8f 81       	ldd	r24, Y+7	; 0x07
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	27 96       	adiw	r28, 0x07	; 7
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	bf 90       	pop	r11
     a6e:	af 90       	pop	r10
     a70:	9f 90       	pop	r9
     a72:	8f 90       	pop	r8
     a74:	7f 90       	pop	r7
     a76:	08 95       	ret

00000a78 <__clearBuffers>:
	}
	
}

void __clearBuffers(){
		for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
			rxBuffer[i].pack_no =-1;
     a7c:	2f ef       	ldi	r18, 0xFF	; 255
     a7e:	fc 01       	movw	r30, r24
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	df 01       	movw	r26, r30
     a86:	a0 5b       	subi	r26, 0xB0	; 176
     a88:	be 4f       	sbci	r27, 0xFE	; 254
     a8a:	11 96       	adiw	r26, 0x01	; 1
     a8c:	2c 93       	st	X, r18
			txBuffer[i].pack_no =-1;
     a8e:	e2 5b       	subi	r30, 0xB2	; 178
     a90:	fd 4f       	sbci	r31, 0xFD	; 253
     a92:	21 83       	std	Z+1, r18	; 0x01
			txBuffer[i].data =0;
     a94:	10 82       	st	Z, r1
	}
	
}

void __clearBuffers(){
		for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	8f 37       	cpi	r24, 0x7F	; 127
     a9a:	91 05       	cpc	r25, r1
     a9c:	81 f7       	brne	.-32     	; 0xa7e <__clearBuffers+0x6>
			rxBuffer[i].pack_no =-1;
			txBuffer[i].pack_no =-1;
			txBuffer[i].data =0;
		}
		txWritePos = 0;
     a9e:	10 92 0d 01 	sts	0x010D, r1
		txReadPos = 0;
     aa2:	10 92 0e 01 	sts	0x010E, r1
		rxReadPos = 0;
     aa6:	10 92 13 01 	sts	0x0113, r1
		rxWritePos = 0;
     aaa:	10 92 12 01 	sts	0x0112, r1
     aae:	08 95       	ret

00000ab0 <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	8c 01       	movw	r16, r24
		
		///TEST////
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}*/
	__clearBuffers();
     aba:	0e 94 3c 05 	call	0xa78	; 0xa78 <__clearBuffers>
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
     abe:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
     ac0:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
     ac2:	ca ec       	ldi	r28, 0xCA	; 202
     ac4:	d0 e0       	ldi	r29, 0x00	; 0
     ac6:	88 81       	ld	r24, Y
     ac8:	8f 73       	andi	r24, 0x3F	; 63
     aca:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
     acc:	e8 ec       	ldi	r30, 0xC8	; 200
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	8d 7f       	andi	r24, 0xFD	; 253
     ad4:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     ad6:	c8 01       	movw	r24, r16
     ad8:	aa 27       	eor	r26, r26
     ada:	97 fd       	sbrc	r25, 7
     adc:	a0 95       	com	r26
     ade:	ba 2f       	mov	r27, r26
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	aa 1f       	adc	r26, r26
     aee:	bb 1f       	adc	r27, r27
     af0:	9c 01       	movw	r18, r24
     af2:	ad 01       	movw	r20, r26
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	44 1f       	adc	r20, r20
     afa:	55 1f       	adc	r21, r21
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	44 1f       	adc	r20, r20
     b02:	55 1f       	adc	r21, r21
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	72 e1       	ldi	r23, 0x12	; 18
     b08:	8a e7       	ldi	r24, 0x7A	; 122
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__divmodsi4>
     b10:	ca 01       	movw	r24, r20
     b12:	b9 01       	movw	r22, r18
     b14:	61 50       	subi	r22, 0x01	; 1
     b16:	71 09       	sbc	r23, r1
     b18:	81 09       	sbc	r24, r1
     b1a:	91 09       	sbc	r25, r1
     b1c:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     b20:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
     b24:	27 2f       	mov	r18, r23
     b26:	33 27       	eor	r19, r19
     b28:	27 fd       	sbrc	r18, 7
     b2a:	3a 95       	dec	r19
     b2c:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
     b30:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     b34:	e9 ec       	ldi	r30, 0xC9	; 201
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	88 e1       	ldi	r24, 0x18	; 24
     b3a:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
     b3c:	88 81       	ld	r24, Y
     b3e:	86 60       	ori	r24, 0x06	; 6
     b40:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
     b42:	80 81       	ld	r24, Z
     b44:	8b 7f       	andi	r24, 0xFB	; 251
     b46:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
     b48:	88 81       	ld	r24, Y
     b4a:	87 7f       	andi	r24, 0xF7	; 247
     b4c:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
     b4e:	88 81       	ld	r24, Y
     b50:	8f 7c       	andi	r24, 0xCF	; 207
     b52:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
     b54:	80 81       	ld	r24, Z
     b56:	80 68       	ori	r24, 0x80	; 128
     b58:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
     b5a:	80 81       	ld	r24, Z
     b5c:	80 64       	ori	r24, 0x40	; 64
     b5e:	80 83       	st	Z, r24
	
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <__tryToSend>:
	
}

//this is used to send data so that USART1_TX_vect can be triggered
void __tryToSend(){ 
	if (UCSR1A & (1<<UDRE1)) //if data register is empty send a byte
     b6a:	80 91 c8 00 	lds	r24, 0x00C8
     b6e:	85 ff       	sbrs	r24, 5
     b70:	32 c0       	rjmp	.+100    	; 0xbd6 <__tryToSend+0x6c>
	{
		cli();
     b72:	f8 94       	cli
		if(txBuffer[txReadPos].pack_no != -1){
     b74:	e0 91 0e 01 	lds	r30, 0x010E
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	e2 5b       	subi	r30, 0xB2	; 178
     b80:	fd 4f       	sbci	r31, 0xFD	; 253
     b82:	81 81       	ldd	r24, Z+1	; 0x01
     b84:	8f 3f       	cpi	r24, 0xFF	; 255
     b86:	31 f1       	breq	.+76     	; 0xbd4 <__tryToSend+0x6a>
				UDR1 = txBuffer[txReadPos].data;
     b88:	e0 91 0e 01 	lds	r30, 0x010E
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	e2 5b       	subi	r30, 0xB2	; 178
     b94:	fd 4f       	sbci	r31, 0xFD	; 253
     b96:	80 81       	ld	r24, Z
     b98:	80 93 ce 00 	sts	0x00CE, r24
				txBuffer[txReadPos].pack_no = -1;
     b9c:	e0 91 0e 01 	lds	r30, 0x010E
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	e2 5b       	subi	r30, 0xB2	; 178
     ba8:	fd 4f       	sbci	r31, 0xFD	; 253
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	81 83       	std	Z+1, r24	; 0x01
				txBuffer[txReadPos].data = 0;
     bae:	e0 91 0e 01 	lds	r30, 0x010E
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	e2 5b       	subi	r30, 0xB2	; 178
     bba:	fd 4f       	sbci	r31, 0xFD	; 253
     bbc:	10 82       	st	Z, r1
				txReadPos++;
     bbe:	80 91 0e 01 	lds	r24, 0x010E
     bc2:	8f 5f       	subi	r24, 0xFF	; 255
     bc4:	80 93 0e 01 	sts	0x010E, r24
				if(txReadPos >= TX_BUFFER_SIZE){
     bc8:	80 91 0e 01 	lds	r24, 0x010E
     bcc:	8f 37       	cpi	r24, 0x7F	; 127
     bce:	10 f0       	brcs	.+4      	; 0xbd4 <__tryToSend+0x6a>
					txReadPos=0;
     bd0:	10 92 0e 01 	sts	0x010E, r1
				}
		}
		sei();
     bd4:	78 94       	sei
     bd6:	08 95       	ret

00000bd8 <sendResponse>:
	}
	
	return comm;
}

void sendResponse(response r){
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	29 97       	sbiw	r28, 0x09	; 9
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	b0 2e       	mov	r11, r16
     bfc:	09 83       	std	Y+1, r16	; 0x01
     bfe:	1a 83       	std	Y+2, r17	; 0x02
     c00:	2b 83       	std	Y+3, r18	; 0x03
     c02:	3c 83       	std	Y+4, r19	; 0x04
     c04:	4d 83       	std	Y+5, r20	; 0x05
     c06:	5e 83       	std	Y+6, r21	; 0x06
     c08:	6f 83       	std	Y+7, r22	; 0x07
     c0a:	d7 2e       	mov	r13, r23
     c0c:	78 87       	std	Y+8, r23	; 0x08
     c0e:	89 87       	std	Y+9, r24	; 0x09
     c10:	c8 2e       	mov	r12, r24
	
	int8_t header = r.header;
	uint16_t i = txWritePos;
     c12:	e0 90 0d 01 	lds	r14, 0x010D
     c16:	f1 2c       	mov	r15, r1
	
	
	txBuffer[i%TX_BUFFER_SIZE].data = header;
     c18:	97 01       	movw	r18, r14
     c1a:	a5 e0       	ldi	r26, 0x05	; 5
     c1c:	b2 e0       	ldi	r27, 0x02	; 2
     c1e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     c22:	28 1b       	sub	r18, r24
     c24:	39 0b       	sbc	r19, r25
     c26:	36 95       	lsr	r19
     c28:	27 95       	ror	r18
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	00 24       	eor	r0, r0
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	00 1c       	adc	r0, r0
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	00 1c       	adc	r0, r0
     c3c:	89 2f       	mov	r24, r25
     c3e:	90 2d       	mov	r25, r0
     c40:	9c 01       	movw	r18, r24
     c42:	36 95       	lsr	r19
     c44:	32 2f       	mov	r19, r18
     c46:	22 27       	eor	r18, r18
     c48:	37 95       	ror	r19
     c4a:	27 95       	ror	r18
     c4c:	a9 01       	movw	r20, r18
     c4e:	48 1b       	sub	r20, r24
     c50:	59 0b       	sbc	r21, r25
     c52:	b7 01       	movw	r22, r14
     c54:	64 1b       	sub	r22, r20
     c56:	75 0b       	sbc	r23, r21
     c58:	fb 01       	movw	r30, r22
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	e2 5b       	subi	r30, 0xB2	; 178
     c60:	fd 4f       	sbci	r31, 0xFD	; 253
     c62:	00 83       	st	Z, r16
	txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
     c64:	01 83       	std	Z+1, r16	; 0x01
	i++;
     c66:	a7 01       	movw	r20, r14
     c68:	4f 5f       	subi	r20, 0xFF	; 255
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
	txBuffer[i%TX_BUFFER_SIZE].data = NO_OF_SENSORS; // this must be sent!!
     c6c:	9a 01       	movw	r18, r20
     c6e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     c72:	28 1b       	sub	r18, r24
     c74:	39 0b       	sbc	r19, r25
     c76:	36 95       	lsr	r19
     c78:	27 95       	ror	r18
     c7a:	82 0f       	add	r24, r18
     c7c:	93 1f       	adc	r25, r19
     c7e:	00 24       	eor	r0, r0
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	00 1c       	adc	r0, r0
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	00 1c       	adc	r0, r0
     c8c:	89 2f       	mov	r24, r25
     c8e:	90 2d       	mov	r25, r0
     c90:	9c 01       	movw	r18, r24
     c92:	36 95       	lsr	r19
     c94:	32 2f       	mov	r19, r18
     c96:	22 27       	eor	r18, r18
     c98:	37 95       	ror	r19
     c9a:	27 95       	ror	r18
     c9c:	b9 01       	movw	r22, r18
     c9e:	68 1b       	sub	r22, r24
     ca0:	79 0b       	sbc	r23, r25
     ca2:	9a 01       	movw	r18, r20
     ca4:	26 1b       	sub	r18, r22
     ca6:	37 0b       	sbc	r19, r23
     ca8:	f9 01       	movw	r30, r18
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	e2 5b       	subi	r30, 0xB2	; 178
     cb0:	fd 4f       	sbci	r31, 0xFD	; 253
     cb2:	86 e0       	ldi	r24, 0x06	; 6
     cb4:	80 83       	st	Z, r24
	txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
     cb6:	01 83       	std	Z+1, r16	; 0x01
	i++;
     cb8:	4f 5f       	subi	r20, 0xFF	; 255
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	fe 01       	movw	r30, r28
     cbe:	32 96       	adiw	r30, 0x02	; 2
     cc0:	8e 01       	movw	r16, r28
     cc2:	08 5f       	subi	r16, 0xF8	; 248
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
		txBuffer[i%TX_BUFFER_SIZE].data = r.sensorInfo[j];
     cc6:	9a 01       	movw	r18, r20
     cc8:	a5 e0       	ldi	r26, 0x05	; 5
     cca:	b2 e0       	ldi	r27, 0x02	; 2
     ccc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     cd0:	ba 01       	movw	r22, r20
     cd2:	68 1b       	sub	r22, r24
     cd4:	79 0b       	sbc	r23, r25
     cd6:	76 95       	lsr	r23
     cd8:	67 95       	ror	r22
     cda:	86 0f       	add	r24, r22
     cdc:	97 1f       	adc	r25, r23
     cde:	bc 01       	movw	r22, r24
     ce0:	00 24       	eor	r0, r0
     ce2:	66 0f       	add	r22, r22
     ce4:	77 1f       	adc	r23, r23
     ce6:	00 1c       	adc	r0, r0
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	00 1c       	adc	r0, r0
     cee:	67 2f       	mov	r22, r23
     cf0:	70 2d       	mov	r23, r0
     cf2:	cb 01       	movw	r24, r22
     cf4:	96 95       	lsr	r25
     cf6:	98 2f       	mov	r25, r24
     cf8:	88 27       	eor	r24, r24
     cfa:	97 95       	ror	r25
     cfc:	87 95       	ror	r24
     cfe:	86 1b       	sub	r24, r22
     d00:	97 0b       	sbc	r25, r23
     d02:	ba 01       	movw	r22, r20
     d04:	68 1b       	sub	r22, r24
     d06:	79 0b       	sbc	r23, r25
     d08:	81 91       	ld	r24, Z+
     d0a:	db 01       	movw	r26, r22
     d0c:	aa 0f       	add	r26, r26
     d0e:	bb 1f       	adc	r27, r27
     d10:	a2 5b       	subi	r26, 0xB2	; 178
     d12:	bd 4f       	sbci	r27, 0xFD	; 253
     d14:	8c 93       	st	X, r24
		txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	bc 92       	st	X, r11
		i++;
     d1a:	4f 5f       	subi	r20, 0xFF	; 255
     d1c:	5f 4f       	sbci	r21, 0xFF	; 255
	i++;
	txBuffer[i%TX_BUFFER_SIZE].data = NO_OF_SENSORS; // this must be sent!!
	txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
	i++;
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
     d1e:	e0 17       	cp	r30, r16
     d20:	f1 07       	cpc	r31, r17
     d22:	89 f6       	brne	.-94     	; 0xcc6 <sendResponse+0xee>
     d24:	a7 01       	movw	r20, r14
     d26:	48 5f       	subi	r20, 0xF8	; 248
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
		txBuffer[i%TX_BUFFER_SIZE].data = r.sensorInfo[j];
		txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
		i++;
	}
	
	txBuffer[i%TX_BUFFER_SIZE].data = (r.time >> 8); // first 8 bits
     d2a:	9a 01       	movw	r18, r20
     d2c:	a5 e0       	ldi	r26, 0x05	; 5
     d2e:	b2 e0       	ldi	r27, 0x02	; 2
     d30:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     d34:	28 1b       	sub	r18, r24
     d36:	39 0b       	sbc	r19, r25
     d38:	36 95       	lsr	r19
     d3a:	27 95       	ror	r18
     d3c:	82 0f       	add	r24, r18
     d3e:	93 1f       	adc	r25, r19
     d40:	00 24       	eor	r0, r0
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	00 1c       	adc	r0, r0
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	00 1c       	adc	r0, r0
     d4e:	89 2f       	mov	r24, r25
     d50:	90 2d       	mov	r25, r0
     d52:	9c 01       	movw	r18, r24
     d54:	36 95       	lsr	r19
     d56:	32 2f       	mov	r19, r18
     d58:	22 27       	eor	r18, r18
     d5a:	37 95       	ror	r19
     d5c:	27 95       	ror	r18
     d5e:	b9 01       	movw	r22, r18
     d60:	68 1b       	sub	r22, r24
     d62:	79 0b       	sbc	r23, r25
     d64:	9a 01       	movw	r18, r20
     d66:	26 1b       	sub	r18, r22
     d68:	37 0b       	sbc	r19, r23
     d6a:	f9 01       	movw	r30, r18
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	e2 5b       	subi	r30, 0xB2	; 178
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	c0 82       	st	Z, r12
	txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
     d76:	b1 82       	std	Z+1, r11	; 0x01
	i++;
     d78:	4f 5f       	subi	r20, 0xFF	; 255
     d7a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	txBuffer[i%TX_BUFFER_SIZE].data = (r.time & 0xFF); // next 8 bits
     d7c:	9a 01       	movw	r18, r20
     d7e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     d82:	28 1b       	sub	r18, r24
     d84:	39 0b       	sbc	r19, r25
     d86:	36 95       	lsr	r19
     d88:	27 95       	ror	r18
     d8a:	82 0f       	add	r24, r18
     d8c:	93 1f       	adc	r25, r19
     d8e:	00 24       	eor	r0, r0
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	00 1c       	adc	r0, r0
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	00 1c       	adc	r0, r0
     d9c:	89 2f       	mov	r24, r25
     d9e:	90 2d       	mov	r25, r0
     da0:	9c 01       	movw	r18, r24
     da2:	36 95       	lsr	r19
     da4:	32 2f       	mov	r19, r18
     da6:	22 27       	eor	r18, r18
     da8:	37 95       	ror	r19
     daa:	27 95       	ror	r18
     dac:	b9 01       	movw	r22, r18
     dae:	68 1b       	sub	r22, r24
     db0:	79 0b       	sbc	r23, r25
     db2:	9a 01       	movw	r18, r20
     db4:	26 1b       	sub	r18, r22
     db6:	37 0b       	sbc	r19, r23
     db8:	f9 01       	movw	r30, r18
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	e2 5b       	subi	r30, 0xB2	; 178
     dc0:	fd 4f       	sbci	r31, 0xFD	; 253
     dc2:	d0 82       	st	Z, r13
	txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
     dc4:	b1 82       	std	Z+1, r11	; 0x01
	i++;
     dc6:	67 01       	movw	r12, r14
     dc8:	3a e0       	ldi	r19, 0x0A	; 10
     dca:	c3 0e       	add	r12, r19
     dcc:	d1 1c       	adc	r13, r1
     dce:	e0 e0       	ldi	r30, 0x00	; 0
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
     dd2:	0f ef       	ldi	r16, 0xFF	; 255
     dd4:	1f ef       	ldi	r17, 0xFF	; 255
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) % TX_BUFFER_SIZE].data);
     dd6:	2f e7       	ldi	r18, 0x7F	; 127
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	80 91 0d 01 	lds	r24, 0x010D
     dde:	af 01       	movw	r20, r30
     de0:	48 0f       	add	r20, r24
     de2:	51 1d       	adc	r21, r1
     de4:	ca 01       	movw	r24, r20
     de6:	b9 01       	movw	r22, r18
     de8:	0e 94 96 0b 	call	0x172c	; 0x172c <__divmodhi4>
     dec:	dc 01       	movw	r26, r24
     dee:	aa 0f       	add	r26, r26
     df0:	bb 1f       	adc	r27, r27
     df2:	a2 5b       	subi	r26, 0xB2	; 178
     df4:	bd 4f       	sbci	r27, 0xFD	; 253
     df6:	8c 91       	ld	r24, X
     df8:	08 27       	eor	r16, r24
     dfa:	80 2f       	mov	r24, r16
     dfc:	82 95       	swap	r24
     dfe:	80 27       	eor	r24, r16
     e00:	08 2e       	mov	r0, r24
     e02:	86 95       	lsr	r24
     e04:	86 95       	lsr	r24
     e06:	80 25       	eor	r24, r0
     e08:	08 2e       	mov	r0, r24
     e0a:	86 95       	lsr	r24
     e0c:	80 25       	eor	r24, r0
     e0e:	87 70       	andi	r24, 0x07	; 7
     e10:	00 2e       	mov	r0, r16
     e12:	01 2f       	mov	r16, r17
     e14:	86 95       	lsr	r24
     e16:	07 94       	ror	r0
     e18:	87 95       	ror	r24
     e1a:	10 2d       	mov	r17, r0
     e1c:	08 27       	eor	r16, r24
     e1e:	06 94       	lsr	r0
     e20:	87 95       	ror	r24
     e22:	10 25       	eor	r17, r0
     e24:	08 27       	eor	r16, r24
     e26:	31 96       	adiw	r30, 0x01	; 1
	txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
	i++;
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
     e28:	ea 30       	cpi	r30, 0x0A	; 10
     e2a:	f1 05       	cpc	r31, r1
     e2c:	09 f0       	breq	.+2      	; 0xe30 <sendResponse+0x258>
     e2e:	d5 cf       	rjmp	.-86     	; 0xdda <sendResponse+0x202>
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) % TX_BUFFER_SIZE].data);
	}
	
	//send CRC in reverse order!
	txBuffer[i%TX_BUFFER_SIZE].data = (crc & 0xFF); // last 8 bits
     e30:	96 01       	movw	r18, r12
     e32:	a5 e0       	ldi	r26, 0x05	; 5
     e34:	b2 e0       	ldi	r27, 0x02	; 2
     e36:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     e3a:	28 1b       	sub	r18, r24
     e3c:	39 0b       	sbc	r19, r25
     e3e:	36 95       	lsr	r19
     e40:	27 95       	ror	r18
     e42:	82 0f       	add	r24, r18
     e44:	93 1f       	adc	r25, r19
     e46:	00 24       	eor	r0, r0
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	00 1c       	adc	r0, r0
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	00 1c       	adc	r0, r0
     e54:	89 2f       	mov	r24, r25
     e56:	90 2d       	mov	r25, r0
     e58:	9c 01       	movw	r18, r24
     e5a:	36 95       	lsr	r19
     e5c:	32 2f       	mov	r19, r18
     e5e:	22 27       	eor	r18, r18
     e60:	37 95       	ror	r19
     e62:	27 95       	ror	r18
     e64:	b9 01       	movw	r22, r18
     e66:	68 1b       	sub	r22, r24
     e68:	79 0b       	sbc	r23, r25
     e6a:	96 01       	movw	r18, r12
     e6c:	26 1b       	sub	r18, r22
     e6e:	37 0b       	sbc	r19, r23
     e70:	f9 01       	movw	r30, r18
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	e2 5b       	subi	r30, 0xB2	; 178
     e78:	fd 4f       	sbci	r31, 0xFD	; 253
     e7a:	00 83       	st	Z, r16
	txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
     e7c:	b1 82       	std	Z+1, r11	; 0x01
	i++;
     e7e:	a7 01       	movw	r20, r14
     e80:	45 5f       	subi	r20, 0xF5	; 245
     e82:	5f 4f       	sbci	r21, 0xFF	; 255
	
	txBuffer[i%TX_BUFFER_SIZE].data = (crc >> 8); // first 8 bits
     e84:	9a 01       	movw	r18, r20
     e86:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     e8a:	28 1b       	sub	r18, r24
     e8c:	39 0b       	sbc	r19, r25
     e8e:	36 95       	lsr	r19
     e90:	27 95       	ror	r18
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	00 24       	eor	r0, r0
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	00 1c       	adc	r0, r0
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	00 1c       	adc	r0, r0
     ea4:	89 2f       	mov	r24, r25
     ea6:	90 2d       	mov	r25, r0
     ea8:	9c 01       	movw	r18, r24
     eaa:	36 95       	lsr	r19
     eac:	32 2f       	mov	r19, r18
     eae:	22 27       	eor	r18, r18
     eb0:	37 95       	ror	r19
     eb2:	27 95       	ror	r18
     eb4:	b9 01       	movw	r22, r18
     eb6:	68 1b       	sub	r22, r24
     eb8:	79 0b       	sbc	r23, r25
     eba:	9a 01       	movw	r18, r20
     ebc:	26 1b       	sub	r18, r22
     ebe:	37 0b       	sbc	r19, r23
     ec0:	f9 01       	movw	r30, r18
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	e2 5b       	subi	r30, 0xB2	; 178
     ec8:	fd 4f       	sbci	r31, 0xFD	; 253
     eca:	10 83       	st	Z, r17
	txBuffer[i%TX_BUFFER_SIZE].pack_no = header;
     ecc:	b1 82       	std	Z+1, r11	; 0x01
	i++;
     ece:	3c e0       	ldi	r19, 0x0C	; 12
     ed0:	e3 0e       	add	r14, r19
     ed2:	f1 1c       	adc	r15, r1
	txWritePos = i%TX_BUFFER_SIZE;
     ed4:	97 01       	movw	r18, r14
     ed6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__umulhisi3>
     eda:	28 1b       	sub	r18, r24
     edc:	39 0b       	sbc	r19, r25
     ede:	36 95       	lsr	r19
     ee0:	27 95       	ror	r18
     ee2:	82 0f       	add	r24, r18
     ee4:	93 1f       	adc	r25, r19
     ee6:	00 24       	eor	r0, r0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	00 1c       	adc	r0, r0
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	00 1c       	adc	r0, r0
     ef4:	89 2f       	mov	r24, r25
     ef6:	90 2d       	mov	r25, r0
     ef8:	9c 01       	movw	r18, r24
     efa:	36 95       	lsr	r19
     efc:	32 2f       	mov	r19, r18
     efe:	22 27       	eor	r18, r18
     f00:	37 95       	ror	r19
     f02:	27 95       	ror	r18
     f04:	a9 01       	movw	r20, r18
     f06:	48 1b       	sub	r20, r24
     f08:	59 0b       	sbc	r21, r25
     f0a:	e4 1a       	sub	r14, r20
     f0c:	f5 0a       	sbc	r15, r21
     f0e:	e0 92 0d 01 	sts	0x010D, r14
	
	__tryToSend();
     f12:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__tryToSend>
}
     f16:	29 96       	adiw	r28, 0x09	; 9
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	08 95       	ret

00000f36 <getLastCommand>:
		}
		sei();
	}
}

command getLastCommand(int8_t *success){
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	2f 97       	sbiw	r28, 0x0f	; 15
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     f50:	fe 01       	movw	r30, r28
     f52:	38 96       	adiw	r30, 0x08	; 8
     f54:	87 e0       	ldi	r24, 0x07	; 7
     f56:	df 01       	movw	r26, r30
     f58:	1d 92       	st	X+, r1
     f5a:	8a 95       	dec	r24
     f5c:	e9 f7       	brne	.-6      	; 0xf58 <getLastCommand+0x22>
	*success = 0;
     f5e:	f8 01       	movw	r30, r16
     f60:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
     f62:	80 91 0f 01 	lds	r24, 0x010F
     f66:	0e 94 d6 03 	call	0x7ac	; 0x7ac <checkPackIsFullLength>
     f6a:	88 23       	and	r24, r24
     f6c:	c9 f0       	breq	.+50     	; 0xfa0 <getLastCommand+0x6a>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
     f6e:	80 91 0f 01 	lds	r24, 0x010F
     f72:	be 01       	movw	r22, r28
     f74:	61 5f       	subi	r22, 0xF1	; 241
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	0e 94 4d 04 	call	0x89a	; 0x89a <fetchCommand>
     f7c:	28 87       	std	Y+8, r18	; 0x08
     f7e:	39 87       	std	Y+9, r19	; 0x09
     f80:	4a 87       	std	Y+10, r20	; 0x0a
     f82:	5b 87       	std	Y+11, r21	; 0x0b
     f84:	6c 87       	std	Y+12, r22	; 0x0c
     f86:	7d 87       	std	Y+13, r23	; 0x0d
     f88:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
     f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8c:	88 23       	and	r24, r24
     f8e:	21 f0       	breq	.+8      	; 0xf98 <getLastCommand+0x62>
		{
			*success=1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	d8 01       	movw	r26, r16
     f94:	8c 93       	st	X, r24
     f96:	2b c0       	rjmp	.+86     	; 0xfee <getLastCommand+0xb8>
		}else{
			*success=2;
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	f8 01       	movw	r30, r16
     f9c:	80 83       	st	Z, r24
     f9e:	27 c0       	rjmp	.+78     	; 0xfee <getLastCommand+0xb8>
		
	}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
		
		
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE) 
     fa0:	80 91 0f 01 	lds	r24, 0x010F
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	07 97       	sbiw	r24, 0x07	; 7
     fa8:	8f 37       	cpi	r24, 0x7F	; 127
     faa:	91 05       	cpc	r25, r1
     fac:	04 f5       	brge	.+64     	; 0xfee <getLastCommand+0xb8>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
     fae:	80 91 0f 01 	lds	r24, 0x010F
     fb2:	87 50       	subi	r24, 0x07	; 7
     fb4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <checkPackIsFullLength>
     fb8:	88 23       	and	r24, r24
     fba:	c9 f0       	breq	.+50     	; 0xfee <getLastCommand+0xb8>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
     fbc:	80 91 0f 01 	lds	r24, 0x010F
     fc0:	be 01       	movw	r22, r28
     fc2:	61 5f       	subi	r22, 0xF1	; 241
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	87 50       	subi	r24, 0x07	; 7
     fc8:	0e 94 4d 04 	call	0x89a	; 0x89a <fetchCommand>
     fcc:	28 87       	std	Y+8, r18	; 0x08
     fce:	39 87       	std	Y+9, r19	; 0x09
     fd0:	4a 87       	std	Y+10, r20	; 0x0a
     fd2:	5b 87       	std	Y+11, r21	; 0x0b
     fd4:	6c 87       	std	Y+12, r22	; 0x0c
     fd6:	7d 87       	std	Y+13, r23	; 0x0d
     fd8:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
     fda:	8f 85       	ldd	r24, Y+15	; 0x0f
     fdc:	88 23       	and	r24, r24
     fde:	21 f0       	breq	.+8      	; 0xfe8 <getLastCommand+0xb2>
			{
				*success=1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	d8 01       	movw	r26, r16
     fe4:	8c 93       	st	X, r24
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <getLastCommand+0xb8>
				}else{
				*success=2;
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	f8 01       	movw	r30, r16
     fec:	80 83       	st	Z, r24
		
		}
	}
	
	
	return cmd;
     fee:	87 e0       	ldi	r24, 0x07	; 7
     ff0:	fe 01       	movw	r30, r28
     ff2:	38 96       	adiw	r30, 0x08	; 8
     ff4:	de 01       	movw	r26, r28
     ff6:	11 96       	adiw	r26, 0x01	; 1
     ff8:	01 90       	ld	r0, Z+
     ffa:	0d 92       	st	X+, r0
     ffc:	8a 95       	dec	r24
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <getLastCommand+0xc2>
    1000:	29 81       	ldd	r18, Y+1	; 0x01
    1002:	3a 81       	ldd	r19, Y+2	; 0x02
    1004:	4b 81       	ldd	r20, Y+3	; 0x03
    1006:	5c 81       	ldd	r21, Y+4	; 0x04
    1008:	6d 81       	ldd	r22, Y+5	; 0x05
    100a:	7e 81       	ldd	r23, Y+6	; 0x06
}
    100c:	8f 81       	ldd	r24, Y+7	; 0x07
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	2f 96       	adiw	r28, 0x0f	; 15
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <__vector_28>:
	
	return ret;
}
*/

ISR(USART1_RX_vect){
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
	
	uint8_t data = UDR1;
    1038:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
    103c:	90 91 11 01 	lds	r25, 0x0111
    1040:	91 11       	cpse	r25, r1
    1042:	1a c0       	rjmp	.+52     	; 0x1078 <__vector_28+0x52>
		rxBuffer[rxWritePos].pack_no = data; //numai primi 7 biti
    1044:	e0 91 12 01 	lds	r30, 0x0112
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	e0 5b       	subi	r30, 0xB0	; 176
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
    1054:	e0 91 12 01 	lds	r30, 0x0112
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	ee 0f       	add	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	e0 5b       	subi	r30, 0xB0	; 176
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	80 83       	st	Z, r24
		packStarted = 1;
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	90 93 11 01 	sts	0x0111, r25
		lastPackNo = data;
    106a:	80 93 10 01 	sts	0x0110, r24
		lastPackPosInBuff = rxWritePos; 
    106e:	80 91 12 01 	lds	r24, 0x0112
    1072:	80 93 0f 01 	sts	0x010F, r24
    1076:	1d c0       	rjmp	.+58     	; 0x10b2 <__vector_28+0x8c>
	}else{
		
		rxBuffer[rxWritePos].pack_no = lastPackNo;
    1078:	e0 91 12 01 	lds	r30, 0x0112
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	90 91 10 01 	lds	r25, 0x0110
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	e0 5b       	subi	r30, 0xB0	; 176
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
    108c:	e0 91 12 01 	lds	r30, 0x0112
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	e0 5b       	subi	r30, 0xB0	; 176
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	80 83       	st	Z, r24
		packStarted++ ;
    109c:	80 91 11 01 	lds	r24, 0x0111
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	80 93 11 01 	sts	0x0111, r24
		
		if(packStarted == COMMAND_SIZE){
    10a6:	80 91 11 01 	lds	r24, 0x0111
    10aa:	87 30       	cpi	r24, 0x07	; 7
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <__vector_28+0x8c>
			packStarted = 0;
    10ae:	10 92 11 01 	sts	0x0111, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
    10b2:	80 91 12 01 	lds	r24, 0x0112
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	80 93 12 01 	sts	0x0112, r24
	
	if(rxWritePos>=RX_BUFFER_SIZE){
    10bc:	80 91 12 01 	lds	r24, 0x0112
    10c0:	8f 37       	cpi	r24, 0x7F	; 127
    10c2:	10 f0       	brcs	.+4      	; 0x10c8 <__vector_28+0xa2>
			rxWritePos = 0;
    10c4:	10 92 12 01 	sts	0x0112, r1
	}
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <__vector_30>:

ISR(USART1_TX_vect){
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	8f 93       	push	r24
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
    10ea:	e0 91 0e 01 	lds	r30, 0x010E
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	e2 5b       	subi	r30, 0xB2	; 178
    10f6:	fd 4f       	sbci	r31, 0xFD	; 253
    10f8:	81 81       	ldd	r24, Z+1	; 0x01
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	31 f1       	breq	.+76     	; 0x114a <__vector_30+0x70>
	UDR1 =  txBuffer[txReadPos].data;
    10fe:	e0 91 0e 01 	lds	r30, 0x010E
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	e2 5b       	subi	r30, 0xB2	; 178
    110a:	fd 4f       	sbci	r31, 0xFD	; 253
    110c:	80 81       	ld	r24, Z
    110e:	80 93 ce 00 	sts	0x00CE, r24
	txBuffer[txReadPos].data =0;
    1112:	e0 91 0e 01 	lds	r30, 0x010E
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	e2 5b       	subi	r30, 0xB2	; 178
    111e:	fd 4f       	sbci	r31, 0xFD	; 253
    1120:	10 82       	st	Z, r1
	txBuffer[txReadPos].pack_no =-1;
    1122:	e0 91 0e 01 	lds	r30, 0x010E
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	ee 0f       	add	r30, r30
    112a:	ff 1f       	adc	r31, r31
    112c:	e2 5b       	subi	r30, 0xB2	; 178
    112e:	fd 4f       	sbci	r31, 0xFD	; 253
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	81 83       	std	Z+1, r24	; 0x01
	txReadPos++;
    1134:	80 91 0e 01 	lds	r24, 0x010E
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	80 93 0e 01 	sts	0x010E, r24
		if(txReadPos>=TX_BUFFER_SIZE){
    113e:	80 91 0e 01 	lds	r24, 0x010E
    1142:	8f 37       	cpi	r24, 0x7F	; 127
    1144:	10 f0       	brcs	.+4      	; 0x114a <__vector_30+0x70>
			txReadPos =0;
    1146:	10 92 0e 01 	sts	0x010E, r1
		}
	}
	
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	8f 91       	pop	r24
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <initTimer1>:
}

void initTimer1()
{
	//Normal port operation, OC1A/OC1B disconnected.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1A0));	
    115a:	e0 e8       	ldi	r30, 0x80	; 128
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8f 71       	andi	r24, 0x1F	; 31
    1162:	80 83       	st	Z, r24
	
	//Timer/Counter mode of operation: CTC, TOP = OCR1A, Update of OCR1x at Immediate TOVn flag set on MAX
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11));
    1164:	80 81       	ld	r24, Z
    1166:	8c 7f       	andi	r24, 0xFC	; 252
    1168:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
    116a:	e1 e8       	ldi	r30, 0x81	; 129
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 60       	ori	r24, 0x08	; 8
    1172:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
    1174:	80 81       	ld	r24, Z
    1176:	8f 7e       	andi	r24, 0xEF	; 239
    1178:	80 83       	st	Z, r24
	
	// Clock Select: clk/64 prescaler
	TCCR1B &= ~((1<<CS12));
    117a:	80 81       	ld	r24, Z
    117c:	8b 7f       	andi	r24, 0xFB	; 251
    117e:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10) | (1<<CS11);
    1180:	80 81       	ld	r24, Z
    1182:	83 60       	ori	r24, 0x03	; 3
    1184:	80 83       	st	Z, r24
	
	
	
	// reset counter
	TCNT1 = 0;
    1186:	10 92 85 00 	sts	0x0085, r1
    118a:	10 92 84 00 	sts	0x0084, r1
	// disable compare for the moment
	//OCR1A = 0;
	//OCR1B = 0;
	
	//set OCR1A for 1 ms interrupts
	OCR1A = ((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*10L;
    118e:	82 ee       	ldi	r24, 0xE2	; 226
    1190:	94 e0       	ldi	r25, 0x04	; 4
    1192:	90 93 89 00 	sts	0x0089, r25
    1196:	80 93 88 00 	sts	0x0088, r24
	
	//enable Output Compare A Match Interrupt Enable
	TIMSK1 |= (1<<OCIE1A);// (1<<OCIE1B) | (1<<OCIE1A);
    119a:	ef e6       	ldi	r30, 0x6F	; 111
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	82 60       	ori	r24, 0x02	; 2
    11a2:	80 83       	st	Z, r24
    11a4:	08 95       	ret

000011a6 <__vector_13>:
	
}

ISR(TIMER1_COMPA_vect){
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
		
	//	LED_CMD_PIN |= (1<<LED_CMD_PINx);
		
		if(ticks && ticks != 99999){
    11c8:	80 91 00 01 	lds	r24, 0x0100
    11cc:	90 91 01 01 	lds	r25, 0x0101
    11d0:	a0 91 02 01 	lds	r26, 0x0102
    11d4:	b0 91 03 01 	lds	r27, 0x0103
    11d8:	89 2b       	or	r24, r25
    11da:	8a 2b       	or	r24, r26
    11dc:	8b 2b       	or	r24, r27
    11de:	09 f1       	breq	.+66     	; 0x1222 <__vector_13+0x7c>
    11e0:	80 91 00 01 	lds	r24, 0x0100
    11e4:	90 91 01 01 	lds	r25, 0x0101
    11e8:	a0 91 02 01 	lds	r26, 0x0102
    11ec:	b0 91 03 01 	lds	r27, 0x0103
    11f0:	8f 39       	cpi	r24, 0x9F	; 159
    11f2:	96 48       	sbci	r25, 0x86	; 134
    11f4:	a1 40       	sbci	r26, 0x01	; 1
    11f6:	b1 05       	cpc	r27, r1
    11f8:	a1 f0       	breq	.+40     	; 0x1222 <__vector_13+0x7c>
			ticks--;
    11fa:	80 91 00 01 	lds	r24, 0x0100
    11fe:	90 91 01 01 	lds	r25, 0x0101
    1202:	a0 91 02 01 	lds	r26, 0x0102
    1206:	b0 91 03 01 	lds	r27, 0x0103
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	a1 09       	sbc	r26, r1
    120e:	b1 09       	sbc	r27, r1
    1210:	80 93 00 01 	sts	0x0100, r24
    1214:	90 93 01 01 	sts	0x0101, r25
    1218:	a0 93 02 01 	sts	0x0102, r26
    121c:	b0 93 03 01 	sts	0x0103, r27
    1220:	24 c0       	rjmp	.+72     	; 0x126a <__vector_13+0xc4>
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
		}else if(ticks == 0){
    1222:	80 91 00 01 	lds	r24, 0x0100
    1226:	90 91 01 01 	lds	r25, 0x0101
    122a:	a0 91 02 01 	lds	r26, 0x0102
    122e:	b0 91 03 01 	lds	r27, 0x0103
    1232:	89 2b       	or	r24, r25
    1234:	8a 2b       	or	r24, r26
    1236:	8b 2b       	or	r24, r27
    1238:	c1 f4       	brne	.+48     	; 0x126a <__vector_13+0xc4>
			stopFunction(argc2,argv2);
    123a:	80 91 14 01 	lds	r24, 0x0114
    123e:	90 91 15 01 	lds	r25, 0x0115
    1242:	e0 91 16 01 	lds	r30, 0x0116
    1246:	f0 91 17 01 	lds	r31, 0x0117
    124a:	6c e4       	ldi	r22, 0x4C	; 76
    124c:	73 e0       	ldi	r23, 0x03	; 3
    124e:	09 95       	icall
			//LED_CMD_PIN |= (1<<LED_CMD_PINx);
			LED_CMD_PORT &= ~(1<<LED_CMD_PINx);
    1250:	17 98       	cbi	0x02, 7	; 2
			ticks = 99999;
    1252:	8f e9       	ldi	r24, 0x9F	; 159
    1254:	96 e8       	ldi	r25, 0x86	; 134
    1256:	a1 e0       	ldi	r26, 0x01	; 1
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	80 93 00 01 	sts	0x0100, r24
    125e:	90 93 01 01 	sts	0x0101, r25
    1262:	a0 93 02 01 	sts	0x0102, r26
    1266:	b0 93 03 01 	sts	0x0103, r27
	//call the stop function
	stopFunction(argc2, argv2);
	}

*/
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__subsf3>:
    128c:	50 58       	subi	r21, 0x80	; 128

0000128e <__addsf3>:
    128e:	bb 27       	eor	r27, r27
    1290:	aa 27       	eor	r26, r26
    1292:	0e d0       	rcall	.+28     	; 0x12b0 <__addsf3x>
    1294:	70 c1       	rjmp	.+736    	; 0x1576 <__fp_round>
    1296:	61 d1       	rcall	.+706    	; 0x155a <__fp_pscA>
    1298:	30 f0       	brcs	.+12     	; 0x12a6 <__addsf3+0x18>
    129a:	66 d1       	rcall	.+716    	; 0x1568 <__fp_pscB>
    129c:	20 f0       	brcs	.+8      	; 0x12a6 <__addsf3+0x18>
    129e:	31 f4       	brne	.+12     	; 0x12ac <__addsf3+0x1e>
    12a0:	9f 3f       	cpi	r25, 0xFF	; 255
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__addsf3+0x1a>
    12a4:	1e f4       	brtc	.+6      	; 0x12ac <__addsf3+0x1e>
    12a6:	56 c1       	rjmp	.+684    	; 0x1554 <__fp_nan>
    12a8:	0e f4       	brtc	.+2      	; 0x12ac <__addsf3+0x1e>
    12aa:	e0 95       	com	r30
    12ac:	e7 fb       	bst	r30, 7
    12ae:	4c c1       	rjmp	.+664    	; 0x1548 <__fp_inf>

000012b0 <__addsf3x>:
    12b0:	e9 2f       	mov	r30, r25
    12b2:	72 d1       	rcall	.+740    	; 0x1598 <__fp_split3>
    12b4:	80 f3       	brcs	.-32     	; 0x1296 <__addsf3+0x8>
    12b6:	ba 17       	cp	r27, r26
    12b8:	62 07       	cpc	r22, r18
    12ba:	73 07       	cpc	r23, r19
    12bc:	84 07       	cpc	r24, r20
    12be:	95 07       	cpc	r25, r21
    12c0:	18 f0       	brcs	.+6      	; 0x12c8 <__addsf3x+0x18>
    12c2:	71 f4       	brne	.+28     	; 0x12e0 <__addsf3x+0x30>
    12c4:	9e f5       	brtc	.+102    	; 0x132c <__addsf3x+0x7c>
    12c6:	8a c1       	rjmp	.+788    	; 0x15dc <__fp_zero>
    12c8:	0e f4       	brtc	.+2      	; 0x12cc <__addsf3x+0x1c>
    12ca:	e0 95       	com	r30
    12cc:	0b 2e       	mov	r0, r27
    12ce:	ba 2f       	mov	r27, r26
    12d0:	a0 2d       	mov	r26, r0
    12d2:	0b 01       	movw	r0, r22
    12d4:	b9 01       	movw	r22, r18
    12d6:	90 01       	movw	r18, r0
    12d8:	0c 01       	movw	r0, r24
    12da:	ca 01       	movw	r24, r20
    12dc:	a0 01       	movw	r20, r0
    12de:	11 24       	eor	r1, r1
    12e0:	ff 27       	eor	r31, r31
    12e2:	59 1b       	sub	r21, r25
    12e4:	99 f0       	breq	.+38     	; 0x130c <__addsf3x+0x5c>
    12e6:	59 3f       	cpi	r21, 0xF9	; 249
    12e8:	50 f4       	brcc	.+20     	; 0x12fe <__addsf3x+0x4e>
    12ea:	50 3e       	cpi	r21, 0xE0	; 224
    12ec:	68 f1       	brcs	.+90     	; 0x1348 <__addsf3x+0x98>
    12ee:	1a 16       	cp	r1, r26
    12f0:	f0 40       	sbci	r31, 0x00	; 0
    12f2:	a2 2f       	mov	r26, r18
    12f4:	23 2f       	mov	r18, r19
    12f6:	34 2f       	mov	r19, r20
    12f8:	44 27       	eor	r20, r20
    12fa:	58 5f       	subi	r21, 0xF8	; 248
    12fc:	f3 cf       	rjmp	.-26     	; 0x12e4 <__addsf3x+0x34>
    12fe:	46 95       	lsr	r20
    1300:	37 95       	ror	r19
    1302:	27 95       	ror	r18
    1304:	a7 95       	ror	r26
    1306:	f0 40       	sbci	r31, 0x00	; 0
    1308:	53 95       	inc	r21
    130a:	c9 f7       	brne	.-14     	; 0x12fe <__addsf3x+0x4e>
    130c:	7e f4       	brtc	.+30     	; 0x132c <__addsf3x+0x7c>
    130e:	1f 16       	cp	r1, r31
    1310:	ba 0b       	sbc	r27, r26
    1312:	62 0b       	sbc	r22, r18
    1314:	73 0b       	sbc	r23, r19
    1316:	84 0b       	sbc	r24, r20
    1318:	ba f0       	brmi	.+46     	; 0x1348 <__addsf3x+0x98>
    131a:	91 50       	subi	r25, 0x01	; 1
    131c:	a1 f0       	breq	.+40     	; 0x1346 <__addsf3x+0x96>
    131e:	ff 0f       	add	r31, r31
    1320:	bb 1f       	adc	r27, r27
    1322:	66 1f       	adc	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	c2 f7       	brpl	.-16     	; 0x131a <__addsf3x+0x6a>
    132a:	0e c0       	rjmp	.+28     	; 0x1348 <__addsf3x+0x98>
    132c:	ba 0f       	add	r27, r26
    132e:	62 1f       	adc	r22, r18
    1330:	73 1f       	adc	r23, r19
    1332:	84 1f       	adc	r24, r20
    1334:	48 f4       	brcc	.+18     	; 0x1348 <__addsf3x+0x98>
    1336:	87 95       	ror	r24
    1338:	77 95       	ror	r23
    133a:	67 95       	ror	r22
    133c:	b7 95       	ror	r27
    133e:	f7 95       	ror	r31
    1340:	9e 3f       	cpi	r25, 0xFE	; 254
    1342:	08 f0       	brcs	.+2      	; 0x1346 <__addsf3x+0x96>
    1344:	b3 cf       	rjmp	.-154    	; 0x12ac <__addsf3+0x1e>
    1346:	93 95       	inc	r25
    1348:	88 0f       	add	r24, r24
    134a:	08 f0       	brcs	.+2      	; 0x134e <__addsf3x+0x9e>
    134c:	99 27       	eor	r25, r25
    134e:	ee 0f       	add	r30, r30
    1350:	97 95       	ror	r25
    1352:	87 95       	ror	r24
    1354:	08 95       	ret

00001356 <__cmpsf2>:
    1356:	d4 d0       	rcall	.+424    	; 0x1500 <__fp_cmp>
    1358:	08 f4       	brcc	.+2      	; 0x135c <__cmpsf2+0x6>
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	08 95       	ret

0000135e <__divsf3>:
    135e:	0c d0       	rcall	.+24     	; 0x1378 <__divsf3x>
    1360:	0a c1       	rjmp	.+532    	; 0x1576 <__fp_round>
    1362:	02 d1       	rcall	.+516    	; 0x1568 <__fp_pscB>
    1364:	40 f0       	brcs	.+16     	; 0x1376 <__divsf3+0x18>
    1366:	f9 d0       	rcall	.+498    	; 0x155a <__fp_pscA>
    1368:	30 f0       	brcs	.+12     	; 0x1376 <__divsf3+0x18>
    136a:	21 f4       	brne	.+8      	; 0x1374 <__divsf3+0x16>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	19 f0       	breq	.+6      	; 0x1376 <__divsf3+0x18>
    1370:	eb c0       	rjmp	.+470    	; 0x1548 <__fp_inf>
    1372:	51 11       	cpse	r21, r1
    1374:	34 c1       	rjmp	.+616    	; 0x15de <__fp_szero>
    1376:	ee c0       	rjmp	.+476    	; 0x1554 <__fp_nan>

00001378 <__divsf3x>:
    1378:	0f d1       	rcall	.+542    	; 0x1598 <__fp_split3>
    137a:	98 f3       	brcs	.-26     	; 0x1362 <__divsf3+0x4>

0000137c <__divsf3_pse>:
    137c:	99 23       	and	r25, r25
    137e:	c9 f3       	breq	.-14     	; 0x1372 <__divsf3+0x14>
    1380:	55 23       	and	r21, r21
    1382:	b1 f3       	breq	.-20     	; 0x1370 <__divsf3+0x12>
    1384:	95 1b       	sub	r25, r21
    1386:	55 0b       	sbc	r21, r21
    1388:	bb 27       	eor	r27, r27
    138a:	aa 27       	eor	r26, r26
    138c:	62 17       	cp	r22, r18
    138e:	73 07       	cpc	r23, r19
    1390:	84 07       	cpc	r24, r20
    1392:	38 f0       	brcs	.+14     	; 0x13a2 <__divsf3_pse+0x26>
    1394:	9f 5f       	subi	r25, 0xFF	; 255
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	44 1f       	adc	r20, r20
    139e:	aa 1f       	adc	r26, r26
    13a0:	a9 f3       	breq	.-22     	; 0x138c <__divsf3_pse+0x10>
    13a2:	33 d0       	rcall	.+102    	; 0x140a <__divsf3_pse+0x8e>
    13a4:	0e 2e       	mov	r0, r30
    13a6:	3a f0       	brmi	.+14     	; 0x13b6 <__divsf3_pse+0x3a>
    13a8:	e0 e8       	ldi	r30, 0x80	; 128
    13aa:	30 d0       	rcall	.+96     	; 0x140c <__divsf3_pse+0x90>
    13ac:	91 50       	subi	r25, 0x01	; 1
    13ae:	50 40       	sbci	r21, 0x00	; 0
    13b0:	e6 95       	lsr	r30
    13b2:	00 1c       	adc	r0, r0
    13b4:	ca f7       	brpl	.-14     	; 0x13a8 <__divsf3_pse+0x2c>
    13b6:	29 d0       	rcall	.+82     	; 0x140a <__divsf3_pse+0x8e>
    13b8:	fe 2f       	mov	r31, r30
    13ba:	27 d0       	rcall	.+78     	; 0x140a <__divsf3_pse+0x8e>
    13bc:	66 0f       	add	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	bb 1f       	adc	r27, r27
    13c4:	26 17       	cp	r18, r22
    13c6:	37 07       	cpc	r19, r23
    13c8:	48 07       	cpc	r20, r24
    13ca:	ab 07       	cpc	r26, r27
    13cc:	b0 e8       	ldi	r27, 0x80	; 128
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <__divsf3_pse+0x56>
    13d0:	bb 0b       	sbc	r27, r27
    13d2:	80 2d       	mov	r24, r0
    13d4:	bf 01       	movw	r22, r30
    13d6:	ff 27       	eor	r31, r31
    13d8:	93 58       	subi	r25, 0x83	; 131
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	2a f0       	brmi	.+10     	; 0x13e8 <__divsf3_pse+0x6c>
    13de:	9e 3f       	cpi	r25, 0xFE	; 254
    13e0:	51 05       	cpc	r21, r1
    13e2:	68 f0       	brcs	.+26     	; 0x13fe <__divsf3_pse+0x82>
    13e4:	b1 c0       	rjmp	.+354    	; 0x1548 <__fp_inf>
    13e6:	fb c0       	rjmp	.+502    	; 0x15de <__fp_szero>
    13e8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ea:	ec f3       	brlt	.-6      	; 0x13e6 <__divsf3_pse+0x6a>
    13ec:	98 3e       	cpi	r25, 0xE8	; 232
    13ee:	dc f3       	brlt	.-10     	; 0x13e6 <__divsf3_pse+0x6a>
    13f0:	86 95       	lsr	r24
    13f2:	77 95       	ror	r23
    13f4:	67 95       	ror	r22
    13f6:	b7 95       	ror	r27
    13f8:	f7 95       	ror	r31
    13fa:	9f 5f       	subi	r25, 0xFF	; 255
    13fc:	c9 f7       	brne	.-14     	; 0x13f0 <__divsf3_pse+0x74>
    13fe:	88 0f       	add	r24, r24
    1400:	91 1d       	adc	r25, r1
    1402:	96 95       	lsr	r25
    1404:	87 95       	ror	r24
    1406:	97 f9       	bld	r25, 7
    1408:	08 95       	ret
    140a:	e1 e0       	ldi	r30, 0x01	; 1
    140c:	66 0f       	add	r22, r22
    140e:	77 1f       	adc	r23, r23
    1410:	88 1f       	adc	r24, r24
    1412:	bb 1f       	adc	r27, r27
    1414:	62 17       	cp	r22, r18
    1416:	73 07       	cpc	r23, r19
    1418:	84 07       	cpc	r24, r20
    141a:	ba 07       	cpc	r27, r26
    141c:	20 f0       	brcs	.+8      	; 0x1426 <__divsf3_pse+0xaa>
    141e:	62 1b       	sub	r22, r18
    1420:	73 0b       	sbc	r23, r19
    1422:	84 0b       	sbc	r24, r20
    1424:	ba 0b       	sbc	r27, r26
    1426:	ee 1f       	adc	r30, r30
    1428:	88 f7       	brcc	.-30     	; 0x140c <__divsf3_pse+0x90>
    142a:	e0 95       	com	r30
    142c:	08 95       	ret

0000142e <__fixunssfsi>:
    142e:	bc d0       	rcall	.+376    	; 0x15a8 <__fp_splitA>
    1430:	88 f0       	brcs	.+34     	; 0x1454 <__fixunssfsi+0x26>
    1432:	9f 57       	subi	r25, 0x7F	; 127
    1434:	90 f0       	brcs	.+36     	; 0x145a <__fixunssfsi+0x2c>
    1436:	b9 2f       	mov	r27, r25
    1438:	99 27       	eor	r25, r25
    143a:	b7 51       	subi	r27, 0x17	; 23
    143c:	a0 f0       	brcs	.+40     	; 0x1466 <__fixunssfsi+0x38>
    143e:	d1 f0       	breq	.+52     	; 0x1474 <__fixunssfsi+0x46>
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	1a f0       	brmi	.+6      	; 0x1450 <__fixunssfsi+0x22>
    144a:	ba 95       	dec	r27
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__fixunssfsi+0x12>
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <__fixunssfsi+0x46>
    1450:	b1 30       	cpi	r27, 0x01	; 1
    1452:	81 f0       	breq	.+32     	; 0x1474 <__fixunssfsi+0x46>
    1454:	c3 d0       	rcall	.+390    	; 0x15dc <__fp_zero>
    1456:	b1 e0       	ldi	r27, 0x01	; 1
    1458:	08 95       	ret
    145a:	c0 c0       	rjmp	.+384    	; 0x15dc <__fp_zero>
    145c:	67 2f       	mov	r22, r23
    145e:	78 2f       	mov	r23, r24
    1460:	88 27       	eor	r24, r24
    1462:	b8 5f       	subi	r27, 0xF8	; 248
    1464:	39 f0       	breq	.+14     	; 0x1474 <__fixunssfsi+0x46>
    1466:	b9 3f       	cpi	r27, 0xF9	; 249
    1468:	cc f3       	brlt	.-14     	; 0x145c <__fixunssfsi+0x2e>
    146a:	86 95       	lsr	r24
    146c:	77 95       	ror	r23
    146e:	67 95       	ror	r22
    1470:	b3 95       	inc	r27
    1472:	d9 f7       	brne	.-10     	; 0x146a <__fixunssfsi+0x3c>
    1474:	3e f4       	brtc	.+14     	; 0x1484 <__fixunssfsi+0x56>
    1476:	90 95       	com	r25
    1478:	80 95       	com	r24
    147a:	70 95       	com	r23
    147c:	61 95       	neg	r22
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	08 95       	ret

00001486 <__floatunsisf>:
    1486:	e8 94       	clt
    1488:	09 c0       	rjmp	.+18     	; 0x149c <__floatsisf+0x12>

0000148a <__floatsisf>:
    148a:	97 fb       	bst	r25, 7
    148c:	3e f4       	brtc	.+14     	; 0x149c <__floatsisf+0x12>
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	99 23       	and	r25, r25
    149e:	a9 f0       	breq	.+42     	; 0x14ca <__floatsisf+0x40>
    14a0:	f9 2f       	mov	r31, r25
    14a2:	96 e9       	ldi	r25, 0x96	; 150
    14a4:	bb 27       	eor	r27, r27
    14a6:	93 95       	inc	r25
    14a8:	f6 95       	lsr	r31
    14aa:	87 95       	ror	r24
    14ac:	77 95       	ror	r23
    14ae:	67 95       	ror	r22
    14b0:	b7 95       	ror	r27
    14b2:	f1 11       	cpse	r31, r1
    14b4:	f8 cf       	rjmp	.-16     	; 0x14a6 <__floatsisf+0x1c>
    14b6:	fa f4       	brpl	.+62     	; 0x14f6 <__floatsisf+0x6c>
    14b8:	bb 0f       	add	r27, r27
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__floatsisf+0x36>
    14bc:	60 ff       	sbrs	r22, 0
    14be:	1b c0       	rjmp	.+54     	; 0x14f6 <__floatsisf+0x6c>
    14c0:	6f 5f       	subi	r22, 0xFF	; 255
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	16 c0       	rjmp	.+44     	; 0x14f6 <__floatsisf+0x6c>
    14ca:	88 23       	and	r24, r24
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <__floatsisf+0x48>
    14ce:	96 e9       	ldi	r25, 0x96	; 150
    14d0:	11 c0       	rjmp	.+34     	; 0x14f4 <__floatsisf+0x6a>
    14d2:	77 23       	and	r23, r23
    14d4:	21 f0       	breq	.+8      	; 0x14de <__floatsisf+0x54>
    14d6:	9e e8       	ldi	r25, 0x8E	; 142
    14d8:	87 2f       	mov	r24, r23
    14da:	76 2f       	mov	r23, r22
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <__floatsisf+0x5e>
    14de:	66 23       	and	r22, r22
    14e0:	71 f0       	breq	.+28     	; 0x14fe <__floatsisf+0x74>
    14e2:	96 e8       	ldi	r25, 0x86	; 134
    14e4:	86 2f       	mov	r24, r22
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	2a f0       	brmi	.+10     	; 0x14f6 <__floatsisf+0x6c>
    14ec:	9a 95       	dec	r25
    14ee:	66 0f       	add	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	da f7       	brpl	.-10     	; 0x14ec <__floatsisf+0x62>
    14f6:	88 0f       	add	r24, r24
    14f8:	96 95       	lsr	r25
    14fa:	87 95       	ror	r24
    14fc:	97 f9       	bld	r25, 7
    14fe:	08 95       	ret

00001500 <__fp_cmp>:
    1500:	99 0f       	add	r25, r25
    1502:	00 08       	sbc	r0, r0
    1504:	55 0f       	add	r21, r21
    1506:	aa 0b       	sbc	r26, r26
    1508:	e0 e8       	ldi	r30, 0x80	; 128
    150a:	fe ef       	ldi	r31, 0xFE	; 254
    150c:	16 16       	cp	r1, r22
    150e:	17 06       	cpc	r1, r23
    1510:	e8 07       	cpc	r30, r24
    1512:	f9 07       	cpc	r31, r25
    1514:	c0 f0       	brcs	.+48     	; 0x1546 <__fp_cmp+0x46>
    1516:	12 16       	cp	r1, r18
    1518:	13 06       	cpc	r1, r19
    151a:	e4 07       	cpc	r30, r20
    151c:	f5 07       	cpc	r31, r21
    151e:	98 f0       	brcs	.+38     	; 0x1546 <__fp_cmp+0x46>
    1520:	62 1b       	sub	r22, r18
    1522:	73 0b       	sbc	r23, r19
    1524:	84 0b       	sbc	r24, r20
    1526:	95 0b       	sbc	r25, r21
    1528:	39 f4       	brne	.+14     	; 0x1538 <__fp_cmp+0x38>
    152a:	0a 26       	eor	r0, r26
    152c:	61 f0       	breq	.+24     	; 0x1546 <__fp_cmp+0x46>
    152e:	23 2b       	or	r18, r19
    1530:	24 2b       	or	r18, r20
    1532:	25 2b       	or	r18, r21
    1534:	21 f4       	brne	.+8      	; 0x153e <__fp_cmp+0x3e>
    1536:	08 95       	ret
    1538:	0a 26       	eor	r0, r26
    153a:	09 f4       	brne	.+2      	; 0x153e <__fp_cmp+0x3e>
    153c:	a1 40       	sbci	r26, 0x01	; 1
    153e:	a6 95       	lsr	r26
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	81 1d       	adc	r24, r1
    1544:	81 1d       	adc	r24, r1
    1546:	08 95       	ret

00001548 <__fp_inf>:
    1548:	97 f9       	bld	r25, 7
    154a:	9f 67       	ori	r25, 0x7F	; 127
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	08 95       	ret

00001554 <__fp_nan>:
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	80 ec       	ldi	r24, 0xC0	; 192
    1558:	08 95       	ret

0000155a <__fp_pscA>:
    155a:	00 24       	eor	r0, r0
    155c:	0a 94       	dec	r0
    155e:	16 16       	cp	r1, r22
    1560:	17 06       	cpc	r1, r23
    1562:	18 06       	cpc	r1, r24
    1564:	09 06       	cpc	r0, r25
    1566:	08 95       	ret

00001568 <__fp_pscB>:
    1568:	00 24       	eor	r0, r0
    156a:	0a 94       	dec	r0
    156c:	12 16       	cp	r1, r18
    156e:	13 06       	cpc	r1, r19
    1570:	14 06       	cpc	r1, r20
    1572:	05 06       	cpc	r0, r21
    1574:	08 95       	ret

00001576 <__fp_round>:
    1576:	09 2e       	mov	r0, r25
    1578:	03 94       	inc	r0
    157a:	00 0c       	add	r0, r0
    157c:	11 f4       	brne	.+4      	; 0x1582 <__fp_round+0xc>
    157e:	88 23       	and	r24, r24
    1580:	52 f0       	brmi	.+20     	; 0x1596 <__fp_round+0x20>
    1582:	bb 0f       	add	r27, r27
    1584:	40 f4       	brcc	.+16     	; 0x1596 <__fp_round+0x20>
    1586:	bf 2b       	or	r27, r31
    1588:	11 f4       	brne	.+4      	; 0x158e <__fp_round+0x18>
    158a:	60 ff       	sbrs	r22, 0
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__fp_round+0x20>
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	08 95       	ret

00001598 <__fp_split3>:
    1598:	57 fd       	sbrc	r21, 7
    159a:	90 58       	subi	r25, 0x80	; 128
    159c:	44 0f       	add	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	59 f0       	breq	.+22     	; 0x15b8 <__fp_splitA+0x10>
    15a2:	5f 3f       	cpi	r21, 0xFF	; 255
    15a4:	71 f0       	breq	.+28     	; 0x15c2 <__fp_splitA+0x1a>
    15a6:	47 95       	ror	r20

000015a8 <__fp_splitA>:
    15a8:	88 0f       	add	r24, r24
    15aa:	97 fb       	bst	r25, 7
    15ac:	99 1f       	adc	r25, r25
    15ae:	61 f0       	breq	.+24     	; 0x15c8 <__fp_splitA+0x20>
    15b0:	9f 3f       	cpi	r25, 0xFF	; 255
    15b2:	79 f0       	breq	.+30     	; 0x15d2 <__fp_splitA+0x2a>
    15b4:	87 95       	ror	r24
    15b6:	08 95       	ret
    15b8:	12 16       	cp	r1, r18
    15ba:	13 06       	cpc	r1, r19
    15bc:	14 06       	cpc	r1, r20
    15be:	55 1f       	adc	r21, r21
    15c0:	f2 cf       	rjmp	.-28     	; 0x15a6 <__fp_split3+0xe>
    15c2:	46 95       	lsr	r20
    15c4:	f1 df       	rcall	.-30     	; 0x15a8 <__fp_splitA>
    15c6:	08 c0       	rjmp	.+16     	; 0x15d8 <__fp_splitA+0x30>
    15c8:	16 16       	cp	r1, r22
    15ca:	17 06       	cpc	r1, r23
    15cc:	18 06       	cpc	r1, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	f1 cf       	rjmp	.-30     	; 0x15b4 <__fp_splitA+0xc>
    15d2:	86 95       	lsr	r24
    15d4:	71 05       	cpc	r23, r1
    15d6:	61 05       	cpc	r22, r1
    15d8:	08 94       	sec
    15da:	08 95       	ret

000015dc <__fp_zero>:
    15dc:	e8 94       	clt

000015de <__fp_szero>:
    15de:	bb 27       	eor	r27, r27
    15e0:	66 27       	eor	r22, r22
    15e2:	77 27       	eor	r23, r23
    15e4:	cb 01       	movw	r24, r22
    15e6:	97 f9       	bld	r25, 7
    15e8:	08 95       	ret

000015ea <__gesf2>:
    15ea:	8a df       	rcall	.-236    	; 0x1500 <__fp_cmp>
    15ec:	08 f4       	brcc	.+2      	; 0x15f0 <__gesf2+0x6>
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	08 95       	ret

000015f2 <lrint>:
    15f2:	da df       	rcall	.-76     	; 0x15a8 <__fp_splitA>
    15f4:	a8 f1       	brcs	.+106    	; 0x1660 <lrint+0x6e>
    15f6:	9e 57       	subi	r25, 0x7E	; 126
    15f8:	a8 f1       	brcs	.+106    	; 0x1664 <lrint+0x72>
    15fa:	98 51       	subi	r25, 0x18	; 24
    15fc:	60 f0       	brcs	.+24     	; 0x1616 <lrint+0x24>
    15fe:	39 f1       	breq	.+78     	; 0x164e <lrint+0x5c>
    1600:	98 30       	cpi	r25, 0x08	; 8
    1602:	70 f5       	brcc	.+92     	; 0x1660 <lrint+0x6e>
    1604:	09 2e       	mov	r0, r25
    1606:	99 27       	eor	r25, r25
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	d1 f7       	brne	.-12     	; 0x1608 <lrint+0x16>
    1614:	1c c0       	rjmp	.+56     	; 0x164e <lrint+0x5c>
    1616:	bb 27       	eor	r27, r27
    1618:	99 3f       	cpi	r25, 0xF9	; 249
    161a:	4c f4       	brge	.+18     	; 0x162e <lrint+0x3c>
    161c:	b1 11       	cpse	r27, r1
    161e:	b1 e0       	ldi	r27, 0x01	; 1
    1620:	b6 2b       	or	r27, r22
    1622:	67 2f       	mov	r22, r23
    1624:	78 2f       	mov	r23, r24
    1626:	88 27       	eor	r24, r24
    1628:	98 5f       	subi	r25, 0xF8	; 248
    162a:	b1 f7       	brne	.-20     	; 0x1618 <lrint+0x26>
    162c:	08 c0       	rjmp	.+16     	; 0x163e <lrint+0x4c>
    162e:	86 95       	lsr	r24
    1630:	77 95       	ror	r23
    1632:	67 95       	ror	r22
    1634:	b7 95       	ror	r27
    1636:	08 f4       	brcc	.+2      	; 0x163a <lrint+0x48>
    1638:	b1 60       	ori	r27, 0x01	; 1
    163a:	93 95       	inc	r25
    163c:	c1 f7       	brne	.-16     	; 0x162e <lrint+0x3c>
    163e:	bb 0f       	add	r27, r27
    1640:	30 f4       	brcc	.+12     	; 0x164e <lrint+0x5c>
    1642:	11 f4       	brne	.+4      	; 0x1648 <lrint+0x56>
    1644:	60 ff       	sbrs	r22, 0
    1646:	03 c0       	rjmp	.+6      	; 0x164e <lrint+0x5c>
    1648:	6f 5f       	subi	r22, 0xFF	; 255
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	8f 4f       	sbci	r24, 0xFF	; 255
    164e:	3e f4       	brtc	.+14     	; 0x165e <lrint+0x6c>
    1650:	90 95       	com	r25
    1652:	80 95       	com	r24
    1654:	70 95       	com	r23
    1656:	61 95       	neg	r22
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	8f 4f       	sbci	r24, 0xFF	; 255
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	08 95       	ret
    1660:	68 94       	set
    1662:	bd cf       	rjmp	.-134    	; 0x15de <__fp_szero>
    1664:	bb cf       	rjmp	.-138    	; 0x15dc <__fp_zero>

00001666 <__mulsf3>:
    1666:	0b d0       	rcall	.+22     	; 0x167e <__mulsf3x>
    1668:	86 cf       	rjmp	.-244    	; 0x1576 <__fp_round>
    166a:	77 df       	rcall	.-274    	; 0x155a <__fp_pscA>
    166c:	28 f0       	brcs	.+10     	; 0x1678 <__mulsf3+0x12>
    166e:	7c df       	rcall	.-264    	; 0x1568 <__fp_pscB>
    1670:	18 f0       	brcs	.+6      	; 0x1678 <__mulsf3+0x12>
    1672:	95 23       	and	r25, r21
    1674:	09 f0       	breq	.+2      	; 0x1678 <__mulsf3+0x12>
    1676:	68 cf       	rjmp	.-304    	; 0x1548 <__fp_inf>
    1678:	6d cf       	rjmp	.-294    	; 0x1554 <__fp_nan>
    167a:	11 24       	eor	r1, r1
    167c:	b0 cf       	rjmp	.-160    	; 0x15de <__fp_szero>

0000167e <__mulsf3x>:
    167e:	8c df       	rcall	.-232    	; 0x1598 <__fp_split3>
    1680:	a0 f3       	brcs	.-24     	; 0x166a <__mulsf3+0x4>

00001682 <__mulsf3_pse>:
    1682:	95 9f       	mul	r25, r21
    1684:	d1 f3       	breq	.-12     	; 0x167a <__mulsf3+0x14>
    1686:	95 0f       	add	r25, r21
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	55 1f       	adc	r21, r21
    168c:	62 9f       	mul	r22, r18
    168e:	f0 01       	movw	r30, r0
    1690:	72 9f       	mul	r23, r18
    1692:	bb 27       	eor	r27, r27
    1694:	f0 0d       	add	r31, r0
    1696:	b1 1d       	adc	r27, r1
    1698:	63 9f       	mul	r22, r19
    169a:	aa 27       	eor	r26, r26
    169c:	f0 0d       	add	r31, r0
    169e:	b1 1d       	adc	r27, r1
    16a0:	aa 1f       	adc	r26, r26
    16a2:	64 9f       	mul	r22, r20
    16a4:	66 27       	eor	r22, r22
    16a6:	b0 0d       	add	r27, r0
    16a8:	a1 1d       	adc	r26, r1
    16aa:	66 1f       	adc	r22, r22
    16ac:	82 9f       	mul	r24, r18
    16ae:	22 27       	eor	r18, r18
    16b0:	b0 0d       	add	r27, r0
    16b2:	a1 1d       	adc	r26, r1
    16b4:	62 1f       	adc	r22, r18
    16b6:	73 9f       	mul	r23, r19
    16b8:	b0 0d       	add	r27, r0
    16ba:	a1 1d       	adc	r26, r1
    16bc:	62 1f       	adc	r22, r18
    16be:	83 9f       	mul	r24, r19
    16c0:	a0 0d       	add	r26, r0
    16c2:	61 1d       	adc	r22, r1
    16c4:	22 1f       	adc	r18, r18
    16c6:	74 9f       	mul	r23, r20
    16c8:	33 27       	eor	r19, r19
    16ca:	a0 0d       	add	r26, r0
    16cc:	61 1d       	adc	r22, r1
    16ce:	23 1f       	adc	r18, r19
    16d0:	84 9f       	mul	r24, r20
    16d2:	60 0d       	add	r22, r0
    16d4:	21 1d       	adc	r18, r1
    16d6:	82 2f       	mov	r24, r18
    16d8:	76 2f       	mov	r23, r22
    16da:	6a 2f       	mov	r22, r26
    16dc:	11 24       	eor	r1, r1
    16de:	9f 57       	subi	r25, 0x7F	; 127
    16e0:	50 40       	sbci	r21, 0x00	; 0
    16e2:	8a f0       	brmi	.+34     	; 0x1706 <__mulsf3_pse+0x84>
    16e4:	e1 f0       	breq	.+56     	; 0x171e <__mulsf3_pse+0x9c>
    16e6:	88 23       	and	r24, r24
    16e8:	4a f0       	brmi	.+18     	; 0x16fc <__mulsf3_pse+0x7a>
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	bb 1f       	adc	r27, r27
    16f0:	66 1f       	adc	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	91 50       	subi	r25, 0x01	; 1
    16f8:	50 40       	sbci	r21, 0x00	; 0
    16fa:	a9 f7       	brne	.-22     	; 0x16e6 <__mulsf3_pse+0x64>
    16fc:	9e 3f       	cpi	r25, 0xFE	; 254
    16fe:	51 05       	cpc	r21, r1
    1700:	70 f0       	brcs	.+28     	; 0x171e <__mulsf3_pse+0x9c>
    1702:	22 cf       	rjmp	.-444    	; 0x1548 <__fp_inf>
    1704:	6c cf       	rjmp	.-296    	; 0x15de <__fp_szero>
    1706:	5f 3f       	cpi	r21, 0xFF	; 255
    1708:	ec f3       	brlt	.-6      	; 0x1704 <__mulsf3_pse+0x82>
    170a:	98 3e       	cpi	r25, 0xE8	; 232
    170c:	dc f3       	brlt	.-10     	; 0x1704 <__mulsf3_pse+0x82>
    170e:	86 95       	lsr	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	b7 95       	ror	r27
    1716:	f7 95       	ror	r31
    1718:	e7 95       	ror	r30
    171a:	9f 5f       	subi	r25, 0xFF	; 255
    171c:	c1 f7       	brne	.-16     	; 0x170e <__mulsf3_pse+0x8c>
    171e:	fe 2b       	or	r31, r30
    1720:	88 0f       	add	r24, r24
    1722:	91 1d       	adc	r25, r1
    1724:	96 95       	lsr	r25
    1726:	87 95       	ror	r24
    1728:	97 f9       	bld	r25, 7
    172a:	08 95       	ret

0000172c <__divmodhi4>:
    172c:	97 fb       	bst	r25, 7
    172e:	07 2e       	mov	r0, r23
    1730:	16 f4       	brtc	.+4      	; 0x1736 <__divmodhi4+0xa>
    1732:	00 94       	com	r0
    1734:	07 d0       	rcall	.+14     	; 0x1744 <__divmodhi4_neg1>
    1736:	77 fd       	sbrc	r23, 7
    1738:	09 d0       	rcall	.+18     	; 0x174c <__divmodhi4_neg2>
    173a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__udivmodhi4>
    173e:	07 fc       	sbrc	r0, 7
    1740:	05 d0       	rcall	.+10     	; 0x174c <__divmodhi4_neg2>
    1742:	3e f4       	brtc	.+14     	; 0x1752 <__divmodhi4_exit>

00001744 <__divmodhi4_neg1>:
    1744:	90 95       	com	r25
    1746:	81 95       	neg	r24
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	08 95       	ret

0000174c <__divmodhi4_neg2>:
    174c:	70 95       	com	r23
    174e:	61 95       	neg	r22
    1750:	7f 4f       	sbci	r23, 0xFF	; 255

00001752 <__divmodhi4_exit>:
    1752:	08 95       	ret

00001754 <__divmodsi4>:
    1754:	05 2e       	mov	r0, r21
    1756:	97 fb       	bst	r25, 7
    1758:	1e f4       	brtc	.+6      	; 0x1760 <__divmodsi4+0xc>
    175a:	00 94       	com	r0
    175c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__negsi2>
    1760:	57 fd       	sbrc	r21, 7
    1762:	07 d0       	rcall	.+14     	; 0x1772 <__divmodsi4_neg2>
    1764:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__udivmodsi4>
    1768:	07 fc       	sbrc	r0, 7
    176a:	03 d0       	rcall	.+6      	; 0x1772 <__divmodsi4_neg2>
    176c:	4e f4       	brtc	.+18     	; 0x1780 <__divmodsi4_exit>
    176e:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__negsi2>

00001772 <__divmodsi4_neg2>:
    1772:	50 95       	com	r21
    1774:	40 95       	com	r20
    1776:	30 95       	com	r19
    1778:	21 95       	neg	r18
    177a:	3f 4f       	sbci	r19, 0xFF	; 255
    177c:	4f 4f       	sbci	r20, 0xFF	; 255
    177e:	5f 4f       	sbci	r21, 0xFF	; 255

00001780 <__divmodsi4_exit>:
    1780:	08 95       	ret

00001782 <__negsi2>:
    1782:	90 95       	com	r25
    1784:	80 95       	com	r24
    1786:	70 95       	com	r23
    1788:	61 95       	neg	r22
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	8f 4f       	sbci	r24, 0xFF	; 255
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	08 95       	ret

00001792 <__umulhisi3>:
    1792:	a2 9f       	mul	r26, r18
    1794:	b0 01       	movw	r22, r0
    1796:	b3 9f       	mul	r27, r19
    1798:	c0 01       	movw	r24, r0
    179a:	a3 9f       	mul	r26, r19
    179c:	70 0d       	add	r23, r0
    179e:	81 1d       	adc	r24, r1
    17a0:	11 24       	eor	r1, r1
    17a2:	91 1d       	adc	r25, r1
    17a4:	b2 9f       	mul	r27, r18
    17a6:	70 0d       	add	r23, r0
    17a8:	81 1d       	adc	r24, r1
    17aa:	11 24       	eor	r1, r1
    17ac:	91 1d       	adc	r25, r1
    17ae:	08 95       	ret

000017b0 <__udivmodhi4>:
    17b0:	aa 1b       	sub	r26, r26
    17b2:	bb 1b       	sub	r27, r27
    17b4:	51 e1       	ldi	r21, 0x11	; 17
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <__udivmodhi4_ep>

000017b8 <__udivmodhi4_loop>:
    17b8:	aa 1f       	adc	r26, r26
    17ba:	bb 1f       	adc	r27, r27
    17bc:	a6 17       	cp	r26, r22
    17be:	b7 07       	cpc	r27, r23
    17c0:	10 f0       	brcs	.+4      	; 0x17c6 <__udivmodhi4_ep>
    17c2:	a6 1b       	sub	r26, r22
    17c4:	b7 0b       	sbc	r27, r23

000017c6 <__udivmodhi4_ep>:
    17c6:	88 1f       	adc	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	5a 95       	dec	r21
    17cc:	a9 f7       	brne	.-22     	; 0x17b8 <__udivmodhi4_loop>
    17ce:	80 95       	com	r24
    17d0:	90 95       	com	r25
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	08 95       	ret

000017d8 <__udivmodsi4>:
    17d8:	a1 e2       	ldi	r26, 0x21	; 33
    17da:	1a 2e       	mov	r1, r26
    17dc:	aa 1b       	sub	r26, r26
    17de:	bb 1b       	sub	r27, r27
    17e0:	fd 01       	movw	r30, r26
    17e2:	0d c0       	rjmp	.+26     	; 0x17fe <__udivmodsi4_ep>

000017e4 <__udivmodsi4_loop>:
    17e4:	aa 1f       	adc	r26, r26
    17e6:	bb 1f       	adc	r27, r27
    17e8:	ee 1f       	adc	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	a2 17       	cp	r26, r18
    17ee:	b3 07       	cpc	r27, r19
    17f0:	e4 07       	cpc	r30, r20
    17f2:	f5 07       	cpc	r31, r21
    17f4:	20 f0       	brcs	.+8      	; 0x17fe <__udivmodsi4_ep>
    17f6:	a2 1b       	sub	r26, r18
    17f8:	b3 0b       	sbc	r27, r19
    17fa:	e4 0b       	sbc	r30, r20
    17fc:	f5 0b       	sbc	r31, r21

000017fe <__udivmodsi4_ep>:
    17fe:	66 1f       	adc	r22, r22
    1800:	77 1f       	adc	r23, r23
    1802:	88 1f       	adc	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	1a 94       	dec	r1
    1808:	69 f7       	brne	.-38     	; 0x17e4 <__udivmodsi4_loop>
    180a:	60 95       	com	r22
    180c:	70 95       	com	r23
    180e:	80 95       	com	r24
    1810:	90 95       	com	r25
    1812:	9b 01       	movw	r18, r22
    1814:	ac 01       	movw	r20, r24
    1816:	bd 01       	movw	r22, r26
    1818:	cf 01       	movw	r24, r30
    181a:	08 95       	ret

0000181c <_exit>:
    181c:	f8 94       	cli

0000181e <__stop_program>:
    181e:	ff cf       	rjmp	.-2      	; 0x181e <__stop_program>
