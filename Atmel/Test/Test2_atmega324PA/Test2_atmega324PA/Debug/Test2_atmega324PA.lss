
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000098e  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  00000a26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000702  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000287  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000319  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c7  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  70:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_28>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  7c:	3c 01       	movw	r6, r24
  7e:	66 01       	movw	r12, r12
  80:	66 01       	movw	r12, r12
  82:	66 01       	movw	r12, r12
  84:	66 01       	movw	r12, r12
  86:	66 01       	movw	r12, r12
  88:	66 01       	movw	r12, r12
  8a:	66 01       	movw	r12, r12
  8c:	66 01       	movw	r12, r12
  8e:	66 01       	movw	r12, r12
  90:	66 01       	movw	r12, r12
  92:	66 01       	movw	r12, r12
  94:	66 01       	movw	r12, r12
  96:	66 01       	movw	r12, r12
  98:	66 01       	movw	r12, r12
  9a:	66 01       	movw	r12, r12
  9c:	66 01       	movw	r12, r12
  9e:	66 01       	movw	r12, r12
  a0:	5d 01       	movw	r10, r26
  a2:	66 01       	movw	r12, r12
  a4:	3f 01       	movw	r6, r30
  a6:	66 01       	movw	r12, r12
  a8:	66 01       	movw	r12, r12
  aa:	66 01       	movw	r12, r12
  ac:	66 01       	movw	r12, r12
  ae:	66 01       	movw	r12, r12
  b0:	66 01       	movw	r12, r12
  b2:	66 01       	movw	r12, r12
  b4:	66 01       	movw	r12, r12
  b6:	66 01       	movw	r12, r12
  b8:	66 01       	movw	r12, r12
  ba:	66 01       	movw	r12, r12
  bc:	66 01       	movw	r12, r12
  be:	66 01       	movw	r12, r12
  c0:	66 01       	movw	r12, r12
  c2:	4e 01       	movw	r8, r28
  c4:	66 01       	movw	r12, r12
  c6:	66 01       	movw	r12, r12
  c8:	66 01       	movw	r12, r12
  ca:	66 01       	movw	r12, r12
  cc:	66 01       	movw	r12, r12
  ce:	66 01       	movw	r12, r12
  d0:	66 01       	movw	r12, r12
  d2:	66 01       	movw	r12, r12
  d4:	66 01       	movw	r12, r12
  d6:	66 01       	movw	r12, r12
  d8:	66 01       	movw	r12, r12
  da:	66 01       	movw	r12, r12
  dc:	66 01       	movw	r12, r12
  de:	66 01       	movw	r12, r12
  e0:	5d 01       	movw	r10, r26
  e2:	66 01       	movw	r12, r12
  e4:	3f 01       	movw	r6, r30
  e6:	66 01       	movw	r12, r12
  e8:	66 01       	movw	r12, r12
  ea:	66 01       	movw	r12, r12
  ec:	66 01       	movw	r12, r12
  ee:	66 01       	movw	r12, r12
  f0:	66 01       	movw	r12, r12
  f2:	66 01       	movw	r12, r12
  f4:	66 01       	movw	r12, r12
  f6:	66 01       	movw	r12, r12
  f8:	66 01       	movw	r12, r12
  fa:	66 01       	movw	r12, r12
  fc:	66 01       	movw	r12, r12
  fe:	66 01       	movw	r12, r12
 100:	66 01       	movw	r12, r12
 102:	4e 01       	movw	r8, r28

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d8 e0       	ldi	r29, 0x08	; 8
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
 110:	11 e0       	ldi	r17, 0x01	; 1
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	ee e8       	ldi	r30, 0x8E	; 142
 118:	f9 e0       	ldi	r31, 0x09	; 9
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
 11c:	05 90       	lpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a4 30       	cpi	r26, 0x04	; 4
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	a4 e0       	ldi	r26, 0x04	; 4
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	ae 30       	cpi	r26, 0x0E	; 14
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	0e 94 18 01 	call	0x230	; 0x230 <main>
 13a:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_exit>

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <initUSART1>:
		//TODO:: Please write your application code
	}
	
}

void initUSART1(int baud){
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	9c 01       	movw	r18, r24

	DDRD &= ~(1<<PORTD2);
 148:	52 98       	cbi	0x0a, 2	; 10
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
 14a:	ca ec       	ldi	r28, 0xCA	; 202
 14c:	d0 e0       	ldi	r29, 0x00	; 0
 14e:	88 81       	ld	r24, Y
 150:	8f 73       	andi	r24, 0x3F	; 63
 152:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
 154:	e8 ec       	ldi	r30, 0xC8	; 200
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8d 7f       	andi	r24, 0xFD	; 253
 15c:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
 15e:	c9 01       	movw	r24, r18
 160:	aa 27       	eor	r26, r26
 162:	97 fd       	sbrc	r25, 7
 164:	a0 95       	com	r26
 166:	ba 2f       	mov	r27, r26
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	aa 1f       	adc	r26, r26
 16e:	bb 1f       	adc	r27, r27
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	aa 1f       	adc	r26, r26
 176:	bb 1f       	adc	r27, r27
 178:	9c 01       	movw	r18, r24
 17a:	ad 01       	movw	r20, r26
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	44 1f       	adc	r20, r20
 182:	55 1f       	adc	r21, r21
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	44 1f       	adc	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	72 e1       	ldi	r23, 0x12	; 18
 190:	8a e7       	ldi	r24, 0x7A	; 122
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodsi4>
 198:	ca 01       	movw	r24, r20
 19a:	b9 01       	movw	r22, r18
 19c:	61 50       	subi	r22, 0x01	; 1
 19e:	71 09       	sbc	r23, r1
 1a0:	81 09       	sbc	r24, r1
 1a2:	91 09       	sbc	r25, r1
 1a4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__floatsisf>
 1a8:	0e 94 3a 02 	call	0x474	; 0x474 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
 1ac:	27 2f       	mov	r18, r23
 1ae:	33 27       	eor	r19, r19
 1b0:	27 fd       	sbrc	r18, 7
 1b2:	3a 95       	dec	r19
 1b4:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
 1b8:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1);//|(1<<TXEN1);
 1bc:	e9 ec       	ldi	r30, 0xC9	; 201
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
 1c4:	88 81       	ld	r24, Y
 1c6:	86 60       	ori	r24, 0x06	; 6
 1c8:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
 1ca:	80 81       	ld	r24, Z
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
 1d0:	88 81       	ld	r24, Y
 1d2:	87 7f       	andi	r24, 0xF7	; 247
 1d4:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
 1d6:	88 81       	ld	r24, Y
 1d8:	8f 7c       	andi	r24, 0xCF	; 207
 1da:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
 1dc:	80 81       	ld	r24, Z
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	80 83       	st	Z, r24
	
	
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <getLastChar>:

char getLastChar(){
	char ret = '\0';
	
	
	if(rxBuffer[rxReadPos].pack_no != -1){
 1e8:	e0 91 07 01 	lds	r30, 0x0107
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	e8 5f       	subi	r30, 0xF8	; 248
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	81 81       	ldd	r24, Z+1	; 0x01
		// read the character from buffer
		ret = rxBuffer[rxReadPos].data;
 1f8:	e0 91 07 01 	lds	r30, 0x0107
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e8 5f       	subi	r30, 0xF8	; 248
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	80 81       	ld	r24, Z
	}
	

	
	// clear the character that was read
	rxBuffer[rxReadPos].data = '\0';
 208:	e0 91 07 01 	lds	r30, 0x0107
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e8 5f       	subi	r30, 0xF8	; 248
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	10 82       	st	Z, r1
	
	//increment position from which to read, if it reached the end set the position to start
	rxReadPos++;
 218:	90 91 07 01 	lds	r25, 0x0107
 21c:	9f 5f       	subi	r25, 0xFF	; 255
 21e:	90 93 07 01 	sts	0x0107, r25
	if(rxReadPos >= RX_BUFFER_SIZE){
 222:	90 91 07 01 	lds	r25, 0x0107
 226:	93 30       	cpi	r25, 0x03	; 3
 228:	10 f0       	brcs	.+4      	; 0x22e <getLastChar+0x46>
		rxReadPos = 0;
 22a:	10 92 07 01 	sts	0x0107, r1
	}
	
	return ret;
}
 22e:	08 95       	ret

00000230 <main>:
int enableRight = 1;
int enableLeft = 1;


int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	
	initUSART1(9600);
 23a:	80 e8       	ldi	r24, 0x80	; 128
 23c:	95 e2       	ldi	r25, 0x25	; 37
 23e:	0e 94 a1 00 	call	0x142	; 0x142 <initUSART1>
	initTimer0();
 242:	0e 94 16 03 	call	0x62c	; 0x62c <initTimer0>
	initTimer2();
 246:	0e 94 35 03 	call	0x66a	; 0x66a <initTimer2>
	PORTA |= (1<<PORTA0);
	
	DDRA= (1<<PORTA1);
	PORTA &= ~(1<<PORTA1);
*/
	LED_CMD_DDR &= ~(1<<LED_CMD_PINx);
 24a:	21 98       	cbi	0x04, 1	; 4
	
	
	
	//char data;
	
	sei();
 24c:	78 94       	sei

	changeMotorDirectionRB();
 24e:	0e 94 04 03 	call	0x608	; 0x608 <changeMotorDirectionRB>
	breakAll();
 252:	0e 94 07 03 	call	0x60e	; 0x60e <breakAll>
		
		
		*/
		
		//consume the buffer
		volatile	  char c = getLastChar();
 256:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <getLastChar>
 25a:	89 83       	std	Y+1, r24	; 0x01
		if(c != '\0'){
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	88 23       	and	r24, r24
 260:	d1 f3       	breq	.-12     	; 0x256 <main+0x26>
			switch(c){
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	f0 97       	sbiw	r30, 0x30	; 48
 26a:	e4 34       	cpi	r30, 0x44	; 68
 26c:	f1 05       	cpc	r31, r1
 26e:	70 f5       	brcc	.+92     	; 0x2cc <main+0x9c>
 270:	e2 5c       	subi	r30, 0xC2	; 194
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__tablejump2__>
				case '0':
					breakAll();
 278:	0e 94 07 03 	call	0x60e	; 0x60e <breakAll>
					changePwm_MotorRF(0);
					changePwm_MotorRB(0);
					*/
					//changePwm0A(0);
					//changePwm0B(0);
					break;
 27c:	ec cf       	rjmp	.-40     	; 0x256 <main+0x26>
				case 'D':
				case 'd':
					enableRight ^= 1;
 27e:	80 91 02 01 	lds	r24, 0x0102
 282:	90 91 03 01 	lds	r25, 0x0103
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	82 27       	eor	r24, r18
 28a:	90 93 03 01 	sts	0x0103, r25
 28e:	80 93 02 01 	sts	0x0102, r24
					if(!enableRight){
 292:	89 2b       	or	r24, r25
 294:	01 f7       	brne	.-64     	; 0x256 <main+0x26>
						breakRight();
 296:	0e 94 11 03 	call	0x622	; 0x622 <breakRight>
 29a:	dd cf       	rjmp	.-70     	; 0x256 <main+0x26>
					}
					break;
				case 'S':
				case 's':
					enableLeft ^= 1;
 29c:	80 91 00 01 	lds	r24, 0x0100
 2a0:	90 91 01 01 	lds	r25, 0x0101
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	82 27       	eor	r24, r18
 2a8:	90 93 01 01 	sts	0x0101, r25
 2ac:	80 93 00 01 	sts	0x0100, r24
					if (!enableLeft)
 2b0:	89 2b       	or	r24, r25
 2b2:	89 f6       	brne	.-94     	; 0x256 <main+0x26>
					{
						breakLeft();
 2b4:	0e 94 0e 03 	call	0x61c	; 0x61c <breakLeft>
 2b8:	ce cf       	rjmp	.-100    	; 0x256 <main+0x26>
					}
					break;
				case 'b':
				case 'B'://change direction
					changeMotorDirectionLF();
 2ba:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <changeMotorDirectionLF>
					changeMotorDirectionRF();
 2be:	0e 94 01 03 	call	0x602	; 0x602 <changeMotorDirectionRF>
					changeMotorDirectionRB();
 2c2:	0e 94 04 03 	call	0x608	; 0x608 <changeMotorDirectionRB>
					changeMotorDirectionLB();
 2c6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <changeMotorDirectionLB>
					break;
 2ca:	c5 cf       	rjmp	.-118    	; 0x256 <main+0x26>
				default:
					if(isdigit(c)){
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	c0 97       	sbiw	r24, 0x30	; 48
 2d2:	0a 97       	sbiw	r24, 0x0a	; 10
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <main+0xa8>
 2d6:	57 c0       	rjmp	.+174    	; 0x386 <main+0x156>
					
						if(enableLeft){
 2d8:	80 91 00 01 	lds	r24, 0x0100
 2dc:	90 91 01 01 	lds	r25, 0x0101
 2e0:	89 2b       	or	r24, r25
 2e2:	19 f1       	breq	.+70     	; 0x32a <main+0xfa>
							changePwm_MotorLF((c-'0')*10);
 2e4:	29 81       	ldd	r18, Y+1	; 0x01
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	20 53       	subi	r18, 0x30	; 48
 2ea:	31 09       	sbc	r19, r1
 2ec:	c9 01       	movw	r24, r18
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	82 0f       	add	r24, r18
 300:	93 1f       	adc	r25, r19
 302:	0e 94 9d 02 	call	0x53a	; 0x53a <changePwm_MotorLF>
							changePwm_MotorLB((c-'0')*10);
 306:	29 81       	ldd	r18, Y+1	; 0x01
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	20 53       	subi	r18, 0x30	; 48
 30c:	31 09       	sbc	r19, r1
 30e:	c9 01       	movw	r24, r18
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	82 0f       	add	r24, r18
 322:	93 1f       	adc	r25, r19
 324:	0e 94 b4 02 	call	0x568	; 0x568 <changePwm_MotorLB>
 328:	02 c0       	rjmp	.+4      	; 0x32e <main+0xfe>
							//changePwm0A(c-'0');
							}else{
								breakLeft();
 32a:	0e 94 0e 03 	call	0x61c	; 0x61c <breakLeft>
							changePwm_MotorLB(0);
							*/
							//changePwm0A(0);
						
						}
						if(enableRight){
 32e:	80 91 02 01 	lds	r24, 0x0102
 332:	90 91 03 01 	lds	r25, 0x0103
 336:	89 2b       	or	r24, r25
 338:	19 f1       	breq	.+70     	; 0x380 <main+0x150>
							changePwm_MotorRF((c-'0')*10);
 33a:	29 81       	ldd	r18, Y+1	; 0x01
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	20 53       	subi	r18, 0x30	; 48
 340:	31 09       	sbc	r19, r1
 342:	c9 01       	movw	r24, r18
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	22 0f       	add	r18, r18
 34e:	33 1f       	adc	r19, r19
 350:	22 0f       	add	r18, r18
 352:	33 1f       	adc	r19, r19
 354:	82 0f       	add	r24, r18
 356:	93 1f       	adc	r25, r19
 358:	0e 94 cb 02 	call	0x596	; 0x596 <changePwm_MotorRF>
							changePwm_MotorRB((c-'0')*10);
 35c:	29 81       	ldd	r18, Y+1	; 0x01
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	20 53       	subi	r18, 0x30	; 48
 362:	31 09       	sbc	r19, r1
 364:	c9 01       	movw	r24, r18
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	82 0f       	add	r24, r18
 378:	93 1f       	adc	r25, r19
 37a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <changePwm_MotorRB>
 37e:	6b cf       	rjmp	.-298    	; 0x256 <main+0x26>
							//changePwm0B(c-'0');
						}
						else{
							breakRight();
 380:	0e 94 11 03 	call	0x622	; 0x622 <breakRight>
 384:	68 cf       	rjmp	.-304    	; 0x256 <main+0x26>
						
						}
					
					
						}else{
							breakAll();
 386:	0e 94 07 03 	call	0x60e	; 0x60e <breakAll>
 38a:	65 cf       	rjmp	.-310    	; 0x256 <main+0x26>

0000038c <__vector_28>:
	}
	
	return ret;
}

ISR(USART1_RX_vect){
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	
	rxBuffer[rxWritePos].data = UDR1;
 39e:	e0 91 06 01 	lds	r30, 0x0106
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 91 ce 00 	lds	r24, 0x00CE
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	e8 5f       	subi	r30, 0xF8	; 248
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	80 83       	st	Z, r24
	rxBuffer[rxWritePos].pack_no = 1;
 3b2:	e0 91 06 01 	lds	r30, 0x0106
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	e8 5f       	subi	r30, 0xF8	; 248
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	81 83       	std	Z+1, r24	; 0x01
	rxWritePos++;
 3c4:	80 91 06 01 	lds	r24, 0x0106
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	80 93 06 01 	sts	0x0106, r24
	
	read =1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 93 05 01 	sts	0x0105, r25
 3d6:	80 93 04 01 	sts	0x0104, r24
	if(rxWritePos>=RX_BUFFER_SIZE){
 3da:	80 91 06 01 	lds	r24, 0x0106
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	10 f0       	brcs	.+4      	; 0x3e6 <__vector_28+0x5a>
		rxWritePos = 0;
 3e2:	10 92 06 01 	sts	0x0106, r1
		
	}
	
	LED_CMD_PIN |= (1<<LED_CMD_PINx);
 3e6:	19 9a       	sbi	0x03, 1	; 3
	
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__floatunsisf>:
 3fa:	e8 94       	clt
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__floatsisf+0x12>

000003fe <__floatsisf>:
 3fe:	97 fb       	bst	r25, 7
 400:	3e f4       	brtc	.+14     	; 0x410 <__floatsisf+0x12>
 402:	90 95       	com	r25
 404:	80 95       	com	r24
 406:	70 95       	com	r23
 408:	61 95       	neg	r22
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	99 23       	and	r25, r25
 412:	a9 f0       	breq	.+42     	; 0x43e <__floatsisf+0x40>
 414:	f9 2f       	mov	r31, r25
 416:	96 e9       	ldi	r25, 0x96	; 150
 418:	bb 27       	eor	r27, r27
 41a:	93 95       	inc	r25
 41c:	f6 95       	lsr	r31
 41e:	87 95       	ror	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b7 95       	ror	r27
 426:	f1 11       	cpse	r31, r1
 428:	f8 cf       	rjmp	.-16     	; 0x41a <__floatsisf+0x1c>
 42a:	fa f4       	brpl	.+62     	; 0x46a <__floatsisf+0x6c>
 42c:	bb 0f       	add	r27, r27
 42e:	11 f4       	brne	.+4      	; 0x434 <__floatsisf+0x36>
 430:	60 ff       	sbrs	r22, 0
 432:	1b c0       	rjmp	.+54     	; 0x46a <__floatsisf+0x6c>
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	16 c0       	rjmp	.+44     	; 0x46a <__floatsisf+0x6c>
 43e:	88 23       	and	r24, r24
 440:	11 f0       	breq	.+4      	; 0x446 <__floatsisf+0x48>
 442:	96 e9       	ldi	r25, 0x96	; 150
 444:	11 c0       	rjmp	.+34     	; 0x468 <__floatsisf+0x6a>
 446:	77 23       	and	r23, r23
 448:	21 f0       	breq	.+8      	; 0x452 <__floatsisf+0x54>
 44a:	9e e8       	ldi	r25, 0x8E	; 142
 44c:	87 2f       	mov	r24, r23
 44e:	76 2f       	mov	r23, r22
 450:	05 c0       	rjmp	.+10     	; 0x45c <__floatsisf+0x5e>
 452:	66 23       	and	r22, r22
 454:	71 f0       	breq	.+28     	; 0x472 <__floatsisf+0x74>
 456:	96 e8       	ldi	r25, 0x86	; 134
 458:	86 2f       	mov	r24, r22
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	2a f0       	brmi	.+10     	; 0x46a <__floatsisf+0x6c>
 460:	9a 95       	dec	r25
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	88 1f       	adc	r24, r24
 468:	da f7       	brpl	.-10     	; 0x460 <__floatsisf+0x62>
 46a:	88 0f       	add	r24, r24
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <lrint>:
 474:	41 d0       	rcall	.+130    	; 0x4f8 <__fp_splitA>
 476:	a8 f1       	brcs	.+106    	; 0x4e2 <lrint+0x6e>
 478:	9e 57       	subi	r25, 0x7E	; 126
 47a:	a8 f1       	brcs	.+106    	; 0x4e6 <lrint+0x72>
 47c:	98 51       	subi	r25, 0x18	; 24
 47e:	60 f0       	brcs	.+24     	; 0x498 <lrint+0x24>
 480:	39 f1       	breq	.+78     	; 0x4d0 <lrint+0x5c>
 482:	98 30       	cpi	r25, 0x08	; 8
 484:	70 f5       	brcc	.+92     	; 0x4e2 <lrint+0x6e>
 486:	09 2e       	mov	r0, r25
 488:	99 27       	eor	r25, r25
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	88 1f       	adc	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	0a 94       	dec	r0
 494:	d1 f7       	brne	.-12     	; 0x48a <lrint+0x16>
 496:	1c c0       	rjmp	.+56     	; 0x4d0 <lrint+0x5c>
 498:	bb 27       	eor	r27, r27
 49a:	99 3f       	cpi	r25, 0xF9	; 249
 49c:	4c f4       	brge	.+18     	; 0x4b0 <lrint+0x3c>
 49e:	b1 11       	cpse	r27, r1
 4a0:	b1 e0       	ldi	r27, 0x01	; 1
 4a2:	b6 2b       	or	r27, r22
 4a4:	67 2f       	mov	r22, r23
 4a6:	78 2f       	mov	r23, r24
 4a8:	88 27       	eor	r24, r24
 4aa:	98 5f       	subi	r25, 0xF8	; 248
 4ac:	b1 f7       	brne	.-20     	; 0x49a <lrint+0x26>
 4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <lrint+0x4c>
 4b0:	86 95       	lsr	r24
 4b2:	77 95       	ror	r23
 4b4:	67 95       	ror	r22
 4b6:	b7 95       	ror	r27
 4b8:	08 f4       	brcc	.+2      	; 0x4bc <lrint+0x48>
 4ba:	b1 60       	ori	r27, 0x01	; 1
 4bc:	93 95       	inc	r25
 4be:	c1 f7       	brne	.-16     	; 0x4b0 <lrint+0x3c>
 4c0:	bb 0f       	add	r27, r27
 4c2:	30 f4       	brcc	.+12     	; 0x4d0 <lrint+0x5c>
 4c4:	11 f4       	brne	.+4      	; 0x4ca <lrint+0x56>
 4c6:	60 ff       	sbrs	r22, 0
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <lrint+0x5c>
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	8f 4f       	sbci	r24, 0xFF	; 255
 4d0:	3e f4       	brtc	.+14     	; 0x4e0 <lrint+0x6c>
 4d2:	90 95       	com	r25
 4d4:	80 95       	com	r24
 4d6:	70 95       	com	r23
 4d8:	61 95       	neg	r22
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	8f 4f       	sbci	r24, 0xFF	; 255
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	08 95       	ret
 4e2:	68 94       	set
 4e4:	24 c0       	rjmp	.+72     	; 0x52e <__fp_szero>
 4e6:	22 c0       	rjmp	.+68     	; 0x52c <__fp_zero>

000004e8 <__fp_split3>:
 4e8:	57 fd       	sbrc	r21, 7
 4ea:	90 58       	subi	r25, 0x80	; 128
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	59 f0       	breq	.+22     	; 0x508 <__fp_splitA+0x10>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	71 f0       	breq	.+28     	; 0x512 <__fp_splitA+0x1a>
 4f6:	47 95       	ror	r20

000004f8 <__fp_splitA>:
 4f8:	88 0f       	add	r24, r24
 4fa:	97 fb       	bst	r25, 7
 4fc:	99 1f       	adc	r25, r25
 4fe:	61 f0       	breq	.+24     	; 0x518 <__fp_splitA+0x20>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	79 f0       	breq	.+30     	; 0x522 <__fp_splitA+0x2a>
 504:	87 95       	ror	r24
 506:	08 95       	ret
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	55 1f       	adc	r21, r21
 510:	f2 cf       	rjmp	.-28     	; 0x4f6 <__fp_split3+0xe>
 512:	46 95       	lsr	r20
 514:	f1 df       	rcall	.-30     	; 0x4f8 <__fp_splitA>
 516:	08 c0       	rjmp	.+16     	; 0x528 <__fp_splitA+0x30>
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	18 06       	cpc	r1, r24
 51e:	99 1f       	adc	r25, r25
 520:	f1 cf       	rjmp	.-30     	; 0x504 <__fp_splitA+0xc>
 522:	86 95       	lsr	r24
 524:	71 05       	cpc	r23, r1
 526:	61 05       	cpc	r22, r1
 528:	08 94       	sec
 52a:	08 95       	ret

0000052c <__fp_zero>:
 52c:	e8 94       	clt

0000052e <__fp_szero>:
 52e:	bb 27       	eor	r27, r27
 530:	66 27       	eor	r22, r22
 532:	77 27       	eor	r23, r23
 534:	cb 01       	movw	r24, r22
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <changePwm_MotorLF>:
//#include "io_definitions.h"
//#include "PWM_lib.h"


void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
 53a:	bc 01       	movw	r22, r24
 53c:	88 27       	eor	r24, r24
 53e:	77 fd       	sbrc	r23, 7
 540:	80 95       	com	r24
 542:	98 2f       	mov	r25, r24
 544:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__floatsisf>
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	48 ec       	ldi	r20, 0xC8	; 200
 54e:	52 e4       	ldi	r21, 0x42	; 66
 550:	0e 94 5f 03 	call	0x6be	; 0x6be <__divsf3>
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	4f e7       	ldi	r20, 0x7F	; 127
 55a:	53 e4       	ldi	r21, 0x43	; 67
 55c:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 560:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 564:	67 bd       	out	0x27, r22	; 39
 566:	08 95       	ret

00000568 <changePwm_MotorLB>:
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
 568:	bc 01       	movw	r22, r24
 56a:	88 27       	eor	r24, r24
 56c:	77 fd       	sbrc	r23, 7
 56e:	80 95       	com	r24
 570:	98 2f       	mov	r25, r24
 572:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__floatsisf>
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	48 ec       	ldi	r20, 0xC8	; 200
 57c:	52 e4       	ldi	r21, 0x42	; 66
 57e:	0e 94 5f 03 	call	0x6be	; 0x6be <__divsf3>
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	4f e7       	ldi	r20, 0x7F	; 127
 588:	53 e4       	ldi	r21, 0x43	; 67
 58a:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 58e:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 592:	68 bd       	out	0x28, r22	; 40
 594:	08 95       	ret

00000596 <changePwm_MotorRF>:
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
 596:	bc 01       	movw	r22, r24
 598:	88 27       	eor	r24, r24
 59a:	77 fd       	sbrc	r23, 7
 59c:	80 95       	com	r24
 59e:	98 2f       	mov	r25, r24
 5a0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__floatsisf>
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	48 ec       	ldi	r20, 0xC8	; 200
 5aa:	52 e4       	ldi	r21, 0x42	; 66
 5ac:	0e 94 5f 03 	call	0x6be	; 0x6be <__divsf3>
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	4f e7       	ldi	r20, 0x7F	; 127
 5b6:	53 e4       	ldi	r21, 0x43	; 67
 5b8:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 5bc:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 5c0:	60 93 b3 00 	sts	0x00B3, r22
 5c4:	08 95       	ret

000005c6 <changePwm_MotorRB>:
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
 5c6:	bc 01       	movw	r22, r24
 5c8:	88 27       	eor	r24, r24
 5ca:	77 fd       	sbrc	r23, 7
 5cc:	80 95       	com	r24
 5ce:	98 2f       	mov	r25, r24
 5d0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__floatsisf>
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	48 ec       	ldi	r20, 0xC8	; 200
 5da:	52 e4       	ldi	r21, 0x42	; 66
 5dc:	0e 94 5f 03 	call	0x6be	; 0x6be <__divsf3>
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	4f e7       	ldi	r20, 0x7F	; 127
 5e6:	53 e4       	ldi	r21, 0x43	; 67
 5e8:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 5ec:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 5f0:	60 93 b4 00 	sts	0x00B4, r22
 5f4:	08 95       	ret

000005f6 <changeMotorDirectionLF>:
}
	 

void changeMotorDirectionLF(){
	MOTOR_LF_DIR_PIN1 |= (1<<MOTOR_LF_DIR_PIN1x);
 5f6:	48 9a       	sbi	0x09, 0	; 9
	MOTOR_LF_DIR_PIN2 |= (1<<MOTOR_LF_DIR_PIN2x);
 5f8:	49 9a       	sbi	0x09, 1	; 9
 5fa:	08 95       	ret

000005fc <changeMotorDirectionLB>:
}
	
void changeMotorDirectionLB(){
	MOTOR_LB_DIR_PIN1 |= (1<<MOTOR_LB_DIR_PIN1x);
 5fc:	1a 9a       	sbi	0x03, 2	; 3
	MOTOR_LB_DIR_PIN2 |= (1<<MOTOR_LB_DIR_PIN2x);
 5fe:	1d 9a       	sbi	0x03, 5	; 3
 600:	08 95       	ret

00000602 <changeMotorDirectionRF>:
}
	  
void changeMotorDirectionRF(){
	MOTOR_RF_DIR_PIN1 |= (1<<MOTOR_RF_DIR_PIN1x);	
 602:	36 9a       	sbi	0x06, 6	; 6
	MOTOR_RF_DIR_PIN2 |= (1<<MOTOR_RF_DIR_PIN2x);
 604:	37 9a       	sbi	0x06, 7	; 6
 606:	08 95       	ret

00000608 <changeMotorDirectionRB>:
}
	 
void changeMotorDirectionRB(){
	MOTOR_RB_DIR_PIN1 |= (1<<MOTOR_RB_DIR_PIN1x);
 608:	30 9a       	sbi	0x06, 0	; 6
	MOTOR_RB_DIR_PIN2 |= (1<<MOTOR_RB_DIR_PIN2x);
 60a:	31 9a       	sbi	0x06, 1	; 6
 60c:	08 95       	ret

0000060e <breakAll>:
//#include "io_definitions.h"
//#include "PWM_lib.h"


void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
 60e:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
 610:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
 612:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
 616:	10 92 b4 00 	sts	0x00B4, r1
 61a:	08 95       	ret

0000061c <breakLeft>:
//#include "io_definitions.h"
//#include "PWM_lib.h"


void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
 61c:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
 61e:	18 bc       	out	0x28, r1	; 40
 620:	08 95       	ret

00000622 <breakRight>:
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
 622:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
 626:	10 92 b4 00 	sts	0x00B4, r1
 62a:	08 95       	ret

0000062c <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LF_DIR_DDR1 |= (1<<MOTOR_LF_DIR_PIN1x);
 62c:	50 9a       	sbi	0x0a, 0	; 10
	MOTOR_LF_DIR_DDR2 |= (1<<MOTOR_LF_DIR_PIN2x);
 62e:	51 9a       	sbi	0x0a, 1	; 10
	MOTOR_LB_DIR_DDR1 |= (1<<MOTOR_LB_DIR_PIN1x);
 630:	22 9a       	sbi	0x04, 2	; 4
	MOTOR_LB_DIR_DDR2 |= (1<<MOTOR_LB_DIR_PIN1x);
 632:	22 9a       	sbi	0x04, 2	; 4
	
	//setez directia initiala
	MOTOR_LF_DIR_PORT1 |= (1<<MOTOR_LF_DIR_PIN1x);
 634:	58 9a       	sbi	0x0b, 0	; 11
	MOTOR_LF_DIR_PORT2 &= ~(1<<MOTOR_LF_DIR_PIN2x);
 636:	59 98       	cbi	0x0b, 1	; 11
	MOTOR_LB_DIR_PORT1 |= (1<<MOTOR_LB_DIR_PIN1x);
 638:	2a 9a       	sbi	0x05, 2	; 5
	MOTOR_LB_DIR_PORT2 &= ~(1<<MOTOR_LB_DIR_PIN2x);
 63a:	2d 98       	cbi	0x05, 5	; 5
	
	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
 63c:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
 63e:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
 640:	84 b5       	in	r24, 0x24	; 36
 642:	80 68       	ori	r24, 0x80	; 128
 644:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
 646:	84 b5       	in	r24, 0x24	; 36
 648:	8f 7b       	andi	r24, 0xBF	; 191
 64a:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
 64c:	84 b5       	in	r24, 0x24	; 36
 64e:	80 62       	ori	r24, 0x20	; 32
 650:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
 652:	84 b5       	in	r24, 0x24	; 36
 654:	8f 7e       	andi	r24, 0xEF	; 239
 656:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
 658:	84 b5       	in	r24, 0x24	; 36
 65a:	83 60       	ori	r24, 0x03	; 3
 65c:	84 bd       	out	0x24, r24	; 36
//#include "io_definitions.h"
//#include "PWM_lib.h"


void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
 65e:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
 660:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
 662:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
 664:	83 e0       	ldi	r24, 0x03	; 3
 666:	85 bd       	out	0x25, r24	; 37
 668:	08 95       	ret

0000066a <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RF_DIR_DDR1 |= (1<<MOTOR_RF_DIR_PIN1x);
 66a:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RF_DIR_DDR2 |= (1<<MOTOR_RF_DIR_PIN2x);
 66c:	3f 9a       	sbi	0x07, 7	; 7
	MOTOR_RB_DIR_DDR1 |= (1<<MOTOR_RB_DIR_PIN1x);
 66e:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_RB_DIR_DDR2 |= (1<<MOTOR_RB_DIR_PIN2x);
 670:	39 9a       	sbi	0x07, 1	; 7
	
	//setez directia initiala
	MOTOR_RF_DIR_PORT1 |= (1<<MOTOR_RF_DIR_PIN1x);
 672:	46 9a       	sbi	0x08, 6	; 8
	MOTOR_RF_DIR_PORT2 &= ~(1<<MOTOR_RF_DIR_PIN2x);
 674:	47 98       	cbi	0x08, 7	; 8
	MOTOR_RB_DIR_PORT1 |= (1<<MOTOR_RB_DIR_PIN1x);
 676:	40 9a       	sbi	0x08, 0	; 8
	MOTOR_RB_DIR_PORT2 &= ~(1<<MOTOR_RB_DIR_PIN2x);	
 678:	41 98       	cbi	0x08, 1	; 8
	
	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
 67a:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
 67c:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
 67e:	e0 eb       	ldi	r30, 0xB0	; 176
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	80 68       	ori	r24, 0x80	; 128
 686:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
 688:	80 81       	ld	r24, Z
 68a:	8f 7b       	andi	r24, 0xBF	; 191
 68c:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
 68e:	80 81       	ld	r24, Z
 690:	80 62       	ori	r24, 0x20	; 32
 692:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
 694:	80 81       	ld	r24, Z
 696:	8f 7e       	andi	r24, 0xEF	; 239
 698:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
 69a:	80 81       	ld	r24, Z
 69c:	83 60       	ori	r24, 0x03	; 3
 69e:	80 83       	st	Z, r24
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
 6a0:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
 6a4:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
 6a8:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
 6ac:	e1 eb       	ldi	r30, 0xB1	; 177
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	8c 7f       	andi	r24, 0xFC	; 252
 6b4:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
 6b6:	80 81       	ld	r24, Z
 6b8:	84 60       	ori	r24, 0x04	; 4
 6ba:	80 83       	st	Z, r24
 6bc:	08 95       	ret

000006be <__divsf3>:
 6be:	0c d0       	rcall	.+24     	; 0x6d8 <__divsf3x>
 6c0:	a9 c0       	rjmp	.+338    	; 0x814 <__fp_round>
 6c2:	a1 d0       	rcall	.+322    	; 0x806 <__fp_pscB>
 6c4:	40 f0       	brcs	.+16     	; 0x6d6 <__divsf3+0x18>
 6c6:	98 d0       	rcall	.+304    	; 0x7f8 <__fp_pscA>
 6c8:	30 f0       	brcs	.+12     	; 0x6d6 <__divsf3+0x18>
 6ca:	21 f4       	brne	.+8      	; 0x6d4 <__divsf3+0x16>
 6cc:	5f 3f       	cpi	r21, 0xFF	; 255
 6ce:	19 f0       	breq	.+6      	; 0x6d6 <__divsf3+0x18>
 6d0:	8a c0       	rjmp	.+276    	; 0x7e6 <__fp_inf>
 6d2:	51 11       	cpse	r21, r1
 6d4:	2c cf       	rjmp	.-424    	; 0x52e <__fp_szero>
 6d6:	8d c0       	rjmp	.+282    	; 0x7f2 <__fp_nan>

000006d8 <__divsf3x>:
 6d8:	07 df       	rcall	.-498    	; 0x4e8 <__fp_split3>
 6da:	98 f3       	brcs	.-26     	; 0x6c2 <__divsf3+0x4>

000006dc <__divsf3_pse>:
 6dc:	99 23       	and	r25, r25
 6de:	c9 f3       	breq	.-14     	; 0x6d2 <__divsf3+0x14>
 6e0:	55 23       	and	r21, r21
 6e2:	b1 f3       	breq	.-20     	; 0x6d0 <__divsf3+0x12>
 6e4:	95 1b       	sub	r25, r21
 6e6:	55 0b       	sbc	r21, r21
 6e8:	bb 27       	eor	r27, r27
 6ea:	aa 27       	eor	r26, r26
 6ec:	62 17       	cp	r22, r18
 6ee:	73 07       	cpc	r23, r19
 6f0:	84 07       	cpc	r24, r20
 6f2:	38 f0       	brcs	.+14     	; 0x702 <__divsf3_pse+0x26>
 6f4:	9f 5f       	subi	r25, 0xFF	; 255
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
 6f8:	22 0f       	add	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	44 1f       	adc	r20, r20
 6fe:	aa 1f       	adc	r26, r26
 700:	a9 f3       	breq	.-22     	; 0x6ec <__divsf3_pse+0x10>
 702:	33 d0       	rcall	.+102    	; 0x76a <__divsf3_pse+0x8e>
 704:	0e 2e       	mov	r0, r30
 706:	3a f0       	brmi	.+14     	; 0x716 <__divsf3_pse+0x3a>
 708:	e0 e8       	ldi	r30, 0x80	; 128
 70a:	30 d0       	rcall	.+96     	; 0x76c <__divsf3_pse+0x90>
 70c:	91 50       	subi	r25, 0x01	; 1
 70e:	50 40       	sbci	r21, 0x00	; 0
 710:	e6 95       	lsr	r30
 712:	00 1c       	adc	r0, r0
 714:	ca f7       	brpl	.-14     	; 0x708 <__divsf3_pse+0x2c>
 716:	29 d0       	rcall	.+82     	; 0x76a <__divsf3_pse+0x8e>
 718:	fe 2f       	mov	r31, r30
 71a:	27 d0       	rcall	.+78     	; 0x76a <__divsf3_pse+0x8e>
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	bb 1f       	adc	r27, r27
 724:	26 17       	cp	r18, r22
 726:	37 07       	cpc	r19, r23
 728:	48 07       	cpc	r20, r24
 72a:	ab 07       	cpc	r26, r27
 72c:	b0 e8       	ldi	r27, 0x80	; 128
 72e:	09 f0       	breq	.+2      	; 0x732 <__divsf3_pse+0x56>
 730:	bb 0b       	sbc	r27, r27
 732:	80 2d       	mov	r24, r0
 734:	bf 01       	movw	r22, r30
 736:	ff 27       	eor	r31, r31
 738:	93 58       	subi	r25, 0x83	; 131
 73a:	5f 4f       	sbci	r21, 0xFF	; 255
 73c:	2a f0       	brmi	.+10     	; 0x748 <__divsf3_pse+0x6c>
 73e:	9e 3f       	cpi	r25, 0xFE	; 254
 740:	51 05       	cpc	r21, r1
 742:	68 f0       	brcs	.+26     	; 0x75e <__divsf3_pse+0x82>
 744:	50 c0       	rjmp	.+160    	; 0x7e6 <__fp_inf>
 746:	f3 ce       	rjmp	.-538    	; 0x52e <__fp_szero>
 748:	5f 3f       	cpi	r21, 0xFF	; 255
 74a:	ec f3       	brlt	.-6      	; 0x746 <__divsf3_pse+0x6a>
 74c:	98 3e       	cpi	r25, 0xE8	; 232
 74e:	dc f3       	brlt	.-10     	; 0x746 <__divsf3_pse+0x6a>
 750:	86 95       	lsr	r24
 752:	77 95       	ror	r23
 754:	67 95       	ror	r22
 756:	b7 95       	ror	r27
 758:	f7 95       	ror	r31
 75a:	9f 5f       	subi	r25, 0xFF	; 255
 75c:	c9 f7       	brne	.-14     	; 0x750 <__divsf3_pse+0x74>
 75e:	88 0f       	add	r24, r24
 760:	91 1d       	adc	r25, r1
 762:	96 95       	lsr	r25
 764:	87 95       	ror	r24
 766:	97 f9       	bld	r25, 7
 768:	08 95       	ret
 76a:	e1 e0       	ldi	r30, 0x01	; 1
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	bb 1f       	adc	r27, r27
 774:	62 17       	cp	r22, r18
 776:	73 07       	cpc	r23, r19
 778:	84 07       	cpc	r24, r20
 77a:	ba 07       	cpc	r27, r26
 77c:	20 f0       	brcs	.+8      	; 0x786 <__divsf3_pse+0xaa>
 77e:	62 1b       	sub	r22, r18
 780:	73 0b       	sbc	r23, r19
 782:	84 0b       	sbc	r24, r20
 784:	ba 0b       	sbc	r27, r26
 786:	ee 1f       	adc	r30, r30
 788:	88 f7       	brcc	.-30     	; 0x76c <__divsf3_pse+0x90>
 78a:	e0 95       	com	r30
 78c:	08 95       	ret

0000078e <__fixunssfsi>:
 78e:	b4 de       	rcall	.-664    	; 0x4f8 <__fp_splitA>
 790:	88 f0       	brcs	.+34     	; 0x7b4 <__fixunssfsi+0x26>
 792:	9f 57       	subi	r25, 0x7F	; 127
 794:	90 f0       	brcs	.+36     	; 0x7ba <__fixunssfsi+0x2c>
 796:	b9 2f       	mov	r27, r25
 798:	99 27       	eor	r25, r25
 79a:	b7 51       	subi	r27, 0x17	; 23
 79c:	a0 f0       	brcs	.+40     	; 0x7c6 <__fixunssfsi+0x38>
 79e:	d1 f0       	breq	.+52     	; 0x7d4 <__fixunssfsi+0x46>
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	1a f0       	brmi	.+6      	; 0x7b0 <__fixunssfsi+0x22>
 7aa:	ba 95       	dec	r27
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__fixunssfsi+0x12>
 7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <__fixunssfsi+0x46>
 7b0:	b1 30       	cpi	r27, 0x01	; 1
 7b2:	81 f0       	breq	.+32     	; 0x7d4 <__fixunssfsi+0x46>
 7b4:	bb de       	rcall	.-650    	; 0x52c <__fp_zero>
 7b6:	b1 e0       	ldi	r27, 0x01	; 1
 7b8:	08 95       	ret
 7ba:	b8 ce       	rjmp	.-656    	; 0x52c <__fp_zero>
 7bc:	67 2f       	mov	r22, r23
 7be:	78 2f       	mov	r23, r24
 7c0:	88 27       	eor	r24, r24
 7c2:	b8 5f       	subi	r27, 0xF8	; 248
 7c4:	39 f0       	breq	.+14     	; 0x7d4 <__fixunssfsi+0x46>
 7c6:	b9 3f       	cpi	r27, 0xF9	; 249
 7c8:	cc f3       	brlt	.-14     	; 0x7bc <__fixunssfsi+0x2e>
 7ca:	86 95       	lsr	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b3 95       	inc	r27
 7d2:	d9 f7       	brne	.-10     	; 0x7ca <__fixunssfsi+0x3c>
 7d4:	3e f4       	brtc	.+14     	; 0x7e4 <__fixunssfsi+0x56>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	08 95       	ret

000007e6 <__fp_inf>:
 7e6:	97 f9       	bld	r25, 7
 7e8:	9f 67       	ori	r25, 0x7F	; 127
 7ea:	80 e8       	ldi	r24, 0x80	; 128
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	08 95       	ret

000007f2 <__fp_nan>:
 7f2:	9f ef       	ldi	r25, 0xFF	; 255
 7f4:	80 ec       	ldi	r24, 0xC0	; 192
 7f6:	08 95       	ret

000007f8 <__fp_pscA>:
 7f8:	00 24       	eor	r0, r0
 7fa:	0a 94       	dec	r0
 7fc:	16 16       	cp	r1, r22
 7fe:	17 06       	cpc	r1, r23
 800:	18 06       	cpc	r1, r24
 802:	09 06       	cpc	r0, r25
 804:	08 95       	ret

00000806 <__fp_pscB>:
 806:	00 24       	eor	r0, r0
 808:	0a 94       	dec	r0
 80a:	12 16       	cp	r1, r18
 80c:	13 06       	cpc	r1, r19
 80e:	14 06       	cpc	r1, r20
 810:	05 06       	cpc	r0, r21
 812:	08 95       	ret

00000814 <__fp_round>:
 814:	09 2e       	mov	r0, r25
 816:	03 94       	inc	r0
 818:	00 0c       	add	r0, r0
 81a:	11 f4       	brne	.+4      	; 0x820 <__fp_round+0xc>
 81c:	88 23       	and	r24, r24
 81e:	52 f0       	brmi	.+20     	; 0x834 <__fp_round+0x20>
 820:	bb 0f       	add	r27, r27
 822:	40 f4       	brcc	.+16     	; 0x834 <__fp_round+0x20>
 824:	bf 2b       	or	r27, r31
 826:	11 f4       	brne	.+4      	; 0x82c <__fp_round+0x18>
 828:	60 ff       	sbrs	r22, 0
 82a:	04 c0       	rjmp	.+8      	; 0x834 <__fp_round+0x20>
 82c:	6f 5f       	subi	r22, 0xFF	; 255
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	8f 4f       	sbci	r24, 0xFF	; 255
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	08 95       	ret

00000836 <__mulsf3>:
 836:	0b d0       	rcall	.+22     	; 0x84e <__mulsf3x>
 838:	ed cf       	rjmp	.-38     	; 0x814 <__fp_round>
 83a:	de df       	rcall	.-68     	; 0x7f8 <__fp_pscA>
 83c:	28 f0       	brcs	.+10     	; 0x848 <__mulsf3+0x12>
 83e:	e3 df       	rcall	.-58     	; 0x806 <__fp_pscB>
 840:	18 f0       	brcs	.+6      	; 0x848 <__mulsf3+0x12>
 842:	95 23       	and	r25, r21
 844:	09 f0       	breq	.+2      	; 0x848 <__mulsf3+0x12>
 846:	cf cf       	rjmp	.-98     	; 0x7e6 <__fp_inf>
 848:	d4 cf       	rjmp	.-88     	; 0x7f2 <__fp_nan>
 84a:	11 24       	eor	r1, r1
 84c:	70 ce       	rjmp	.-800    	; 0x52e <__fp_szero>

0000084e <__mulsf3x>:
 84e:	4c de       	rcall	.-872    	; 0x4e8 <__fp_split3>
 850:	a0 f3       	brcs	.-24     	; 0x83a <__mulsf3+0x4>

00000852 <__mulsf3_pse>:
 852:	95 9f       	mul	r25, r21
 854:	d1 f3       	breq	.-12     	; 0x84a <__mulsf3+0x14>
 856:	95 0f       	add	r25, r21
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	55 1f       	adc	r21, r21
 85c:	62 9f       	mul	r22, r18
 85e:	f0 01       	movw	r30, r0
 860:	72 9f       	mul	r23, r18
 862:	bb 27       	eor	r27, r27
 864:	f0 0d       	add	r31, r0
 866:	b1 1d       	adc	r27, r1
 868:	63 9f       	mul	r22, r19
 86a:	aa 27       	eor	r26, r26
 86c:	f0 0d       	add	r31, r0
 86e:	b1 1d       	adc	r27, r1
 870:	aa 1f       	adc	r26, r26
 872:	64 9f       	mul	r22, r20
 874:	66 27       	eor	r22, r22
 876:	b0 0d       	add	r27, r0
 878:	a1 1d       	adc	r26, r1
 87a:	66 1f       	adc	r22, r22
 87c:	82 9f       	mul	r24, r18
 87e:	22 27       	eor	r18, r18
 880:	b0 0d       	add	r27, r0
 882:	a1 1d       	adc	r26, r1
 884:	62 1f       	adc	r22, r18
 886:	73 9f       	mul	r23, r19
 888:	b0 0d       	add	r27, r0
 88a:	a1 1d       	adc	r26, r1
 88c:	62 1f       	adc	r22, r18
 88e:	83 9f       	mul	r24, r19
 890:	a0 0d       	add	r26, r0
 892:	61 1d       	adc	r22, r1
 894:	22 1f       	adc	r18, r18
 896:	74 9f       	mul	r23, r20
 898:	33 27       	eor	r19, r19
 89a:	a0 0d       	add	r26, r0
 89c:	61 1d       	adc	r22, r1
 89e:	23 1f       	adc	r18, r19
 8a0:	84 9f       	mul	r24, r20
 8a2:	60 0d       	add	r22, r0
 8a4:	21 1d       	adc	r18, r1
 8a6:	82 2f       	mov	r24, r18
 8a8:	76 2f       	mov	r23, r22
 8aa:	6a 2f       	mov	r22, r26
 8ac:	11 24       	eor	r1, r1
 8ae:	9f 57       	subi	r25, 0x7F	; 127
 8b0:	50 40       	sbci	r21, 0x00	; 0
 8b2:	8a f0       	brmi	.+34     	; 0x8d6 <__mulsf3_pse+0x84>
 8b4:	e1 f0       	breq	.+56     	; 0x8ee <__mulsf3_pse+0x9c>
 8b6:	88 23       	and	r24, r24
 8b8:	4a f0       	brmi	.+18     	; 0x8cc <__mulsf3_pse+0x7a>
 8ba:	ee 0f       	add	r30, r30
 8bc:	ff 1f       	adc	r31, r31
 8be:	bb 1f       	adc	r27, r27
 8c0:	66 1f       	adc	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	91 50       	subi	r25, 0x01	; 1
 8c8:	50 40       	sbci	r21, 0x00	; 0
 8ca:	a9 f7       	brne	.-22     	; 0x8b6 <__mulsf3_pse+0x64>
 8cc:	9e 3f       	cpi	r25, 0xFE	; 254
 8ce:	51 05       	cpc	r21, r1
 8d0:	70 f0       	brcs	.+28     	; 0x8ee <__mulsf3_pse+0x9c>
 8d2:	89 cf       	rjmp	.-238    	; 0x7e6 <__fp_inf>
 8d4:	2c ce       	rjmp	.-936    	; 0x52e <__fp_szero>
 8d6:	5f 3f       	cpi	r21, 0xFF	; 255
 8d8:	ec f3       	brlt	.-6      	; 0x8d4 <__mulsf3_pse+0x82>
 8da:	98 3e       	cpi	r25, 0xE8	; 232
 8dc:	dc f3       	brlt	.-10     	; 0x8d4 <__mulsf3_pse+0x82>
 8de:	86 95       	lsr	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b7 95       	ror	r27
 8e6:	f7 95       	ror	r31
 8e8:	e7 95       	ror	r30
 8ea:	9f 5f       	subi	r25, 0xFF	; 255
 8ec:	c1 f7       	brne	.-16     	; 0x8de <__mulsf3_pse+0x8c>
 8ee:	fe 2b       	or	r31, r30
 8f0:	88 0f       	add	r24, r24
 8f2:	91 1d       	adc	r25, r1
 8f4:	96 95       	lsr	r25
 8f6:	87 95       	ror	r24
 8f8:	97 f9       	bld	r25, 7
 8fa:	08 95       	ret

000008fc <__divmodsi4>:
 8fc:	05 2e       	mov	r0, r21
 8fe:	97 fb       	bst	r25, 7
 900:	1e f4       	brtc	.+6      	; 0x908 <__stack+0x9>
 902:	00 94       	com	r0
 904:	0e 94 95 04 	call	0x92a	; 0x92a <__negsi2>
 908:	57 fd       	sbrc	r21, 7
 90a:	07 d0       	rcall	.+14     	; 0x91a <__divmodsi4_neg2>
 90c:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodsi4>
 910:	07 fc       	sbrc	r0, 7
 912:	03 d0       	rcall	.+6      	; 0x91a <__divmodsi4_neg2>
 914:	4e f4       	brtc	.+18     	; 0x928 <__divmodsi4_exit>
 916:	0c 94 95 04 	jmp	0x92a	; 0x92a <__negsi2>

0000091a <__divmodsi4_neg2>:
 91a:	50 95       	com	r21
 91c:	40 95       	com	r20
 91e:	30 95       	com	r19
 920:	21 95       	neg	r18
 922:	3f 4f       	sbci	r19, 0xFF	; 255
 924:	4f 4f       	sbci	r20, 0xFF	; 255
 926:	5f 4f       	sbci	r21, 0xFF	; 255

00000928 <__divmodsi4_exit>:
 928:	08 95       	ret

0000092a <__negsi2>:
 92a:	90 95       	com	r25
 92c:	80 95       	com	r24
 92e:	70 95       	com	r23
 930:	61 95       	neg	r22
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	08 95       	ret

0000093a <__tablejump2__>:
 93a:	ee 0f       	add	r30, r30
 93c:	ff 1f       	adc	r31, r31

0000093e <__tablejump__>:
 93e:	05 90       	lpm	r0, Z+
 940:	f4 91       	lpm	r31, Z
 942:	e0 2d       	mov	r30, r0
 944:	09 94       	ijmp

00000946 <__udivmodsi4>:
 946:	a1 e2       	ldi	r26, 0x21	; 33
 948:	1a 2e       	mov	r1, r26
 94a:	aa 1b       	sub	r26, r26
 94c:	bb 1b       	sub	r27, r27
 94e:	fd 01       	movw	r30, r26
 950:	0d c0       	rjmp	.+26     	; 0x96c <__udivmodsi4_ep>

00000952 <__udivmodsi4_loop>:
 952:	aa 1f       	adc	r26, r26
 954:	bb 1f       	adc	r27, r27
 956:	ee 1f       	adc	r30, r30
 958:	ff 1f       	adc	r31, r31
 95a:	a2 17       	cp	r26, r18
 95c:	b3 07       	cpc	r27, r19
 95e:	e4 07       	cpc	r30, r20
 960:	f5 07       	cpc	r31, r21
 962:	20 f0       	brcs	.+8      	; 0x96c <__udivmodsi4_ep>
 964:	a2 1b       	sub	r26, r18
 966:	b3 0b       	sbc	r27, r19
 968:	e4 0b       	sbc	r30, r20
 96a:	f5 0b       	sbc	r31, r21

0000096c <__udivmodsi4_ep>:
 96c:	66 1f       	adc	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	1a 94       	dec	r1
 976:	69 f7       	brne	.-38     	; 0x952 <__udivmodsi4_loop>
 978:	60 95       	com	r22
 97a:	70 95       	com	r23
 97c:	80 95       	com	r24
 97e:	90 95       	com	r25
 980:	9b 01       	movw	r18, r22
 982:	ac 01       	movw	r20, r24
 984:	bd 01       	movw	r22, r26
 986:	cf 01       	movw	r24, r30
 988:	08 95       	ret

0000098a <_exit>:
 98a:	f8 94       	cli

0000098c <__stop_program>:
 98c:	ff cf       	rjmp	.-2      	; 0x98c <__stop_program>
