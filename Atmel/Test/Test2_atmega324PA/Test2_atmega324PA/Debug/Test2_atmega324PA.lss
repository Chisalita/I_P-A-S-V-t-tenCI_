
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001aba  00001b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000261  00800104  00800104  00001b52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00001b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021e4  00000000  00000000  00001e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be1  00000000  00000000  00004006  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d0c  00000000  00000000  00004be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000900  00000000  00000000  000058f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b17  00000000  00000000  000061f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000223a  00000000  00000000  00006d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  00008f45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ea eb       	ldi	r30, 0xBA	; 186
      90:	fa e1       	ldi	r31, 0x1A	; 26
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 30       	cpi	r26, 0x04	; 4
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a4 e0       	ldi	r26, 0x04	; 4
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a5 36       	cpi	r26, 0x65	; 101
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      b2:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initAll>:

int bune =0; //teste


void initAll(){
	initUSART1(9600);
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <initUSART1>
	initTimer0();
      c2:	0e 94 92 01 	call	0x324	; 0x324 <initTimer0>
	initTimer1();
      c6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <initTimer1>
	initTimer2();
      ca:	0e 94 ad 01 	call	0x35a	; 0x35a <initTimer2>
	initSensors();
      ce:	0e 94 28 03 	call	0x650	; 0x650 <initSensors>
      d2:	08 95       	ret

000000d4 <main>:


int main(void)
{
	
	initAll();
      d4:	0e 94 5d 00 	call	0xba	; 0xba <initAll>
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
      d8:	08 9a       	sbi	0x01, 0	; 1
	
	sei();
      da:	78 94       	sei

	breakAll();
      dc:	0e 94 8b 01 	call	0x316	; 0x316 <breakAll>
	
	
	while(1)
	{
		executeScheduled();
      e0:	0e 94 17 09 	call	0x122e	; 0x122e <executeScheduled>
		interpretCommands();
      e4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <interpretCommands>
      e8:	fb cf       	rjmp	.-10     	; 0xe0 <main+0xc>

000000ea <driveBackwardForTime>:
		executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
	}	
	
}

void driveBackwardForTime(uint8_t pwm, uint16_t time){
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	2a 97       	sbiw	r28, 0x0a	; 10
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
	
		//check if it is a negative number and if it is call the complementary function
		if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     10a:	88 23       	and	r24, r24
     10c:	24 f4       	brge	.+8      	; 0x116 <driveBackwardForTime+0x2c>
			//it is a negative pwm
			int8_t pwm_signed = pwm;
			pwm_signed = -pwm_signed;
			driveForwardForTime(pwm_signed, time);
     10e:	81 95       	neg	r24
     110:	0e 94 b8 00 	call	0x170	; 0x170 <driveForwardForTime>
     114:	1e c0       	rjmp	.+60     	; 0x152 <driveBackwardForTime+0x68>
		}
		else
		{
			int16_t arg1[3];
			int16_t arg2[]= {0, 0};
     116:	18 86       	std	Y+8, r1	; 0x08
     118:	1f 82       	std	Y+7, r1	; 0x07
     11a:	1a 86       	std	Y+10, r1	; 0x0a
     11c:	19 86       	std	Y+9, r1	; 0x09
			
			// the pwm is for backward but expressed like forward
			// it must be reversed
			
			int8_t pwm_signed = pwm;
			pwm_signed = -pwm_signed;
     11e:	81 95       	neg	r24
			//change back to unsigned so that the bit operations work properly
			pwm = pwm_signed;
			
			arg1[0] = pwm;
     120:	90 e0       	ldi	r25, 0x00	; 0
			arg1[0] |= pwm << 8;
     122:	38 2f       	mov	r19, r24
     124:	22 27       	eor	r18, r18
     126:	82 2b       	or	r24, r18
     128:	93 2b       	or	r25, r19
     12a:	9a 83       	std	Y+2, r25	; 0x02
     12c:	89 83       	std	Y+1, r24	; 0x01
			arg1[1] = pwm;
			arg1[1] |= pwm << 8;
     12e:	9c 83       	std	Y+4, r25	; 0x04
     130:	8b 83       	std	Y+3, r24	; 0x03
			
			executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
     132:	6b 01       	movw	r12, r22
     134:	ce 01       	movw	r24, r28
     136:	07 96       	adiw	r24, 0x07	; 7
     138:	7c 01       	movw	r14, r24
     13a:	02 e0       	ldi	r16, 0x02	; 2
     13c:	10 e0       	ldi	r17, 0x00	; 0
     13e:	9e 01       	movw	r18, r28
     140:	2f 5f       	subi	r18, 0xFF	; 255
     142:	3f 4f       	sbci	r19, 0xFF	; 255
     144:	42 e0       	ldi	r20, 0x02	; 2
     146:	50 e0       	ldi	r21, 0x00	; 0
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	71 e0       	ldi	r23, 0x01	; 1
     14c:	cb 01       	movw	r24, r22
     14e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <executeCommandForTime>
		}
	
	
}
     152:	2a 96       	adiw	r28, 0x0a	; 10
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	f8 94       	cli
     158:	de bf       	out	0x3e, r29	; 62
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	cd bf       	out	0x3d, r28	; 61
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	1f 91       	pop	r17
     164:	0f 91       	pop	r16
     166:	ff 90       	pop	r15
     168:	ef 90       	pop	r14
     16a:	df 90       	pop	r13
     16c:	cf 90       	pop	r12
     16e:	08 95       	ret

00000170 <driveForwardForTime>:
	executeCommandForTime(&move, &move, 2, arg1,3, arg2, TIME_TO_TURN_MS);//turn for TIME_TO_TURN_MS ms and then move forward for time ms
	}
	
}

void driveForwardForTime(uint8_t pwm, uint16_t time){
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	2a 97       	sbiw	r28, 0x0a	; 10
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
	
	//check if it is a negative number and if it is call the complementary function
	if(pwm & (1<<((sizeof(pwm)*8) - 1))){
     190:	88 23       	and	r24, r24
     192:	24 f4       	brge	.+8      	; 0x19c <driveForwardForTime+0x2c>
		//it is a negative pwm
		int8_t pwm_signed = pwm;
		pwm_signed = -pwm_signed;
		driveBackwardForTime(pwm_signed, time);
     194:	81 95       	neg	r24
     196:	0e 94 75 00 	call	0xea	; 0xea <driveBackwardForTime>
     19a:	1d c0       	rjmp	.+58     	; 0x1d6 <driveForwardForTime+0x66>
	} 
	else
	{
		int16_t arg1[3];
		int16_t arg2[]= {0, 0};
     19c:	18 86       	std	Y+8, r1	; 0x08
     19e:	1f 82       	std	Y+7, r1	; 0x07
     1a0:	1a 86       	std	Y+10, r1	; 0x0a
     1a2:	19 86       	std	Y+9, r1	; 0x09
		
		// ATENTIE NU CRED CA MAI TREBUIE!!!!!!!!!!!///
		arg1[0] = pwm;
     1a4:	90 e0       	ldi	r25, 0x00	; 0
		arg1[0] |= pwm << 8;
     1a6:	38 2f       	mov	r19, r24
     1a8:	22 27       	eor	r18, r18
     1aa:	82 2b       	or	r24, r18
     1ac:	93 2b       	or	r25, r19
     1ae:	9a 83       	std	Y+2, r25	; 0x02
     1b0:	89 83       	std	Y+1, r24	; 0x01
		arg1[1] = pwm;
		arg1[1] |= pwm << 8;
     1b2:	9c 83       	std	Y+4, r25	; 0x04
     1b4:	8b 83       	std	Y+3, r24	; 0x03
		// ATENTIE NU CRED CA MAI TREBUIE!!!!!!!!!!!///

		executeCommandForTime(&move, &move, 2, arg1,2, arg2, time);
     1b6:	6b 01       	movw	r12, r22
     1b8:	ce 01       	movw	r24, r28
     1ba:	07 96       	adiw	r24, 0x07	; 7
     1bc:	7c 01       	movw	r14, r24
     1be:	02 e0       	ldi	r16, 0x02	; 2
     1c0:	10 e0       	ldi	r17, 0x00	; 0
     1c2:	9e 01       	movw	r18, r28
     1c4:	2f 5f       	subi	r18, 0xFF	; 255
     1c6:	3f 4f       	sbci	r19, 0xFF	; 255
     1c8:	42 e0       	ldi	r20, 0x02	; 2
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	71 e0       	ldi	r23, 0x01	; 1
     1d0:	cb 01       	movw	r24, r22
     1d2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <executeCommandForTime>
	}	
	
}
     1d6:	2a 96       	adiw	r28, 0x0a	; 10
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	cd bf       	out	0x3d, r28	; 61
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	1f 91       	pop	r17
     1e8:	0f 91       	pop	r16
     1ea:	ff 90       	pop	r15
     1ec:	ef 90       	pop	r14
     1ee:	df 90       	pop	r13
     1f0:	cf 90       	pop	r12
     1f2:	08 95       	ret

000001f4 <changeMotorDirectionLeft>:
	changeMotorDirectionRight();
}


void changeMotorDirectionLeft(){
	MOTOR_LEFT_DIR_PIN1 |= (1<<MOTOR_LEFT_DIR_PIN1x);
     1f4:	30 9a       	sbi	0x06, 0	; 6
	MOTOR_LEFT_DIR_PIN2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     1f6:	31 9a       	sbi	0x06, 1	; 6
     1f8:	08 95       	ret

000001fa <changeMotorDirectionRight>:
}
	

	  
void changeMotorDirectionRight(){
	MOTOR_RIGHT_DIR_PIN1 |= (1<<MOTOR_RIGHT_DIR_PIN1x);	
     1fa:	36 9a       	sbi	0x06, 6	; 6
	MOTOR_RIGHT_DIR_PIN2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     1fc:	37 9a       	sbi	0x06, 7	; 6
     1fe:	08 95       	ret

00000200 <move>:
	}
	
}
*/

void move(uint16_t argc, int16_t* argv){
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	28 97       	sbiw	r28, 0x08	; 8
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	8b 01       	movw	r16, r22
	
	if(argc == 2){
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	91 05       	cpc	r25, r1
     226:	09 f0       	breq	.+2      	; 0x22a <move+0x2a>
     228:	47 c0       	rjmp	.+142    	; 0x2b8 <move+0xb8>
		//setez directia initiala
		MOTOR_LEFT_DIR_PORT2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     22a:	41 9a       	sbi	0x08, 1	; 8
		MOTOR_LEFT_DIR_PORT1 &= ~(1<<MOTOR_LEFT_DIR_PIN1x);
     22c:	40 98       	cbi	0x08, 0	; 8
		
		MOTOR_RIGHT_DIR_PORT2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     22e:	47 9a       	sbi	0x08, 7	; 8
		MOTOR_RIGHT_DIR_PORT1 &= ~(1<<MOTOR_RIGHT_DIR_PIN1x);
     230:	46 98       	cbi	0x08, 6	; 8
		
		int8_t d;
		
		d = argv[0];
     232:	fb 01       	movw	r30, r22
     234:	80 81       	ld	r24, Z
     236:	d8 2e       	mov	r13, r24
		
		if (d < 0){
     238:	88 23       	and	r24, r24
     23a:	1c f4       	brge	.+6      	; 0x242 <move+0x42>
			d=-d;
     23c:	d1 94       	neg	r13
			changeMotorDirectionLeft();			
     23e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <changeMotorDirectionLeft>

volatile uint16_t TIME_TO_TURN_MS = 830; // 900 pe parchet , 1400 pe mocheta Conti
volatile uint16_t TURN_SPEED = 80;

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     242:	6d 2d       	mov	r22, r13
     244:	77 27       	eor	r23, r23
     246:	67 fd       	sbrc	r22, 7
     248:	70 95       	com	r23
     24a:	87 2f       	mov	r24, r23
     24c:	97 2f       	mov	r25, r23
     24e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	48 ec       	ldi	r20, 0xC8	; 200
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__divsf3>
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	4f e7       	ldi	r20, 0x7F	; 127
     264:	53 e4       	ldi	r21, 0x43	; 67
     266:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     26a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
     26e:	67 bd       	out	0x27, r22	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     270:	68 bd       	out	0x28, r22	; 40
			changeMotorDirectionLeft();			
		}
		changePwm_MotorLF(d);
		changePwm_MotorLB(d);
		
		d = argv[1] ;
     272:	f8 01       	movw	r30, r16
     274:	82 81       	ldd	r24, Z+2	; 0x02
     276:	18 2f       	mov	r17, r24
		if (d < 0){
     278:	88 23       	and	r24, r24
     27a:	1c f4       	brge	.+6      	; 0x282 <move+0x82>
			d=-d;
     27c:	11 95       	neg	r17
			changeMotorDirectionRight();
     27e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <changeMotorDirectionRight>
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     282:	61 2f       	mov	r22, r17
     284:	77 27       	eor	r23, r23
     286:	67 fd       	sbrc	r22, 7
     288:	70 95       	com	r23
     28a:	87 2f       	mov	r24, r23
     28c:	97 2f       	mov	r25, r23
     28e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	48 ec       	ldi	r20, 0xC8	; 200
     298:	52 e4       	ldi	r21, 0x42	; 66
     29a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__divsf3>
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	4f e7       	ldi	r20, 0x7F	; 127
     2a4:	53 e4       	ldi	r21, 0x43	; 67
     2a6:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     2aa:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
     2ae:	60 93 b3 00 	sts	0x00B3, r22
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     2b2:	60 93 b4 00 	sts	0x00B4, r22
     2b6:	20 c0       	rjmp	.+64     	; 0x2f8 <move+0xf8>
			changeMotorDirectionRight();
		}
		changePwm_MotorRF(d);
		changePwm_MotorRB(d);
		
		}else if (argc == 3){
     2b8:	03 97       	sbiw	r24, 0x03	; 3
     2ba:	f1 f4       	brne	.+60     	; 0x2f8 <move+0xf8>
		
		int16_t arg1[2];
		arg1[0] = argv[0];
     2bc:	fb 01       	movw	r30, r22
     2be:	80 81       	ld	r24, Z
     2c0:	91 81       	ldd	r25, Z+1	; 0x01
     2c2:	9e 83       	std	Y+6, r25	; 0x06
     2c4:	8d 83       	std	Y+5, r24	; 0x05
		arg1[1] = argv[1];
     2c6:	82 81       	ldd	r24, Z+2	; 0x02
     2c8:	93 81       	ldd	r25, Z+3	; 0x03
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	8f 83       	std	Y+7, r24	; 0x07
		
		int16_t arg2[] = {0, 0};
     2ce:	1a 82       	std	Y+2, r1	; 0x02
     2d0:	19 82       	std	Y+1, r1	; 0x01
     2d2:	1c 82       	std	Y+4, r1	; 0x04
     2d4:	1b 82       	std	Y+3, r1	; 0x03
		executeCommandForTime(&move, &move, 2, arg1,2, arg2,argv[2]);
     2d6:	c4 80       	ldd	r12, Z+4	; 0x04
     2d8:	d5 80       	ldd	r13, Z+5	; 0x05
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	7c 01       	movw	r14, r24
     2e0:	02 e0       	ldi	r16, 0x02	; 2
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	9e 01       	movw	r18, r28
     2e6:	2b 5f       	subi	r18, 0xFB	; 251
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	42 e0       	ldi	r20, 0x02	; 2
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	71 e0       	ldi	r23, 0x01	; 1
     2f2:	cb 01       	movw	r24, r22
     2f4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <executeCommandForTime>
		
	}
	
}
     2f8:	28 96       	adiw	r28, 0x08	; 8
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	08 95       	ret

00000316 <breakAll>:

volatile uint16_t TIME_TO_TURN_MS = 830; // 900 pe parchet , 1400 pe mocheta Conti
volatile uint16_t TURN_SPEED = 80;

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     316:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     318:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     31a:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     31e:	10 92 b4 00 	sts	0x00B4, r1
     322:	08 95       	ret

00000324 <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LEFT_DIR_DDR1 |= (1<<MOTOR_LEFT_DIR_PIN1x);
     324:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_LEFT_DIR_DDR2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     326:	39 9a       	sbi	0x07, 1	; 7

	//setez directia initiala
	MOTOR_LEFT_DIR_PORT2 |= (1<<MOTOR_LEFT_DIR_PIN2x);
     328:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_LEFT_DIR_PORT1 &= ~(1<<MOTOR_LEFT_DIR_PIN1x);
     32a:	40 98       	cbi	0x08, 0	; 8

	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     32c:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     32e:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     330:	84 b5       	in	r24, 0x24	; 36
     332:	80 68       	ori	r24, 0x80	; 128
     334:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     336:	84 b5       	in	r24, 0x24	; 36
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     33c:	84 b5       	in	r24, 0x24	; 36
     33e:	80 62       	ori	r24, 0x20	; 32
     340:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     342:	84 b5       	in	r24, 0x24	; 36
     344:	8f 7e       	andi	r24, 0xEF	; 239
     346:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     348:	84 b5       	in	r24, 0x24	; 36
     34a:	83 60       	ori	r24, 0x03	; 3
     34c:	84 bd       	out	0x24, r24	; 36

volatile uint16_t TIME_TO_TURN_MS = 830; // 900 pe parchet , 1400 pe mocheta Conti
volatile uint16_t TURN_SPEED = 80;

void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     34e:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     350:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
     352:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	85 bd       	out	0x25, r24	; 37
     358:	08 95       	ret

0000035a <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RIGHT_DIR_DDR1 |= (1<<MOTOR_RIGHT_DIR_PIN1x);
     35a:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RIGHT_DIR_DDR2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     35c:	3f 9a       	sbi	0x07, 7	; 7
	
	//setez directia initiala
	MOTOR_RIGHT_DIR_PORT2 |= (1<<MOTOR_RIGHT_DIR_PIN2x);
     35e:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RIGHT_DIR_PORT1 &= ~(1<<MOTOR_RIGHT_DIR_PIN1x);
     360:	46 98       	cbi	0x08, 6	; 8

	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     362:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     364:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     366:	e0 eb       	ldi	r30, 0xB0	; 176
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     370:	80 81       	ld	r24, Z
     372:	8f 7b       	andi	r24, 0xBF	; 191
     374:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     376:	80 81       	ld	r24, Z
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     37c:	80 81       	ld	r24, Z
     37e:	8f 7e       	andi	r24, 0xEF	; 239
     380:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     382:	80 81       	ld	r24, Z
     384:	83 60       	ori	r24, 0x03	; 3
     386:	80 83       	st	Z, r24
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     388:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     38c:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
     390:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     394:	e1 eb       	ldi	r30, 0xB1	; 177
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	8c 7f       	andi	r24, 0xFC	; 252
     39c:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     39e:	80 81       	ld	r24, Z
     3a0:	84 60       	ori	r24, 0x04	; 4
     3a2:	80 83       	st	Z, r24
     3a4:	08 95       	ret

000003a6 <getInfraredForwardDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES; j++)
	{
		avreage += InfraredValues[j];
     3a6:	20 91 3d 01 	lds	r18, 0x013D
     3aa:	80 91 3e 01 	lds	r24, 0x013E
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	82 0f       	add	r24, r18
     3b6:	91 1d       	adc	r25, r1
     3b8:	a1 1d       	adc	r26, r1
     3ba:	b1 1d       	adc	r27, r1
     3bc:	20 91 3f 01 	lds	r18, 0x013F
     3c0:	82 0f       	add	r24, r18
     3c2:	91 1d       	adc	r25, r1
     3c4:	a1 1d       	adc	r26, r1
     3c6:	b1 1d       	adc	r27, r1
     3c8:	20 91 40 01 	lds	r18, 0x0140
     3cc:	82 0f       	add	r24, r18
     3ce:	91 1d       	adc	r25, r1
     3d0:	a1 1d       	adc	r26, r1
     3d2:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     3d4:	b6 95       	lsr	r27
     3d6:	a7 95       	ror	r26
     3d8:	97 95       	ror	r25
     3da:	87 95       	ror	r24
     3dc:	b6 95       	lsr	r27
     3de:	a7 95       	ror	r26
     3e0:	97 95       	ror	r25
     3e2:	87 95       	ror	r24
}
     3e4:	08 95       	ret

000003e6 <getInfraredRightDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+NO_OF_IR_SENSORS];
     3e6:	20 91 41 01 	lds	r18, 0x0141
     3ea:	80 91 42 01 	lds	r24, 0x0142
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	a0 e0       	ldi	r26, 0x00	; 0
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	82 0f       	add	r24, r18
     3f6:	91 1d       	adc	r25, r1
     3f8:	a1 1d       	adc	r26, r1
     3fa:	b1 1d       	adc	r27, r1
     3fc:	20 91 43 01 	lds	r18, 0x0143
     400:	82 0f       	add	r24, r18
     402:	91 1d       	adc	r25, r1
     404:	a1 1d       	adc	r26, r1
     406:	b1 1d       	adc	r27, r1
     408:	20 91 44 01 	lds	r18, 0x0144
     40c:	82 0f       	add	r24, r18
     40e:	91 1d       	adc	r25, r1
     410:	a1 1d       	adc	r26, r1
     412:	b1 1d       	adc	r27, r1
	}

	return avreage/MAX_INFRARED_VALUES;
     414:	b6 95       	lsr	r27
     416:	a7 95       	ror	r26
     418:	97 95       	ror	r25
     41a:	87 95       	ror	r24
     41c:	b6 95       	lsr	r27
     41e:	a7 95       	ror	r26
     420:	97 95       	ror	r25
     422:	87 95       	ror	r24
}
     424:	08 95       	ret

00000426 <getInfraredBackDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+(2*NO_OF_IR_SENSORS)];
     426:	20 91 45 01 	lds	r18, 0x0145
     42a:	80 91 46 01 	lds	r24, 0x0146
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	a0 e0       	ldi	r26, 0x00	; 0
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	82 0f       	add	r24, r18
     436:	91 1d       	adc	r25, r1
     438:	a1 1d       	adc	r26, r1
     43a:	b1 1d       	adc	r27, r1
     43c:	20 91 47 01 	lds	r18, 0x0147
     440:	82 0f       	add	r24, r18
     442:	91 1d       	adc	r25, r1
     444:	a1 1d       	adc	r26, r1
     446:	b1 1d       	adc	r27, r1
     448:	20 91 48 01 	lds	r18, 0x0148
     44c:	82 0f       	add	r24, r18
     44e:	91 1d       	adc	r25, r1
     450:	a1 1d       	adc	r26, r1
     452:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     454:	b6 95       	lsr	r27
     456:	a7 95       	ror	r26
     458:	97 95       	ror	r25
     45a:	87 95       	ror	r24
     45c:	b6 95       	lsr	r27
     45e:	a7 95       	ror	r26
     460:	97 95       	ror	r25
     462:	87 95       	ror	r24
}
     464:	08 95       	ret

00000466 <getInfraredLeftDistance>:
	uint32_t avreage = 0;
	
	int j;
	for (j=0;j<MAX_INFRARED_VALUES;j++)
	{
		avreage += InfraredValues[j+(3*NO_OF_IR_SENSORS)];
     466:	20 91 49 01 	lds	r18, 0x0149
     46a:	80 91 4a 01 	lds	r24, 0x014A
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	a0 e0       	ldi	r26, 0x00	; 0
     472:	b0 e0       	ldi	r27, 0x00	; 0
     474:	82 0f       	add	r24, r18
     476:	91 1d       	adc	r25, r1
     478:	a1 1d       	adc	r26, r1
     47a:	b1 1d       	adc	r27, r1
     47c:	20 91 4b 01 	lds	r18, 0x014B
     480:	82 0f       	add	r24, r18
     482:	91 1d       	adc	r25, r1
     484:	a1 1d       	adc	r26, r1
     486:	b1 1d       	adc	r27, r1
     488:	20 91 4c 01 	lds	r18, 0x014C
     48c:	82 0f       	add	r24, r18
     48e:	91 1d       	adc	r25, r1
     490:	a1 1d       	adc	r26, r1
     492:	b1 1d       	adc	r27, r1
	}
	
	return avreage/MAX_INFRARED_VALUES;
     494:	b6 95       	lsr	r27
     496:	a7 95       	ror	r26
     498:	97 95       	ror	r25
     49a:	87 95       	ror	r24
     49c:	b6 95       	lsr	r27
     49e:	a7 95       	ror	r26
     4a0:	97 95       	ror	r25
     4a2:	87 95       	ror	r24
}
     4a4:	08 95       	ret

000004a6 <getAverageUltrasonicValue>:

uint16_t getLastUltrasonicValue(){
	return UltraSonicValues[US_pos_in_buffer-1];//because it is always the next position
}

uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
     4a6:	cf 93       	push	r28
     4a8:	38 2f       	mov	r19, r24
     4aa:	81 31       	cpi	r24, 0x11	; 17
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <getAverageUltrasonicValue+0xa>
     4ae:	30 e1       	ldi	r19, 0x10	; 16
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     4b0:	33 23       	and	r19, r19
     4b2:	a9 f1       	breq	.+106    	; 0x51e <getAverageUltrasonicValue+0x78>
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	50 e0       	ldi	r21, 0x00	; 0
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     4b8:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	cb 01       	movw	r24, r22
     4c0:	a0 e1       	ldi	r26, 0x10	; 16
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
	{
		uint16_t aux;
		if(US_pos_in_buffer-i >= 0){ 
     4c4:	e0 91 05 01 	lds	r30, 0x0105
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	e4 1b       	sub	r30, r20
     4cc:	f5 0b       	sbc	r31, r21
     4ce:	6a f0       	brmi	.+26     	; 0x4ea <getAverageUltrasonicValue+0x44>
			aux = UltraSonicValues[US_pos_in_buffer-i];
     4d0:	e0 91 05 01 	lds	r30, 0x0105
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	e4 1b       	sub	r30, r20
     4d8:	f5 0b       	sbc	r31, r21
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	e3 5e       	subi	r30, 0xE3	; 227
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	01 90       	ld	r0, Z+
     4e4:	f0 81       	ld	r31, Z
     4e6:	e0 2d       	mov	r30, r0
     4e8:	0e c0       	rjmp	.+28     	; 0x506 <getAverageUltrasonicValue+0x60>
		}else{// rap around
			aux = UltraSonicValues[MAX_ULTRASONIC_VALUES - i + US_pos_in_buffer];
     4ea:	c0 91 05 01 	lds	r28, 0x0105
     4ee:	fd 01       	movw	r30, r26
     4f0:	e4 1b       	sub	r30, r20
     4f2:	f5 0b       	sbc	r31, r21
     4f4:	ec 0f       	add	r30, r28
     4f6:	f1 1d       	adc	r31, r1
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e3 5e       	subi	r30, 0xE3	; 227
     4fe:	fe 4f       	sbci	r31, 0xFE	; 254
     500:	01 90       	ld	r0, Z+
     502:	f0 81       	ld	r31, Z
     504:	e0 2d       	mov	r30, r0
		}
		
		averrage += aux;
     506:	6e 0f       	add	r22, r30
     508:	7f 1f       	adc	r23, r31
     50a:	81 1d       	adc	r24, r1
     50c:	91 1d       	adc	r25, r1
		
		if(aux){ // only if the value is nonzero
     50e:	ef 2b       	or	r30, r31
     510:	09 f0       	breq	.+2      	; 0x514 <getAverageUltrasonicValue+0x6e>
			good_vals++;
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	4f 5f       	subi	r20, 0xFF	; 255
     516:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
	
	for (uint8_t i=0; i<no_of_values; i++) // iterate from right to left
     518:	43 17       	cp	r20, r19
     51a:	a0 f2       	brcs	.-88     	; 0x4c4 <getAverageUltrasonicValue+0x1e>
     51c:	04 c0       	rjmp	.+8      	; 0x526 <getAverageUltrasonicValue+0x80>
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
	uint8_t good_vals=0;
     51e:	20 e0       	ldi	r18, 0x00	; 0
uint16_t getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	uint32_t averrage = 0; //it can overflow if it is 16 bit
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	cb 01       	movw	r24, r22
			good_vals++;
		}
		
	}
	
	averrage /= good_vals; //it may be better to round it up to the nearest
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__udivmodsi4>
	
	return averrage;
}
     530:	c9 01       	movw	r24, r18
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	9c 01       	movw	r18, r24
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0;
     540:	fa 01       	movw	r30, r20
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	e3 5e       	subi	r30, 0xE3	; 227
     548:	fe 4f       	sbci	r31, 0xFE	; 254
     54a:	11 82       	std	Z+1, r1	; 0x01
     54c:	10 82       	st	Z, r1
     54e:	4f 5f       	subi	r20, 0xFF	; 255
     550:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     552:	40 31       	cpi	r20, 0x10	; 16
     554:	51 05       	cpc	r21, r1
     556:	a1 f7       	brne	.-24     	; 0x540 <initUSART0+0xa>
		UltraSonicValues[i] = 0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     558:	10 92 4d 01 	sts	0x014D, r1
     55c:	10 92 4e 01 	sts	0x014E, r1
     560:	10 92 4f 01 	sts	0x014F, r1
     564:	10 92 50 01 	sts	0x0150, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     568:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     56a:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     56c:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     56e:	c2 ec       	ldi	r28, 0xC2	; 194
     570:	d0 e0       	ldi	r29, 0x00	; 0
     572:	88 81       	ld	r24, Y
     574:	8f 73       	andi	r24, 0x3F	; 63
     576:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     578:	e0 ec       	ldi	r30, 0xC0	; 192
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	8d 7f       	andi	r24, 0xFD	; 253
     580:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     582:	c9 01       	movw	r24, r18
     584:	aa 27       	eor	r26, r26
     586:	97 fd       	sbrc	r25, 7
     588:	a0 95       	com	r26
     58a:	ba 2f       	mov	r27, r26
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	aa 1f       	adc	r26, r26
     592:	bb 1f       	adc	r27, r27
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	aa 1f       	adc	r26, r26
     59a:	bb 1f       	adc	r27, r27
     59c:	9c 01       	movw	r18, r24
     59e:	ad 01       	movw	r20, r26
     5a0:	22 0f       	add	r18, r18
     5a2:	33 1f       	adc	r19, r19
     5a4:	44 1f       	adc	r20, r20
     5a6:	55 1f       	adc	r21, r21
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	44 1f       	adc	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	72 e1       	ldi	r23, 0x12	; 18
     5b4:	8a e7       	ldi	r24, 0x7A	; 122
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__divmodsi4>
     5bc:	ca 01       	movw	r24, r20
     5be:	b9 01       	movw	r22, r18
     5c0:	61 50       	subi	r22, 0x01	; 1
     5c2:	71 09       	sbc	r23, r1
     5c4:	81 09       	sbc	r24, r1
     5c6:	91 09       	sbc	r25, r1
     5c8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     5cc:	0e 94 46 0c 	call	0x188c	; 0x188c <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     5d0:	27 2f       	mov	r18, r23
     5d2:	33 27       	eor	r19, r19
     5d4:	27 fd       	sbrc	r18, 7
     5d6:	3a 95       	dec	r19
     5d8:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     5dc:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     5e0:	e1 ec       	ldi	r30, 0xC1	; 193
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 e1       	ldi	r24, 0x10	; 16
     5e6:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     5e8:	88 81       	ld	r24, Y
     5ea:	86 60       	ori	r24, 0x06	; 6
     5ec:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     5ee:	80 81       	ld	r24, Z
     5f0:	8b 7f       	andi	r24, 0xFB	; 251
     5f2:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     5f4:	88 81       	ld	r24, Y
     5f6:	87 7f       	andi	r24, 0xF7	; 247
     5f8:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     5fa:	88 81       	ld	r24, Y
     5fc:	8f 7c       	andi	r24, 0xCF	; 207
     5fe:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     600:	80 81       	ld	r24, Z
     602:	80 68       	ori	r24, 0x80	; 128
     604:	80 83       	st	Z, r24
	
		
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <initADC>:

void  initADC(void)
{

	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC4D) | (1<<ADC5D) | (1<<ADC6D) | (1<<ADC7D) ;
     60c:	ee e7       	ldi	r30, 0x7E	; 126
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	80 6f       	ori	r24, 0xF0	; 240
     614:	80 83       	st	Z, r24

	//set Vref to Vcc, va trebui sa fie referinta externa !!
	ADMUX |= (1<<REFS0);
     616:	ec e7       	ldi	r30, 0x7C	; 124
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	80 64       	ori	r24, 0x40	; 64
     61e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     620:	80 81       	ld	r24, Z
     622:	8f 77       	andi	r24, 0x7F	; 127
     624:	80 83       	st	Z, r24
	
	//select ADC4
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     626:	80 81       	ld	r24, Z
     628:	80 7e       	andi	r24, 0xE0	; 224
     62a:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX2);
     62c:	80 81       	ld	r24, Z
     62e:	84 60       	ori	r24, 0x04	; 4
     630:	80 83       	st	Z, r24
	
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     632:	ea e7       	ldi	r30, 0x7A	; 122
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	88 60       	ori	r24, 0x08	; 8
     63a:	80 83       	st	Z, r24
	
	
	//enable the ADC
	ADCSRA |= (1<<ADEN);
     63c:	80 81       	ld	r24, Z
     63e:	80 68       	ori	r24, 0x80	; 128
     640:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     642:	80 81       	ld	r24, Z
     644:	87 60       	ori	r24, 0x07	; 7
     646:	80 83       	st	Z, r24
	//select free running mode
	//ADCSRB &= ~( (1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2) );


	//start conversion
	ADCSRA |= (1<<ADSC);
     648:	80 81       	ld	r24, Z
     64a:	80 64       	ori	r24, 0x40	; 64
     64c:	80 83       	st	Z, r24
     64e:	08 95       	ret

00000650 <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     650:	0c 98       	cbi	0x01, 4	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     652:	0d 98       	cbi	0x01, 5	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     654:	0e 98       	cbi	0x01, 6	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     656:	0f 98       	cbi	0x01, 7	; 1
	
	initADC();
     658:	0e 94 06 03 	call	0x60c	; 0x60c <initADC>
	initUSART0(9600);
     65c:	80 e8       	ldi	r24, 0x80	; 128
     65e:	95 e2       	ldi	r25, 0x25	; 37
     660:	0e 94 9b 02 	call	0x536	; 0x536 <initUSART0>
     664:	08 95       	ret

00000666 <__vector_24>:
	//start conversion
	ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     666:	1f 92       	push	r1
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	ef 93       	push	r30
     68a:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     68c:	60 91 78 00 	lds	r22, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     690:	80 91 79 00 	lds	r24, 0x0079
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	78 2b       	or	r23, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     698:	60 31       	cpi	r22, 0x10	; 16
     69a:	71 05       	cpc	r23, r1
     69c:	10 f4       	brcc	.+4      	; 0x6a2 <__vector_24+0x3c>
     69e:	60 e1       	ldi	r22, 0x10	; 16
     6a0:	70 e0       	ldi	r23, 0x00	; 0
		distance = 30.0;
	}
	*/
		
		//dont forget to set IR_pos_in_buffer = 0 when changing the active sensor
		int pos_in_buff = (activeInfraredSensor * NO_OF_IR_SENSORS) + IR_pos_in_buffer; //(IR_pos_in_buffer&MAX_INFRARED_VALUES_MSK) 
     6a2:	80 91 0a 01 	lds	r24, 0x010A
     6a6:	c0 91 09 01 	lds	r28, 0x0109
     6aa:	d0 e0       	ldi	r29, 0x00	; 0
     6ac:	94 e0       	ldi	r25, 0x04	; 4
     6ae:	89 9f       	mul	r24, r25
     6b0:	c0 0d       	add	r28, r0
     6b2:	d1 1d       	adc	r29, r1
     6b4:	11 24       	eor	r1, r1
		InfraredValues[pos_in_buff] = floor((2076.0 / (theTenBitResult - 11.0)) + 0.5);
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e3       	ldi	r20, 0x30	; 48
     6c4:	51 e4       	ldi	r21, 0x41	; 65
     6c6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__subsf3>
     6ca:	9b 01       	movw	r18, r22
     6cc:	ac 01       	movw	r20, r24
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 ec       	ldi	r23, 0xC0	; 192
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	95 e4       	ldi	r25, 0x45	; 69
     6d6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__divsf3>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	5f e3       	ldi	r21, 0x3F	; 63
     6e2:	0e 94 6d 0a 	call	0x14da	; 0x14da <__addsf3>
     6e6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <floor>
     6ea:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
     6ee:	fe 01       	movw	r30, r28
     6f0:	e3 5c       	subi	r30, 0xC3	; 195
     6f2:	fe 4f       	sbci	r31, 0xFE	; 254
     6f4:	60 83       	st	Z, r22
		
		//under lower limit
		if (InfraredValues[pos_in_buff] < 4)
     6f6:	80 81       	ld	r24, Z
     6f8:	84 30       	cpi	r24, 0x04	; 4
     6fa:	28 f4       	brcc	.+10     	; 0x706 <__vector_24+0xa0>
		{
			InfraredValues[pos_in_buff] = 4;
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	fe 01       	movw	r30, r28
     700:	e3 5c       	subi	r30, 0xC3	; 195
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	80 83       	st	Z, r24
		}
		
		//above upper limit
		if (InfraredValues[pos_in_buff] > 30)
     706:	fe 01       	movw	r30, r28
     708:	e3 5c       	subi	r30, 0xC3	; 195
     70a:	fe 4f       	sbci	r31, 0xFE	; 254
     70c:	80 81       	ld	r24, Z
     70e:	8f 31       	cpi	r24, 0x1F	; 31
     710:	10 f0       	brcs	.+4      	; 0x716 <__vector_24+0xb0>
		{
			
			InfraredValues[pos_in_buff] = 30;
     712:	8e e1       	ldi	r24, 0x1E	; 30
     714:	80 83       	st	Z, r24
		}
	
	
	IR_pos_in_buffer++;
     716:	80 91 09 01 	lds	r24, 0x0109
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	80 93 09 01 	sts	0x0109, r24
	
	if (IR_pos_in_buffer == MAX_INFRARED_VALUES)
     720:	80 91 09 01 	lds	r24, 0x0109
     724:	84 30       	cpi	r24, 0x04	; 4
     726:	39 f4       	brne	.+14     	; 0x736 <__vector_24+0xd0>
	{
		IR_pos_in_buffer = 0;
     728:	10 92 09 01 	sts	0x0109, r1
		activeInfraredSensor++;
     72c:	80 91 0a 01 	lds	r24, 0x010A
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	80 93 0a 01 	sts	0x010A, r24
	}
	
	if (activeInfraredSensor == NO_OF_IR_SENSORS)
     736:	80 91 0a 01 	lds	r24, 0x010A
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	11 f4       	brne	.+4      	; 0x742 <__vector_24+0xdc>
	{
		activeInfraredSensor = 0;
     73e:	10 92 0a 01 	sts	0x010A, r1
	}
	
	//if the sensors are connected starting with pin 4, then add 4 as a offset
	
	//clear the MUX bits first
	ADMUX &= 0xF0;
     742:	ec e7       	ldi	r30, 0x7C	; 124
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	80 7f       	andi	r24, 0xF0	; 240
     74a:	80 83       	st	Z, r24
	
	
	//select the sensor
	ADMUX |= activeInfraredSensor + 4; //+offset
     74c:	90 81       	ld	r25, Z
     74e:	80 91 0a 01 	lds	r24, 0x010A
     752:	8c 5f       	subi	r24, 0xFC	; 252
     754:	89 2b       	or	r24, r25
     756:	80 83       	st	Z, r24
	
	//start a new conversion
	ADCSRA |= 1<<ADSC;
     758:	ea e7       	ldi	r30, 0x7A	; 122
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 81       	ld	r24, Z
     75e:	80 64       	ori	r24, 0x40	; 64
     760:	80 83       	st	Z, r24
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <__vector_20>:

ISR(USART0_RX_vect){
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	4f 92       	push	r4
     794:	5f 92       	push	r5
     796:	7f 92       	push	r7
     798:	8f 92       	push	r8
     79a:	9f 92       	push	r9
     79c:	af 92       	push	r10
     79e:	bf 92       	push	r11
     7a0:	cf 92       	push	r12
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	1f 93       	push	r17
     7a8:	2f 93       	push	r18
     7aa:	3f 93       	push	r19
     7ac:	4f 93       	push	r20
     7ae:	5f 93       	push	r21
     7b0:	6f 93       	push	r22
     7b2:	7f 93       	push	r23
     7b4:	8f 93       	push	r24
     7b6:	9f 93       	push	r25
     7b8:	af 93       	push	r26
     7ba:	bf 93       	push	r27
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ef 93       	push	r30
     7c2:	ff 93       	push	r31


	uint8_t data;
	data = UDR0;
     7c4:	10 91 c6 00 	lds	r17, 0x00C6
	
	if(data == 0x52){ //start of data
     7c8:	12 35       	cpi	r17, 0x52	; 82
     7ca:	39 f4       	brne	.+14     	; 0x7da <__vector_20+0x52>
		ultrasonicDataPack[0] = 'R';
     7cc:	82 e5       	ldi	r24, 0x52	; 82
     7ce:	80 93 4d 01 	sts	0x014D, r24
		US_data_part_no=1;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	80 93 06 01 	sts	0x0106, r24
     7d8:	a5 c0       	rjmp	.+330    	; 0x924 <__stack+0x25>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     7da:	80 91 4d 01 	lds	r24, 0x014D
     7de:	82 35       	cpi	r24, 0x52	; 82
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <__vector_20+0x5c>
     7e2:	7c c0       	rjmp	.+248    	; 0x8dc <__vector_20+0x154>
     7e4:	80 91 06 01 	lds	r24, 0x0106
     7e8:	84 30       	cpi	r24, 0x04	; 4
     7ea:	09 f0       	breq	.+2      	; 0x7ee <__vector_20+0x66>
     7ec:	77 c0       	rjmp	.+238    	; 0x8dc <__vector_20+0x154>
     7ee:	1d 30       	cpi	r17, 0x0D	; 13
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <__vector_20+0x6c>
     7f2:	74 c0       	rjmp	.+232    	; 0x8dc <__vector_20+0x154>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     7f4:	0f 2e       	mov	r0, r31
     7f6:	fe e4       	ldi	r31, 0x4E	; 78
     7f8:	ef 2e       	mov	r14, r31
     7fa:	f1 e0       	ldi	r31, 0x01	; 1
     7fc:	ff 2e       	mov	r15, r31
     7fe:	f0 2d       	mov	r31, r0
     800:	f7 01       	movw	r30, r14
     802:	60 81       	ld	r22, Z
     804:	0f 2e       	mov	r0, r31
     806:	ff e4       	ldi	r31, 0x4F	; 79
     808:	4f 2e       	mov	r4, r31
     80a:	f1 e0       	ldi	r31, 0x01	; 1
     80c:	5f 2e       	mov	r5, r31
     80e:	f0 2d       	mov	r31, r0
     810:	f2 01       	movw	r30, r4
     812:	70 80       	ld	r7, Z
     814:	c0 e5       	ldi	r28, 0x50	; 80
     816:	d1 e0       	ldi	r29, 0x01	; 1
     818:	c8 80       	ld	r12, Y
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	48 ec       	ldi	r20, 0xC8	; 200
     82a:	52 e4       	ldi	r21, 0x42	; 66
     82c:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     830:	4b 01       	movw	r8, r22
     832:	5c 01       	movw	r10, r24
     834:	67 2d       	mov	r22, r7
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	40 e2       	ldi	r20, 0x20	; 32
     846:	51 e4       	ldi	r21, 0x41	; 65
     848:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     84c:	9b 01       	movw	r18, r22
     84e:	ac 01       	movw	r20, r24
     850:	c5 01       	movw	r24, r10
     852:	b4 01       	movw	r22, r8
     854:	0e 94 6d 0a 	call	0x14da	; 0x14da <__addsf3>
     858:	4b 01       	movw	r8, r22
     85a:	5c 01       	movw	r10, r24
     85c:	6c 2d       	mov	r22, r12
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     868:	9b 01       	movw	r18, r22
     86a:	ac 01       	movw	r20, r24
     86c:	c5 01       	movw	r24, r10
     86e:	b4 01       	movw	r22, r8
     870:	0e 94 6d 0a 	call	0x14da	; 0x14da <__addsf3>
			//transform from inch to mm
			val *= 25.4;
     874:	23 e3       	ldi	r18, 0x33	; 51
     876:	33 e3       	ldi	r19, 0x33	; 51
     878:	4b ec       	ldi	r20, 0xCB	; 203
     87a:	51 e4       	ldi	r21, 0x41	; 65
     87c:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
			uint16_t mm = floor(val+0.5); // round to the nearest
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	5f e3       	ldi	r21, 0x3F	; 63
     888:	0e 94 6d 0a 	call	0x14da	; 0x14da <__addsf3>
     88c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <floor>
     890:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
			UltraSonicValues[US_pos_in_buffer] = mm; 
     894:	e0 91 05 01 	lds	r30, 0x0105
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	e3 5e       	subi	r30, 0xE3	; 227
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	71 83       	std	Z+1, r23	; 0x01
     8a4:	60 83       	st	Z, r22
			lastUSonicValue = mm;
     8a6:	70 93 08 01 	sts	0x0108, r23
     8aa:	60 93 07 01 	sts	0x0107, r22
			US_pos_in_buffer++;
     8ae:	80 91 05 01 	lds	r24, 0x0105
     8b2:	8f 5f       	subi	r24, 0xFF	; 255
     8b4:	80 93 05 01 	sts	0x0105, r24

			US_pos_in_buffer &= MAX_ULTRASONIC_VALUES_MSK;
     8b8:	80 91 05 01 	lds	r24, 0x0105
     8bc:	8f 70       	andi	r24, 0x0F	; 15
     8be:	80 93 05 01 	sts	0x0105, r24
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     8c2:	10 92 4d 01 	sts	0x014D, r1
     8c6:	f7 01       	movw	r30, r14
     8c8:	10 82       	st	Z, r1
     8ca:	f2 01       	movw	r30, r4
     8cc:	10 82       	st	Z, r1
     8ce:	18 82       	st	Y, r1
				}
				US_data_part_no=0;
     8d0:	10 92 06 01 	sts	0x0106, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     8d4:	80 91 04 01 	lds	r24, 0x0104
     8d8:	81 11       	cpse	r24, r1
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     8da:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     8dc:	80 91 06 01 	lds	r24, 0x0106
     8e0:	84 30       	cpi	r24, 0x04	; 4
     8e2:	50 f0       	brcs	.+20     	; 0x8f8 <__vector_20+0x170>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     8e4:	10 92 4d 01 	sts	0x014D, r1
     8e8:	10 92 4e 01 	sts	0x014E, r1
     8ec:	10 92 4f 01 	sts	0x014F, r1
     8f0:	10 92 50 01 	sts	0x0150, r1
			}
			US_data_part_no=0;
     8f4:	10 92 06 01 	sts	0x0106, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     8f8:	80 91 4d 01 	lds	r24, 0x014D
     8fc:	82 35       	cpi	r24, 0x52	; 82
     8fe:	91 f4       	brne	.+36     	; 0x924 <__stack+0x25>
			if (isdigit(data))
     900:	81 2f       	mov	r24, r17
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	c0 97       	sbiw	r24, 0x30	; 48
     906:	0a 97       	sbiw	r24, 0x0a	; 10
     908:	68 f4       	brcc	.+26     	; 0x924 <__stack+0x25>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     90a:	e0 91 06 01 	lds	r30, 0x0106
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 ed       	ldi	r24, 0xD0	; 208
     912:	81 0f       	add	r24, r17
     914:	e3 5b       	subi	r30, 0xB3	; 179
     916:	fe 4f       	sbci	r31, 0xFE	; 254
     918:	80 83       	st	Z, r24
				US_data_part_no++;
     91a:	80 91 06 01 	lds	r24, 0x0106
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 06 01 	sts	0x0106, r24
			
		}
				
	}

}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	1f 91       	pop	r17
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	9f 90       	pop	r9
     94e:	8f 90       	pop	r8
     950:	7f 90       	pop	r7
     952:	5f 90       	pop	r5
     954:	4f 90       	pop	r4
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
     95c:	1f 90       	pop	r1
     95e:	18 95       	reti

00000960 <checkPackIsFullLength>:
}

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
     960:	28 2f       	mov	r18, r24
     962:	2f 77       	andi	r18, 0x7F	; 127
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	ef 5a       	subi	r30, 0xAF	; 175
     96e:	fe 4f       	sbci	r31, 0xFE	; 254
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	9f 3f       	cpi	r25, 0xFF	; 255
     974:	b1 f1       	breq	.+108    	; 0x9e2 <checkPackIsFullLength+0x82>
		return 0;
		}else{
		pc_no = rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no;
     976:	f9 01       	movw	r30, r18
     978:	ee 0f       	add	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	ef 5a       	subi	r30, 0xAF	; 175
     97e:	fe 4f       	sbci	r31, 0xFE	; 254
     980:	61 81       	ldd	r22, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	41 81       	ldd	r20, Z+1	; 0x01
     986:	4f 3f       	cpi	r20, 0xFF	; 255
     988:	71 f1       	breq	.+92     	; 0x9e6 <checkPackIsFullLength+0x86>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     98a:	f9 01       	movw	r30, r18
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	ef 5a       	subi	r30, 0xAF	; 175
     992:	fe 4f       	sbci	r31, 0xFE	; 254
     994:	41 81       	ldd	r20, Z+1	; 0x01
     996:	55 27       	eor	r21, r21
     998:	47 fd       	sbrc	r20, 7
     99a:	50 95       	com	r21
     99c:	26 2f       	mov	r18, r22
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	42 17       	cp	r20, r18
     9a2:	53 07       	cpc	r21, r19
     9a4:	11 f5       	brne	.+68     	; 0x9ea <checkPackIsFullLength+0x8a>
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	66 e0       	ldi	r22, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
     9aa:	9c 01       	movw	r18, r24
     9ac:	2f 77       	andi	r18, 0x7F	; 127
     9ae:	33 27       	eor	r19, r19
     9b0:	f9 01       	movw	r30, r18
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	ef 5a       	subi	r30, 0xAF	; 175
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	71 81       	ldd	r23, Z+1	; 0x01
     9bc:	7f 3f       	cpi	r23, 0xFF	; 255
     9be:	b9 f0       	breq	.+46     	; 0x9ee <checkPackIsFullLength+0x8e>
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
     9c0:	f9 01       	movw	r30, r18
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	ef 5a       	subi	r30, 0xAF	; 175
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	21 81       	ldd	r18, Z+1	; 0x01
     9cc:	33 27       	eor	r19, r19
     9ce:	27 fd       	sbrc	r18, 7
     9d0:	30 95       	com	r19
     9d2:	24 17       	cp	r18, r20
     9d4:	35 07       	cpc	r19, r21
     9d6:	69 f4       	brne	.+26     	; 0x9f2 <checkPackIsFullLength+0x92>
     9d8:	61 50       	subi	r22, 0x01	; 1
     9da:	01 96       	adiw	r24, 0x01	; 1
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     9dc:	61 11       	cpse	r22, r1
     9de:	e5 cf       	rjmp	.-54     	; 0x9aa <checkPackIsFullLength+0x4a>
     9e0:	0a c0       	rjmp	.+20     	; 0x9f6 <checkPackIsFullLength+0x96>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[lastPackPos & RX_BUFFER_SIZE_MSK].pack_no == -1){
		return 0;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	08 95       	ret
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no == -1
		|| rxBuffer[(lastPackPos+i) & RX_BUFFER_SIZE_MSK].pack_no != pc_no){
			return 0;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	08 95       	ret
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	08 95       	ret
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	08 95       	ret
		}
	}
	return 1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
}
     9f8:	08 95       	ret

000009fa <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	27 97       	sbiw	r28, 0x07	; 7
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
	
	
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
     a1a:	e0 91 0e 01 	lds	r30, 0x010E
     a1e:	ef 77       	andi	r30, 0x7F	; 127
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ef 5a       	subi	r30, 0xAF	; 175
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
     a2c:	e0 91 0e 01 	lds	r30, 0x010E
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	31 96       	adiw	r30, 0x01	; 1
     a34:	ef 77       	andi	r30, 0x7F	; 127
     a36:	ff 27       	eor	r31, r31
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	ef 5a       	subi	r30, 0xAF	; 175
     a3e:	fe 4f       	sbci	r31, 0xFE	; 254
     a40:	30 81       	ld	r19, Z
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
     a42:	e0 91 0e 01 	lds	r30, 0x010E
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	32 96       	adiw	r30, 0x02	; 2
     a4a:	ef 77       	andi	r30, 0x7F	; 127
     a4c:	ff 27       	eor	r31, r31
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ef 5a       	subi	r30, 0xAF	; 175
     a54:	fe 4f       	sbci	r31, 0xFE	; 254
     a56:	40 81       	ld	r20, Z
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     a58:	e0 91 0e 01 	lds	r30, 0x010E
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	33 96       	adiw	r30, 0x03	; 3
     a60:	ef 77       	andi	r30, 0x7F	; 127
     a62:	ff 27       	eor	r31, r31
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	ef 5a       	subi	r30, 0xAF	; 175
     a6a:	fe 4f       	sbci	r31, 0xFE	; 254
     a6c:	80 81       	ld	r24, Z
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     a6e:	e0 91 0e 01 	lds	r30, 0x010E
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	34 96       	adiw	r30, 0x04	; 4
     a76:	ef 77       	andi	r30, 0x7F	; 127
     a78:	ff 27       	eor	r31, r31
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	ef 5a       	subi	r30, 0xAF	; 175
     a80:	fe 4f       	sbci	r31, 0xFE	; 254
     a82:	e0 80       	ld	r14, Z
	//Aici se poate sa mai fie greseli din cauza semnelor (signed, unsigned)
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
     a84:	f1 2c       	mov	r15, r1
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
     a86:	f8 2a       	or	r15, r24
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     a88:	e0 91 0e 01 	lds	r30, 0x010E
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	35 96       	adiw	r30, 0x05	; 5
     a90:	ef 77       	andi	r30, 0x7F	; 127
     a92:	ff 27       	eor	r31, r31
     a94:	ee 0f       	add	r30, r30
     a96:	ff 1f       	adc	r31, r31
     a98:	ef 5a       	subi	r30, 0xAF	; 175
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	80 81       	ld	r24, Z
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     a9e:	e0 91 0e 01 	lds	r30, 0x010E
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	36 96       	adiw	r30, 0x06	; 6
     aa6:	ef 77       	andi	r30, 0x7F	; 127
     aa8:	ff 27       	eor	r31, r31
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	ef 5a       	subi	r30, 0xAF	; 175
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	00 81       	ld	r16, Z
	comm.header = rxBuffer[lastPackPosInBuff & RX_BUFFER_SIZE_MSK].data;
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) & RX_BUFFER_SIZE_MSK].data; //recover the sign
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) & RX_BUFFER_SIZE_MSK].data;
	comm.time = rxBuffer[(lastPackPosInBuff+3) & RX_BUFFER_SIZE_MSK].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) & RX_BUFFER_SIZE_MSK].data;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) & RX_BUFFER_SIZE_MSK].data << 8;
     ab4:	10 e0       	ldi	r17, 0x00	; 0
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) & RX_BUFFER_SIZE_MSK].data;
     ab6:	18 2b       	or	r17, r24
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0


	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	ff ef       	ldi	r31, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1; //erase data from buffer
     ac0:	5f ef       	ldi	r21, 0xFF	; 255

	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
     ac2:	a0 91 0e 01 	lds	r26, 0x010E
     ac6:	6c 01       	movw	r12, r24
     ac8:	ca 0e       	add	r12, r26
     aca:	d1 1c       	adc	r13, r1
     acc:	d6 01       	movw	r26, r12
     ace:	af 77       	andi	r26, 0x7F	; 127
     ad0:	bb 27       	eor	r27, r27
     ad2:	aa 0f       	add	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	af 5a       	subi	r26, 0xAF	; 175
     ad8:	be 4f       	sbci	r27, 0xFE	; 254
     ada:	ac 91       	ld	r26, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     adc:	ea 27       	eor	r30, r26
     ade:	ae 2f       	mov	r26, r30
     ae0:	a2 95       	swap	r26
     ae2:	ae 27       	eor	r26, r30
     ae4:	0a 2e       	mov	r0, r26
     ae6:	a6 95       	lsr	r26
     ae8:	a6 95       	lsr	r26
     aea:	a0 25       	eor	r26, r0
     aec:	0a 2e       	mov	r0, r26
     aee:	a6 95       	lsr	r26
     af0:	a0 25       	eor	r26, r0
     af2:	a7 70       	andi	r26, 0x07	; 7
     af4:	0e 2e       	mov	r0, r30
     af6:	ef 2f       	mov	r30, r31
     af8:	a6 95       	lsr	r26
     afa:	07 94       	ror	r0
     afc:	a7 95       	ror	r26
     afe:	f0 2d       	mov	r31, r0
     b00:	ea 27       	eor	r30, r26
     b02:	06 94       	lsr	r0
     b04:	a7 95       	ror	r26
     b06:	f0 25       	eor	r31, r0
     b08:	ea 27       	eor	r30, r26
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1; //erase data from buffer
     b0a:	a0 91 0e 01 	lds	r26, 0x010E
     b0e:	6c 01       	movw	r12, r24
     b10:	ca 0e       	add	r12, r26
     b12:	d1 1c       	adc	r13, r1
     b14:	d6 01       	movw	r26, r12
     b16:	af 77       	andi	r26, 0x7F	; 127
     b18:	bb 27       	eor	r27, r27
     b1a:	aa 0f       	add	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	af 5a       	subi	r26, 0xAF	; 175
     b20:	be 4f       	sbci	r27, 0xFE	; 254
     b22:	11 96       	adiw	r26, 0x01	; 1
     b24:	5c 93       	st	X, r21
     b26:	01 96       	adiw	r24, 0x01	; 1


	//check integrity with CRC
	int8_t i;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     b28:	87 30       	cpi	r24, 0x07	; 7
     b2a:	91 05       	cpc	r25, r1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <fetchCommand+0x136>
     b2e:	c9 cf       	rjmp	.-110    	; 0xac2 <fetchCommand+0xc8>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].data);
		rxBuffer[(lastPackPosInBuff+i) & RX_BUFFER_SIZE_MSK].pack_no = -1; //erase data from buffer
	}
	
	if (crc == 0){
     b30:	ef 2b       	or	r30, r31
     b32:	21 f4       	brne	.+8      	; 0xb3c <fetchCommand+0x142>
		*CRC_correct = 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	fb 01       	movw	r30, r22
     b38:	80 83       	st	Z, r24
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <fetchCommand+0x146>
		}else{
		*CRC_correct = 0;
     b3c:	fb 01       	movw	r30, r22
     b3e:	10 82       	st	Z, r1
	}
	
	return comm;
     b40:	fd 82       	std	Y+5, r15	; 0x05
     b42:	ec 82       	std	Y+4, r14	; 0x04
     b44:	1f 83       	std	Y+7, r17	; 0x07
     b46:	0e 83       	std	Y+6, r16	; 0x06
     b48:	5e 2d       	mov	r21, r14
     b4a:	6d 81       	ldd	r22, Y+5	; 0x05
     b4c:	70 2f       	mov	r23, r16
}
     b4e:	8f 81       	ldd	r24, Y+7	; 0x07
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	27 96       	adiw	r28, 0x07	; 7
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	08 95       	ret

00000b70 <__clearBuffers>:
	}
	
}

void __clearBuffers(){
	for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
		rxBuffer[i].pack_no =-1;
     b74:	2f ef       	ldi	r18, 0xFF	; 255
     b76:	fc 01       	movw	r30, r24
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	df 01       	movw	r26, r30
     b7e:	af 5a       	subi	r26, 0xAF	; 175
     b80:	be 4f       	sbci	r27, 0xFE	; 254
     b82:	11 96       	adiw	r26, 0x01	; 1
     b84:	2c 93       	st	X, r18
		txBuffer[i].pack_no =-1;
     b86:	ef 5a       	subi	r30, 0xAF	; 175
     b88:	fd 4f       	sbci	r31, 0xFD	; 253
     b8a:	21 83       	std	Z+1, r18	; 0x01
		txBuffer[i].data =0;
     b8c:	10 82       	st	Z, r1
	}
	
}

void __clearBuffers(){
	for(int16_t i=0; i<RX_BUFFER_SIZE; i++){
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	80 38       	cpi	r24, 0x80	; 128
     b92:	91 05       	cpc	r25, r1
     b94:	81 f7       	brne	.-32     	; 0xb76 <__clearBuffers+0x6>
		rxBuffer[i].pack_no =-1;
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}
	txWritePos = 0;
     b96:	10 92 0b 01 	sts	0x010B, r1
	txReadPos = 0;
     b9a:	10 92 0c 01 	sts	0x010C, r1
	rxReadPos = 0;
     b9e:	10 92 12 01 	sts	0x0112, r1
	rxWritePos = 0;
     ba2:	10 92 11 01 	sts	0x0111, r1
	lastCommandHeader = 0;
     ba6:	10 92 0d 01 	sts	0x010D, r1
	lastPackNo = 0;
     baa:	10 92 0f 01 	sts	0x010F, r1
	lastPackPosInBuff = 0;
     bae:	10 92 0e 01 	sts	0x010E, r1
	packStarted = 0;
     bb2:	10 92 10 01 	sts	0x0110, r1
     bb6:	08 95       	ret

00000bb8 <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	8c 01       	movw	r16, r24
	
	///TEST////
	txBuffer[i].pack_no =-1;
	txBuffer[i].data =0;
	}*/
	__clearBuffers();
     bc2:	0e 94 b8 05 	call	0xb70	; 0xb70 <__clearBuffers>
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
     bc6:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
     bc8:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
     bca:	ca ec       	ldi	r28, 0xCA	; 202
     bcc:	d0 e0       	ldi	r29, 0x00	; 0
     bce:	88 81       	ld	r24, Y
     bd0:	8f 73       	andi	r24, 0x3F	; 63
     bd2:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
     bd4:	e8 ec       	ldi	r30, 0xC8	; 200
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8d 7f       	andi	r24, 0xFD	; 253
     bdc:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     bde:	c8 01       	movw	r24, r16
     be0:	aa 27       	eor	r26, r26
     be2:	97 fd       	sbrc	r25, 7
     be4:	a0 95       	com	r26
     be6:	ba 2f       	mov	r27, r26
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	aa 1f       	adc	r26, r26
     bee:	bb 1f       	adc	r27, r27
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	aa 1f       	adc	r26, r26
     bf6:	bb 1f       	adc	r27, r27
     bf8:	9c 01       	movw	r18, r24
     bfa:	ad 01       	movw	r20, r26
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	44 1f       	adc	r20, r20
     c02:	55 1f       	adc	r21, r21
     c04:	22 0f       	add	r18, r18
     c06:	33 1f       	adc	r19, r19
     c08:	44 1f       	adc	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	72 e1       	ldi	r23, 0x12	; 18
     c10:	8a e7       	ldi	r24, 0x7A	; 122
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__divmodsi4>
     c18:	ca 01       	movw	r24, r20
     c1a:	b9 01       	movw	r22, r18
     c1c:	61 50       	subi	r22, 0x01	; 1
     c1e:	71 09       	sbc	r23, r1
     c20:	81 09       	sbc	r24, r1
     c22:	91 09       	sbc	r25, r1
     c24:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     c28:	0e 94 46 0c 	call	0x188c	; 0x188c <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
     c2c:	27 2f       	mov	r18, r23
     c2e:	33 27       	eor	r19, r19
     c30:	27 fd       	sbrc	r18, 7
     c32:	3a 95       	dec	r19
     c34:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
     c38:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     c3c:	e9 ec       	ldi	r30, 0xC9	; 201
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	88 e1       	ldi	r24, 0x18	; 24
     c42:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
     c44:	88 81       	ld	r24, Y
     c46:	86 60       	ori	r24, 0x06	; 6
     c48:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
     c4a:	80 81       	ld	r24, Z
     c4c:	8b 7f       	andi	r24, 0xFB	; 251
     c4e:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
     c50:	88 81       	ld	r24, Y
     c52:	87 7f       	andi	r24, 0xF7	; 247
     c54:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
     c56:	88 81       	ld	r24, Y
     c58:	8f 7c       	andi	r24, 0xCF	; 207
     c5a:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
     c5c:	80 81       	ld	r24, Z
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
     c62:	80 81       	ld	r24, Z
     c64:	80 64       	ori	r24, 0x40	; 64
     c66:	80 83       	st	Z, r24
	
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <__tryToSend>:
	packStarted = 0;
}

//this is used to send data so that USART1_TX_vect can be triggered
void __tryToSend(){
	if (UCSR1A & (1<<UDRE1)) //if data register is empty send a byte
     c72:	80 91 c8 00 	lds	r24, 0x00C8
     c76:	85 ff       	sbrs	r24, 5
     c78:	31 c0       	rjmp	.+98     	; 0xcdc <__tryToSend+0x6a>
	{
		cli();
     c7a:	f8 94       	cli
		if(txBuffer[txReadPos].pack_no != -1){
     c7c:	e0 91 0c 01 	lds	r30, 0x010C
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	ef 5a       	subi	r30, 0xAF	; 175
     c88:	fd 4f       	sbci	r31, 0xFD	; 253
     c8a:	81 81       	ldd	r24, Z+1	; 0x01
     c8c:	8f 3f       	cpi	r24, 0xFF	; 255
     c8e:	29 f1       	breq	.+74     	; 0xcda <__tryToSend+0x68>
			UDR1 = txBuffer[txReadPos].data;
     c90:	e0 91 0c 01 	lds	r30, 0x010C
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	ef 5a       	subi	r30, 0xAF	; 175
     c9c:	fd 4f       	sbci	r31, 0xFD	; 253
     c9e:	80 81       	ld	r24, Z
     ca0:	80 93 ce 00 	sts	0x00CE, r24
			txBuffer[txReadPos].pack_no = -1;
     ca4:	e0 91 0c 01 	lds	r30, 0x010C
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	ef 5a       	subi	r30, 0xAF	; 175
     cb0:	fd 4f       	sbci	r31, 0xFD	; 253
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	81 83       	std	Z+1, r24	; 0x01
			txBuffer[txReadPos].data = 0;
     cb6:	e0 91 0c 01 	lds	r30, 0x010C
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	ef 5a       	subi	r30, 0xAF	; 175
     cc2:	fd 4f       	sbci	r31, 0xFD	; 253
     cc4:	10 82       	st	Z, r1
			txReadPos++;
     cc6:	80 91 0c 01 	lds	r24, 0x010C
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 93 0c 01 	sts	0x010C, r24
			txReadPos &= TX_BUFFER_SIZE_MSK;
     cd0:	80 91 0c 01 	lds	r24, 0x010C
     cd4:	8f 77       	andi	r24, 0x7F	; 127
     cd6:	80 93 0c 01 	sts	0x010C, r24
			if(txReadPos >= TX_BUFFER_SIZE){
			txReadPos=0;
			}
			*/
		}
		sei();
     cda:	78 94       	sei
     cdc:	08 95       	ret

00000cde <sendResponse>:
	}
	
	return comm;
}

void sendResponse(response r){
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	29 97       	sbiw	r28, 0x09	; 9
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	09 83       	std	Y+1, r16	; 0x01
     cf8:	1a 83       	std	Y+2, r17	; 0x02
     cfa:	2b 83       	std	Y+3, r18	; 0x03
     cfc:	3c 83       	std	Y+4, r19	; 0x04
     cfe:	4d 83       	std	Y+5, r20	; 0x05
     d00:	5e 83       	std	Y+6, r21	; 0x06
     d02:	6f 83       	std	Y+7, r22	; 0x07
     d04:	97 2f       	mov	r25, r23
     d06:	78 87       	std	Y+8, r23	; 0x08
     d08:	89 87       	std	Y+9, r24	; 0x09
	
	int8_t header = r.header;
	uint16_t i = txWritePos;
     d0a:	e0 91 0b 01 	lds	r30, 0x010B
     d0e:	4e 2f       	mov	r20, r30
     d10:	50 e0       	ldi	r21, 0x00	; 0
	
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = header;
     d12:	ef 77       	andi	r30, 0x7F	; 127
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	ef 5a       	subi	r30, 0xAF	; 175
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	00 83       	st	Z, r16
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     d20:	01 83       	std	Z+1, r16	; 0x01
	i++;
     d22:	fa 01       	movw	r30, r20
     d24:	31 96       	adiw	r30, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
     d26:	ef 77       	andi	r30, 0x7F	; 127
     d28:	ff 27       	eor	r31, r31
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	ef 5a       	subi	r30, 0xAF	; 175
     d30:	fd 4f       	sbci	r31, 0xFD	; 253
     d32:	26 e0       	ldi	r18, 0x06	; 6
     d34:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     d36:	01 83       	std	Z+1, r16	; 0x01
	i++;
     d38:	9a 01       	movw	r18, r20
     d3a:	2e 5f       	subi	r18, 0xFE	; 254
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
     d3e:	fe 01       	movw	r30, r28
     d40:	32 96       	adiw	r30, 0x02	; 2
     d42:	be 01       	movw	r22, r28
     d44:	68 5f       	subi	r22, 0xF8	; 248
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
     d48:	d9 01       	movw	r26, r18
     d4a:	af 77       	andi	r26, 0x7F	; 127
     d4c:	bb 27       	eor	r27, r27
     d4e:	11 91       	ld	r17, Z+
     d50:	aa 0f       	add	r26, r26
     d52:	bb 1f       	adc	r27, r27
     d54:	af 5a       	subi	r26, 0xAF	; 175
     d56:	bd 4f       	sbci	r27, 0xFD	; 253
     d58:	1c 93       	st	X, r17
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	0c 93       	st	X, r16
		i++;
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
	i++;
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = NO_OF_SENSORS; // this must be sent!!
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	for(uint8_t j=0; j<NO_OF_SENSORS; j++){
     d62:	e6 17       	cp	r30, r22
     d64:	f7 07       	cpc	r31, r23
     d66:	81 f7       	brne	.-32     	; 0xd48 <sendResponse+0x6a>
     d68:	fa 01       	movw	r30, r20
     d6a:	38 96       	adiw	r30, 0x08	; 8
		txBuffer[i&TX_BUFFER_SIZE_MSK].data = r.sensorInfo[j];
		txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
		i++;
	}
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time >> 8); // first 8 bits
     d6c:	ef 77       	andi	r30, 0x7F	; 127
     d6e:	ff 27       	eor	r31, r31
     d70:	ee 0f       	add	r30, r30
     d72:	ff 1f       	adc	r31, r31
     d74:	ef 5a       	subi	r30, 0xAF	; 175
     d76:	fd 4f       	sbci	r31, 0xFD	; 253
     d78:	80 83       	st	Z, r24
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     d7a:	01 83       	std	Z+1, r16	; 0x01
	i++;
     d7c:	fa 01       	movw	r30, r20
     d7e:	39 96       	adiw	r30, 0x09	; 9
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (r.time & 0xFF); // next 8 bits
     d80:	ef 77       	andi	r30, 0x7F	; 127
     d82:	ff 27       	eor	r31, r31
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	ef 5a       	subi	r30, 0xAF	; 175
     d8a:	fd 4f       	sbci	r31, 0xFD	; 253
     d8c:	90 83       	st	Z, r25
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     d8e:	01 83       	std	Z+1, r16	; 0x01
	i++;
     d90:	ba 01       	movw	r22, r20
     d92:	66 5f       	subi	r22, 0xF6	; 246
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
     d9a:	2f ef       	ldi	r18, 0xFF	; 255
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
     d9e:	e0 91 0b 01 	lds	r30, 0x010B
     da2:	dc 01       	movw	r26, r24
     da4:	ae 0f       	add	r26, r30
     da6:	b1 1d       	adc	r27, r1
     da8:	fd 01       	movw	r30, r26
     daa:	ef 77       	andi	r30, 0x7F	; 127
     dac:	ff 27       	eor	r31, r31
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	ef 5a       	subi	r30, 0xAF	; 175
     db4:	fd 4f       	sbci	r31, 0xFD	; 253
     db6:	e0 81       	ld	r30, Z
     db8:	2e 27       	eor	r18, r30
     dba:	e2 2f       	mov	r30, r18
     dbc:	e2 95       	swap	r30
     dbe:	e2 27       	eor	r30, r18
     dc0:	0e 2e       	mov	r0, r30
     dc2:	e6 95       	lsr	r30
     dc4:	e6 95       	lsr	r30
     dc6:	e0 25       	eor	r30, r0
     dc8:	0e 2e       	mov	r0, r30
     dca:	e6 95       	lsr	r30
     dcc:	e0 25       	eor	r30, r0
     dce:	e7 70       	andi	r30, 0x07	; 7
     dd0:	02 2e       	mov	r0, r18
     dd2:	23 2f       	mov	r18, r19
     dd4:	e6 95       	lsr	r30
     dd6:	07 94       	ror	r0
     dd8:	e7 95       	ror	r30
     dda:	30 2d       	mov	r19, r0
     ddc:	2e 27       	eor	r18, r30
     dde:	06 94       	lsr	r0
     de0:	e7 95       	ror	r30
     de2:	30 25       	eor	r19, r0
     de4:	2e 27       	eor	r18, r30
     de6:	01 96       	adiw	r24, 0x01	; 1
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
	i++;
	
	//calculate CRC
	uint16_t crc = 0xFFFF;
	for(uint8_t j=0; j<NO_OF_SENSORS+4; j++){ // 4 = header, no_of_sensors, time(2)
     de8:	8a 30       	cpi	r24, 0x0A	; 10
     dea:	91 05       	cpc	r25, r1
     dec:	c1 f6       	brne	.-80     	; 0xd9e <sendResponse+0xc0>
		crc = _crc16_update(crc, txBuffer[(txWritePos+j) & TX_BUFFER_SIZE_MSK].data);
	}
	
	//send CRC in reverse order!
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc & 0xFF); // last 8 bits
     dee:	fb 01       	movw	r30, r22
     df0:	ef 77       	andi	r30, 0x7F	; 127
     df2:	ff 27       	eor	r31, r31
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ef 5a       	subi	r30, 0xAF	; 175
     dfa:	fd 4f       	sbci	r31, 0xFD	; 253
     dfc:	20 83       	st	Z, r18
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     dfe:	01 83       	std	Z+1, r16	; 0x01
	i++;
     e00:	fa 01       	movw	r30, r20
     e02:	3b 96       	adiw	r30, 0x0b	; 11
	
	txBuffer[i&TX_BUFFER_SIZE_MSK].data = (crc >> 8); // first 8 bits
     e04:	ef 77       	andi	r30, 0x7F	; 127
     e06:	ff 27       	eor	r31, r31
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	ef 5a       	subi	r30, 0xAF	; 175
     e0e:	fd 4f       	sbci	r31, 0xFD	; 253
     e10:	30 83       	st	Z, r19
	txBuffer[i&TX_BUFFER_SIZE_MSK].pack_no = header;
     e12:	01 83       	std	Z+1, r16	; 0x01
	i++;
     e14:	44 5f       	subi	r20, 0xF4	; 244
     e16:	5f 4f       	sbci	r21, 0xFF	; 255
	txWritePos = i & TX_BUFFER_SIZE_MSK;
     e18:	4f 77       	andi	r20, 0x7F	; 127
     e1a:	40 93 0b 01 	sts	0x010B, r20
	
	__tryToSend();
     e1e:	0e 94 39 06 	call	0xc72	; 0xc72 <__tryToSend>
}
     e22:	29 96       	adiw	r28, 0x09	; 9
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <getLastCommand>:
		}
		sei();
	}
}

command getLastCommand(int8_t *success){
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	2f 97       	sbiw	r28, 0x0f	; 15
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     e52:	fe 01       	movw	r30, r28
     e54:	38 96       	adiw	r30, 0x08	; 8
     e56:	87 e0       	ldi	r24, 0x07	; 7
     e58:	df 01       	movw	r26, r30
     e5a:	1d 92       	st	X+, r1
     e5c:	8a 95       	dec	r24
     e5e:	e9 f7       	brne	.-6      	; 0xe5a <getLastCommand+0x22>
	*success = 0;
     e60:	f8 01       	movw	r30, r16
     e62:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
     e64:	80 91 0e 01 	lds	r24, 0x010E
     e68:	0e 94 b0 04 	call	0x960	; 0x960 <checkPackIsFullLength>
     e6c:	88 23       	and	r24, r24
     e6e:	c1 f0       	breq	.+48     	; 0xea0 <getLastCommand+0x68>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
     e70:	80 91 0e 01 	lds	r24, 0x010E
     e74:	be 01       	movw	r22, r28
     e76:	61 5f       	subi	r22, 0xF1	; 241
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <fetchCommand>
     e7e:	39 87       	std	Y+9, r19	; 0x09
     e80:	4a 87       	std	Y+10, r20	; 0x0a
     e82:	5b 87       	std	Y+11, r21	; 0x0b
     e84:	6c 87       	std	Y+12, r22	; 0x0c
     e86:	7d 87       	std	Y+13, r23	; 0x0d
     e88:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
     e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8c:	88 23       	and	r24, r24
     e8e:	21 f0       	breq	.+8      	; 0xe98 <getLastCommand+0x60>
		{
			*success=1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	d8 01       	movw	r26, r16
     e94:	8c 93       	st	X, r24
     e96:	2e c0       	rjmp	.+92     	; 0xef4 <getLastCommand+0xbc>
			}else{
			*success=2;
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	f8 01       	movw	r30, r16
     e9c:	80 83       	st	Z, r24
     e9e:	2a c0       	rjmp	.+84     	; 0xef4 <getLastCommand+0xbc>
		
		
		}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
									
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE)
     ea0:	80 91 0e 01 	lds	r24, 0x010E
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	07 97       	sbiw	r24, 0x07	; 7
     ea8:	80 38       	cpi	r24, 0x80	; 128
     eaa:	91 05       	cpc	r25, r1
     eac:	04 f5       	brge	.+64     	; 0xeee <getLastCommand+0xb6>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
     eae:	80 91 0e 01 	lds	r24, 0x010E
     eb2:	87 50       	subi	r24, 0x07	; 7
     eb4:	0e 94 b0 04 	call	0x960	; 0x960 <checkPackIsFullLength>
     eb8:	88 23       	and	r24, r24
     eba:	d9 f0       	breq	.+54     	; 0xef2 <getLastCommand+0xba>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
     ebc:	80 91 0e 01 	lds	r24, 0x010E
     ec0:	be 01       	movw	r22, r28
     ec2:	61 5f       	subi	r22, 0xF1	; 241
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	87 50       	subi	r24, 0x07	; 7
     ec8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <fetchCommand>
     ecc:	39 87       	std	Y+9, r19	; 0x09
     ece:	4a 87       	std	Y+10, r20	; 0x0a
     ed0:	5b 87       	std	Y+11, r21	; 0x0b
     ed2:	6c 87       	std	Y+12, r22	; 0x0c
     ed4:	7d 87       	std	Y+13, r23	; 0x0d
     ed6:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
     ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eda:	88 23       	and	r24, r24
     edc:	21 f0       	breq	.+8      	; 0xee6 <getLastCommand+0xae>
			{
				*success=1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	d8 01       	movw	r26, r16
     ee2:	8c 93       	st	X, r24
     ee4:	07 c0       	rjmp	.+14     	; 0xef4 <getLastCommand+0xbc>
				}else{
				*success=2;//it retrived something but the CRC was not matching
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	f8 01       	movw	r30, r16
     eea:	80 83       	st	Z, r24
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <getLastCommand+0xbc>
}

command getLastCommand(int8_t *success){
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <getLastCommand+0xbc>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
			
		}
	}
	
	//if(cmd.header != Header_StatusUpdate){
		lastCommandHeader = cmd.header;
     ef4:	20 93 0d 01 	sts	0x010D, r18
	//}
	
	return cmd;
     ef8:	28 87       	std	Y+8, r18	; 0x08
     efa:	87 e0       	ldi	r24, 0x07	; 7
     efc:	fe 01       	movw	r30, r28
     efe:	38 96       	adiw	r30, 0x08	; 8
     f00:	de 01       	movw	r26, r28
     f02:	11 96       	adiw	r26, 0x01	; 1
     f04:	01 90       	ld	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	8a 95       	dec	r24
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <getLastCommand+0xcc>
     f0c:	29 81       	ldd	r18, Y+1	; 0x01
     f0e:	3a 81       	ldd	r19, Y+2	; 0x02
     f10:	4b 81       	ldd	r20, Y+3	; 0x03
     f12:	5c 81       	ldd	r21, Y+4	; 0x04
     f14:	6d 81       	ldd	r22, Y+5	; 0x05
     f16:	7e 81       	ldd	r23, Y+6	; 0x06
}
     f18:	8f 81       	ldd	r24, Y+7	; 0x07
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	2f 96       	adiw	r28, 0x0f	; 15
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	08 95       	ret

00000f32 <sendStatusUpdate>:


void sendStatusUpdate(){
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	29 97       	sbiw	r28, 0x09	; 9
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
	
	response status;
	status.header = lastCommandHeader;
     f4a:	80 91 0d 01 	lds	r24, 0x010D
     f4e:	89 83       	std	Y+1, r24	; 0x01
	//set info to send
	status.sensorInfo[0] = getInfraredForwardDistance();
     f50:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <getInfraredForwardDistance>
     f54:	8a 83       	std	Y+2, r24	; 0x02
	status.sensorInfo[1] = getInfraredRightDistance();
     f56:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <getInfraredRightDistance>
     f5a:	8b 83       	std	Y+3, r24	; 0x03
	status.sensorInfo[2] = getInfraredBackDistance();
     f5c:	0e 94 13 02 	call	0x426	; 0x426 <getInfraredBackDistance>
     f60:	8c 83       	std	Y+4, r24	; 0x04
	status.sensorInfo[3] = getInfraredLeftDistance();
     f62:	0e 94 33 02 	call	0x466	; 0x466 <getInfraredLeftDistance>
     f66:	8d 83       	std	Y+5, r24	; 0x05
	//add speed/distance
	
	uint16_t US_distance = getAverageUltrasonicValue(3);
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <getAverageUltrasonicValue>
	status.sensorInfo[NO_OF_SENSORS-2] = US_distance >> 8;
     f6e:	9e 83       	std	Y+6, r25	; 0x06
	status.sensorInfo[NO_OF_SENSORS-1] = US_distance & 0xff;
     f70:	8f 83       	std	Y+7, r24	; 0x07
	status.time = getTimeExecutedLastCmd();
     f72:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <getTimeExecutedLastCmd>
     f76:	78 2f       	mov	r23, r24
     f78:	88 87       	std	Y+8, r24	; 0x08
     f7a:	99 87       	std	Y+9, r25	; 0x09
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	sendResponse(status);
     f7c:	09 81       	ldd	r16, Y+1	; 0x01
     f7e:	1a 81       	ldd	r17, Y+2	; 0x02
     f80:	2b 81       	ldd	r18, Y+3	; 0x03
     f82:	3c 81       	ldd	r19, Y+4	; 0x04
     f84:	4d 81       	ldd	r20, Y+5	; 0x05
     f86:	5e 81       	ldd	r21, Y+6	; 0x06
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	89 2f       	mov	r24, r25
     f8c:	0e 94 6f 06 	call	0xcde	; 0xcde <sendResponse>
		
}
     f90:	29 96       	adiw	r28, 0x09	; 9
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	08 95       	ret

00000fa6 <__vector_28>:

return ret;
}
*/

ISR(USART1_RX_vect){
     fa6:	1f 92       	push	r1
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	0f 92       	push	r0
     fae:	11 24       	eor	r1, r1
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31

	uint8_t data = UDR1;
     fb8:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
     fbc:	90 91 10 01 	lds	r25, 0x0110
     fc0:	91 11       	cpse	r25, r1
     fc2:	1b c0       	rjmp	.+54     	; 0xffa <__vector_28+0x54>
		
		LED_CMD_PIN |= (1<<LED_CMD_PINx);
     fc4:	00 9a       	sbi	0x00, 0	; 0
		
		rxBuffer[rxWritePos].pack_no = data; //numai ultimi 7 biti va trebui sa ii consider
     fc6:	e0 91 11 01 	lds	r30, 0x0111
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	ef 5a       	subi	r30, 0xAF	; 175
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
     fd6:	e0 91 11 01 	lds	r30, 0x0111
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	ef 5a       	subi	r30, 0xAF	; 175
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	80 83       	st	Z, r24
		packStarted = 1;
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	90 93 10 01 	sts	0x0110, r25
		lastPackNo = data;
     fec:	80 93 0f 01 	sts	0x010F, r24
		lastPackPosInBuff = rxWritePos;
     ff0:	80 91 11 01 	lds	r24, 0x0111
     ff4:	80 93 0e 01 	sts	0x010E, r24
     ff8:	1d c0       	rjmp	.+58     	; 0x1034 <__vector_28+0x8e>
		
				
		}else{
	
		rxBuffer[rxWritePos].pack_no = lastPackNo;
     ffa:	e0 91 11 01 	lds	r30, 0x0111
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	90 91 0f 01 	lds	r25, 0x010F
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	ef 5a       	subi	r30, 0xAF	; 175
    100a:	fe 4f       	sbci	r31, 0xFE	; 254
    100c:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
    100e:	e0 91 11 01 	lds	r30, 0x0111
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	ef 5a       	subi	r30, 0xAF	; 175
    101a:	fe 4f       	sbci	r31, 0xFE	; 254
    101c:	80 83       	st	Z, r24
		packStarted++ ;
    101e:	80 91 10 01 	lds	r24, 0x0110
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	80 93 10 01 	sts	0x0110, r24
		
		if(packStarted == COMMAND_SIZE){//fara -3
    1028:	80 91 10 01 	lds	r24, 0x0110
    102c:	87 30       	cpi	r24, 0x07	; 7
    102e:	11 f4       	brne	.+4      	; 0x1034 <__vector_28+0x8e>
			packStarted = 0;
    1030:	10 92 10 01 	sts	0x0110, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
    1034:	80 91 11 01 	lds	r24, 0x0111
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	80 93 11 01 	sts	0x0111, r24
	rxWritePos &= RX_BUFFER_SIZE_MSK;
    103e:	80 91 11 01 	lds	r24, 0x0111
    1042:	8f 77       	andi	r24, 0x7F	; 127
    1044:	80 93 11 01 	sts	0x0111, r24
	rxWritePos = 0;
	}*/
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <__vector_30>:

ISR(USART1_TX_vect){
    105a:	1f 92       	push	r1
    105c:	0f 92       	push	r0
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	0f 92       	push	r0
    1062:	11 24       	eor	r1, r1
    1064:	8f 93       	push	r24
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
    106a:	e0 91 0c 01 	lds	r30, 0x010C
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	ef 5a       	subi	r30, 0xAF	; 175
    1076:	fd 4f       	sbci	r31, 0xFD	; 253
    1078:	81 81       	ldd	r24, Z+1	; 0x01
    107a:	8f 3f       	cpi	r24, 0xFF	; 255
    107c:	29 f1       	breq	.+74     	; 0x10c8 <__vector_30+0x6e>
		UDR1 =  txBuffer[txReadPos].data;
    107e:	e0 91 0c 01 	lds	r30, 0x010C
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	ef 5a       	subi	r30, 0xAF	; 175
    108a:	fd 4f       	sbci	r31, 0xFD	; 253
    108c:	80 81       	ld	r24, Z
    108e:	80 93 ce 00 	sts	0x00CE, r24
		txBuffer[txReadPos].data =0;
    1092:	e0 91 0c 01 	lds	r30, 0x010C
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	ef 5a       	subi	r30, 0xAF	; 175
    109e:	fd 4f       	sbci	r31, 0xFD	; 253
    10a0:	10 82       	st	Z, r1
		txBuffer[txReadPos].pack_no =-1;
    10a2:	e0 91 0c 01 	lds	r30, 0x010C
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	ee 0f       	add	r30, r30
    10aa:	ff 1f       	adc	r31, r31
    10ac:	ef 5a       	subi	r30, 0xAF	; 175
    10ae:	fd 4f       	sbci	r31, 0xFD	; 253
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	81 83       	std	Z+1, r24	; 0x01
		txReadPos++;
    10b4:	80 91 0c 01 	lds	r24, 0x010C
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	80 93 0c 01 	sts	0x010C, r24
		txReadPos &= TX_BUFFER_SIZE_MSK;
    10be:	80 91 0c 01 	lds	r24, 0x010C
    10c2:	8f 77       	andi	r24, 0x7F	; 127
    10c4:	80 93 0c 01 	sts	0x010C, r24
		txReadPos =0;
		}
		*/
	}
	
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	8f 91       	pop	r24
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <executeCommandForTime>:
volatile uint8_t sendStatusUpdateFLAG = 0;



void executeCommandForTime(void (*startF) (uint16_t, int16_t*), void (*stopF) (uint16_t, int16_t*), 
uint16_t argc_start, int16_t* argv_start, uint16_t argc_stop, int16_t* argv_stop, uint16_t time){
    10d8:	8f 92       	push	r8
    10da:	9f 92       	push	r9
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	5a 01       	movw	r10, r20
    10f4:	49 01       	movw	r8, r18
	
	//copy arguments timer
	cli();
    10f6:	f8 94       	cli
	stopFunction = stopF;
    10f8:	70 93 1c 01 	sts	0x011C, r23
    10fc:	60 93 1b 01 	sts	0x011B, r22
	argc2 = argc_stop;
    1100:	10 93 1a 01 	sts	0x011A, r17
    1104:	00 93 19 01 	sts	0x0119, r16
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
    1108:	01 15       	cp	r16, r1
    110a:	11 05       	cpc	r17, r1
    110c:	91 f0       	breq	.+36     	; 0x1132 <executeCommandForTime+0x5a>
    110e:	ee 2d       	mov	r30, r14
    1110:	ff 2d       	mov	r31, r15
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
		argv2[i] = argv_stop[i];
    1116:	41 91       	ld	r20, Z+
    1118:	51 91       	ld	r21, Z+
    111a:	dc 01       	movw	r26, r24
    111c:	aa 0f       	add	r26, r26
    111e:	bb 1f       	adc	r27, r27
    1120:	af 5a       	subi	r26, 0xAF	; 175
    1122:	bc 4f       	sbci	r27, 0xFC	; 252
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	5c 93       	st	X, r21
    1128:	4e 93       	st	-X, r20
	
	//copy arguments timer
	cli();
	stopFunction = stopF;
	argc2 = argc_stop;
	for(uint16_t i =0; i< argc_stop; i++){ // it needs to be manually copied!!!
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	80 17       	cp	r24, r16
    112e:	91 07       	cpc	r25, r17
    1130:	91 f7       	brne	.-28     	; 0x1116 <executeCommandForTime+0x3e>
		OCR1A = ticks;
		ticks = 0;
	}
	*/
	
	ticks = floor((time / TIME_QUANTA) +0.5); //10
    1132:	96 01       	movw	r18, r12
    1134:	36 95       	lsr	r19
    1136:	27 95       	ror	r18
    1138:	36 95       	lsr	r19
    113a:	27 95       	ror	r18
    113c:	36 95       	lsr	r19
    113e:	27 95       	ror	r18
    1140:	a5 ec       	ldi	r26, 0xC5	; 197
    1142:	b0 e2       	ldi	r27, 0x20	; 32
    1144:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__umulhisi3>
    1148:	92 95       	swap	r25
    114a:	82 95       	swap	r24
    114c:	8f 70       	andi	r24, 0x0F	; 15
    114e:	89 27       	eor	r24, r25
    1150:	9f 70       	andi	r25, 0x0F	; 15
    1152:	89 27       	eor	r24, r25
    1154:	bc 01       	movw	r22, r24
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	5f e3       	ldi	r21, 0x3F	; 63
    1166:	0e 94 6d 0a 	call	0x14da	; 0x14da <__addsf3>
    116a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <floor>
    116e:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
    1172:	60 93 00 01 	sts	0x0100, r22
    1176:	70 93 01 01 	sts	0x0101, r23
    117a:	80 93 02 01 	sts	0x0102, r24
    117e:	90 93 03 01 	sts	0x0103, r25
	
	
	//start the function
	startF(argc_start, argv_start);
    1182:	b4 01       	movw	r22, r8
    1184:	c5 01       	movw	r24, r10
    1186:	fe 01       	movw	r30, r28
    1188:	09 95       	icall
	//Clock Select: clk/64 prescaler
	TCCR1B &= ~((1<<CS11)); //1024
	TCCR1B |= (1<<CS10) | (1<<CS12);
	*/
	
	sei();
    118a:	78 94       	sei
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	9f 90       	pop	r9
    11a2:	8f 90       	pop	r8
    11a4:	08 95       	ret

000011a6 <initTimer1>:

void initTimer1()
{
	//Normal port operation, OC1A/OC1B disconnected.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0));	
    11a6:	e0 e8       	ldi	r30, 0x80	; 128
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 70       	andi	r24, 0x0F	; 15
    11ae:	80 83       	st	Z, r24
	
	//Timer/Counter mode of operation: CTC, TOP = OCR1A, Update of OCR1x at Immediate TOVn flag set on MAX
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11));
    11b0:	80 81       	ld	r24, Z
    11b2:	8c 7f       	andi	r24, 0xFC	; 252
    11b4:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
    11b6:	e1 e8       	ldi	r30, 0x81	; 129
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 60       	ori	r24, 0x08	; 8
    11be:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7e       	andi	r24, 0xEF	; 239
    11c4:	80 83       	st	Z, r24

	
	// reset counter
	TCNT1 = 0;
    11c6:	10 92 85 00 	sts	0x0085, r1
    11ca:	10 92 84 00 	sts	0x0084, r1
	
	OCR1A = ((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*TIME_QUANTA; //100
    11ce:	88 e5       	ldi	r24, 0x58	; 88
    11d0:	9b e1       	ldi	r25, 0x1B	; 27
    11d2:	90 93 89 00 	sts	0x0089, r25
    11d6:	80 93 88 00 	sts	0x0088, r24
		//Clock Select: clk/64 prescaler
		TCCR1B &= ~((1<<CS11)); //1024
    11da:	80 81       	ld	r24, Z
    11dc:	8d 7f       	andi	r24, 0xFD	; 253
    11de:	80 83       	st	Z, r24
		TCCR1B |= (1<<CS10) | (1<<CS12);
    11e0:	80 81       	ld	r24, Z
    11e2:	85 60       	ori	r24, 0x05	; 5
    11e4:	80 83       	st	Z, r24
	
	//OCR1A = 0;
	//OCR1B = (((F_CPU / 1000L) / PRESCALER_TIMER_0_1)*3000L) -1; //1 s
	
	//enable Output Compare A/B Match Interrupt Enable
	TIMSK1 |= (1<<OCIE1A);/* | (1<<OCIE1B); */
    11e6:	ef e6       	ldi	r30, 0x6F	; 111
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	82 60       	ori	r24, 0x02	; 2
    11ee:	80 83       	st	Z, r24
    11f0:	08 95       	ret

000011f2 <getTimeExecutedLastCmd>:
	
}


uint16_t getTimeExecutedLastCmd(){
	return TIME;
    11f2:	80 91 17 01 	lds	r24, 0x0117
    11f6:	90 91 18 01 	lds	r25, 0x0118
}
    11fa:	08 95       	ret

000011fc <resetTime>:

void resetTime(){
	enableCountingTime = 0;
    11fc:	10 92 14 01 	sts	0x0114, r1
	TIME = 0; 
    1200:	10 92 18 01 	sts	0x0118, r1
    1204:	10 92 17 01 	sts	0x0117, r1
	TIME_LIMIT = 0;
    1208:	10 92 16 01 	sts	0x0116, r1
    120c:	10 92 15 01 	sts	0x0115, r1
    1210:	08 95       	ret

00001212 <startTime>:
}

void startTime(){
	enableCountingTime = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 14 01 	sts	0x0114, r24
    1218:	08 95       	ret

0000121a <setTimeLimit>:
	
}

void setTimeLimit(uint16_t t_limit){
	
	if (t_limit)
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	29 f0       	breq	.+10     	; 0x1228 <setTimeLimit+0xe>
	{
		TIME_LIMIT = t_limit;
    121e:	90 93 16 01 	sts	0x0116, r25
    1222:	80 93 15 01 	sts	0x0115, r24
    1226:	08 95       	ret
	}else{
		resetTime();
    1228:	0e 94 fe 08 	call	0x11fc	; 0x11fc <resetTime>
    122c:	08 95       	ret

0000122e <executeScheduled>:
}


void executeScheduled(){
	
	if (sendStatusUpdateFLAG)
    122e:	80 91 13 01 	lds	r24, 0x0113
    1232:	88 23       	and	r24, r24
    1234:	21 f0       	breq	.+8      	; 0x123e <executeScheduled+0x10>
	{
		sendStatusUpdateFLAG = 0;
    1236:	10 92 13 01 	sts	0x0113, r1
		sendStatusUpdate();
    123a:	0e 94 99 07 	call	0xf32	; 0xf32 <sendStatusUpdate>
	}
	
	if(enableCountingTime == -1){
    123e:	80 91 14 01 	lds	r24, 0x0114
    1242:	08 95       	ret

00001244 <__vector_13>:
		enableCountingTime=0;
	}
	
}

ISR(TIMER1_COMPA_vect){		
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
	
	if(enableCountingTime == 1 ){
    1266:	80 91 14 01 	lds	r24, 0x0114
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	d9 f4       	brne	.+54     	; 0x12a4 <__vector_13+0x60>
		TIME+=TIME_QUANTA;
    126e:	80 91 17 01 	lds	r24, 0x0117
    1272:	90 91 18 01 	lds	r25, 0x0118
    1276:	88 51       	subi	r24, 0x18	; 24
    1278:	9c 4f       	sbci	r25, 0xFC	; 252
    127a:	90 93 18 01 	sts	0x0118, r25
    127e:	80 93 17 01 	sts	0x0117, r24
		sendStatusUpdateFLAG = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 13 01 	sts	0x0113, r24
		
		if(TIME == TIME_LIMIT){ //disable counting if time limit reached
    1288:	20 91 17 01 	lds	r18, 0x0117
    128c:	30 91 18 01 	lds	r19, 0x0118
    1290:	80 91 15 01 	lds	r24, 0x0115
    1294:	90 91 16 01 	lds	r25, 0x0116
    1298:	28 17       	cp	r18, r24
    129a:	39 07       	cpc	r19, r25
    129c:	19 f4       	brne	.+6      	; 0x12a4 <__vector_13+0x60>
			enableCountingTime = -1;
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	80 93 14 01 	sts	0x0114, r24
			OCR1A = ticks;
			ticks = 0;
		}
*/
	
	LED_CMD_PIN |= (1<<LED_CMD_PINx);	
    12a4:	00 9a       	sbi	0x00, 0	; 0
	if(ticks && ticks != 999999){
    12a6:	80 91 00 01 	lds	r24, 0x0100
    12aa:	90 91 01 01 	lds	r25, 0x0101
    12ae:	a0 91 02 01 	lds	r26, 0x0102
    12b2:	b0 91 03 01 	lds	r27, 0x0103
    12b6:	89 2b       	or	r24, r25
    12b8:	8a 2b       	or	r24, r26
    12ba:	8b 2b       	or	r24, r27
    12bc:	09 f1       	breq	.+66     	; 0x1300 <__vector_13+0xbc>
    12be:	80 91 00 01 	lds	r24, 0x0100
    12c2:	90 91 01 01 	lds	r25, 0x0101
    12c6:	a0 91 02 01 	lds	r26, 0x0102
    12ca:	b0 91 03 01 	lds	r27, 0x0103
    12ce:	8f 33       	cpi	r24, 0x3F	; 63
    12d0:	92 44       	sbci	r25, 0x42	; 66
    12d2:	af 40       	sbci	r26, 0x0F	; 15
    12d4:	b1 05       	cpc	r27, r1
    12d6:	a1 f0       	breq	.+40     	; 0x1300 <__vector_13+0xbc>
		ticks--;
    12d8:	80 91 00 01 	lds	r24, 0x0100
    12dc:	90 91 01 01 	lds	r25, 0x0101
    12e0:	a0 91 02 01 	lds	r26, 0x0102
    12e4:	b0 91 03 01 	lds	r27, 0x0103
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	a1 09       	sbc	r26, r1
    12ec:	b1 09       	sbc	r27, r1
    12ee:	80 93 00 01 	sts	0x0100, r24
    12f2:	90 93 01 01 	sts	0x0101, r25
    12f6:	a0 93 02 01 	sts	0x0102, r26
    12fa:	b0 93 03 01 	sts	0x0103, r27
    12fe:	17 c0       	rjmp	.+46     	; 0x132e <__vector_13+0xea>
	}else if (ticks==0){
    1300:	80 91 00 01 	lds	r24, 0x0100
    1304:	90 91 01 01 	lds	r25, 0x0101
    1308:	a0 91 02 01 	lds	r26, 0x0102
    130c:	b0 91 03 01 	lds	r27, 0x0103
    1310:	89 2b       	or	r24, r25
    1312:	8a 2b       	or	r24, r26
    1314:	8b 2b       	or	r24, r27
    1316:	59 f4       	brne	.+22     	; 0x132e <__vector_13+0xea>
		//stop timer, it MUST be called first!!!
		TCCR1B &= ~((1<<CS10) | (1<<CS11) | (1<<CS12)); 
		OCR1A = 0; 
		LED_CMD_PORT &= ~(1<<LED_CMD_PINx);			
		*/
		stopFunction(argc2,argv2);						
    1318:	80 91 19 01 	lds	r24, 0x0119
    131c:	90 91 1a 01 	lds	r25, 0x011A
    1320:	e0 91 1b 01 	lds	r30, 0x011B
    1324:	f0 91 1c 01 	lds	r31, 0x011C
    1328:	61 e5       	ldi	r22, 0x51	; 81
    132a:	73 e0       	ldi	r23, 0x03	; 3
    132c:	09 95       	icall
	}		
}
    132e:	ff 91       	pop	r31
    1330:	ef 91       	pop	r30
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	7f 91       	pop	r23
    133c:	6f 91       	pop	r22
    133e:	5f 91       	pop	r21
    1340:	4f 91       	pop	r20
    1342:	3f 91       	pop	r19
    1344:	2f 91       	pop	r18
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <__executeRecievedCommand>:


}


void __executeRecievedCommand(command cmd){
    1350:	4f 92       	push	r4
    1352:	5f 92       	push	r5
    1354:	6f 92       	push	r6
    1356:	7f 92       	push	r7
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	2b 97       	sbiw	r28, 0x0b	; 11
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	2d 83       	std	Y+5, r18	; 0x05
    1380:	3e 83       	std	Y+6, r19	; 0x06
    1382:	94 2e       	mov	r9, r20
    1384:	4f 83       	std	Y+7, r20	; 0x07
    1386:	58 87       	std	Y+8, r21	; 0x08
    1388:	69 87       	std	Y+9, r22	; 0x09
    138a:	7a 87       	std	Y+10, r23	; 0x0a
    138c:	8b 87       	std	Y+11, r24	; 0x0b
    138e:	08 85       	ldd	r16, Y+8	; 0x08
    1390:	19 85       	ldd	r17, Y+9	; 0x09
		LED_CMD_PIN |= (1<<LED_CMD_PINx);	
    1392:	00 9a       	sbi	0x00, 0	; 0
	if(cmd.time>0){
    1394:	01 15       	cp	r16, r1
    1396:	11 05       	cpc	r17, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <__executeRecievedCommand+0x4c>
    139a:	58 c0       	rjmp	.+176    	; 0x144c <__executeRecievedCommand+0xfc>
		
		 volatile uint16_t forward_time, right_time;
		float f_t, r_t, aux;
		
		f_t  = forward_time;
    139c:	6b 81       	ldd	r22, Y+3	; 0x03
    139e:	7c 81       	ldd	r23, Y+4	; 0x04
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
    13a8:	6b 01       	movw	r12, r22
    13aa:	7c 01       	movw	r14, r24
		r_t = right_time;
    13ac:	a9 80       	ldd	r10, Y+1	; 0x01
    13ae:	ba 80       	ldd	r11, Y+2	; 0x02
		aux = f_t/(f_t+r_t);
		forward_time = (uint16_t) (aux * cmd.time);
    13b0:	b8 01       	movw	r22, r16
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
    13ba:	2b 01       	movw	r4, r22
    13bc:	3c 01       	movw	r6, r24
		
		 volatile uint16_t forward_time, right_time;
		float f_t, r_t, aux;
		
		f_t  = forward_time;
		r_t = right_time;
    13be:	b5 01       	movw	r22, r10
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
    13c8:	9b 01       	movw	r18, r22
    13ca:	ac 01       	movw	r20, r24
		aux = f_t/(f_t+r_t);
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	0e 94 6d 0a 	call	0x14da	; 0x14da <__addsf3>
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__divsf3>
    13e0:	9b 01       	movw	r18, r22
    13e2:	ac 01       	movw	r20, r24
		forward_time = (uint16_t) (aux * cmd.time);
    13e4:	c3 01       	movw	r24, r6
    13e6:	b2 01       	movw	r22, r4
    13e8:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
    13ec:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
    13f0:	7c 83       	std	Y+4, r23	; 0x04
    13f2:	6b 83       	std	Y+3, r22	; 0x03

		//forward_time = (abs(cmd.forward)/(abs(cmd.forward)+abs(cmd.right))) * cmd.time;
		
		
		right_time = (abs(cmd.right)/(abs(cmd.forward)+abs(cmd.right))) * cmd.time;
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	99 27       	eor	r25, r25
    13f8:	87 fd       	sbrc	r24, 7
    13fa:	90 95       	com	r25
    13fc:	99 23       	and	r25, r25
    13fe:	1c f4       	brge	.+6      	; 0x1406 <__executeRecievedCommand+0xb6>
    1400:	91 95       	neg	r25
    1402:	81 95       	neg	r24
    1404:	91 09       	sbc	r25, r1
    1406:	69 2d       	mov	r22, r9
    1408:	77 27       	eor	r23, r23
    140a:	67 fd       	sbrc	r22, 7
    140c:	70 95       	com	r23
    140e:	77 23       	and	r23, r23
    1410:	1c f4       	brge	.+6      	; 0x1418 <__executeRecievedCommand+0xc8>
    1412:	71 95       	neg	r23
    1414:	61 95       	neg	r22
    1416:	71 09       	sbc	r23, r1
    1418:	68 0f       	add	r22, r24
    141a:	79 1f       	adc	r23, r25
    141c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__divmodhi4>
    1420:	60 9f       	mul	r22, r16
    1422:	c0 01       	movw	r24, r0
    1424:	61 9f       	mul	r22, r17
    1426:	90 0d       	add	r25, r0
    1428:	70 9f       	mul	r23, r16
    142a:	90 0d       	add	r25, r0
    142c:	11 24       	eor	r1, r1
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
		
		driveForwardForTime(cmd.forward, 2000);	// 2000 pt ca sunt ceva probleme cu variabila forward_time
    1432:	60 ed       	ldi	r22, 0xD0	; 208
    1434:	77 e0       	ldi	r23, 0x07	; 7
    1436:	89 2d       	mov	r24, r9
    1438:	0e 94 b8 00 	call	0x170	; 0x170 <driveForwardForTime>
		//start the timer
		resetTime();
    143c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <resetTime>
		setTimeLimit(2000);
    1440:	80 ed       	ldi	r24, 0xD0	; 208
    1442:	97 e0       	ldi	r25, 0x07	; 7
    1444:	0e 94 0d 09 	call	0x121a	; 0x121a <setTimeLimit>
		startTime();
    1448:	0e 94 09 09 	call	0x1212	; 0x1212 <startTime>
		
	}
	
	
    144c:	2b 96       	adiw	r28, 0x0b	; 11
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	bf 90       	pop	r11
    146a:	af 90       	pop	r10
    146c:	9f 90       	pop	r9
    146e:	7f 90       	pop	r7
    1470:	6f 90       	pop	r6
    1472:	5f 90       	pop	r5
    1474:	4f 90       	pop	r4
    1476:	08 95       	ret

00001478 <interpretCommands>:
#include <avr/io.h>
#include <stdlib.h>


void interpretCommands()
{
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	28 97       	sbiw	r28, 0x08	; 8
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
	int8_t success = 0;
    148c:	19 82       	std	Y+1, r1	; 0x01

    command lastcmd = getLastCommand(&success);
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	0e 94 1c 07 	call	0xe38	; 0xe38 <getLastCommand>
    1496:	2a 83       	std	Y+2, r18	; 0x02
    1498:	3b 83       	std	Y+3, r19	; 0x03
    149a:	4c 83       	std	Y+4, r20	; 0x04
    149c:	5d 83       	std	Y+5, r21	; 0x05
    149e:	6e 83       	std	Y+6, r22	; 0x06
    14a0:	7f 83       	std	Y+7, r23	; 0x07
    14a2:	88 87       	std	Y+8, r24	; 0x08
	
	if(success == 1){
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	71 f4       	brne	.+28     	; 0x14c6 <interpretCommands+0x4e>
		
		switch(lastcmd.header){
    14aa:	2f 37       	cpi	r18, 0x7F	; 127
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <interpretCommands+0x3c>
			case Header_StatusUpdate:
			sendStatusUpdate();
    14ae:	0e 94 99 07 	call	0xf32	; 0xf32 <sendStatusUpdate>
				break;
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <interpretCommands+0x4e>
			default:
			__executeRecievedCommand(lastcmd);	
    14b4:	2a 81       	ldd	r18, Y+2	; 0x02
    14b6:	3b 81       	ldd	r19, Y+3	; 0x03
    14b8:	4c 81       	ldd	r20, Y+4	; 0x04
    14ba:	5d 81       	ldd	r21, Y+5	; 0x05
    14bc:	6e 81       	ldd	r22, Y+6	; 0x06
    14be:	7f 81       	ldd	r23, Y+7	; 0x07
    14c0:	88 85       	ldd	r24, Y+8	; 0x08
    14c2:	0e 94 a8 09 	call	0x1350	; 0x1350 <__executeRecievedCommand>
		}
				
	}


}
    14c6:	28 96       	adiw	r28, 0x08	; 8
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <__subsf3>:
    14d8:	50 58       	subi	r21, 0x80	; 128

000014da <__addsf3>:
    14da:	bb 27       	eor	r27, r27
    14dc:	aa 27       	eor	r26, r26
    14de:	0e d0       	rcall	.+28     	; 0x14fc <__addsf3x>
    14e0:	84 c1       	rjmp	.+776    	; 0x17ea <__fp_round>
    14e2:	75 d1       	rcall	.+746    	; 0x17ce <__fp_pscA>
    14e4:	30 f0       	brcs	.+12     	; 0x14f2 <__addsf3+0x18>
    14e6:	7a d1       	rcall	.+756    	; 0x17dc <__fp_pscB>
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__addsf3+0x18>
    14ea:	31 f4       	brne	.+12     	; 0x14f8 <__addsf3+0x1e>
    14ec:	9f 3f       	cpi	r25, 0xFF	; 255
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <__addsf3+0x1a>
    14f0:	1e f4       	brtc	.+6      	; 0x14f8 <__addsf3+0x1e>
    14f2:	6a c1       	rjmp	.+724    	; 0x17c8 <__fp_nan>
    14f4:	0e f4       	brtc	.+2      	; 0x14f8 <__addsf3+0x1e>
    14f6:	e0 95       	com	r30
    14f8:	e7 fb       	bst	r30, 7
    14fa:	37 c1       	rjmp	.+622    	; 0x176a <__fp_inf>

000014fc <__addsf3x>:
    14fc:	e9 2f       	mov	r30, r25
    14fe:	86 d1       	rcall	.+780    	; 0x180c <__fp_split3>
    1500:	80 f3       	brcs	.-32     	; 0x14e2 <__addsf3+0x8>
    1502:	ba 17       	cp	r27, r26
    1504:	62 07       	cpc	r22, r18
    1506:	73 07       	cpc	r23, r19
    1508:	84 07       	cpc	r24, r20
    150a:	95 07       	cpc	r25, r21
    150c:	18 f0       	brcs	.+6      	; 0x1514 <__addsf3x+0x18>
    150e:	71 f4       	brne	.+28     	; 0x152c <__addsf3x+0x30>
    1510:	9e f5       	brtc	.+102    	; 0x1578 <__addsf3x+0x7c>
    1512:	b5 c1       	rjmp	.+874    	; 0x187e <__fp_zero>
    1514:	0e f4       	brtc	.+2      	; 0x1518 <__addsf3x+0x1c>
    1516:	e0 95       	com	r30
    1518:	0b 2e       	mov	r0, r27
    151a:	ba 2f       	mov	r27, r26
    151c:	a0 2d       	mov	r26, r0
    151e:	0b 01       	movw	r0, r22
    1520:	b9 01       	movw	r22, r18
    1522:	90 01       	movw	r18, r0
    1524:	0c 01       	movw	r0, r24
    1526:	ca 01       	movw	r24, r20
    1528:	a0 01       	movw	r20, r0
    152a:	11 24       	eor	r1, r1
    152c:	ff 27       	eor	r31, r31
    152e:	59 1b       	sub	r21, r25
    1530:	99 f0       	breq	.+38     	; 0x1558 <__addsf3x+0x5c>
    1532:	59 3f       	cpi	r21, 0xF9	; 249
    1534:	50 f4       	brcc	.+20     	; 0x154a <__addsf3x+0x4e>
    1536:	50 3e       	cpi	r21, 0xE0	; 224
    1538:	68 f1       	brcs	.+90     	; 0x1594 <__addsf3x+0x98>
    153a:	1a 16       	cp	r1, r26
    153c:	f0 40       	sbci	r31, 0x00	; 0
    153e:	a2 2f       	mov	r26, r18
    1540:	23 2f       	mov	r18, r19
    1542:	34 2f       	mov	r19, r20
    1544:	44 27       	eor	r20, r20
    1546:	58 5f       	subi	r21, 0xF8	; 248
    1548:	f3 cf       	rjmp	.-26     	; 0x1530 <__addsf3x+0x34>
    154a:	46 95       	lsr	r20
    154c:	37 95       	ror	r19
    154e:	27 95       	ror	r18
    1550:	a7 95       	ror	r26
    1552:	f0 40       	sbci	r31, 0x00	; 0
    1554:	53 95       	inc	r21
    1556:	c9 f7       	brne	.-14     	; 0x154a <__addsf3x+0x4e>
    1558:	7e f4       	brtc	.+30     	; 0x1578 <__addsf3x+0x7c>
    155a:	1f 16       	cp	r1, r31
    155c:	ba 0b       	sbc	r27, r26
    155e:	62 0b       	sbc	r22, r18
    1560:	73 0b       	sbc	r23, r19
    1562:	84 0b       	sbc	r24, r20
    1564:	ba f0       	brmi	.+46     	; 0x1594 <__addsf3x+0x98>
    1566:	91 50       	subi	r25, 0x01	; 1
    1568:	a1 f0       	breq	.+40     	; 0x1592 <__addsf3x+0x96>
    156a:	ff 0f       	add	r31, r31
    156c:	bb 1f       	adc	r27, r27
    156e:	66 1f       	adc	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	88 1f       	adc	r24, r24
    1574:	c2 f7       	brpl	.-16     	; 0x1566 <__addsf3x+0x6a>
    1576:	0e c0       	rjmp	.+28     	; 0x1594 <__addsf3x+0x98>
    1578:	ba 0f       	add	r27, r26
    157a:	62 1f       	adc	r22, r18
    157c:	73 1f       	adc	r23, r19
    157e:	84 1f       	adc	r24, r20
    1580:	48 f4       	brcc	.+18     	; 0x1594 <__addsf3x+0x98>
    1582:	87 95       	ror	r24
    1584:	77 95       	ror	r23
    1586:	67 95       	ror	r22
    1588:	b7 95       	ror	r27
    158a:	f7 95       	ror	r31
    158c:	9e 3f       	cpi	r25, 0xFE	; 254
    158e:	08 f0       	brcs	.+2      	; 0x1592 <__addsf3x+0x96>
    1590:	b3 cf       	rjmp	.-154    	; 0x14f8 <__addsf3+0x1e>
    1592:	93 95       	inc	r25
    1594:	88 0f       	add	r24, r24
    1596:	08 f0       	brcs	.+2      	; 0x159a <__addsf3x+0x9e>
    1598:	99 27       	eor	r25, r25
    159a:	ee 0f       	add	r30, r30
    159c:	97 95       	ror	r25
    159e:	87 95       	ror	r24
    15a0:	08 95       	ret

000015a2 <__divsf3>:
    15a2:	0c d0       	rcall	.+24     	; 0x15bc <__divsf3x>
    15a4:	22 c1       	rjmp	.+580    	; 0x17ea <__fp_round>
    15a6:	1a d1       	rcall	.+564    	; 0x17dc <__fp_pscB>
    15a8:	40 f0       	brcs	.+16     	; 0x15ba <__divsf3+0x18>
    15aa:	11 d1       	rcall	.+546    	; 0x17ce <__fp_pscA>
    15ac:	30 f0       	brcs	.+12     	; 0x15ba <__divsf3+0x18>
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <__divsf3+0x16>
    15b0:	5f 3f       	cpi	r21, 0xFF	; 255
    15b2:	19 f0       	breq	.+6      	; 0x15ba <__divsf3+0x18>
    15b4:	da c0       	rjmp	.+436    	; 0x176a <__fp_inf>
    15b6:	51 11       	cpse	r21, r1
    15b8:	63 c1       	rjmp	.+710    	; 0x1880 <__fp_szero>
    15ba:	06 c1       	rjmp	.+524    	; 0x17c8 <__fp_nan>

000015bc <__divsf3x>:
    15bc:	27 d1       	rcall	.+590    	; 0x180c <__fp_split3>
    15be:	98 f3       	brcs	.-26     	; 0x15a6 <__divsf3+0x4>

000015c0 <__divsf3_pse>:
    15c0:	99 23       	and	r25, r25
    15c2:	c9 f3       	breq	.-14     	; 0x15b6 <__divsf3+0x14>
    15c4:	55 23       	and	r21, r21
    15c6:	b1 f3       	breq	.-20     	; 0x15b4 <__divsf3+0x12>
    15c8:	95 1b       	sub	r25, r21
    15ca:	55 0b       	sbc	r21, r21
    15cc:	bb 27       	eor	r27, r27
    15ce:	aa 27       	eor	r26, r26
    15d0:	62 17       	cp	r22, r18
    15d2:	73 07       	cpc	r23, r19
    15d4:	84 07       	cpc	r24, r20
    15d6:	38 f0       	brcs	.+14     	; 0x15e6 <__divsf3_pse+0x26>
    15d8:	9f 5f       	subi	r25, 0xFF	; 255
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	44 1f       	adc	r20, r20
    15e2:	aa 1f       	adc	r26, r26
    15e4:	a9 f3       	breq	.-22     	; 0x15d0 <__divsf3_pse+0x10>
    15e6:	33 d0       	rcall	.+102    	; 0x164e <__divsf3_pse+0x8e>
    15e8:	0e 2e       	mov	r0, r30
    15ea:	3a f0       	brmi	.+14     	; 0x15fa <__divsf3_pse+0x3a>
    15ec:	e0 e8       	ldi	r30, 0x80	; 128
    15ee:	30 d0       	rcall	.+96     	; 0x1650 <__divsf3_pse+0x90>
    15f0:	91 50       	subi	r25, 0x01	; 1
    15f2:	50 40       	sbci	r21, 0x00	; 0
    15f4:	e6 95       	lsr	r30
    15f6:	00 1c       	adc	r0, r0
    15f8:	ca f7       	brpl	.-14     	; 0x15ec <__divsf3_pse+0x2c>
    15fa:	29 d0       	rcall	.+82     	; 0x164e <__divsf3_pse+0x8e>
    15fc:	fe 2f       	mov	r31, r30
    15fe:	27 d0       	rcall	.+78     	; 0x164e <__divsf3_pse+0x8e>
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	88 1f       	adc	r24, r24
    1606:	bb 1f       	adc	r27, r27
    1608:	26 17       	cp	r18, r22
    160a:	37 07       	cpc	r19, r23
    160c:	48 07       	cpc	r20, r24
    160e:	ab 07       	cpc	r26, r27
    1610:	b0 e8       	ldi	r27, 0x80	; 128
    1612:	09 f0       	breq	.+2      	; 0x1616 <__divsf3_pse+0x56>
    1614:	bb 0b       	sbc	r27, r27
    1616:	80 2d       	mov	r24, r0
    1618:	bf 01       	movw	r22, r30
    161a:	ff 27       	eor	r31, r31
    161c:	93 58       	subi	r25, 0x83	; 131
    161e:	5f 4f       	sbci	r21, 0xFF	; 255
    1620:	2a f0       	brmi	.+10     	; 0x162c <__divsf3_pse+0x6c>
    1622:	9e 3f       	cpi	r25, 0xFE	; 254
    1624:	51 05       	cpc	r21, r1
    1626:	68 f0       	brcs	.+26     	; 0x1642 <__divsf3_pse+0x82>
    1628:	a0 c0       	rjmp	.+320    	; 0x176a <__fp_inf>
    162a:	2a c1       	rjmp	.+596    	; 0x1880 <__fp_szero>
    162c:	5f 3f       	cpi	r21, 0xFF	; 255
    162e:	ec f3       	brlt	.-6      	; 0x162a <__divsf3_pse+0x6a>
    1630:	98 3e       	cpi	r25, 0xE8	; 232
    1632:	dc f3       	brlt	.-10     	; 0x162a <__divsf3_pse+0x6a>
    1634:	86 95       	lsr	r24
    1636:	77 95       	ror	r23
    1638:	67 95       	ror	r22
    163a:	b7 95       	ror	r27
    163c:	f7 95       	ror	r31
    163e:	9f 5f       	subi	r25, 0xFF	; 255
    1640:	c9 f7       	brne	.-14     	; 0x1634 <__divsf3_pse+0x74>
    1642:	88 0f       	add	r24, r24
    1644:	91 1d       	adc	r25, r1
    1646:	96 95       	lsr	r25
    1648:	87 95       	ror	r24
    164a:	97 f9       	bld	r25, 7
    164c:	08 95       	ret
    164e:	e1 e0       	ldi	r30, 0x01	; 1
    1650:	66 0f       	add	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	88 1f       	adc	r24, r24
    1656:	bb 1f       	adc	r27, r27
    1658:	62 17       	cp	r22, r18
    165a:	73 07       	cpc	r23, r19
    165c:	84 07       	cpc	r24, r20
    165e:	ba 07       	cpc	r27, r26
    1660:	20 f0       	brcs	.+8      	; 0x166a <__divsf3_pse+0xaa>
    1662:	62 1b       	sub	r22, r18
    1664:	73 0b       	sbc	r23, r19
    1666:	84 0b       	sbc	r24, r20
    1668:	ba 0b       	sbc	r27, r26
    166a:	ee 1f       	adc	r30, r30
    166c:	88 f7       	brcc	.-30     	; 0x1650 <__divsf3_pse+0x90>
    166e:	e0 95       	com	r30
    1670:	08 95       	ret

00001672 <__fixunssfsi>:
    1672:	d4 d0       	rcall	.+424    	; 0x181c <__fp_splitA>
    1674:	88 f0       	brcs	.+34     	; 0x1698 <__fixunssfsi+0x26>
    1676:	9f 57       	subi	r25, 0x7F	; 127
    1678:	90 f0       	brcs	.+36     	; 0x169e <__fixunssfsi+0x2c>
    167a:	b9 2f       	mov	r27, r25
    167c:	99 27       	eor	r25, r25
    167e:	b7 51       	subi	r27, 0x17	; 23
    1680:	a0 f0       	brcs	.+40     	; 0x16aa <__fixunssfsi+0x38>
    1682:	d1 f0       	breq	.+52     	; 0x16b8 <__fixunssfsi+0x46>
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	1a f0       	brmi	.+6      	; 0x1694 <__fixunssfsi+0x22>
    168e:	ba 95       	dec	r27
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__fixunssfsi+0x12>
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <__fixunssfsi+0x46>
    1694:	b1 30       	cpi	r27, 0x01	; 1
    1696:	81 f0       	breq	.+32     	; 0x16b8 <__fixunssfsi+0x46>
    1698:	f2 d0       	rcall	.+484    	; 0x187e <__fp_zero>
    169a:	b1 e0       	ldi	r27, 0x01	; 1
    169c:	08 95       	ret
    169e:	ef c0       	rjmp	.+478    	; 0x187e <__fp_zero>
    16a0:	67 2f       	mov	r22, r23
    16a2:	78 2f       	mov	r23, r24
    16a4:	88 27       	eor	r24, r24
    16a6:	b8 5f       	subi	r27, 0xF8	; 248
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <__fixunssfsi+0x46>
    16aa:	b9 3f       	cpi	r27, 0xF9	; 249
    16ac:	cc f3       	brlt	.-14     	; 0x16a0 <__fixunssfsi+0x2e>
    16ae:	86 95       	lsr	r24
    16b0:	77 95       	ror	r23
    16b2:	67 95       	ror	r22
    16b4:	b3 95       	inc	r27
    16b6:	d9 f7       	brne	.-10     	; 0x16ae <__fixunssfsi+0x3c>
    16b8:	3e f4       	brtc	.+14     	; 0x16c8 <__fixunssfsi+0x56>
    16ba:	90 95       	com	r25
    16bc:	80 95       	com	r24
    16be:	70 95       	com	r23
    16c0:	61 95       	neg	r22
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	8f 4f       	sbci	r24, 0xFF	; 255
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	08 95       	ret

000016ca <__floatunsisf>:
    16ca:	e8 94       	clt
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <__floatsisf+0x12>

000016ce <__floatsisf>:
    16ce:	97 fb       	bst	r25, 7
    16d0:	3e f4       	brtc	.+14     	; 0x16e0 <__floatsisf+0x12>
    16d2:	90 95       	com	r25
    16d4:	80 95       	com	r24
    16d6:	70 95       	com	r23
    16d8:	61 95       	neg	r22
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	99 23       	and	r25, r25
    16e2:	a9 f0       	breq	.+42     	; 0x170e <__floatsisf+0x40>
    16e4:	f9 2f       	mov	r31, r25
    16e6:	96 e9       	ldi	r25, 0x96	; 150
    16e8:	bb 27       	eor	r27, r27
    16ea:	93 95       	inc	r25
    16ec:	f6 95       	lsr	r31
    16ee:	87 95       	ror	r24
    16f0:	77 95       	ror	r23
    16f2:	67 95       	ror	r22
    16f4:	b7 95       	ror	r27
    16f6:	f1 11       	cpse	r31, r1
    16f8:	f8 cf       	rjmp	.-16     	; 0x16ea <__floatsisf+0x1c>
    16fa:	fa f4       	brpl	.+62     	; 0x173a <__floatsisf+0x6c>
    16fc:	bb 0f       	add	r27, r27
    16fe:	11 f4       	brne	.+4      	; 0x1704 <__floatsisf+0x36>
    1700:	60 ff       	sbrs	r22, 0
    1702:	1b c0       	rjmp	.+54     	; 0x173a <__floatsisf+0x6c>
    1704:	6f 5f       	subi	r22, 0xFF	; 255
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	16 c0       	rjmp	.+44     	; 0x173a <__floatsisf+0x6c>
    170e:	88 23       	and	r24, r24
    1710:	11 f0       	breq	.+4      	; 0x1716 <__floatsisf+0x48>
    1712:	96 e9       	ldi	r25, 0x96	; 150
    1714:	11 c0       	rjmp	.+34     	; 0x1738 <__floatsisf+0x6a>
    1716:	77 23       	and	r23, r23
    1718:	21 f0       	breq	.+8      	; 0x1722 <__floatsisf+0x54>
    171a:	9e e8       	ldi	r25, 0x8E	; 142
    171c:	87 2f       	mov	r24, r23
    171e:	76 2f       	mov	r23, r22
    1720:	05 c0       	rjmp	.+10     	; 0x172c <__floatsisf+0x5e>
    1722:	66 23       	and	r22, r22
    1724:	71 f0       	breq	.+28     	; 0x1742 <__floatsisf+0x74>
    1726:	96 e8       	ldi	r25, 0x86	; 134
    1728:	86 2f       	mov	r24, r22
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	2a f0       	brmi	.+10     	; 0x173a <__floatsisf+0x6c>
    1730:	9a 95       	dec	r25
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	88 1f       	adc	r24, r24
    1738:	da f7       	brpl	.-10     	; 0x1730 <__floatsisf+0x62>
    173a:	88 0f       	add	r24, r24
    173c:	96 95       	lsr	r25
    173e:	87 95       	ror	r24
    1740:	97 f9       	bld	r25, 7
    1742:	08 95       	ret

00001744 <floor>:
    1744:	85 d0       	rcall	.+266    	; 0x1850 <__fp_trunc>
    1746:	80 f0       	brcs	.+32     	; 0x1768 <floor+0x24>
    1748:	9f 37       	cpi	r25, 0x7F	; 127
    174a:	40 f4       	brcc	.+16     	; 0x175c <floor+0x18>
    174c:	91 11       	cpse	r25, r1
    174e:	0e f0       	brts	.+2      	; 0x1752 <floor+0xe>
    1750:	97 c0       	rjmp	.+302    	; 0x1880 <__fp_szero>
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	80 e8       	ldi	r24, 0x80	; 128
    1758:	9f eb       	ldi	r25, 0xBF	; 191
    175a:	08 95       	ret
    175c:	26 f4       	brtc	.+8      	; 0x1766 <floor+0x22>
    175e:	1b 16       	cp	r1, r27
    1760:	61 1d       	adc	r22, r1
    1762:	71 1d       	adc	r23, r1
    1764:	81 1d       	adc	r24, r1
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <__fp_mintl>
    1768:	21 c0       	rjmp	.+66     	; 0x17ac <__fp_mpack>

0000176a <__fp_inf>:
    176a:	97 f9       	bld	r25, 7
    176c:	9f 67       	ori	r25, 0x7F	; 127
    176e:	80 e8       	ldi	r24, 0x80	; 128
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	08 95       	ret

00001776 <__fp_mintl>:
    1776:	88 23       	and	r24, r24
    1778:	71 f4       	brne	.+28     	; 0x1796 <__fp_mintl+0x20>
    177a:	77 23       	and	r23, r23
    177c:	21 f0       	breq	.+8      	; 0x1786 <__fp_mintl+0x10>
    177e:	98 50       	subi	r25, 0x08	; 8
    1780:	87 2b       	or	r24, r23
    1782:	76 2f       	mov	r23, r22
    1784:	07 c0       	rjmp	.+14     	; 0x1794 <__fp_mintl+0x1e>
    1786:	66 23       	and	r22, r22
    1788:	11 f4       	brne	.+4      	; 0x178e <__fp_mintl+0x18>
    178a:	99 27       	eor	r25, r25
    178c:	0d c0       	rjmp	.+26     	; 0x17a8 <__fp_mintl+0x32>
    178e:	90 51       	subi	r25, 0x10	; 16
    1790:	86 2b       	or	r24, r22
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	2a f0       	brmi	.+10     	; 0x17a2 <__fp_mintl+0x2c>
    1798:	9a 95       	dec	r25
    179a:	66 0f       	add	r22, r22
    179c:	77 1f       	adc	r23, r23
    179e:	88 1f       	adc	r24, r24
    17a0:	da f7       	brpl	.-10     	; 0x1798 <__fp_mintl+0x22>
    17a2:	88 0f       	add	r24, r24
    17a4:	96 95       	lsr	r25
    17a6:	87 95       	ror	r24
    17a8:	97 f9       	bld	r25, 7
    17aa:	08 95       	ret

000017ac <__fp_mpack>:
    17ac:	9f 3f       	cpi	r25, 0xFF	; 255
    17ae:	31 f0       	breq	.+12     	; 0x17bc <__fp_mpack_finite+0xc>

000017b0 <__fp_mpack_finite>:
    17b0:	91 50       	subi	r25, 0x01	; 1
    17b2:	20 f4       	brcc	.+8      	; 0x17bc <__fp_mpack_finite+0xc>
    17b4:	87 95       	ror	r24
    17b6:	77 95       	ror	r23
    17b8:	67 95       	ror	r22
    17ba:	b7 95       	ror	r27
    17bc:	88 0f       	add	r24, r24
    17be:	91 1d       	adc	r25, r1
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	97 f9       	bld	r25, 7
    17c6:	08 95       	ret

000017c8 <__fp_nan>:
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	80 ec       	ldi	r24, 0xC0	; 192
    17cc:	08 95       	ret

000017ce <__fp_pscA>:
    17ce:	00 24       	eor	r0, r0
    17d0:	0a 94       	dec	r0
    17d2:	16 16       	cp	r1, r22
    17d4:	17 06       	cpc	r1, r23
    17d6:	18 06       	cpc	r1, r24
    17d8:	09 06       	cpc	r0, r25
    17da:	08 95       	ret

000017dc <__fp_pscB>:
    17dc:	00 24       	eor	r0, r0
    17de:	0a 94       	dec	r0
    17e0:	12 16       	cp	r1, r18
    17e2:	13 06       	cpc	r1, r19
    17e4:	14 06       	cpc	r1, r20
    17e6:	05 06       	cpc	r0, r21
    17e8:	08 95       	ret

000017ea <__fp_round>:
    17ea:	09 2e       	mov	r0, r25
    17ec:	03 94       	inc	r0
    17ee:	00 0c       	add	r0, r0
    17f0:	11 f4       	brne	.+4      	; 0x17f6 <__fp_round+0xc>
    17f2:	88 23       	and	r24, r24
    17f4:	52 f0       	brmi	.+20     	; 0x180a <__fp_round+0x20>
    17f6:	bb 0f       	add	r27, r27
    17f8:	40 f4       	brcc	.+16     	; 0x180a <__fp_round+0x20>
    17fa:	bf 2b       	or	r27, r31
    17fc:	11 f4       	brne	.+4      	; 0x1802 <__fp_round+0x18>
    17fe:	60 ff       	sbrs	r22, 0
    1800:	04 c0       	rjmp	.+8      	; 0x180a <__fp_round+0x20>
    1802:	6f 5f       	subi	r22, 0xFF	; 255
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	8f 4f       	sbci	r24, 0xFF	; 255
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	08 95       	ret

0000180c <__fp_split3>:
    180c:	57 fd       	sbrc	r21, 7
    180e:	90 58       	subi	r25, 0x80	; 128
    1810:	44 0f       	add	r20, r20
    1812:	55 1f       	adc	r21, r21
    1814:	59 f0       	breq	.+22     	; 0x182c <__fp_splitA+0x10>
    1816:	5f 3f       	cpi	r21, 0xFF	; 255
    1818:	71 f0       	breq	.+28     	; 0x1836 <__fp_splitA+0x1a>
    181a:	47 95       	ror	r20

0000181c <__fp_splitA>:
    181c:	88 0f       	add	r24, r24
    181e:	97 fb       	bst	r25, 7
    1820:	99 1f       	adc	r25, r25
    1822:	61 f0       	breq	.+24     	; 0x183c <__fp_splitA+0x20>
    1824:	9f 3f       	cpi	r25, 0xFF	; 255
    1826:	79 f0       	breq	.+30     	; 0x1846 <__fp_splitA+0x2a>
    1828:	87 95       	ror	r24
    182a:	08 95       	ret
    182c:	12 16       	cp	r1, r18
    182e:	13 06       	cpc	r1, r19
    1830:	14 06       	cpc	r1, r20
    1832:	55 1f       	adc	r21, r21
    1834:	f2 cf       	rjmp	.-28     	; 0x181a <__fp_split3+0xe>
    1836:	46 95       	lsr	r20
    1838:	f1 df       	rcall	.-30     	; 0x181c <__fp_splitA>
    183a:	08 c0       	rjmp	.+16     	; 0x184c <__fp_splitA+0x30>
    183c:	16 16       	cp	r1, r22
    183e:	17 06       	cpc	r1, r23
    1840:	18 06       	cpc	r1, r24
    1842:	99 1f       	adc	r25, r25
    1844:	f1 cf       	rjmp	.-30     	; 0x1828 <__fp_splitA+0xc>
    1846:	86 95       	lsr	r24
    1848:	71 05       	cpc	r23, r1
    184a:	61 05       	cpc	r22, r1
    184c:	08 94       	sec
    184e:	08 95       	ret

00001850 <__fp_trunc>:
    1850:	e5 df       	rcall	.-54     	; 0x181c <__fp_splitA>
    1852:	a0 f0       	brcs	.+40     	; 0x187c <__fp_trunc+0x2c>
    1854:	be e7       	ldi	r27, 0x7E	; 126
    1856:	b9 17       	cp	r27, r25
    1858:	88 f4       	brcc	.+34     	; 0x187c <__fp_trunc+0x2c>
    185a:	bb 27       	eor	r27, r27
    185c:	9f 38       	cpi	r25, 0x8F	; 143
    185e:	60 f4       	brcc	.+24     	; 0x1878 <__fp_trunc+0x28>
    1860:	16 16       	cp	r1, r22
    1862:	b1 1d       	adc	r27, r1
    1864:	67 2f       	mov	r22, r23
    1866:	78 2f       	mov	r23, r24
    1868:	88 27       	eor	r24, r24
    186a:	98 5f       	subi	r25, 0xF8	; 248
    186c:	f7 cf       	rjmp	.-18     	; 0x185c <__fp_trunc+0xc>
    186e:	86 95       	lsr	r24
    1870:	77 95       	ror	r23
    1872:	67 95       	ror	r22
    1874:	b1 1d       	adc	r27, r1
    1876:	93 95       	inc	r25
    1878:	96 39       	cpi	r25, 0x96	; 150
    187a:	c8 f3       	brcs	.-14     	; 0x186e <__fp_trunc+0x1e>
    187c:	08 95       	ret

0000187e <__fp_zero>:
    187e:	e8 94       	clt

00001880 <__fp_szero>:
    1880:	bb 27       	eor	r27, r27
    1882:	66 27       	eor	r22, r22
    1884:	77 27       	eor	r23, r23
    1886:	cb 01       	movw	r24, r22
    1888:	97 f9       	bld	r25, 7
    188a:	08 95       	ret

0000188c <lrint>:
    188c:	c7 df       	rcall	.-114    	; 0x181c <__fp_splitA>
    188e:	a8 f1       	brcs	.+106    	; 0x18fa <lrint+0x6e>
    1890:	9e 57       	subi	r25, 0x7E	; 126
    1892:	a8 f1       	brcs	.+106    	; 0x18fe <lrint+0x72>
    1894:	98 51       	subi	r25, 0x18	; 24
    1896:	60 f0       	brcs	.+24     	; 0x18b0 <lrint+0x24>
    1898:	39 f1       	breq	.+78     	; 0x18e8 <lrint+0x5c>
    189a:	98 30       	cpi	r25, 0x08	; 8
    189c:	70 f5       	brcc	.+92     	; 0x18fa <lrint+0x6e>
    189e:	09 2e       	mov	r0, r25
    18a0:	99 27       	eor	r25, r25
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	d1 f7       	brne	.-12     	; 0x18a2 <lrint+0x16>
    18ae:	1c c0       	rjmp	.+56     	; 0x18e8 <lrint+0x5c>
    18b0:	bb 27       	eor	r27, r27
    18b2:	99 3f       	cpi	r25, 0xF9	; 249
    18b4:	4c f4       	brge	.+18     	; 0x18c8 <lrint+0x3c>
    18b6:	b1 11       	cpse	r27, r1
    18b8:	b1 e0       	ldi	r27, 0x01	; 1
    18ba:	b6 2b       	or	r27, r22
    18bc:	67 2f       	mov	r22, r23
    18be:	78 2f       	mov	r23, r24
    18c0:	88 27       	eor	r24, r24
    18c2:	98 5f       	subi	r25, 0xF8	; 248
    18c4:	b1 f7       	brne	.-20     	; 0x18b2 <lrint+0x26>
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <lrint+0x4c>
    18c8:	86 95       	lsr	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	b7 95       	ror	r27
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <lrint+0x48>
    18d2:	b1 60       	ori	r27, 0x01	; 1
    18d4:	93 95       	inc	r25
    18d6:	c1 f7       	brne	.-16     	; 0x18c8 <lrint+0x3c>
    18d8:	bb 0f       	add	r27, r27
    18da:	30 f4       	brcc	.+12     	; 0x18e8 <lrint+0x5c>
    18dc:	11 f4       	brne	.+4      	; 0x18e2 <lrint+0x56>
    18de:	60 ff       	sbrs	r22, 0
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <lrint+0x5c>
    18e2:	6f 5f       	subi	r22, 0xFF	; 255
    18e4:	7f 4f       	sbci	r23, 0xFF	; 255
    18e6:	8f 4f       	sbci	r24, 0xFF	; 255
    18e8:	3e f4       	brtc	.+14     	; 0x18f8 <lrint+0x6c>
    18ea:	90 95       	com	r25
    18ec:	80 95       	com	r24
    18ee:	70 95       	com	r23
    18f0:	61 95       	neg	r22
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	8f 4f       	sbci	r24, 0xFF	; 255
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	08 95       	ret
    18fa:	68 94       	set
    18fc:	c1 cf       	rjmp	.-126    	; 0x1880 <__fp_szero>
    18fe:	bf cf       	rjmp	.-130    	; 0x187e <__fp_zero>

00001900 <__mulsf3>:
    1900:	0b d0       	rcall	.+22     	; 0x1918 <__mulsf3x>
    1902:	73 cf       	rjmp	.-282    	; 0x17ea <__fp_round>
    1904:	64 df       	rcall	.-312    	; 0x17ce <__fp_pscA>
    1906:	28 f0       	brcs	.+10     	; 0x1912 <__mulsf3+0x12>
    1908:	69 df       	rcall	.-302    	; 0x17dc <__fp_pscB>
    190a:	18 f0       	brcs	.+6      	; 0x1912 <__mulsf3+0x12>
    190c:	95 23       	and	r25, r21
    190e:	09 f0       	breq	.+2      	; 0x1912 <__mulsf3+0x12>
    1910:	2c cf       	rjmp	.-424    	; 0x176a <__fp_inf>
    1912:	5a cf       	rjmp	.-332    	; 0x17c8 <__fp_nan>
    1914:	11 24       	eor	r1, r1
    1916:	b4 cf       	rjmp	.-152    	; 0x1880 <__fp_szero>

00001918 <__mulsf3x>:
    1918:	79 df       	rcall	.-270    	; 0x180c <__fp_split3>
    191a:	a0 f3       	brcs	.-24     	; 0x1904 <__mulsf3+0x4>

0000191c <__mulsf3_pse>:
    191c:	95 9f       	mul	r25, r21
    191e:	d1 f3       	breq	.-12     	; 0x1914 <__mulsf3+0x14>
    1920:	95 0f       	add	r25, r21
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	55 1f       	adc	r21, r21
    1926:	62 9f       	mul	r22, r18
    1928:	f0 01       	movw	r30, r0
    192a:	72 9f       	mul	r23, r18
    192c:	bb 27       	eor	r27, r27
    192e:	f0 0d       	add	r31, r0
    1930:	b1 1d       	adc	r27, r1
    1932:	63 9f       	mul	r22, r19
    1934:	aa 27       	eor	r26, r26
    1936:	f0 0d       	add	r31, r0
    1938:	b1 1d       	adc	r27, r1
    193a:	aa 1f       	adc	r26, r26
    193c:	64 9f       	mul	r22, r20
    193e:	66 27       	eor	r22, r22
    1940:	b0 0d       	add	r27, r0
    1942:	a1 1d       	adc	r26, r1
    1944:	66 1f       	adc	r22, r22
    1946:	82 9f       	mul	r24, r18
    1948:	22 27       	eor	r18, r18
    194a:	b0 0d       	add	r27, r0
    194c:	a1 1d       	adc	r26, r1
    194e:	62 1f       	adc	r22, r18
    1950:	73 9f       	mul	r23, r19
    1952:	b0 0d       	add	r27, r0
    1954:	a1 1d       	adc	r26, r1
    1956:	62 1f       	adc	r22, r18
    1958:	83 9f       	mul	r24, r19
    195a:	a0 0d       	add	r26, r0
    195c:	61 1d       	adc	r22, r1
    195e:	22 1f       	adc	r18, r18
    1960:	74 9f       	mul	r23, r20
    1962:	33 27       	eor	r19, r19
    1964:	a0 0d       	add	r26, r0
    1966:	61 1d       	adc	r22, r1
    1968:	23 1f       	adc	r18, r19
    196a:	84 9f       	mul	r24, r20
    196c:	60 0d       	add	r22, r0
    196e:	21 1d       	adc	r18, r1
    1970:	82 2f       	mov	r24, r18
    1972:	76 2f       	mov	r23, r22
    1974:	6a 2f       	mov	r22, r26
    1976:	11 24       	eor	r1, r1
    1978:	9f 57       	subi	r25, 0x7F	; 127
    197a:	50 40       	sbci	r21, 0x00	; 0
    197c:	8a f0       	brmi	.+34     	; 0x19a0 <__mulsf3_pse+0x84>
    197e:	e1 f0       	breq	.+56     	; 0x19b8 <__mulsf3_pse+0x9c>
    1980:	88 23       	and	r24, r24
    1982:	4a f0       	brmi	.+18     	; 0x1996 <__mulsf3_pse+0x7a>
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	bb 1f       	adc	r27, r27
    198a:	66 1f       	adc	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	91 50       	subi	r25, 0x01	; 1
    1992:	50 40       	sbci	r21, 0x00	; 0
    1994:	a9 f7       	brne	.-22     	; 0x1980 <__mulsf3_pse+0x64>
    1996:	9e 3f       	cpi	r25, 0xFE	; 254
    1998:	51 05       	cpc	r21, r1
    199a:	70 f0       	brcs	.+28     	; 0x19b8 <__mulsf3_pse+0x9c>
    199c:	e6 ce       	rjmp	.-564    	; 0x176a <__fp_inf>
    199e:	70 cf       	rjmp	.-288    	; 0x1880 <__fp_szero>
    19a0:	5f 3f       	cpi	r21, 0xFF	; 255
    19a2:	ec f3       	brlt	.-6      	; 0x199e <__mulsf3_pse+0x82>
    19a4:	98 3e       	cpi	r25, 0xE8	; 232
    19a6:	dc f3       	brlt	.-10     	; 0x199e <__mulsf3_pse+0x82>
    19a8:	86 95       	lsr	r24
    19aa:	77 95       	ror	r23
    19ac:	67 95       	ror	r22
    19ae:	b7 95       	ror	r27
    19b0:	f7 95       	ror	r31
    19b2:	e7 95       	ror	r30
    19b4:	9f 5f       	subi	r25, 0xFF	; 255
    19b6:	c1 f7       	brne	.-16     	; 0x19a8 <__mulsf3_pse+0x8c>
    19b8:	fe 2b       	or	r31, r30
    19ba:	88 0f       	add	r24, r24
    19bc:	91 1d       	adc	r25, r1
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	97 f9       	bld	r25, 7
    19c4:	08 95       	ret

000019c6 <__divmodhi4>:
    19c6:	97 fb       	bst	r25, 7
    19c8:	07 2e       	mov	r0, r23
    19ca:	16 f4       	brtc	.+4      	; 0x19d0 <__divmodhi4+0xa>
    19cc:	00 94       	com	r0
    19ce:	07 d0       	rcall	.+14     	; 0x19de <__divmodhi4_neg1>
    19d0:	77 fd       	sbrc	r23, 7
    19d2:	09 d0       	rcall	.+18     	; 0x19e6 <__divmodhi4_neg2>
    19d4:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__udivmodhi4>
    19d8:	07 fc       	sbrc	r0, 7
    19da:	05 d0       	rcall	.+10     	; 0x19e6 <__divmodhi4_neg2>
    19dc:	3e f4       	brtc	.+14     	; 0x19ec <__divmodhi4_exit>

000019de <__divmodhi4_neg1>:
    19de:	90 95       	com	r25
    19e0:	81 95       	neg	r24
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	08 95       	ret

000019e6 <__divmodhi4_neg2>:
    19e6:	70 95       	com	r23
    19e8:	61 95       	neg	r22
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255

000019ec <__divmodhi4_exit>:
    19ec:	08 95       	ret

000019ee <__udivmodsi4>:
    19ee:	a1 e2       	ldi	r26, 0x21	; 33
    19f0:	1a 2e       	mov	r1, r26
    19f2:	aa 1b       	sub	r26, r26
    19f4:	bb 1b       	sub	r27, r27
    19f6:	fd 01       	movw	r30, r26
    19f8:	0d c0       	rjmp	.+26     	; 0x1a14 <__udivmodsi4_ep>

000019fa <__udivmodsi4_loop>:
    19fa:	aa 1f       	adc	r26, r26
    19fc:	bb 1f       	adc	r27, r27
    19fe:	ee 1f       	adc	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	a2 17       	cp	r26, r18
    1a04:	b3 07       	cpc	r27, r19
    1a06:	e4 07       	cpc	r30, r20
    1a08:	f5 07       	cpc	r31, r21
    1a0a:	20 f0       	brcs	.+8      	; 0x1a14 <__udivmodsi4_ep>
    1a0c:	a2 1b       	sub	r26, r18
    1a0e:	b3 0b       	sbc	r27, r19
    1a10:	e4 0b       	sbc	r30, r20
    1a12:	f5 0b       	sbc	r31, r21

00001a14 <__udivmodsi4_ep>:
    1a14:	66 1f       	adc	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	1a 94       	dec	r1
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <__udivmodsi4_loop>
    1a20:	60 95       	com	r22
    1a22:	70 95       	com	r23
    1a24:	80 95       	com	r24
    1a26:	90 95       	com	r25
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	bd 01       	movw	r22, r26
    1a2e:	cf 01       	movw	r24, r30
    1a30:	08 95       	ret

00001a32 <__divmodsi4>:
    1a32:	05 2e       	mov	r0, r21
    1a34:	97 fb       	bst	r25, 7
    1a36:	1e f4       	brtc	.+6      	; 0x1a3e <__divmodsi4+0xc>
    1a38:	00 94       	com	r0
    1a3a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__negsi2>
    1a3e:	57 fd       	sbrc	r21, 7
    1a40:	07 d0       	rcall	.+14     	; 0x1a50 <__divmodsi4_neg2>
    1a42:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__udivmodsi4>
    1a46:	07 fc       	sbrc	r0, 7
    1a48:	03 d0       	rcall	.+6      	; 0x1a50 <__divmodsi4_neg2>
    1a4a:	4e f4       	brtc	.+18     	; 0x1a5e <__divmodsi4_exit>
    1a4c:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__negsi2>

00001a50 <__divmodsi4_neg2>:
    1a50:	50 95       	com	r21
    1a52:	40 95       	com	r20
    1a54:	30 95       	com	r19
    1a56:	21 95       	neg	r18
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a5c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a5e <__divmodsi4_exit>:
    1a5e:	08 95       	ret

00001a60 <__negsi2>:
    1a60:	90 95       	com	r25
    1a62:	80 95       	com	r24
    1a64:	70 95       	com	r23
    1a66:	61 95       	neg	r22
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	08 95       	ret

00001a70 <__umulhisi3>:
    1a70:	a2 9f       	mul	r26, r18
    1a72:	b0 01       	movw	r22, r0
    1a74:	b3 9f       	mul	r27, r19
    1a76:	c0 01       	movw	r24, r0
    1a78:	a3 9f       	mul	r26, r19
    1a7a:	70 0d       	add	r23, r0
    1a7c:	81 1d       	adc	r24, r1
    1a7e:	11 24       	eor	r1, r1
    1a80:	91 1d       	adc	r25, r1
    1a82:	b2 9f       	mul	r27, r18
    1a84:	70 0d       	add	r23, r0
    1a86:	81 1d       	adc	r24, r1
    1a88:	11 24       	eor	r1, r1
    1a8a:	91 1d       	adc	r25, r1
    1a8c:	08 95       	ret

00001a8e <__udivmodhi4>:
    1a8e:	aa 1b       	sub	r26, r26
    1a90:	bb 1b       	sub	r27, r27
    1a92:	51 e1       	ldi	r21, 0x11	; 17
    1a94:	07 c0       	rjmp	.+14     	; 0x1aa4 <__udivmodhi4_ep>

00001a96 <__udivmodhi4_loop>:
    1a96:	aa 1f       	adc	r26, r26
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	a6 17       	cp	r26, r22
    1a9c:	b7 07       	cpc	r27, r23
    1a9e:	10 f0       	brcs	.+4      	; 0x1aa4 <__udivmodhi4_ep>
    1aa0:	a6 1b       	sub	r26, r22
    1aa2:	b7 0b       	sbc	r27, r23

00001aa4 <__udivmodhi4_ep>:
    1aa4:	88 1f       	adc	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	5a 95       	dec	r21
    1aaa:	a9 f7       	brne	.-22     	; 0x1a96 <__udivmodhi4_loop>
    1aac:	80 95       	com	r24
    1aae:	90 95       	com	r25
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	08 95       	ret

00001ab6 <_exit>:
    1ab6:	f8 94       	cli

00001ab8 <__stop_program>:
    1ab8:	ff cf       	rjmp	.-2      	; 0x1ab8 <__stop_program>
