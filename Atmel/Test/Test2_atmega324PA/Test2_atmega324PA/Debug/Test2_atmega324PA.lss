
Test2_atmega324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000024c  00800100  00800100  00001560  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000178  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001032  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000069b  00000000  00000000  0000273a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007ca  00000000  00000000  00002dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000047c  00000000  00000000  000035a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000006e5  00000000  00000000  00003a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e85  00000000  00000000  00004101  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000150  00000000  00000000  00004f86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 66 07 	jmp	0xecc	; 0xecc <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_30>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec ee       	ldi	r30, 0xEC	; 236
      90:	f4 e1       	ldi	r31, 0x14	; 20
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 30       	cpi	r26, 0x00	; 0
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ac 34       	cpi	r26, 0x4C	; 76
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
      b2:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <executeCommands>:
		//TODO:: Please write your application code
	}
	
}

void executeCommands(){
      ba:	8f 92       	push	r8
      bc:	9f 92       	push	r9
      be:	af 92       	push	r10
      c0:	bf 92       	push	r11
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	28 97       	sbiw	r28, 0x08	; 8
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	f8 94       	cli
      dc:	de bf       	out	0x3e, r29	; 62
      de:	0f be       	out	0x3f, r0	; 63
      e0:	cd bf       	out	0x3d, r28	; 61
		//startUltrasonicMeasure();
	int8_t s;
	command lastcmd = getLastCommand(&s);
      e2:	ce 01       	movw	r24, r28
      e4:	01 96       	adiw	r24, 0x01	; 1
      e6:	0e 94 ee 06 	call	0xddc	; 0xddc <getLastCommand>
	if(s==1){
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	81 f4       	brne	.+32     	; 0x110 <executeCommands+0x56>
		//CHECK CRC
		
		changePwm_MotorLB(lastcmd.forward);
      f0:	04 2f       	mov	r16, r20
      f2:	11 27       	eor	r17, r17
      f4:	07 fd       	sbrc	r16, 7
      f6:	10 95       	com	r17
      f8:	c8 01       	movw	r24, r16
      fa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <changePwm_MotorLB>
		changePwm_MotorRB(lastcmd.forward);
      fe:	c8 01       	movw	r24, r16
     100:	0e 94 a0 01 	call	0x340	; 0x340 <changePwm_MotorRB>
		changePwm_MotorLF(lastcmd.forward);
     104:	c8 01       	movw	r24, r16
     106:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <changePwm_MotorLF>
		changePwm_MotorRF(lastcmd.forward);		
     10a:	c8 01       	movw	r24, r16
     10c:	0e 94 88 01 	call	0x310	; 0x310 <changePwm_MotorRF>
	}
	
	float US_distance =getAverageUltrasonicValue(5);// getLastUltrasonicValue();// getAverageUltrasonicValue(1);
     110:	85 e0       	ldi	r24, 0x05	; 5
     112:	0e 94 60 02 	call	0x4c0	; 0x4c0 <getAverageUltrasonicValue>
     116:	6b 01       	movw	r12, r22
     118:	7c 01       	movw	r14, r24


	float IR = getDistance();
     11a:	0e 94 22 02 	call	0x444	; 0x444 <getDistance>
     11e:	4b 01       	movw	r8, r22
     120:	5c 01       	movw	r10, r24
	
	if(IR<15.0 && (turning >> 1 ==0)){
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e7       	ldi	r20, 0x70	; 112
     128:	51 e4       	ldi	r21, 0x41	; 65
     12a:	0e 94 2e 01 	call	0x25c	; 0x25c <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	a4 f4       	brge	.+40     	; 0x15a <executeCommands+0xa0>
     132:	80 91 00 01 	lds	r24, 0x0100
     136:	90 91 01 01 	lds	r25, 0x0101
     13a:	95 95       	asr	r25
     13c:	87 95       	ror	r24
     13e:	89 2b       	or	r24, r25
     140:	61 f4       	brne	.+24     	; 0x15a <executeCommands+0xa0>
		turnLeft();
     142:	0e 94 c7 01 	call	0x38e	; 0x38e <turnLeft>
		turning|=1<<1;
     146:	80 91 00 01 	lds	r24, 0x0100
     14a:	90 91 01 01 	lds	r25, 0x0101
     14e:	82 60       	ori	r24, 0x02	; 2
     150:	90 93 01 01 	sts	0x0101, r25
     154:	80 93 00 01 	sts	0x0100, r24
     158:	22 c0       	rjmp	.+68     	; 0x19e <executeCommands+0xe4>
		//breakAll();
		}else if((turning >>1 ==1) && IR>=15.0){
     15a:	00 91 00 01 	lds	r16, 0x0100
     15e:	10 91 01 01 	lds	r17, 0x0101
     162:	c8 01       	movw	r24, r16
     164:	95 95       	asr	r25
     166:	87 95       	ror	r24
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	c9 f4       	brne	.+50     	; 0x19e <executeCommands+0xe4>
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	40 e7       	ldi	r20, 0x70	; 112
     172:	51 e4       	ldi	r21, 0x41	; 65
     174:	c5 01       	movw	r24, r10
     176:	b4 01       	movw	r22, r8
     178:	0e 94 56 01 	call	0x2ac	; 0x2ac <__gesf2>
     17c:	88 23       	and	r24, r24
     17e:	7c f0       	brlt	.+30     	; 0x19e <executeCommands+0xe4>
		turning&= ~(1<<1);
     180:	0d 7f       	andi	r16, 0xFD	; 253
     182:	10 93 01 01 	sts	0x0101, r17
     186:	00 93 00 01 	sts	0x0100, r16
		stopTurning();
     18a:	0e 94 b8 01 	call	0x370	; 0x370 <stopTurning>
		changeMotorDirectionLB();
     18e:	0e 94 c4 01 	call	0x388	; 0x388 <changeMotorDirectionLB>
		changeMotorDirectionRB();
     192:	0e 94 cf 01 	call	0x39e	; 0x39e <changeMotorDirectionRB>
		changeMotorDirectionLF();
     196:	0e 94 c1 01 	call	0x382	; 0x382 <changeMotorDirectionLF>
		changeMotorDirectionRF();
     19a:	0e 94 cc 01 	call	0x398	; 0x398 <changeMotorDirectionRF>
	}	
	

	if(US_distance<25.0 && ((turning & 1) == 0)){
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	48 ec       	ldi	r20, 0xC8	; 200
     1a4:	51 e4       	ldi	r21, 0x41	; 65
     1a6:	c7 01       	movw	r24, r14
     1a8:	b6 01       	movw	r22, r12
     1aa:	0e 94 2e 01 	call	0x25c	; 0x25c <__cmpsf2>
     1ae:	88 23       	and	r24, r24
     1b0:	94 f4       	brge	.+36     	; 0x1d6 <executeCommands+0x11c>
     1b2:	00 91 00 01 	lds	r16, 0x0100
     1b6:	10 91 01 01 	lds	r17, 0x0101
     1ba:	00 fd       	sbrc	r16, 0
     1bc:	12 c0       	rjmp	.+36     	; 0x1e2 <executeCommands+0x128>
		turnLeft();
     1be:	0e 94 c7 01 	call	0x38e	; 0x38e <turnLeft>
		turning|=1;
     1c2:	80 91 00 01 	lds	r24, 0x0100
     1c6:	90 91 01 01 	lds	r25, 0x0101
     1ca:	81 60       	ori	r24, 0x01	; 1
     1cc:	90 93 01 01 	sts	0x0101, r25
     1d0:	80 93 00 01 	sts	0x0100, r24
     1d4:	1f c0       	rjmp	.+62     	; 0x214 <executeCommands+0x15a>
		//breakAll();
		}else if(((turning &1) ==1) && US_distance>=25.0){
     1d6:	00 91 00 01 	lds	r16, 0x0100
     1da:	10 91 01 01 	lds	r17, 0x0101
     1de:	00 ff       	sbrs	r16, 0
     1e0:	19 c0       	rjmp	.+50     	; 0x214 <executeCommands+0x15a>
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	48 ec       	ldi	r20, 0xC8	; 200
     1e8:	51 e4       	ldi	r21, 0x41	; 65
     1ea:	c7 01       	movw	r24, r14
     1ec:	b6 01       	movw	r22, r12
     1ee:	0e 94 56 01 	call	0x2ac	; 0x2ac <__gesf2>
     1f2:	88 23       	and	r24, r24
     1f4:	7c f0       	brlt	.+30     	; 0x214 <executeCommands+0x15a>
		turning&=~1;
     1f6:	0e 7f       	andi	r16, 0xFE	; 254
     1f8:	10 93 01 01 	sts	0x0101, r17
     1fc:	00 93 00 01 	sts	0x0100, r16
		stopTurning();
     200:	0e 94 b8 01 	call	0x370	; 0x370 <stopTurning>
		changeMotorDirectionLB();
     204:	0e 94 c4 01 	call	0x388	; 0x388 <changeMotorDirectionLB>
		changeMotorDirectionRB();
     208:	0e 94 cf 01 	call	0x39e	; 0x39e <changeMotorDirectionRB>
		changeMotorDirectionLF();
     20c:	0e 94 c1 01 	call	0x382	; 0x382 <changeMotorDirectionLF>
		changeMotorDirectionRF();
     210:	0e 94 cc 01 	call	0x398	; 0x398 <changeMotorDirectionRF>
	}
	
     214:	28 96       	adiw	r28, 0x08	; 8
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	df 90       	pop	r13
     22e:	cf 90       	pop	r12
     230:	bf 90       	pop	r11
     232:	af 90       	pop	r10
     234:	9f 90       	pop	r9
     236:	8f 90       	pop	r8
     238:	08 95       	ret

0000023a <main>:


int main(void)
{
	
	initUSART1(9600);
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	95 e2       	ldi	r25, 0x25	; 37
     23e:	0e 94 4c 05 	call	0xa98	; 0xa98 <initUSART1>
	initTimer0();
     242:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <initTimer0>
	initTimer2();
     246:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <initTimer2>
	initSensors();
     24a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <initSensors>
	
	DDRA= (1<<PORTA1);
	PORTA &= ~(1<<PORTA1);
*/
	
	LED_CMD_DDR |= (1<<LED_CMD_PINx);
     24e:	0f 9a       	sbi	0x01, 7	; 1
	//startUltrasonicMeasure();
//	setUltrasonicManualMeasure(1);
	//char data;
	
	sei();
     250:	78 94       	sei

	breakAll();
     252:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <breakAll>
	// startPwm(52);
	
	while(1)
	{
		
		executeCommands();
     256:	0e 94 5d 00 	call	0xba	; 0xba <executeCommands>
     25a:	fd cf       	rjmp	.-6      	; 0x256 <main+0x1c>

0000025c <__cmpsf2>:
     25c:	03 d0       	rcall	.+6      	; 0x264 <__fp_cmp>
     25e:	08 f4       	brcc	.+2      	; 0x262 <__cmpsf2+0x6>
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	08 95       	ret

00000264 <__fp_cmp>:
     264:	99 0f       	add	r25, r25
     266:	00 08       	sbc	r0, r0
     268:	55 0f       	add	r21, r21
     26a:	aa 0b       	sbc	r26, r26
     26c:	e0 e8       	ldi	r30, 0x80	; 128
     26e:	fe ef       	ldi	r31, 0xFE	; 254
     270:	16 16       	cp	r1, r22
     272:	17 06       	cpc	r1, r23
     274:	e8 07       	cpc	r30, r24
     276:	f9 07       	cpc	r31, r25
     278:	c0 f0       	brcs	.+48     	; 0x2aa <__fp_cmp+0x46>
     27a:	12 16       	cp	r1, r18
     27c:	13 06       	cpc	r1, r19
     27e:	e4 07       	cpc	r30, r20
     280:	f5 07       	cpc	r31, r21
     282:	98 f0       	brcs	.+38     	; 0x2aa <__fp_cmp+0x46>
     284:	62 1b       	sub	r22, r18
     286:	73 0b       	sbc	r23, r19
     288:	84 0b       	sbc	r24, r20
     28a:	95 0b       	sbc	r25, r21
     28c:	39 f4       	brne	.+14     	; 0x29c <__fp_cmp+0x38>
     28e:	0a 26       	eor	r0, r26
     290:	61 f0       	breq	.+24     	; 0x2aa <__fp_cmp+0x46>
     292:	23 2b       	or	r18, r19
     294:	24 2b       	or	r18, r20
     296:	25 2b       	or	r18, r21
     298:	21 f4       	brne	.+8      	; 0x2a2 <__fp_cmp+0x3e>
     29a:	08 95       	ret
     29c:	0a 26       	eor	r0, r26
     29e:	09 f4       	brne	.+2      	; 0x2a2 <__fp_cmp+0x3e>
     2a0:	a1 40       	sbci	r26, 0x01	; 1
     2a2:	a6 95       	lsr	r26
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	81 1d       	adc	r24, r1
     2a8:	81 1d       	adc	r24, r1
     2aa:	08 95       	ret

000002ac <__gesf2>:
     2ac:	db df       	rcall	.-74     	; 0x264 <__fp_cmp>
     2ae:	08 f4       	brcc	.+2      	; 0x2b2 <__gesf2+0x6>
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
     2b2:	08 95       	ret

000002b4 <changePwm_MotorLF>:
//#include "io_definitions.h"
//#include "PWM_lib.h"


void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     2b4:	bc 01       	movw	r22, r24
     2b6:	88 27       	eor	r24, r24
     2b8:	77 fd       	sbrc	r23, 7
     2ba:	80 95       	com	r24
     2bc:	98 2f       	mov	r25, r24
     2be:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	48 ec       	ldi	r20, 0xC8	; 200
     2c8:	52 e4       	ldi	r21, 0x42	; 66
     2ca:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	4f e7       	ldi	r20, 0x7F	; 127
     2d4:	53 e4       	ldi	r21, 0x43	; 67
     2d6:	0e 94 c1 09 	call	0x1382	; 0x1382 <__mulsf3>
     2da:	0e 94 cd 08 	call	0x119a	; 0x119a <__fixunssfsi>
     2de:	67 bd       	out	0x27, r22	; 39
     2e0:	08 95       	ret

000002e2 <changePwm_MotorLB>:
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     2e2:	bc 01       	movw	r22, r24
     2e4:	88 27       	eor	r24, r24
     2e6:	77 fd       	sbrc	r23, 7
     2e8:	80 95       	com	r24
     2ea:	98 2f       	mov	r25, r24
     2ec:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	48 ec       	ldi	r20, 0xC8	; 200
     2f6:	52 e4       	ldi	r21, 0x42	; 66
     2f8:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	4f e7       	ldi	r20, 0x7F	; 127
     302:	53 e4       	ldi	r21, 0x43	; 67
     304:	0e 94 c1 09 	call	0x1382	; 0x1382 <__mulsf3>
     308:	0e 94 cd 08 	call	0x119a	; 0x119a <__fixunssfsi>
     30c:	68 bd       	out	0x28, r22	; 40
     30e:	08 95       	ret

00000310 <changePwm_MotorRF>:
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     310:	bc 01       	movw	r22, r24
     312:	88 27       	eor	r24, r24
     314:	77 fd       	sbrc	r23, 7
     316:	80 95       	com	r24
     318:	98 2f       	mov	r25, r24
     31a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	48 ec       	ldi	r20, 0xC8	; 200
     324:	52 e4       	ldi	r21, 0x42	; 66
     326:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	4f e7       	ldi	r20, 0x7F	; 127
     330:	53 e4       	ldi	r21, 0x43	; 67
     332:	0e 94 c1 09 	call	0x1382	; 0x1382 <__mulsf3>
     336:	0e 94 cd 08 	call	0x119a	; 0x119a <__fixunssfsi>
     33a:	60 93 b3 00 	sts	0x00B3, r22
     33e:	08 95       	ret

00000340 <changePwm_MotorRB>:
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     340:	bc 01       	movw	r22, r24
     342:	88 27       	eor	r24, r24
     344:	77 fd       	sbrc	r23, 7
     346:	80 95       	com	r24
     348:	98 2f       	mov	r25, r24
     34a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	48 ec       	ldi	r20, 0xC8	; 200
     354:	52 e4       	ldi	r21, 0x42	; 66
     356:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4f e7       	ldi	r20, 0x7F	; 127
     360:	53 e4       	ldi	r21, 0x43	; 67
     362:	0e 94 c1 09 	call	0x1382	; 0x1382 <__mulsf3>
     366:	0e 94 cd 08 	call	0x119a	; 0x119a <__fixunssfsi>
     36a:	60 93 b4 00 	sts	0x00B4, r22
     36e:	08 95       	ret

00000370 <stopTurning>:
}
	 

void stopTurning(){
		//setez directia initiala
		MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     370:	29 9a       	sbi	0x05, 1	; 5
		MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     372:	28 98       	cbi	0x05, 0	; 5
		MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     374:	2d 9a       	sbi	0x05, 5	; 5
		MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     376:	2a 98       	cbi	0x05, 2	; 5
		
		
		MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     378:	47 9a       	sbi	0x08, 7	; 8
		MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     37a:	46 98       	cbi	0x08, 6	; 8
		MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     37c:	41 9a       	sbi	0x08, 1	; 8
		MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);
     37e:	40 98       	cbi	0x08, 0	; 8
     380:	08 95       	ret

00000382 <changeMotorDirectionLF>:
	changeMotorDirectionRF();
}


void changeMotorDirectionLF(){
	MOTOR_LF_DIR_PIN1 |= (1<<MOTOR_LF_DIR_PIN1x);
     382:	18 9a       	sbi	0x03, 0	; 3
	MOTOR_LF_DIR_PIN2 |= (1<<MOTOR_LF_DIR_PIN2x);
     384:	19 9a       	sbi	0x03, 1	; 3
     386:	08 95       	ret

00000388 <changeMotorDirectionLB>:
}
	
void changeMotorDirectionLB(){
	MOTOR_LB_DIR_PIN1 |= (1<<MOTOR_LB_DIR_PIN1x);
     388:	1a 9a       	sbi	0x03, 2	; 3
	MOTOR_LB_DIR_PIN2 |= (1<<MOTOR_LB_DIR_PIN2x);
     38a:	1d 9a       	sbi	0x03, 5	; 3
     38c:	08 95       	ret

0000038e <turnLeft>:
	
	
}

void turnLeft(){
	changeMotorDirectionLB();
     38e:	0e 94 c4 01 	call	0x388	; 0x388 <changeMotorDirectionLB>
	changeMotorDirectionLF();
     392:	0e 94 c1 01 	call	0x382	; 0x382 <changeMotorDirectionLF>
     396:	08 95       	ret

00000398 <changeMotorDirectionRF>:
	MOTOR_LB_DIR_PIN1 |= (1<<MOTOR_LB_DIR_PIN1x);
	MOTOR_LB_DIR_PIN2 |= (1<<MOTOR_LB_DIR_PIN2x);
}
	  
void changeMotorDirectionRF(){
	MOTOR_RF_DIR_PIN1 |= (1<<MOTOR_RF_DIR_PIN1x);	
     398:	36 9a       	sbi	0x06, 6	; 6
	MOTOR_RF_DIR_PIN2 |= (1<<MOTOR_RF_DIR_PIN2x);
     39a:	37 9a       	sbi	0x06, 7	; 6
     39c:	08 95       	ret

0000039e <changeMotorDirectionRB>:
}
	 
void changeMotorDirectionRB(){
	MOTOR_RB_DIR_PIN1 |= (1<<MOTOR_RB_DIR_PIN1x);
     39e:	30 9a       	sbi	0x06, 0	; 6
	MOTOR_RB_DIR_PIN2 |= (1<<MOTOR_RB_DIR_PIN2x);
     3a0:	31 9a       	sbi	0x06, 1	; 6
     3a2:	08 95       	ret

000003a4 <breakAll>:
//#include "io_definitions.h"
//#include "PWM_lib.h"


void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     3a4:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     3a6:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     3a8:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     3ac:	10 92 b4 00 	sts	0x00B4, r1
     3b0:	08 95       	ret

000003b2 <initTimer0>:
}

void initTimer0(){
	
	//setez pini de directie
	MOTOR_LF_DIR_DDR1 |= (1<<MOTOR_LF_DIR_PIN1x);
     3b2:	20 9a       	sbi	0x04, 0	; 4
	MOTOR_LF_DIR_DDR2 |= (1<<MOTOR_LF_DIR_PIN2x);
     3b4:	21 9a       	sbi	0x04, 1	; 4
	MOTOR_LB_DIR_DDR1 |= (1<<MOTOR_LB_DIR_PIN1x);
     3b6:	22 9a       	sbi	0x04, 2	; 4
	MOTOR_LB_DIR_DDR2 |= (1<<MOTOR_LB_DIR_PIN1x);
     3b8:	22 9a       	sbi	0x04, 2	; 4
	
	//setez directia initiala
	MOTOR_LF_DIR_PORT2 |= (1<<MOTOR_LF_DIR_PIN2x);
     3ba:	29 9a       	sbi	0x05, 1	; 5
	MOTOR_LF_DIR_PORT1 &= ~(1<<MOTOR_LF_DIR_PIN1x);
     3bc:	28 98       	cbi	0x05, 0	; 5
	MOTOR_LB_DIR_PORT2 |= (1<<MOTOR_LB_DIR_PIN2x);
     3be:	2d 9a       	sbi	0x05, 5	; 5
	MOTOR_LB_DIR_PORT1 &= ~(1<<MOTOR_LB_DIR_PIN1x);
     3c0:	2a 98       	cbi	0x05, 2	; 5
	
	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
     3c2:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
     3c4:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
     3c6:	84 b5       	in	r24, 0x24	; 36
     3c8:	80 68       	ori	r24, 0x80	; 128
     3ca:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
     3cc:	84 b5       	in	r24, 0x24	; 36
     3ce:	8f 7b       	andi	r24, 0xBF	; 191
     3d0:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
     3d2:	84 b5       	in	r24, 0x24	; 36
     3d4:	80 62       	ori	r24, 0x20	; 32
     3d6:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
     3d8:	84 b5       	in	r24, 0x24	; 36
     3da:	8f 7e       	andi	r24, 0xEF	; 239
     3dc:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
     3de:	84 b5       	in	r24, 0x24	; 36
     3e0:	83 60       	ori	r24, 0x03	; 3
     3e2:	84 bd       	out	0x24, r24	; 36
//#include "io_definitions.h"
//#include "PWM_lib.h"


void changePwm_MotorLF(int duty){	
	OCR0A = ((duty/100.0) * 255);
     3e4:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
     3e6:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
     3e8:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	85 bd       	out	0x25, r24	; 37
     3ee:	08 95       	ret

000003f0 <initTimer2>:
}

void initTimer2(){
	
	//setez pini de directie
	MOTOR_RF_DIR_DDR1 |= (1<<MOTOR_RF_DIR_PIN1x);
     3f0:	3e 9a       	sbi	0x07, 6	; 7
	MOTOR_RF_DIR_DDR2 |= (1<<MOTOR_RF_DIR_PIN2x);
     3f2:	3f 9a       	sbi	0x07, 7	; 7
	MOTOR_RB_DIR_DDR1 |= (1<<MOTOR_RB_DIR_PIN1x);
     3f4:	38 9a       	sbi	0x07, 0	; 7
	MOTOR_RB_DIR_DDR2 |= (1<<MOTOR_RB_DIR_PIN2x);
     3f6:	39 9a       	sbi	0x07, 1	; 7
	
	//setez directia initiala
	MOTOR_RF_DIR_PORT2 |= (1<<MOTOR_RF_DIR_PIN2x);
     3f8:	47 9a       	sbi	0x08, 7	; 8
	MOTOR_RF_DIR_PORT1 &= ~(1<<MOTOR_RF_DIR_PIN1x);
     3fa:	46 98       	cbi	0x08, 6	; 8
	MOTOR_RB_DIR_PORT2 |= (1<<MOTOR_RB_DIR_PIN2x);
     3fc:	41 9a       	sbi	0x08, 1	; 8
	MOTOR_RB_DIR_PORT1 &= ~(1<<MOTOR_RB_DIR_PIN1x);	
     3fe:	40 98       	cbi	0x08, 0	; 8
	
	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
     400:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
     402:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
     404:	e0 eb       	ldi	r30, 0xB0	; 176
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	80 68       	ori	r24, 0x80	; 128
     40c:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
     40e:	80 81       	ld	r24, Z
     410:	8f 7b       	andi	r24, 0xBF	; 191
     412:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR2A |= (1<< COM2B1);
     414:	80 81       	ld	r24, Z
     416:	80 62       	ori	r24, 0x20	; 32
     418:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2B0);
     41a:	80 81       	ld	r24, Z
     41c:	8f 7e       	andi	r24, 0xEF	; 239
     41e:	80 83       	st	Z, r24
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     420:	80 81       	ld	r24, Z
     422:	83 60       	ori	r24, 0x03	; 3
     424:	80 83       	st	Z, r24
void changePwm_MotorLB(int duty){
 OCR0B = ((duty/100.0) * 255);
}

void changePwm_MotorRF(int duty){
OCR2A = ((duty/100.0) * 255);
     426:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(int duty){
OCR2B = ((duty/100.0) * 255);
     42a:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
     42e:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
     432:	e1 eb       	ldi	r30, 0xB1	; 177
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	8c 7f       	andi	r24, 0xFC	; 252
     43a:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
     43c:	80 81       	ld	r24, Z
     43e:	84 60       	ori	r24, 0x04	; 4
     440:	80 83       	st	Z, r24
     442:	08 95       	ret

00000444 <getDistance>:
volatile uint8_t US_data_part_no = 0;
volatile uint8_t US_pos_in_buffer = 0;
volatile uint8_t US_manual_start = 0;


float getDistance(){
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
	
	distance=0.0;
     448:	10 92 09 01 	sts	0x0109, r1
     44c:	10 92 0a 01 	sts	0x010A, r1
     450:	10 92 0b 01 	sts	0x010B, r1
     454:	10 92 0c 01 	sts	0x010C, r1
	int j;
	for (j=0;j<MAX;j++)
     458:	c0 e0       	ldi	r28, 0x00	; 0
     45a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		distance += dis[j];
     45c:	fe 01       	movw	r30, r28
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	e0 5c       	subi	r30, 0xC0	; 192
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	60 81       	ld	r22, Z
     46c:	71 81       	ldd	r23, Z+1	; 0x01
     46e:	82 81       	ldd	r24, Z+2	; 0x02
     470:	93 81       	ldd	r25, Z+3	; 0x03
     472:	20 91 09 01 	lds	r18, 0x0109
     476:	30 91 0a 01 	lds	r19, 0x010A
     47a:	40 91 0b 01 	lds	r20, 0x010B
     47e:	50 91 0c 01 	lds	r21, 0x010C
     482:	0e 94 01 08 	call	0x1002	; 0x1002 <__addsf3>
     486:	60 93 09 01 	sts	0x0109, r22
     48a:	70 93 0a 01 	sts	0x010A, r23
     48e:	80 93 0b 01 	sts	0x010B, r24
     492:	90 93 0c 01 	sts	0x010C, r25

float getDistance(){
	
	distance=0.0;
	int j;
	for (j=0;j<MAX;j++)
     496:	21 96       	adiw	r28, 0x01	; 1
     498:	c3 30       	cpi	r28, 0x03	; 3
     49a:	d1 05       	cpc	r29, r1
     49c:	f9 f6       	brne	.-66     	; 0x45c <getDistance+0x18>
	{
		distance += dis[j];
	}
	
	return distance/MAX;
     49e:	60 91 09 01 	lds	r22, 0x0109
     4a2:	70 91 0a 01 	lds	r23, 0x010A
     4a6:	80 91 0b 01 	lds	r24, 0x010B
     4aa:	90 91 0c 01 	lds	r25, 0x010C
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e4       	ldi	r20, 0x40	; 64
     4b4:	50 e4       	ldi	r21, 0x40	; 64
     4b6:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <getAverageUltrasonicValue>:

float getLastUltrasonicValue(){
	return UltraSonicValues[US_pos_in_buffer-1];//because it is always the next position
}

float getAverageUltrasonicValue(uint8_t no_of_values){
     4c0:	6f 92       	push	r6
     4c2:	7f 92       	push	r7
     4c4:	8f 92       	push	r8
     4c6:	9f 92       	push	r9
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	78 2e       	mov	r7, r24
     4de:	8a e0       	ldi	r24, 0x0A	; 10
     4e0:	87 15       	cp	r24, r7
     4e2:	20 f4       	brcc	.+8      	; 0x4ec <getAverageUltrasonicValue+0x2c>
     4e4:	0f 2e       	mov	r0, r31
     4e6:	fa e0       	ldi	r31, 0x0A	; 10
     4e8:	7f 2e       	mov	r7, r31
     4ea:	f0 2d       	mov	r31, r0
	
	float averrage = 0.0;
	uint8_t i;
	uint8_t good_vals=0;
	
	for (i=0; i<no_of_values; i++)
     4ec:	77 20       	and	r7, r7
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <getAverageUltrasonicValue+0x32>
     4f0:	44 c0       	rjmp	.+136    	; 0x57a <getAverageUltrasonicValue+0xba>
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	d0 e0       	ldi	r29, 0x00	; 0
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	float averrage = 0.0;
	uint8_t i;
	uint8_t good_vals=0;
     4f6:	61 2c       	mov	r6, r1
float getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	float averrage = 0.0;
     4f8:	81 2c       	mov	r8, r1
     4fa:	91 2c       	mov	r9, r1
     4fc:	54 01       	movw	r10, r8
     4fe:	0a e0       	ldi	r16, 0x0A	; 10
     500:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t good_vals=0;
	
	for (i=0; i<no_of_values; i++)
	{
		float aux;
		if(US_pos_in_buffer-i >= 0){ // rap around
     502:	20 91 03 01 	lds	r18, 0x0103
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	2c 1b       	sub	r18, r28
     50a:	3d 0b       	sbc	r19, r29
     50c:	82 f0       	brmi	.+32     	; 0x52e <getAverageUltrasonicValue+0x6e>
			aux = UltraSonicValues[US_pos_in_buffer-i];
     50e:	e0 91 03 01 	lds	r30, 0x0103
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	ec 1b       	sub	r30, r28
     516:	fd 0b       	sbc	r31, r29
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	ec 5e       	subi	r30, 0xEC	; 236
     522:	fe 4f       	sbci	r31, 0xFE	; 254
     524:	c0 80       	ld	r12, Z
     526:	d1 80       	ldd	r13, Z+1	; 0x01
     528:	e2 80       	ldd	r14, Z+2	; 0x02
     52a:	f3 80       	ldd	r15, Z+3	; 0x03
     52c:	11 c0       	rjmp	.+34     	; 0x550 <getAverageUltrasonicValue+0x90>
		}else{
			aux = UltraSonicValues[MAX_ULTRASONIC_VALUES - i + US_pos_in_buffer];
     52e:	80 91 03 01 	lds	r24, 0x0103
     532:	f8 01       	movw	r30, r16
     534:	ec 1b       	sub	r30, r28
     536:	fd 0b       	sbc	r31, r29
     538:	e8 0f       	add	r30, r24
     53a:	f1 1d       	adc	r31, r1
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	ec 5e       	subi	r30, 0xEC	; 236
     546:	fe 4f       	sbci	r31, 0xFE	; 254
     548:	c0 80       	ld	r12, Z
     54a:	d1 80       	ldd	r13, Z+1	; 0x01
     54c:	e2 80       	ldd	r14, Z+2	; 0x02
     54e:	f3 80       	ldd	r15, Z+3	; 0x03
		}
		
		averrage += aux;
     550:	a7 01       	movw	r20, r14
     552:	96 01       	movw	r18, r12
     554:	c5 01       	movw	r24, r10
     556:	b4 01       	movw	r22, r8
     558:	0e 94 01 08 	call	0x1002	; 0x1002 <__addsf3>
     55c:	4b 01       	movw	r8, r22
     55e:	5c 01       	movw	r10, r24
		
		if(aux){ // only if the value is nonzero
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	a9 01       	movw	r20, r18
     566:	c7 01       	movw	r24, r14
     568:	b6 01       	movw	r22, r12
     56a:	0e 94 2e 01 	call	0x25c	; 0x25c <__cmpsf2>
     56e:	81 11       	cpse	r24, r1
			good_vals++;
     570:	63 94       	inc	r6
     572:	21 96       	adiw	r28, 0x01	; 1
	
	float averrage = 0.0;
	uint8_t i;
	uint8_t good_vals=0;
	
	for (i=0; i<no_of_values; i++)
     574:	c7 15       	cp	r28, r7
     576:	28 f2       	brcs	.-118    	; 0x502 <getAverageUltrasonicValue+0x42>
     578:	04 c0       	rjmp	.+8      	; 0x582 <getAverageUltrasonicValue+0xc2>
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	float averrage = 0.0;
	uint8_t i;
	uint8_t good_vals=0;
     57a:	61 2c       	mov	r6, r1
float getAverageUltrasonicValue(uint8_t no_of_values){
	if (no_of_values > MAX_ULTRASONIC_VALUES){
		no_of_values = MAX_ULTRASONIC_VALUES;
	}
	
	float averrage = 0.0;
     57c:	81 2c       	mov	r8, r1
     57e:	91 2c       	mov	r9, r1
     580:	54 01       	movw	r10, r8
			good_vals++;
		}
		
	}
	
	averrage /= (float) good_vals;
     582:	66 2d       	mov	r22, r6
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__floatunsisf>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
     592:	c5 01       	movw	r24, r10
     594:	b4 01       	movw	r22, r8
     596:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
	
	return averrage;
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	df 90       	pop	r13
     5a8:	cf 90       	pop	r12
     5aa:	bf 90       	pop	r11
     5ac:	af 90       	pop	r10
     5ae:	9f 90       	pop	r9
     5b0:	8f 90       	pop	r8
     5b2:	7f 90       	pop	r7
     5b4:	6f 90       	pop	r6
     5b6:	08 95       	ret

000005b8 <initUSART0>:
	initUSART0(9600);
	//setUltrasonicManualMeasure(1);
	
}

void initUSART0(int baud){
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	9c 01       	movw	r18, r24
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
	{
		UltraSonicValues[i] = 0.0;
     5c2:	fa 01       	movw	r30, r20
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	ee 0f       	add	r30, r30
     5ca:	ff 1f       	adc	r31, r31
     5cc:	ec 5e       	subi	r30, 0xEC	; 236
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	10 82       	st	Z, r1
     5d2:	11 82       	std	Z+1, r1	; 0x01
     5d4:	12 82       	std	Z+2, r1	; 0x02
     5d6:	13 82       	std	Z+3, r1	; 0x03
     5d8:	4f 5f       	subi	r20, 0xFF	; 255
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
void initUSART0(int baud){
	
	//init values
	
	uint8_t i;
	for (i=0; i<MAX_ULTRASONIC_VALUES; i++)
     5dc:	4a 30       	cpi	r20, 0x0A	; 10
     5de:	51 05       	cpc	r21, r1
     5e0:	81 f7       	brne	.-32     	; 0x5c2 <initUSART0+0xa>
		UltraSonicValues[i] = 0.0;
	}
	
	for (i=0; i<4; i++)
	{
		ultrasonicDataPack[i] = 0;
     5e2:	10 92 3c 01 	sts	0x013C, r1
     5e6:	10 92 3d 01 	sts	0x013D, r1
     5ea:	10 92 3e 01 	sts	0x013E, r1
     5ee:	10 92 3f 01 	sts	0x013F, r1
	}


	//rx pin as input and tx as out
	USART0_RX_DDR &= ~(1<<USART0_RX_PINx);
     5f2:	50 98       	cbi	0x0a, 0	; 10
	USART0_TX_DDR |= 1<<USART0_TX_PINx;
     5f4:	51 9a       	sbi	0x0a, 1	; 10
	
	//set TX to 1 to make the sensor  measure
	USART0_TX_PORT |= 1<<USART0_TX_PINx;
     5f6:	59 9a       	sbi	0x0b, 1	; 11
	//USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
     5f8:	c2 ec       	ldi	r28, 0xC2	; 194
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
     5fc:	88 81       	ld	r24, Y
     5fe:	8f 73       	andi	r24, 0x3F	; 63
     600:	88 83       	st	Y, r24

	UCSR0A &= ~(1 << U2X0); //setting the U2X bit to 0 for normal speed asynchronous
     602:	e0 ec       	ldi	r30, 0xC0	; 192
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	8d 7f       	andi	r24, 0xFD	; 253
     60a:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     60c:	c9 01       	movw	r24, r18
     60e:	aa 27       	eor	r26, r26
     610:	97 fd       	sbrc	r25, 7
     612:	a0 95       	com	r26
     614:	ba 2f       	mov	r27, r26
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	aa 1f       	adc	r26, r26
     61c:	bb 1f       	adc	r27, r27
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	aa 1f       	adc	r26, r26
     624:	bb 1f       	adc	r27, r27
     626:	9c 01       	movw	r18, r24
     628:	ad 01       	movw	r20, r26
     62a:	22 0f       	add	r18, r18
     62c:	33 1f       	adc	r19, r19
     62e:	44 1f       	adc	r20, r20
     630:	55 1f       	adc	r21, r21
     632:	22 0f       	add	r18, r18
     634:	33 1f       	adc	r19, r19
     636:	44 1f       	adc	r20, r20
     638:	55 1f       	adc	r21, r21
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	72 e1       	ldi	r23, 0x12	; 18
     63e:	8a e7       	ldi	r24, 0x7A	; 122
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodsi4>
     646:	ca 01       	movw	r24, r20
     648:	b9 01       	movw	r22, r18
     64a:	61 50       	subi	r22, 0x01	; 1
     64c:	71 09       	sbc	r23, r1
     64e:	81 09       	sbc	r24, r1
     650:	91 09       	sbc	r25, r1
     652:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     656:	0e 94 87 09 	call	0x130e	; 0x130e <lrint>
	UBRR0H = (unsigned char)(ubbr_>>8);
     65a:	27 2f       	mov	r18, r23
     65c:	33 27       	eor	r19, r19
     65e:	27 fd       	sbrc	r18, 7
     660:	3a 95       	dec	r19
     662:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)ubbr_;
     666:	60 93 c4 00 	sts	0x00C4, r22
	
	
	// Enable receiver do not enable transmitter because it will be high
	// and manual control of ultrasonic measurement will not take effect
	UCSR0B = (1<<RXEN0);
     66a:	e1 ec       	ldi	r30, 0xC1	; 193
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 e1       	ldi	r24, 0x10	; 16
     670:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
     672:	88 81       	ld	r24, Y
     674:	86 60       	ori	r24, 0x06	; 6
     676:	88 83       	st	Y, r24
	UCSR0B &= ~(1<<UCSZ02);
     678:	80 81       	ld	r24, Z
     67a:	8b 7f       	andi	r24, 0xFB	; 251
     67c:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR0C&=~(1<<USBS0);
     67e:	88 81       	ld	r24, Y
     680:	87 7f       	andi	r24, 0xF7	; 247
     682:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR0C &= ~((1 << UPM00) | (1<<UPM01));
     684:	88 81       	ld	r24, Y
     686:	8f 7c       	andi	r24, 0xCF	; 207
     688:	88 83       	st	Y, r24
	
	
	//Enable Receive Interrupt
	UCSR0B |= (1<<RXCIE0); 
     68a:	80 81       	ld	r24, Z
     68c:	80 68       	ori	r24, 0x80	; 128
     68e:	80 83       	st	Z, r24
	
		
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <initADC>:

void  initADC(void)
{

	//set Vref to Vcc
	ADMUX |= (1<<REFS0);
     696:	ec e7       	ldi	r30, 0x7C	; 124
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	80 64       	ori	r24, 0x40	; 64
     69e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     6a0:	80 81       	ld	r24, Z
     6a2:	8f 77       	andi	r24, 0x7F	; 127
     6a4:	80 83       	st	Z, r24
	
	//select ADC0
	
	ADMUX &= ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4) );
     6a6:	80 81       	ld	r24, Z
     6a8:	80 7e       	andi	r24, 0xE0	; 224
     6aa:	80 83       	st	Z, r24

	//enable the ADC
	ADCSRA |= (1<<ADEN);
     6ac:	ea e7       	ldi	r30, 0x7A	; 122
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	80 68       	ori	r24, 0x80	; 128
     6b4:	80 83       	st	Z, r24
	
	//enable the ADC interrupt
	ADCSRA |= (1<<ADIE);
     6b6:	80 81       	ld	r24, Z
     6b8:	88 60       	ori	r24, 0x08	; 8
     6ba:	80 83       	st	Z, r24
	
	//set prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     6bc:	80 81       	ld	r24, Z
     6be:	87 60       	ori	r24, 0x07	; 7
     6c0:	80 83       	st	Z, r24
	//select free running mode
	//ADCSRB &= ~( (1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2) );


	//disable digital pins on sensor pins
	DIDR0 |= (1<<ADC0D) | (1<<ADC1D) | (1<<ADC2D) | (1<<ADC3D) ;
     6c2:	ae e7       	ldi	r26, 0x7E	; 126
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	8c 91       	ld	r24, X
     6c8:	8f 60       	ori	r24, 0x0F	; 15
     6ca:	8c 93       	st	X, r24


	//start conversion
	ADCSRA |= (1<<ADSC);
     6cc:	80 81       	ld	r24, Z
     6ce:	80 64       	ori	r24, 0x40	; 64
     6d0:	80 83       	st	Z, r24
     6d2:	08 95       	ret

000006d4 <initSensors>:
}

void initSensors(){
	
	//set sensor pins as input
	IR_SENSOR_F_DDR &= ~(1<<IR_SENSOR_F_PINx);
     6d4:	08 98       	cbi	0x01, 0	; 1
	IR_SENSOR_R_DDR &= ~(1<<IR_SENSOR_R_PINx);
     6d6:	09 98       	cbi	0x01, 1	; 1
	IR_SENSOR_B_DDR &= ~(1<<IR_SENSOR_B_PINx);
     6d8:	0a 98       	cbi	0x01, 2	; 1
	IR_SENSOR_L_DDR &= ~(1<<IR_SENSOR_L_PINx);
     6da:	0b 98       	cbi	0x01, 3	; 1
	
	initADC();
     6dc:	0e 94 4b 03 	call	0x696	; 0x696 <initADC>
	initUSART0(9600);
     6e0:	80 e8       	ldi	r24, 0x80	; 128
     6e2:	95 e2       	ldi	r25, 0x25	; 37
     6e4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <initUSART0>
     6e8:	08 95       	ret

000006ea <__vector_24>:
	//start conversion
	ADCSRA |= (1<<ADSC);

}

ISR(ADC_vect){
     6ea:	1f 92       	push	r1
     6ec:	0f 92       	push	r0
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	2f 93       	push	r18
     6f6:	3f 93       	push	r19
     6f8:	4f 93       	push	r20
     6fa:	5f 93       	push	r21
     6fc:	6f 93       	push	r22
     6fe:	7f 93       	push	r23
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ef 93       	push	r30
     70e:	ff 93       	push	r31
	
	uint8_t theLowADC = ADCL;
     710:	40 91 78 00 	lds	r20, 0x0078
	uint16_t theTenBitResult = ADCH<<8 | theLowADC;
     714:	80 91 79 00 	lds	r24, 0x0079
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	58 2b       	or	r21, r24
	
	if (theTenBitResult < 16)  theTenBitResult = 16;
     71c:	40 31       	cpi	r20, 0x10	; 16
     71e:	51 05       	cpc	r21, r1
     720:	10 f4       	brcc	.+4      	; 0x726 <__vector_24+0x3c>
     722:	40 e1       	ldi	r20, 0x10	; 16
     724:	50 e0       	ldi	r21, 0x00	; 0
		distance = 30.0;
	}
	*/
	
		
		dis[i%MAX] = 2076.0 / (theTenBitResult - 11.0);
     726:	e0 91 0d 01 	lds	r30, 0x010D
     72a:	f0 91 0e 01 	lds	r31, 0x010E
     72e:	9f 01       	movw	r18, r30
     730:	ab ea       	ldi	r26, 0xAB	; 171
     732:	ba ea       	ldi	r27, 0xAA	; 170
     734:	0e 94 43 0a 	call	0x1486	; 0x1486 <__umulhisi3>
     738:	ec 01       	movw	r28, r24
     73a:	d6 95       	lsr	r29
     73c:	c7 95       	ror	r28
     73e:	ce 01       	movw	r24, r28
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	c8 0f       	add	r28, r24
     746:	d9 1f       	adc	r29, r25
     748:	2c 1b       	sub	r18, r28
     74a:	3d 0b       	sbc	r19, r29
     74c:	e9 01       	movw	r28, r18
     74e:	ba 01       	movw	r22, r20
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__floatunsisf>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e3       	ldi	r20, 0x30	; 48
     75e:	51 e4       	ldi	r21, 0x41	; 65
     760:	0e 94 00 08 	call	0x1000	; 0x1000 <__subsf3>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	70 ec       	ldi	r23, 0xC0	; 192
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	95 e4       	ldi	r25, 0x45	; 69
     770:	0e 94 65 08 	call	0x10ca	; 0x10ca <__divsf3>
     774:	cc 0f       	add	r28, r28
     776:	dd 1f       	adc	r29, r29
     778:	cc 0f       	add	r28, r28
     77a:	dd 1f       	adc	r29, r29
     77c:	c0 5c       	subi	r28, 0xC0	; 192
     77e:	de 4f       	sbci	r29, 0xFE	; 254
     780:	68 83       	st	Y, r22
     782:	79 83       	std	Y+1, r23	; 0x01
     784:	8a 83       	std	Y+2, r24	; 0x02
     786:	9b 83       	std	Y+3, r25	; 0x03
		
		//under lower limit
		if (dis[i%MAX] < 4.0)
     788:	40 91 0d 01 	lds	r20, 0x010D
     78c:	50 91 0e 01 	lds	r21, 0x010E
     790:	9a 01       	movw	r18, r20
     792:	ab ea       	ldi	r26, 0xAB	; 171
     794:	ba ea       	ldi	r27, 0xAA	; 170
     796:	0e 94 43 0a 	call	0x1486	; 0x1486 <__umulhisi3>
     79a:	96 95       	lsr	r25
     79c:	87 95       	ror	r24
     79e:	9c 01       	movw	r18, r24
     7a0:	22 0f       	add	r18, r18
     7a2:	33 1f       	adc	r19, r19
     7a4:	82 0f       	add	r24, r18
     7a6:	93 1f       	adc	r25, r19
     7a8:	9a 01       	movw	r18, r20
     7aa:	28 1b       	sub	r18, r24
     7ac:	39 0b       	sbc	r19, r25
     7ae:	f9 01       	movw	r30, r18
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	e0 5c       	subi	r30, 0xC0	; 192
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	60 81       	ld	r22, Z
     7be:	71 81       	ldd	r23, Z+1	; 0x01
     7c0:	82 81       	ldd	r24, Z+2	; 0x02
     7c2:	93 81       	ldd	r25, Z+3	; 0x03
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e8       	ldi	r20, 0x80	; 128
     7ca:	50 e4       	ldi	r21, 0x40	; 64
     7cc:	0e 94 2e 01 	call	0x25c	; 0x25c <__cmpsf2>
     7d0:	88 23       	and	r24, r24
     7d2:	14 f5       	brge	.+68     	; 0x818 <__vector_24+0x12e>
		{
			dis[i%MAX] =4.0;
     7d4:	40 91 0d 01 	lds	r20, 0x010D
     7d8:	50 91 0e 01 	lds	r21, 0x010E
     7dc:	9a 01       	movw	r18, r20
     7de:	ab ea       	ldi	r26, 0xAB	; 171
     7e0:	ba ea       	ldi	r27, 0xAA	; 170
     7e2:	0e 94 43 0a 	call	0x1486	; 0x1486 <__umulhisi3>
     7e6:	96 95       	lsr	r25
     7e8:	87 95       	ror	r24
     7ea:	9c 01       	movw	r18, r24
     7ec:	22 0f       	add	r18, r18
     7ee:	33 1f       	adc	r19, r19
     7f0:	82 0f       	add	r24, r18
     7f2:	93 1f       	adc	r25, r19
     7f4:	9a 01       	movw	r18, r20
     7f6:	28 1b       	sub	r18, r24
     7f8:	39 0b       	sbc	r19, r25
     7fa:	f9 01       	movw	r30, r18
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	e0 5c       	subi	r30, 0xC0	; 192
     806:	fe 4f       	sbci	r31, 0xFE	; 254
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	a0 e8       	ldi	r26, 0x80	; 128
     80e:	b0 e4       	ldi	r27, 0x40	; 64
     810:	80 83       	st	Z, r24
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	a2 83       	std	Z+2, r26	; 0x02
     816:	b3 83       	std	Z+3, r27	; 0x03
		}
		
		//above upper limit
		if (dis[i%MAX] > 30.0)
     818:	40 91 0d 01 	lds	r20, 0x010D
     81c:	50 91 0e 01 	lds	r21, 0x010E
     820:	9a 01       	movw	r18, r20
     822:	ab ea       	ldi	r26, 0xAB	; 171
     824:	ba ea       	ldi	r27, 0xAA	; 170
     826:	0e 94 43 0a 	call	0x1486	; 0x1486 <__umulhisi3>
     82a:	96 95       	lsr	r25
     82c:	87 95       	ror	r24
     82e:	9c 01       	movw	r18, r24
     830:	22 0f       	add	r18, r18
     832:	33 1f       	adc	r19, r19
     834:	82 0f       	add	r24, r18
     836:	93 1f       	adc	r25, r19
     838:	9a 01       	movw	r18, r20
     83a:	28 1b       	sub	r18, r24
     83c:	39 0b       	sbc	r19, r25
     83e:	f9 01       	movw	r30, r18
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	e0 5c       	subi	r30, 0xC0	; 192
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	60 81       	ld	r22, Z
     84e:	71 81       	ldd	r23, Z+1	; 0x01
     850:	82 81       	ldd	r24, Z+2	; 0x02
     852:	93 81       	ldd	r25, Z+3	; 0x03
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 ef       	ldi	r20, 0xF0	; 240
     85a:	51 e4       	ldi	r21, 0x41	; 65
     85c:	0e 94 56 01 	call	0x2ac	; 0x2ac <__gesf2>
     860:	18 16       	cp	r1, r24
     862:	14 f5       	brge	.+68     	; 0x8a8 <__vector_24+0x1be>
		{
			
			dis[i%MAX] = 30.0;
     864:	40 91 0d 01 	lds	r20, 0x010D
     868:	50 91 0e 01 	lds	r21, 0x010E
     86c:	9a 01       	movw	r18, r20
     86e:	ab ea       	ldi	r26, 0xAB	; 171
     870:	ba ea       	ldi	r27, 0xAA	; 170
     872:	0e 94 43 0a 	call	0x1486	; 0x1486 <__umulhisi3>
     876:	96 95       	lsr	r25
     878:	87 95       	ror	r24
     87a:	9c 01       	movw	r18, r24
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	82 0f       	add	r24, r18
     882:	93 1f       	adc	r25, r19
     884:	9a 01       	movw	r18, r20
     886:	28 1b       	sub	r18, r24
     888:	39 0b       	sbc	r19, r25
     88a:	f9 01       	movw	r30, r18
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	e0 5c       	subi	r30, 0xC0	; 192
     896:	fe 4f       	sbci	r31, 0xFE	; 254
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ef       	ldi	r26, 0xF0	; 240
     89e:	b1 e4       	ldi	r27, 0x41	; 65
     8a0:	80 83       	st	Z, r24
     8a2:	91 83       	std	Z+1, r25	; 0x01
     8a4:	a2 83       	std	Z+2, r26	; 0x02
     8a6:	b3 83       	std	Z+3, r27	; 0x03
		}
	
	
	i++;
     8a8:	80 91 0d 01 	lds	r24, 0x010D
     8ac:	90 91 0e 01 	lds	r25, 0x010E
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	90 93 0e 01 	sts	0x010E, r25
     8b6:	80 93 0d 01 	sts	0x010D, r24
	ADCSRA |= 1<<ADSC;
     8ba:	ea e7       	ldi	r30, 0x7A	; 122
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	80 64       	ori	r24, 0x40	; 64
     8c2:	80 83       	st	Z, r24
}
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	7f 91       	pop	r23
     8d6:	6f 91       	pop	r22
     8d8:	5f 91       	pop	r21
     8da:	4f 91       	pop	r20
     8dc:	3f 91       	pop	r19
     8de:	2f 91       	pop	r18
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <__vector_20>:

ISR(USART0_RX_vect){
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	1f 93       	push	r17
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
LED_CMD_PIN |= (1<<LED_CMD_PINx);
     91a:	07 9a       	sbi	0x00, 7	; 0

	uint8_t data;
	data = UDR0;
     91c:	c0 91 c6 00 	lds	r28, 0x00C6
	
	if(data == 0x52){ //start of data
     920:	c2 35       	cpi	r28, 0x52	; 82
     922:	39 f4       	brne	.+14     	; 0x932 <__stack+0x33>
		ultrasonicDataPack[0] = 'R';
     924:	82 e5       	ldi	r24, 0x52	; 82
     926:	80 93 3c 01 	sts	0x013C, r24
		US_data_part_no=1;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	80 93 04 01 	sts	0x0104, r24
     930:	9b c0       	rjmp	.+310    	; 0xa68 <__stack+0x169>
	}else{
					
		if(ultrasonicDataPack[0] == 'R' && US_data_part_no == 4 && data == 13){// the pack is all read
     932:	80 91 3c 01 	lds	r24, 0x013C
     936:	82 35       	cpi	r24, 0x52	; 82
     938:	09 f0       	breq	.+2      	; 0x93c <__stack+0x3d>
     93a:	63 c0       	rjmp	.+198    	; 0xa02 <__stack+0x103>
     93c:	80 91 04 01 	lds	r24, 0x0104
     940:	84 30       	cpi	r24, 0x04	; 4
     942:	09 f0       	breq	.+2      	; 0x946 <__stack+0x47>
     944:	5e c0       	rjmp	.+188    	; 0xa02 <__stack+0x103>
     946:	cd 30       	cpi	r28, 0x0D	; 13
     948:	09 f0       	breq	.+2      	; 0x94c <__stack+0x4d>
     94a:	5b c0       	rjmp	.+182    	; 0xa02 <__stack+0x103>
			
			float val = 100.0 * ultrasonicDataPack[1] + 10.0 * ultrasonicDataPack[2] + ultrasonicDataPack[3];
     94c:	60 91 3d 01 	lds	r22, 0x013D
     950:	10 91 3e 01 	lds	r17, 0x013E
     954:	d0 91 3f 01 	lds	r29, 0x013F
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	48 ec       	ldi	r20, 0xC8	; 200
     968:	52 e4       	ldi	r21, 0x42	; 66
     96a:	0e 94 c1 09 	call	0x1382	; 0x1382 <__mulsf3>
     96e:	6b 01       	movw	r12, r22
     970:	7c 01       	movw	r14, r24
     972:	61 2f       	mov	r22, r17
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e2       	ldi	r20, 0x20	; 32
     984:	51 e4       	ldi	r21, 0x41	; 65
     986:	0e 94 c1 09 	call	0x1382	; 0x1382 <__mulsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 01 08 	call	0x1002	; 0x1002 <__addsf3>
     996:	6b 01       	movw	r12, r22
     998:	7c 01       	movw	r14, r24
     99a:	6d 2f       	mov	r22, r29
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     9a6:	9b 01       	movw	r18, r22
     9a8:	ac 01       	movw	r20, r24
     9aa:	c7 01       	movw	r24, r14
     9ac:	b6 01       	movw	r22, r12
     9ae:	0e 94 01 08 	call	0x1002	; 0x1002 <__addsf3>
			//transform from inch to cm
			val *= 2.54;
     9b2:	2c e5       	ldi	r18, 0x5C	; 92
     9b4:	3f e8       	ldi	r19, 0x8F	; 143
     9b6:	42 e2       	ldi	r20, 0x22	; 34
     9b8:	50 e4       	ldi	r21, 0x40	; 64
     9ba:	0e 94 c1 09 	call	0x1382	; 0x1382 <__mulsf3>
			UltraSonicValues[US_pos_in_buffer] = val;
     9be:	e0 91 03 01 	lds	r30, 0x0103
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	ee 0f       	add	r30, r30
     9ca:	ff 1f       	adc	r31, r31
     9cc:	ec 5e       	subi	r30, 0xEC	; 236
     9ce:	fe 4f       	sbci	r31, 0xFE	; 254
     9d0:	60 83       	st	Z, r22
     9d2:	71 83       	std	Z+1, r23	; 0x01
     9d4:	82 83       	std	Z+2, r24	; 0x02
     9d6:	93 83       	std	Z+3, r25	; 0x03
			lastUSonicValue = val;
     9d8:	60 93 05 01 	sts	0x0105, r22
     9dc:	70 93 06 01 	sts	0x0106, r23
     9e0:	80 93 07 01 	sts	0x0107, r24
     9e4:	90 93 08 01 	sts	0x0108, r25
			US_pos_in_buffer++;
     9e8:	80 91 03 01 	lds	r24, 0x0103
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	80 93 03 01 	sts	0x0103, r24

			if (US_pos_in_buffer>=MAX_ULTRASONIC_VALUES){ //reset buff pos
     9f2:	80 91 03 01 	lds	r24, 0x0103
     9f6:	8a 30       	cpi	r24, 0x0A	; 10
     9f8:	40 f1       	brcs	.+80     	; 0xa4a <__stack+0x14b>
				US_pos_in_buffer =0;
     9fa:	10 92 03 01 	sts	0x0103, r1
     9fe:	25 c0       	rjmp	.+74     	; 0xa4a <__stack+0x14b>
					ultrasonicDataPack[i] = 0;
				}
				US_data_part_no=0;
				
				if(US_manual_start){//stop measuring if it is on manual
					USART0_TX_PORT &= ~(1<<USART0_TX_PINx);
     a00:	59 98       	cbi	0x0b, 1	; 11
				}
		}
		
		if(US_data_part_no >= 4){// it should be all read but probably
     a02:	80 91 04 01 	lds	r24, 0x0104
     a06:	84 30       	cpi	r24, 0x04	; 4
     a08:	50 f0       	brcs	.+20     	; 0xa1e <__stack+0x11f>
			// there was an error in transimission (there is no carriage return ASCII 13)
			//clear
			uint8_t i;
			for (i=0; i<4; i++)
			{
				ultrasonicDataPack[i] = 0;
     a0a:	10 92 3c 01 	sts	0x013C, r1
     a0e:	10 92 3d 01 	sts	0x013D, r1
     a12:	10 92 3e 01 	sts	0x013E, r1
     a16:	10 92 3f 01 	sts	0x013F, r1
			}
			US_data_part_no=0;
     a1a:	10 92 04 01 	sts	0x0104, r1
			
		
		}
		
		if(ultrasonicDataPack[0] == 'R'){ // read the next part of the pack
     a1e:	80 91 3c 01 	lds	r24, 0x013C
     a22:	82 35       	cpi	r24, 0x52	; 82
     a24:	09 f5       	brne	.+66     	; 0xa68 <__stack+0x169>
			if (isdigit(data))
     a26:	8c 2f       	mov	r24, r28
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	c0 97       	sbiw	r24, 0x30	; 48
     a2c:	0a 97       	sbiw	r24, 0x0a	; 10
     a2e:	e0 f4       	brcc	.+56     	; 0xa68 <__stack+0x169>
			{//check for error in transmission
				ultrasonicDataPack[US_data_part_no] = data-'0';
     a30:	e0 91 04 01 	lds	r30, 0x0104
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	c0 53       	subi	r28, 0x30	; 48
     a38:	e4 5c       	subi	r30, 0xC4	; 196
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	c0 83       	st	Z, r28
				US_data_part_no++;
     a3e:	80 91 04 01 	lds	r24, 0x0104
     a42:	8f 5f       	subi	r24, 0xFF	; 255
     a44:	80 93 04 01 	sts	0x0104, r24
     a48:	0f c0       	rjmp	.+30     	; 0xa68 <__stack+0x169>
			
			//clear 
				uint8_t i;
				for (i=0; i<4; i++)
				{
					ultrasonicDataPack[i] = 0;
     a4a:	10 92 3c 01 	sts	0x013C, r1
     a4e:	10 92 3d 01 	sts	0x013D, r1
     a52:	10 92 3e 01 	sts	0x013E, r1
     a56:	10 92 3f 01 	sts	0x013F, r1
				}
				US_data_part_no=0;
     a5a:	10 92 04 01 	sts	0x0104, r1
				
				if(US_manual_start){//stop measuring if it is on manual
     a5e:	80 91 02 01 	lds	r24, 0x0102
     a62:	81 11       	cpse	r24, r1
     a64:	cd cf       	rjmp	.-102    	; 0xa00 <__stack+0x101>
     a66:	cd cf       	rjmp	.-102    	; 0xa02 <__stack+0x103>
			
		}
				
	}

}
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	1f 91       	pop	r17
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0
     a94:	1f 90       	pop	r1
     a96:	18 95       	reti

00000a98 <initUSART1>:
volatile info txBuffer[TX_BUFFER_SIZE];
volatile uint8_t txReadPos=0;
volatile uint8_t txWritePos=0;


void initUSART1(int baud){
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	9c 01       	movw	r18, r24
	
	//init buffer
	int16_t i;
	for(i=0; i<RX_BUFFER_SIZE; i++){
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
		rxBuffer[i].pack_no =-1;
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	fa 01       	movw	r30, r20
     aa6:	ee 0f       	add	r30, r30
     aa8:	ff 1f       	adc	r31, r31
     aaa:	df 01       	movw	r26, r30
     aac:	a4 5b       	subi	r26, 0xB4	; 180
     aae:	be 4f       	sbci	r27, 0xFE	; 254
     ab0:	11 96       	adiw	r26, 0x01	; 1
     ab2:	8c 93       	st	X, r24
		
		///TEST////
		txBuffer[i].pack_no =-1;
     ab4:	e4 5b       	subi	r30, 0xB4	; 180
     ab6:	fd 4f       	sbci	r31, 0xFD	; 253
     ab8:	81 83       	std	Z+1, r24	; 0x01
		txBuffer[i].data =0;
     aba:	10 82       	st	Z, r1

void initUSART1(int baud){
	
	//init buffer
	int16_t i;
	for(i=0; i<RX_BUFFER_SIZE; i++){
     abc:	4f 5f       	subi	r20, 0xFF	; 255
     abe:	5f 4f       	sbci	r21, 0xFF	; 255
     ac0:	40 38       	cpi	r20, 0x80	; 128
     ac2:	51 05       	cpc	r21, r1
     ac4:	79 f7       	brne	.-34     	; 0xaa4 <initUSART1+0xc>
		txBuffer[i].pack_no =-1;
		txBuffer[i].data =0;
	}
	

	USART1_RX_DDR &= ~(1<<USART1_RX_PINx);
     ac6:	52 98       	cbi	0x0a, 2	; 10
	USART1_TX_DDR |= 1<<USART1_TX_PINx;
     ac8:	53 9a       	sbi	0x0a, 3	; 10
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
     aca:	ca ec       	ldi	r28, 0xCA	; 202
     acc:	d0 e0       	ldi	r29, 0x00	; 0
     ace:	88 81       	ld	r24, Y
     ad0:	8f 73       	andi	r24, 0x3F	; 63
     ad2:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
     ad4:	e8 ec       	ldi	r30, 0xC8	; 200
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	8d 7f       	andi	r24, 0xFD	; 253
     adc:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
     ade:	c9 01       	movw	r24, r18
     ae0:	aa 27       	eor	r26, r26
     ae2:	97 fd       	sbrc	r25, 7
     ae4:	a0 95       	com	r26
     ae6:	ba 2f       	mov	r27, r26
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	aa 1f       	adc	r26, r26
     aee:	bb 1f       	adc	r27, r27
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	aa 1f       	adc	r26, r26
     af6:	bb 1f       	adc	r27, r27
     af8:	9c 01       	movw	r18, r24
     afa:	ad 01       	movw	r20, r26
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	44 1f       	adc	r20, r20
     b02:	55 1f       	adc	r21, r21
     b04:	22 0f       	add	r18, r18
     b06:	33 1f       	adc	r19, r19
     b08:	44 1f       	adc	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	72 e1       	ldi	r23, 0x12	; 18
     b10:	8a e7       	ldi	r24, 0x7A	; 122
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodsi4>
     b18:	ca 01       	movw	r24, r20
     b1a:	b9 01       	movw	r22, r18
     b1c:	61 50       	subi	r22, 0x01	; 1
     b1e:	71 09       	sbc	r23, r1
     b20:	81 09       	sbc	r24, r1
     b22:	91 09       	sbc	r25, r1
     b24:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatsisf>
     b28:	0e 94 87 09 	call	0x130e	; 0x130e <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
     b2c:	27 2f       	mov	r18, r23
     b2e:	33 27       	eor	r19, r19
     b30:	27 fd       	sbrc	r18, 7
     b32:	3a 95       	dec	r19
     b34:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
     b38:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     b3c:	e9 ec       	ldi	r30, 0xC9	; 201
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	88 e1       	ldi	r24, 0x18	; 24
     b42:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
     b44:	88 81       	ld	r24, Y
     b46:	86 60       	ori	r24, 0x06	; 6
     b48:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
     b4a:	80 81       	ld	r24, Z
     b4c:	8b 7f       	andi	r24, 0xFB	; 251
     b4e:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
     b50:	88 81       	ld	r24, Y
     b52:	87 7f       	andi	r24, 0xF7	; 247
     b54:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
     b56:	88 81       	ld	r24, Y
     b58:	8f 7c       	andi	r24, 0xCF	; 207
     b5a:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
     b5c:	80 81       	ld	r24, Z
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	80 83       	st	Z, r24
	//Enable Transmit Interrupt
	UCSR1B |= (1<<TXCIE1);
     b62:	80 81       	ld	r24, Z
     b64:	80 64       	ori	r24, 0x40	; 64
     b66:	80 83       	st	Z, r24
	
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <checkPackIsFullLength>:

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no == -1){
     b6e:	28 2f       	mov	r18, r24
     b70:	2f 77       	andi	r18, 0x7F	; 127
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	f9 01       	movw	r30, r18
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	e4 5b       	subi	r30, 0xB4	; 180
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	9f 3f       	cpi	r25, 0xFF	; 255
     b82:	09 f4       	brne	.+2      	; 0xb86 <checkPackIsFullLength+0x18>
     b84:	46 c0       	rjmp	.+140    	; 0xc12 <checkPackIsFullLength+0xa4>
		return 0;
	}else{
		pc_no = rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no;
     b86:	f9 01       	movw	r30, r18
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	e4 5b       	subi	r30, 0xB4	; 180
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	61 81       	ldd	r22, Z+1	; 0x01

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	9c 01       	movw	r18, r24
     b96:	2f 77       	andi	r18, 0x7F	; 127
     b98:	30 78       	andi	r19, 0x80	; 128
     b9a:	f9 01       	movw	r30, r18
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	e4 5b       	subi	r30, 0xB4	; 180
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	41 81       	ldd	r20, Z+1	; 0x01
     ba6:	4f 3f       	cpi	r20, 0xFF	; 255
     ba8:	b1 f1       	breq	.+108    	; 0xc16 <checkPackIsFullLength+0xa8>
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
     baa:	f9 01       	movw	r30, r18
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	e4 5b       	subi	r30, 0xB4	; 180
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	41 81       	ldd	r20, Z+1	; 0x01
     bb6:	55 27       	eor	r21, r21
     bb8:	47 fd       	sbrc	r20, 7
     bba:	50 95       	com	r21
     bbc:	26 2f       	mov	r18, r22
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	42 17       	cp	r20, r18
     bc2:	53 07       	cpc	r21, r19
     bc4:	51 f5       	brne	.+84     	; 0xc1a <checkPackIsFullLength+0xac>
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	66 e0       	ldi	r22, 0x06	; 6

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
     bca:	9c 01       	movw	r18, r24
     bcc:	2f 77       	andi	r18, 0x7F	; 127
     bce:	30 78       	andi	r19, 0x80	; 128
     bd0:	33 23       	and	r19, r19
     bd2:	34 f4       	brge	.+12     	; 0xbe0 <checkPackIsFullLength+0x72>
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	31 09       	sbc	r19, r1
     bd8:	20 68       	ori	r18, 0x80	; 128
     bda:	3f 6f       	ori	r19, 0xFF	; 255
     bdc:	2f 5f       	subi	r18, 0xFF	; 255
     bde:	3f 4f       	sbci	r19, 0xFF	; 255
     be0:	f9 01       	movw	r30, r18
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	e4 5b       	subi	r30, 0xB4	; 180
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	7f 3f       	cpi	r23, 0xFF	; 255
     bee:	b9 f0       	breq	.+46     	; 0xc1e <checkPackIsFullLength+0xb0>
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
     bf0:	f9 01       	movw	r30, r18
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	e4 5b       	subi	r30, 0xB4	; 180
     bf8:	fe 4f       	sbci	r31, 0xFE	; 254
     bfa:	21 81       	ldd	r18, Z+1	; 0x01
     bfc:	33 27       	eor	r19, r19
     bfe:	27 fd       	sbrc	r18, 7
     c00:	30 95       	com	r19
     c02:	24 17       	cp	r18, r20
     c04:	35 07       	cpc	r19, r21
     c06:	69 f4       	brne	.+26     	; 0xc22 <checkPackIsFullLength+0xb4>
     c08:	61 50       	subi	r22, 0x01	; 1
     c0a:	01 96       	adiw	r24, 0x01	; 1
	}

	
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
     c0c:	61 11       	cpse	r22, r1
     c0e:	dd cf       	rjmp	.-70     	; 0xbca <checkPackIsFullLength+0x5c>
     c10:	0a c0       	rjmp	.+20     	; 0xc26 <checkPackIsFullLength+0xb8>

int8_t checkPackIsFullLength(uint8_t lastPackPos){
	uint8_t pc_no;
	
	if(rxBuffer[(lastPackPos)% RX_BUFFER_SIZE].pack_no == -1){
		return 0;
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	08 95       	ret
	//check if there is a valid pack and that all data corresponds to the same pack
	int8_t i;
	for(i=0;i< COMMAND_SIZE; i++){
		if(rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no == -1 
		|| rxBuffer[(lastPackPos+i)% RX_BUFFER_SIZE].pack_no != pc_no){
			return 0;
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	08 95       	ret
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	08 95       	ret
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	08 95       	ret
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	08 95       	ret
		}
	}
	return 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
}
     c28:	08 95       	ret

00000c2a <fetchCommand>:

command fetchCommand(uint8_t lastPackPos, uint8_t *CRC_correct){
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	27 97       	sbiw	r28, 0x07	; 7
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
	
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff % RX_BUFFER_SIZE].data;
     c4e:	e0 91 10 01 	lds	r30, 0x0110
     c52:	ef 77       	andi	r30, 0x7F	; 127
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	e4 5b       	subi	r30, 0xB4	; 180
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	20 81       	ld	r18, Z
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) % RX_BUFFER_SIZE].data; //recover the sign
     c60:	e0 91 10 01 	lds	r30, 0x0110
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	31 96       	adiw	r30, 0x01	; 1
     c68:	ef 77       	andi	r30, 0x7F	; 127
     c6a:	f0 78       	andi	r31, 0x80	; 128
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	e4 5b       	subi	r30, 0xB4	; 180
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	30 81       	ld	r19, Z
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) % RX_BUFFER_SIZE].data;
     c76:	e0 91 10 01 	lds	r30, 0x0110
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	32 96       	adiw	r30, 0x02	; 2
     c7e:	ef 77       	andi	r30, 0x7F	; 127
     c80:	f0 78       	andi	r31, 0x80	; 128
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	e4 5b       	subi	r30, 0xB4	; 180
     c88:	fe 4f       	sbci	r31, 0xFE	; 254
     c8a:	40 81       	ld	r20, Z
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
     c8c:	e0 91 10 01 	lds	r30, 0x0110
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	33 96       	adiw	r30, 0x03	; 3
     c94:	ef 77       	andi	r30, 0x7F	; 127
     c96:	f0 78       	andi	r31, 0x80	; 128
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	e4 5b       	subi	r30, 0xB4	; 180
     c9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ca0:	c0 80       	ld	r12, Z
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
     ca2:	e0 91 10 01 	lds	r30, 0x0110
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	34 96       	adiw	r30, 0x04	; 4
     caa:	ef 77       	andi	r30, 0x7F	; 127
     cac:	f0 78       	andi	r31, 0x80	; 128
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	e4 5b       	subi	r30, 0xB4	; 180
     cb4:	fe 4f       	sbci	r31, 0xFE	; 254
     cb6:	80 81       	ld	r24, Z
	
	command comm = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
	comm.header = rxBuffer[lastPackPosInBuff % RX_BUFFER_SIZE].data;
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) % RX_BUFFER_SIZE].data; //recover the sign
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) % RX_BUFFER_SIZE].data;
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
     cb8:	dd 24       	eor	r13, r13
     cba:	c7 fc       	sbrc	r12, 7
     cbc:	d0 94       	com	r13
     cbe:	dc 2c       	mov	r13, r12
     cc0:	cc 24       	eor	r12, r12
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
     cc2:	99 27       	eor	r25, r25
     cc4:	87 fd       	sbrc	r24, 7
     cc6:	90 95       	com	r25
     cc8:	c8 2a       	or	r12, r24
     cca:	d9 2a       	or	r13, r25
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) % RX_BUFFER_SIZE].data << 8;
     ccc:	e0 91 10 01 	lds	r30, 0x0110
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	35 96       	adiw	r30, 0x05	; 5
     cd4:	ef 77       	andi	r30, 0x7F	; 127
     cd6:	f0 78       	andi	r31, 0x80	; 128
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	e4 5b       	subi	r30, 0xB4	; 180
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	e0 80       	ld	r14, Z
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) % RX_BUFFER_SIZE].data;
     ce2:	e0 91 10 01 	lds	r30, 0x0110
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	36 96       	adiw	r30, 0x06	; 6
     cea:	ef 77       	andi	r30, 0x7F	; 127
     cec:	f0 78       	andi	r31, 0x80	; 128
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	e4 5b       	subi	r30, 0xB4	; 180
     cf4:	fe 4f       	sbci	r31, 0xFE	; 254
     cf6:	80 81       	ld	r24, Z
	comm.header = rxBuffer[lastPackPosInBuff % RX_BUFFER_SIZE].data;
	comm.right = (int8_t) rxBuffer[(lastPackPosInBuff+1) % RX_BUFFER_SIZE].data; //recover the sign
	comm.forward = (int8_t) rxBuffer[(lastPackPosInBuff+2) % RX_BUFFER_SIZE].data;
	comm.time = rxBuffer[(lastPackPosInBuff+3) % RX_BUFFER_SIZE].data << 8;
	comm.time |= rxBuffer[(lastPackPosInBuff+4) % RX_BUFFER_SIZE].data;
	comm.CRC = rxBuffer[(lastPackPosInBuff+5) % RX_BUFFER_SIZE].data << 8;
     cf8:	ff 24       	eor	r15, r15
     cfa:	e7 fc       	sbrc	r14, 7
     cfc:	f0 94       	com	r15
     cfe:	fe 2c       	mov	r15, r14
     d00:	ee 24       	eor	r14, r14
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) % RX_BUFFER_SIZE].data;
     d02:	99 27       	eor	r25, r25
     d04:	87 fd       	sbrc	r24, 7
     d06:	90 95       	com	r25
     d08:	e8 2a       	or	r14, r24
     d0a:	f9 2a       	or	r15, r25
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
     d10:	0f ef       	ldi	r16, 0xFF	; 255
     d12:	1f ef       	ldi	r17, 0xFF	; 255
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
     d14:	5f ef       	ldi	r21, 0xFF	; 255

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
     d16:	a0 91 10 01 	lds	r26, 0x0110
     d1a:	fc 01       	movw	r30, r24
     d1c:	5c 01       	movw	r10, r24
     d1e:	aa 0e       	add	r10, r26
     d20:	b1 1c       	adc	r11, r1
     d22:	d5 01       	movw	r26, r10
     d24:	af 77       	andi	r26, 0x7F	; 127
     d26:	b0 78       	andi	r27, 0x80	; 128
     d28:	bb 23       	and	r27, r27
     d2a:	24 f4       	brge	.+8      	; 0xd34 <fetchCommand+0x10a>
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	a0 68       	ori	r26, 0x80	; 128
     d30:	bf 6f       	ori	r27, 0xFF	; 255
     d32:	11 96       	adiw	r26, 0x01	; 1
     d34:	aa 0f       	add	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	a4 5b       	subi	r26, 0xB4	; 180
     d3a:	be 4f       	sbci	r27, 0xFE	; 254
     d3c:	ac 91       	ld	r26, X
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     d3e:	0a 27       	eor	r16, r26
     d40:	a0 2f       	mov	r26, r16
     d42:	a2 95       	swap	r26
     d44:	a0 27       	eor	r26, r16
     d46:	0a 2e       	mov	r0, r26
     d48:	a6 95       	lsr	r26
     d4a:	a6 95       	lsr	r26
     d4c:	a0 25       	eor	r26, r0
     d4e:	0a 2e       	mov	r0, r26
     d50:	a6 95       	lsr	r26
     d52:	a0 25       	eor	r26, r0
     d54:	a7 70       	andi	r26, 0x07	; 7
     d56:	00 2e       	mov	r0, r16
     d58:	01 2f       	mov	r16, r17
     d5a:	a6 95       	lsr	r26
     d5c:	07 94       	ror	r0
     d5e:	a7 95       	ror	r26
     d60:	10 2d       	mov	r17, r0
     d62:	0a 27       	eor	r16, r26
     d64:	06 94       	lsr	r0
     d66:	a7 95       	ror	r26
     d68:	10 25       	eor	r17, r0
     d6a:	0a 27       	eor	r16, r26
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
     d6c:	a0 91 10 01 	lds	r26, 0x0110
     d70:	ea 0f       	add	r30, r26
     d72:	f1 1d       	adc	r31, r1
     d74:	ef 77       	andi	r30, 0x7F	; 127
     d76:	f0 78       	andi	r31, 0x80	; 128
     d78:	ff 23       	and	r31, r31
     d7a:	24 f4       	brge	.+8      	; 0xd84 <fetchCommand+0x15a>
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	e0 68       	ori	r30, 0x80	; 128
     d80:	ff 6f       	ori	r31, 0xFF	; 255
     d82:	31 96       	adiw	r30, 0x01	; 1
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	e4 5b       	subi	r30, 0xB4	; 180
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	51 83       	std	Z+1, r21	; 0x01
     d8e:	01 96       	adiw	r24, 0x01	; 1
	comm.CRC |= rxBuffer[(lastPackPosInBuff+6) % RX_BUFFER_SIZE].data;

	int8_t i;
	//uint16_t crc = comm.CRC;
	uint16_t crc = 0xFFFF;
	for(i=0; i<COMMAND_SIZE; i++){
     d90:	87 30       	cpi	r24, 0x07	; 7
     d92:	91 05       	cpc	r25, r1
     d94:	09 f0       	breq	.+2      	; 0xd98 <fetchCommand+0x16e>
     d96:	bf cf       	rjmp	.-130    	; 0xd16 <fetchCommand+0xec>
		crc = _crc16_update(crc, rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].data);
		rxBuffer[(lastPackPosInBuff+i) % RX_BUFFER_SIZE].pack_no = -1;
	}
	
	if (crc == 0){
     d98:	01 2b       	or	r16, r17
     d9a:	21 f4       	brne	.+8      	; 0xda4 <fetchCommand+0x17a>
		*CRC_correct = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	fb 01       	movw	r30, r22
     da0:	80 83       	st	Z, r24
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <fetchCommand+0x17e>
		}else{
		*CRC_correct = 0;
     da4:	fb 01       	movw	r30, r22
     da6:	10 82       	st	Z, r1
	}
	
	return comm;
     da8:	dd 82       	std	Y+5, r13	; 0x05
     daa:	cc 82       	std	Y+4, r12	; 0x04
     dac:	ff 82       	std	Y+7, r15	; 0x07
     dae:	ee 82       	std	Y+6, r14	; 0x06
     db0:	5c 2d       	mov	r21, r12
     db2:	6d 81       	ldd	r22, Y+5	; 0x05
     db4:	7e 2d       	mov	r23, r14
}
     db6:	8f 81       	ldd	r24, Y+7	; 0x07
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	27 96       	adiw	r28, 0x07	; 7
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	08 95       	ret

00000ddc <getLastCommand>:
	}
	
}


command getLastCommand(int8_t *success){
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	2f 97       	sbiw	r28, 0x0f	; 15
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	8c 01       	movw	r16, r24
	
	
	command cmd = {.header = 0, .right = 0, .forward = 0, .time = 0, .CRC = 0};
     df6:	fe 01       	movw	r30, r28
     df8:	38 96       	adiw	r30, 0x08	; 8
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	df 01       	movw	r26, r30
     dfe:	1d 92       	st	X+, r1
     e00:	8a 95       	dec	r24
     e02:	e9 f7       	brne	.-6      	; 0xdfe <getLastCommand+0x22>
	*success = 0;
     e04:	f8 01       	movw	r30, r16
     e06:	10 82       	st	Z, r1
	uint8_t crc;
	
	if(checkPackIsFullLength(lastPackPosInBuff)){
     e08:	80 91 10 01 	lds	r24, 0x0110
     e0c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <checkPackIsFullLength>
     e10:	88 23       	and	r24, r24
     e12:	c9 f0       	breq	.+50     	; 0xe46 <getLastCommand+0x6a>
		// read data and make command out of it
		
		cmd = fetchCommand(lastPackPosInBuff, &crc);
     e14:	80 91 10 01 	lds	r24, 0x0110
     e18:	be 01       	movw	r22, r28
     e1a:	61 5f       	subi	r22, 0xF1	; 241
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	0e 94 15 06 	call	0xc2a	; 0xc2a <fetchCommand>
     e22:	28 87       	std	Y+8, r18	; 0x08
     e24:	39 87       	std	Y+9, r19	; 0x09
     e26:	4a 87       	std	Y+10, r20	; 0x0a
     e28:	5b 87       	std	Y+11, r21	; 0x0b
     e2a:	6c 87       	std	Y+12, r22	; 0x0c
     e2c:	7d 87       	std	Y+13, r23	; 0x0d
     e2e:	8e 87       	std	Y+14, r24	; 0x0e
		
		if (crc)
     e30:	8f 85       	ldd	r24, Y+15	; 0x0f
     e32:	88 23       	and	r24, r24
     e34:	21 f0       	breq	.+8      	; 0xe3e <getLastCommand+0x62>
		{
			*success=1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	d8 01       	movw	r26, r16
     e3a:	8c 93       	st	X, r24
     e3c:	2b c0       	rjmp	.+86     	; 0xe94 <getLastCommand+0xb8>
		}else{
			*success=2;
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	f8 01       	movw	r30, r16
     e42:	80 83       	st	Z, r24
     e44:	27 c0       	rjmp	.+78     	; 0xe94 <getLastCommand+0xb8>
		
	}else{ //poate ca deja a inceput un nou pack dar nu a fost terminat,
		// atunci il returnez pe cel de dinainte care este intreg, daca exista un asemenea pack
		
		
		if( (lastPackPosInBuff - COMMAND_SIZE < RX_BUFFER_SIZE) 
     e46:	80 91 10 01 	lds	r24, 0x0110
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	07 97       	sbiw	r24, 0x07	; 7
     e4e:	80 38       	cpi	r24, 0x80	; 128
     e50:	91 05       	cpc	r25, r1
     e52:	04 f5       	brge	.+64     	; 0xe94 <getLastCommand+0xb8>
		&& checkPackIsFullLength(lastPackPosInBuff - COMMAND_SIZE)){
     e54:	80 91 10 01 	lds	r24, 0x0110
     e58:	87 50       	subi	r24, 0x07	; 7
     e5a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <checkPackIsFullLength>
     e5e:	88 23       	and	r24, r24
     e60:	c9 f0       	breq	.+50     	; 0xe94 <getLastCommand+0xb8>
			// read data and make command out of it
			
			cmd = fetchCommand(lastPackPosInBuff - COMMAND_SIZE, &crc);
     e62:	80 91 10 01 	lds	r24, 0x0110
     e66:	be 01       	movw	r22, r28
     e68:	61 5f       	subi	r22, 0xF1	; 241
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	87 50       	subi	r24, 0x07	; 7
     e6e:	0e 94 15 06 	call	0xc2a	; 0xc2a <fetchCommand>
     e72:	28 87       	std	Y+8, r18	; 0x08
     e74:	39 87       	std	Y+9, r19	; 0x09
     e76:	4a 87       	std	Y+10, r20	; 0x0a
     e78:	5b 87       	std	Y+11, r21	; 0x0b
     e7a:	6c 87       	std	Y+12, r22	; 0x0c
     e7c:	7d 87       	std	Y+13, r23	; 0x0d
     e7e:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (crc)
     e80:	8f 85       	ldd	r24, Y+15	; 0x0f
     e82:	88 23       	and	r24, r24
     e84:	21 f0       	breq	.+8      	; 0xe8e <getLastCommand+0xb2>
			{
				*success=1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	d8 01       	movw	r26, r16
     e8a:	8c 93       	st	X, r24
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <getLastCommand+0xb8>
				}else{
				*success=2;
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	f8 01       	movw	r30, r16
     e92:	80 83       	st	Z, r24
		
		}
	}
	
	
	return cmd;
     e94:	87 e0       	ldi	r24, 0x07	; 7
     e96:	fe 01       	movw	r30, r28
     e98:	38 96       	adiw	r30, 0x08	; 8
     e9a:	de 01       	movw	r26, r28
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	01 90       	ld	r0, Z+
     ea0:	0d 92       	st	X+, r0
     ea2:	8a 95       	dec	r24
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <getLastCommand+0xc2>
     ea6:	29 81       	ldd	r18, Y+1	; 0x01
     ea8:	3a 81       	ldd	r19, Y+2	; 0x02
     eaa:	4b 81       	ldd	r20, Y+3	; 0x03
     eac:	5c 81       	ldd	r21, Y+4	; 0x04
     eae:	6d 81       	ldd	r22, Y+5	; 0x05
     eb0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	2f 96       	adiw	r28, 0x0f	; 15
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <__vector_28>:
	
	return ret;
}
*/

ISR(USART1_RX_vect){
     ecc:	1f 92       	push	r1
     ece:	0f 92       	push	r0
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	0f 92       	push	r0
     ed4:	11 24       	eor	r1, r1
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	ef 93       	push	r30
     edc:	ff 93       	push	r31
	
	uint8_t data = UDR1;
     ede:	80 91 ce 00 	lds	r24, 0x00CE
	
	if(!packStarted){ // it is the first data byte of the pack
     ee2:	90 91 12 01 	lds	r25, 0x0112
     ee6:	91 11       	cpse	r25, r1
     ee8:	1a c0       	rjmp	.+52     	; 0xf1e <__vector_28+0x52>
		rxBuffer[rxWritePos].pack_no = data; //numai primi 7 biti
     eea:	e0 91 13 01 	lds	r30, 0x0113
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	e4 5b       	subi	r30, 0xB4	; 180
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	81 83       	std	Z+1, r24	; 0x01
		rxBuffer[rxWritePos].data = data;
     efa:	e0 91 13 01 	lds	r30, 0x0113
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	e4 5b       	subi	r30, 0xB4	; 180
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	80 83       	st	Z, r24
		packStarted = 1;
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	90 93 12 01 	sts	0x0112, r25
		lastPackNo = data;
     f10:	80 93 11 01 	sts	0x0111, r24
		lastPackPosInBuff = rxWritePos; 
     f14:	80 91 13 01 	lds	r24, 0x0113
     f18:	80 93 10 01 	sts	0x0110, r24
     f1c:	1d c0       	rjmp	.+58     	; 0xf58 <__vector_28+0x8c>
	}else{
		
		rxBuffer[rxWritePos].pack_no = lastPackNo;
     f1e:	e0 91 13 01 	lds	r30, 0x0113
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	90 91 11 01 	lds	r25, 0x0111
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	e4 5b       	subi	r30, 0xB4	; 180
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	91 83       	std	Z+1, r25	; 0x01
		rxBuffer[rxWritePos].data = data;
     f32:	e0 91 13 01 	lds	r30, 0x0113
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	e4 5b       	subi	r30, 0xB4	; 180
     f3e:	fe 4f       	sbci	r31, 0xFE	; 254
     f40:	80 83       	st	Z, r24
		packStarted++ ;
     f42:	80 91 12 01 	lds	r24, 0x0112
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	80 93 12 01 	sts	0x0112, r24
		
		if(packStarted == COMMAND_SIZE){
     f4c:	80 91 12 01 	lds	r24, 0x0112
     f50:	87 30       	cpi	r24, 0x07	; 7
     f52:	11 f4       	brne	.+4      	; 0xf58 <__vector_28+0x8c>
			packStarted = 0;
     f54:	10 92 12 01 	sts	0x0112, r1
		}
	}
	
	//rxBuffer[rxWritePos].data = UDR1;
	//rxBuffer[rxWritePos].pack_no = 1;
	rxWritePos++;
     f58:	80 91 13 01 	lds	r24, 0x0113
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	80 93 13 01 	sts	0x0113, r24
	
	if(rxWritePos>=RX_BUFFER_SIZE){
     f62:	80 91 13 01 	lds	r24, 0x0113
     f66:	88 23       	and	r24, r24
     f68:	14 f4       	brge	.+4      	; 0xf6e <__vector_28+0xa2>
			rxWritePos = 0;
     f6a:	10 92 13 01 	sts	0x0113, r1
	}
	
	//LED_CMD_PIN |= (1<<LED_CMD_PINx);
	
}
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <__vector_30>:

ISR(USART1_TX_vect){
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	8f 93       	push	r24
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
	
	
	//UDR1='I';
	if(txBuffer[txReadPos].pack_no != -1){
     f90:	e0 91 0f 01 	lds	r30, 0x010F
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	e4 5b       	subi	r30, 0xB4	; 180
     f9c:	fd 4f       	sbci	r31, 0xFD	; 253
     f9e:	81 81       	ldd	r24, Z+1	; 0x01
     fa0:	8f 3f       	cpi	r24, 0xFF	; 255
     fa2:	31 f1       	breq	.+76     	; 0xff0 <__vector_30+0x70>
	UDR1 =  txBuffer[txReadPos].data;
     fa4:	e0 91 0f 01 	lds	r30, 0x010F
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e4 5b       	subi	r30, 0xB4	; 180
     fb0:	fd 4f       	sbci	r31, 0xFD	; 253
     fb2:	80 81       	ld	r24, Z
     fb4:	80 93 ce 00 	sts	0x00CE, r24
	txBuffer[txReadPos].data =0;
     fb8:	e0 91 0f 01 	lds	r30, 0x010F
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	e4 5b       	subi	r30, 0xB4	; 180
     fc4:	fd 4f       	sbci	r31, 0xFD	; 253
     fc6:	10 82       	st	Z, r1
	txBuffer[txReadPos].pack_no =-1;
     fc8:	e0 91 0f 01 	lds	r30, 0x010F
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	e4 5b       	subi	r30, 0xB4	; 180
     fd4:	fd 4f       	sbci	r31, 0xFD	; 253
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	81 83       	std	Z+1, r24	; 0x01
	txReadPos++;
     fda:	80 91 0f 01 	lds	r24, 0x010F
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	80 93 0f 01 	sts	0x010F, r24
		if(txReadPos>TX_BUFFER_SIZE){
     fe4:	80 91 0f 01 	lds	r24, 0x010F
     fe8:	81 38       	cpi	r24, 0x81	; 129
     fea:	10 f0       	brcs	.+4      	; 0xff0 <__vector_30+0x70>
			txReadPos =0;
     fec:	10 92 0f 01 	sts	0x010F, r1
		}
	}
	
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	8f 91       	pop	r24
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <__subsf3>:
    1000:	50 58       	subi	r21, 0x80	; 128

00001002 <__addsf3>:
    1002:	bb 27       	eor	r27, r27
    1004:	aa 27       	eor	r26, r26
    1006:	0e d0       	rcall	.+28     	; 0x1024 <__addsf3x>
    1008:	48 c1       	rjmp	.+656    	; 0x129a <__fp_round>
    100a:	39 d1       	rcall	.+626    	; 0x127e <__fp_pscA>
    100c:	30 f0       	brcs	.+12     	; 0x101a <__addsf3+0x18>
    100e:	3e d1       	rcall	.+636    	; 0x128c <__fp_pscB>
    1010:	20 f0       	brcs	.+8      	; 0x101a <__addsf3+0x18>
    1012:	31 f4       	brne	.+12     	; 0x1020 <__addsf3+0x1e>
    1014:	9f 3f       	cpi	r25, 0xFF	; 255
    1016:	11 f4       	brne	.+4      	; 0x101c <__addsf3+0x1a>
    1018:	1e f4       	brtc	.+6      	; 0x1020 <__addsf3+0x1e>
    101a:	2e c1       	rjmp	.+604    	; 0x1278 <__fp_nan>
    101c:	0e f4       	brtc	.+2      	; 0x1020 <__addsf3+0x1e>
    101e:	e0 95       	com	r30
    1020:	e7 fb       	bst	r30, 7
    1022:	24 c1       	rjmp	.+584    	; 0x126c <__fp_inf>

00001024 <__addsf3x>:
    1024:	e9 2f       	mov	r30, r25
    1026:	4a d1       	rcall	.+660    	; 0x12bc <__fp_split3>
    1028:	80 f3       	brcs	.-32     	; 0x100a <__addsf3+0x8>
    102a:	ba 17       	cp	r27, r26
    102c:	62 07       	cpc	r22, r18
    102e:	73 07       	cpc	r23, r19
    1030:	84 07       	cpc	r24, r20
    1032:	95 07       	cpc	r25, r21
    1034:	18 f0       	brcs	.+6      	; 0x103c <__addsf3x+0x18>
    1036:	71 f4       	brne	.+28     	; 0x1054 <__addsf3x+0x30>
    1038:	9e f5       	brtc	.+102    	; 0x10a0 <__addsf3x+0x7c>
    103a:	62 c1       	rjmp	.+708    	; 0x1300 <__fp_zero>
    103c:	0e f4       	brtc	.+2      	; 0x1040 <__addsf3x+0x1c>
    103e:	e0 95       	com	r30
    1040:	0b 2e       	mov	r0, r27
    1042:	ba 2f       	mov	r27, r26
    1044:	a0 2d       	mov	r26, r0
    1046:	0b 01       	movw	r0, r22
    1048:	b9 01       	movw	r22, r18
    104a:	90 01       	movw	r18, r0
    104c:	0c 01       	movw	r0, r24
    104e:	ca 01       	movw	r24, r20
    1050:	a0 01       	movw	r20, r0
    1052:	11 24       	eor	r1, r1
    1054:	ff 27       	eor	r31, r31
    1056:	59 1b       	sub	r21, r25
    1058:	99 f0       	breq	.+38     	; 0x1080 <__addsf3x+0x5c>
    105a:	59 3f       	cpi	r21, 0xF9	; 249
    105c:	50 f4       	brcc	.+20     	; 0x1072 <__addsf3x+0x4e>
    105e:	50 3e       	cpi	r21, 0xE0	; 224
    1060:	68 f1       	brcs	.+90     	; 0x10bc <__addsf3x+0x98>
    1062:	1a 16       	cp	r1, r26
    1064:	f0 40       	sbci	r31, 0x00	; 0
    1066:	a2 2f       	mov	r26, r18
    1068:	23 2f       	mov	r18, r19
    106a:	34 2f       	mov	r19, r20
    106c:	44 27       	eor	r20, r20
    106e:	58 5f       	subi	r21, 0xF8	; 248
    1070:	f3 cf       	rjmp	.-26     	; 0x1058 <__addsf3x+0x34>
    1072:	46 95       	lsr	r20
    1074:	37 95       	ror	r19
    1076:	27 95       	ror	r18
    1078:	a7 95       	ror	r26
    107a:	f0 40       	sbci	r31, 0x00	; 0
    107c:	53 95       	inc	r21
    107e:	c9 f7       	brne	.-14     	; 0x1072 <__addsf3x+0x4e>
    1080:	7e f4       	brtc	.+30     	; 0x10a0 <__addsf3x+0x7c>
    1082:	1f 16       	cp	r1, r31
    1084:	ba 0b       	sbc	r27, r26
    1086:	62 0b       	sbc	r22, r18
    1088:	73 0b       	sbc	r23, r19
    108a:	84 0b       	sbc	r24, r20
    108c:	ba f0       	brmi	.+46     	; 0x10bc <__addsf3x+0x98>
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	a1 f0       	breq	.+40     	; 0x10ba <__addsf3x+0x96>
    1092:	ff 0f       	add	r31, r31
    1094:	bb 1f       	adc	r27, r27
    1096:	66 1f       	adc	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	c2 f7       	brpl	.-16     	; 0x108e <__addsf3x+0x6a>
    109e:	0e c0       	rjmp	.+28     	; 0x10bc <__addsf3x+0x98>
    10a0:	ba 0f       	add	r27, r26
    10a2:	62 1f       	adc	r22, r18
    10a4:	73 1f       	adc	r23, r19
    10a6:	84 1f       	adc	r24, r20
    10a8:	48 f4       	brcc	.+18     	; 0x10bc <__addsf3x+0x98>
    10aa:	87 95       	ror	r24
    10ac:	77 95       	ror	r23
    10ae:	67 95       	ror	r22
    10b0:	b7 95       	ror	r27
    10b2:	f7 95       	ror	r31
    10b4:	9e 3f       	cpi	r25, 0xFE	; 254
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__addsf3x+0x96>
    10b8:	b3 cf       	rjmp	.-154    	; 0x1020 <__addsf3+0x1e>
    10ba:	93 95       	inc	r25
    10bc:	88 0f       	add	r24, r24
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <__addsf3x+0x9e>
    10c0:	99 27       	eor	r25, r25
    10c2:	ee 0f       	add	r30, r30
    10c4:	97 95       	ror	r25
    10c6:	87 95       	ror	r24
    10c8:	08 95       	ret

000010ca <__divsf3>:
    10ca:	0c d0       	rcall	.+24     	; 0x10e4 <__divsf3x>
    10cc:	e6 c0       	rjmp	.+460    	; 0x129a <__fp_round>
    10ce:	de d0       	rcall	.+444    	; 0x128c <__fp_pscB>
    10d0:	40 f0       	brcs	.+16     	; 0x10e2 <__divsf3+0x18>
    10d2:	d5 d0       	rcall	.+426    	; 0x127e <__fp_pscA>
    10d4:	30 f0       	brcs	.+12     	; 0x10e2 <__divsf3+0x18>
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <__divsf3+0x16>
    10d8:	5f 3f       	cpi	r21, 0xFF	; 255
    10da:	19 f0       	breq	.+6      	; 0x10e2 <__divsf3+0x18>
    10dc:	c7 c0       	rjmp	.+398    	; 0x126c <__fp_inf>
    10de:	51 11       	cpse	r21, r1
    10e0:	10 c1       	rjmp	.+544    	; 0x1302 <__fp_szero>
    10e2:	ca c0       	rjmp	.+404    	; 0x1278 <__fp_nan>

000010e4 <__divsf3x>:
    10e4:	eb d0       	rcall	.+470    	; 0x12bc <__fp_split3>
    10e6:	98 f3       	brcs	.-26     	; 0x10ce <__divsf3+0x4>

000010e8 <__divsf3_pse>:
    10e8:	99 23       	and	r25, r25
    10ea:	c9 f3       	breq	.-14     	; 0x10de <__divsf3+0x14>
    10ec:	55 23       	and	r21, r21
    10ee:	b1 f3       	breq	.-20     	; 0x10dc <__divsf3+0x12>
    10f0:	95 1b       	sub	r25, r21
    10f2:	55 0b       	sbc	r21, r21
    10f4:	bb 27       	eor	r27, r27
    10f6:	aa 27       	eor	r26, r26
    10f8:	62 17       	cp	r22, r18
    10fa:	73 07       	cpc	r23, r19
    10fc:	84 07       	cpc	r24, r20
    10fe:	38 f0       	brcs	.+14     	; 0x110e <__divsf3_pse+0x26>
    1100:	9f 5f       	subi	r25, 0xFF	; 255
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	44 1f       	adc	r20, r20
    110a:	aa 1f       	adc	r26, r26
    110c:	a9 f3       	breq	.-22     	; 0x10f8 <__divsf3_pse+0x10>
    110e:	33 d0       	rcall	.+102    	; 0x1176 <__divsf3_pse+0x8e>
    1110:	0e 2e       	mov	r0, r30
    1112:	3a f0       	brmi	.+14     	; 0x1122 <__divsf3_pse+0x3a>
    1114:	e0 e8       	ldi	r30, 0x80	; 128
    1116:	30 d0       	rcall	.+96     	; 0x1178 <__divsf3_pse+0x90>
    1118:	91 50       	subi	r25, 0x01	; 1
    111a:	50 40       	sbci	r21, 0x00	; 0
    111c:	e6 95       	lsr	r30
    111e:	00 1c       	adc	r0, r0
    1120:	ca f7       	brpl	.-14     	; 0x1114 <__divsf3_pse+0x2c>
    1122:	29 d0       	rcall	.+82     	; 0x1176 <__divsf3_pse+0x8e>
    1124:	fe 2f       	mov	r31, r30
    1126:	27 d0       	rcall	.+78     	; 0x1176 <__divsf3_pse+0x8e>
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	bb 1f       	adc	r27, r27
    1130:	26 17       	cp	r18, r22
    1132:	37 07       	cpc	r19, r23
    1134:	48 07       	cpc	r20, r24
    1136:	ab 07       	cpc	r26, r27
    1138:	b0 e8       	ldi	r27, 0x80	; 128
    113a:	09 f0       	breq	.+2      	; 0x113e <__divsf3_pse+0x56>
    113c:	bb 0b       	sbc	r27, r27
    113e:	80 2d       	mov	r24, r0
    1140:	bf 01       	movw	r22, r30
    1142:	ff 27       	eor	r31, r31
    1144:	93 58       	subi	r25, 0x83	; 131
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
    1148:	2a f0       	brmi	.+10     	; 0x1154 <__divsf3_pse+0x6c>
    114a:	9e 3f       	cpi	r25, 0xFE	; 254
    114c:	51 05       	cpc	r21, r1
    114e:	68 f0       	brcs	.+26     	; 0x116a <__divsf3_pse+0x82>
    1150:	8d c0       	rjmp	.+282    	; 0x126c <__fp_inf>
    1152:	d7 c0       	rjmp	.+430    	; 0x1302 <__fp_szero>
    1154:	5f 3f       	cpi	r21, 0xFF	; 255
    1156:	ec f3       	brlt	.-6      	; 0x1152 <__divsf3_pse+0x6a>
    1158:	98 3e       	cpi	r25, 0xE8	; 232
    115a:	dc f3       	brlt	.-10     	; 0x1152 <__divsf3_pse+0x6a>
    115c:	86 95       	lsr	r24
    115e:	77 95       	ror	r23
    1160:	67 95       	ror	r22
    1162:	b7 95       	ror	r27
    1164:	f7 95       	ror	r31
    1166:	9f 5f       	subi	r25, 0xFF	; 255
    1168:	c9 f7       	brne	.-14     	; 0x115c <__divsf3_pse+0x74>
    116a:	88 0f       	add	r24, r24
    116c:	91 1d       	adc	r25, r1
    116e:	96 95       	lsr	r25
    1170:	87 95       	ror	r24
    1172:	97 f9       	bld	r25, 7
    1174:	08 95       	ret
    1176:	e1 e0       	ldi	r30, 0x01	; 1
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	88 1f       	adc	r24, r24
    117e:	bb 1f       	adc	r27, r27
    1180:	62 17       	cp	r22, r18
    1182:	73 07       	cpc	r23, r19
    1184:	84 07       	cpc	r24, r20
    1186:	ba 07       	cpc	r27, r26
    1188:	20 f0       	brcs	.+8      	; 0x1192 <__divsf3_pse+0xaa>
    118a:	62 1b       	sub	r22, r18
    118c:	73 0b       	sbc	r23, r19
    118e:	84 0b       	sbc	r24, r20
    1190:	ba 0b       	sbc	r27, r26
    1192:	ee 1f       	adc	r30, r30
    1194:	88 f7       	brcc	.-30     	; 0x1178 <__divsf3_pse+0x90>
    1196:	e0 95       	com	r30
    1198:	08 95       	ret

0000119a <__fixunssfsi>:
    119a:	98 d0       	rcall	.+304    	; 0x12cc <__fp_splitA>
    119c:	88 f0       	brcs	.+34     	; 0x11c0 <__fixunssfsi+0x26>
    119e:	9f 57       	subi	r25, 0x7F	; 127
    11a0:	90 f0       	brcs	.+36     	; 0x11c6 <__fixunssfsi+0x2c>
    11a2:	b9 2f       	mov	r27, r25
    11a4:	99 27       	eor	r25, r25
    11a6:	b7 51       	subi	r27, 0x17	; 23
    11a8:	a0 f0       	brcs	.+40     	; 0x11d2 <__fixunssfsi+0x38>
    11aa:	d1 f0       	breq	.+52     	; 0x11e0 <__fixunssfsi+0x46>
    11ac:	66 0f       	add	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	88 1f       	adc	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	1a f0       	brmi	.+6      	; 0x11bc <__fixunssfsi+0x22>
    11b6:	ba 95       	dec	r27
    11b8:	c9 f7       	brne	.-14     	; 0x11ac <__fixunssfsi+0x12>
    11ba:	12 c0       	rjmp	.+36     	; 0x11e0 <__fixunssfsi+0x46>
    11bc:	b1 30       	cpi	r27, 0x01	; 1
    11be:	81 f0       	breq	.+32     	; 0x11e0 <__fixunssfsi+0x46>
    11c0:	9f d0       	rcall	.+318    	; 0x1300 <__fp_zero>
    11c2:	b1 e0       	ldi	r27, 0x01	; 1
    11c4:	08 95       	ret
    11c6:	9c c0       	rjmp	.+312    	; 0x1300 <__fp_zero>
    11c8:	67 2f       	mov	r22, r23
    11ca:	78 2f       	mov	r23, r24
    11cc:	88 27       	eor	r24, r24
    11ce:	b8 5f       	subi	r27, 0xF8	; 248
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__fixunssfsi+0x46>
    11d2:	b9 3f       	cpi	r27, 0xF9	; 249
    11d4:	cc f3       	brlt	.-14     	; 0x11c8 <__fixunssfsi+0x2e>
    11d6:	86 95       	lsr	r24
    11d8:	77 95       	ror	r23
    11da:	67 95       	ror	r22
    11dc:	b3 95       	inc	r27
    11de:	d9 f7       	brne	.-10     	; 0x11d6 <__fixunssfsi+0x3c>
    11e0:	3e f4       	brtc	.+14     	; 0x11f0 <__fixunssfsi+0x56>
    11e2:	90 95       	com	r25
    11e4:	80 95       	com	r24
    11e6:	70 95       	com	r23
    11e8:	61 95       	neg	r22
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	8f 4f       	sbci	r24, 0xFF	; 255
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	08 95       	ret

000011f2 <__floatunsisf>:
    11f2:	e8 94       	clt
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <__floatsisf+0x12>

000011f6 <__floatsisf>:
    11f6:	97 fb       	bst	r25, 7
    11f8:	3e f4       	brtc	.+14     	; 0x1208 <__floatsisf+0x12>
    11fa:	90 95       	com	r25
    11fc:	80 95       	com	r24
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	99 23       	and	r25, r25
    120a:	a9 f0       	breq	.+42     	; 0x1236 <__floatsisf+0x40>
    120c:	f9 2f       	mov	r31, r25
    120e:	96 e9       	ldi	r25, 0x96	; 150
    1210:	bb 27       	eor	r27, r27
    1212:	93 95       	inc	r25
    1214:	f6 95       	lsr	r31
    1216:	87 95       	ror	r24
    1218:	77 95       	ror	r23
    121a:	67 95       	ror	r22
    121c:	b7 95       	ror	r27
    121e:	f1 11       	cpse	r31, r1
    1220:	f8 cf       	rjmp	.-16     	; 0x1212 <__floatsisf+0x1c>
    1222:	fa f4       	brpl	.+62     	; 0x1262 <__floatsisf+0x6c>
    1224:	bb 0f       	add	r27, r27
    1226:	11 f4       	brne	.+4      	; 0x122c <__floatsisf+0x36>
    1228:	60 ff       	sbrs	r22, 0
    122a:	1b c0       	rjmp	.+54     	; 0x1262 <__floatsisf+0x6c>
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	16 c0       	rjmp	.+44     	; 0x1262 <__floatsisf+0x6c>
    1236:	88 23       	and	r24, r24
    1238:	11 f0       	breq	.+4      	; 0x123e <__floatsisf+0x48>
    123a:	96 e9       	ldi	r25, 0x96	; 150
    123c:	11 c0       	rjmp	.+34     	; 0x1260 <__floatsisf+0x6a>
    123e:	77 23       	and	r23, r23
    1240:	21 f0       	breq	.+8      	; 0x124a <__floatsisf+0x54>
    1242:	9e e8       	ldi	r25, 0x8E	; 142
    1244:	87 2f       	mov	r24, r23
    1246:	76 2f       	mov	r23, r22
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <__floatsisf+0x5e>
    124a:	66 23       	and	r22, r22
    124c:	71 f0       	breq	.+28     	; 0x126a <__floatsisf+0x74>
    124e:	96 e8       	ldi	r25, 0x86	; 134
    1250:	86 2f       	mov	r24, r22
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	2a f0       	brmi	.+10     	; 0x1262 <__floatsisf+0x6c>
    1258:	9a 95       	dec	r25
    125a:	66 0f       	add	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	88 1f       	adc	r24, r24
    1260:	da f7       	brpl	.-10     	; 0x1258 <__floatsisf+0x62>
    1262:	88 0f       	add	r24, r24
    1264:	96 95       	lsr	r25
    1266:	87 95       	ror	r24
    1268:	97 f9       	bld	r25, 7
    126a:	08 95       	ret

0000126c <__fp_inf>:
    126c:	97 f9       	bld	r25, 7
    126e:	9f 67       	ori	r25, 0x7F	; 127
    1270:	80 e8       	ldi	r24, 0x80	; 128
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	08 95       	ret

00001278 <__fp_nan>:
    1278:	9f ef       	ldi	r25, 0xFF	; 255
    127a:	80 ec       	ldi	r24, 0xC0	; 192
    127c:	08 95       	ret

0000127e <__fp_pscA>:
    127e:	00 24       	eor	r0, r0
    1280:	0a 94       	dec	r0
    1282:	16 16       	cp	r1, r22
    1284:	17 06       	cpc	r1, r23
    1286:	18 06       	cpc	r1, r24
    1288:	09 06       	cpc	r0, r25
    128a:	08 95       	ret

0000128c <__fp_pscB>:
    128c:	00 24       	eor	r0, r0
    128e:	0a 94       	dec	r0
    1290:	12 16       	cp	r1, r18
    1292:	13 06       	cpc	r1, r19
    1294:	14 06       	cpc	r1, r20
    1296:	05 06       	cpc	r0, r21
    1298:	08 95       	ret

0000129a <__fp_round>:
    129a:	09 2e       	mov	r0, r25
    129c:	03 94       	inc	r0
    129e:	00 0c       	add	r0, r0
    12a0:	11 f4       	brne	.+4      	; 0x12a6 <__fp_round+0xc>
    12a2:	88 23       	and	r24, r24
    12a4:	52 f0       	brmi	.+20     	; 0x12ba <__fp_round+0x20>
    12a6:	bb 0f       	add	r27, r27
    12a8:	40 f4       	brcc	.+16     	; 0x12ba <__fp_round+0x20>
    12aa:	bf 2b       	or	r27, r31
    12ac:	11 f4       	brne	.+4      	; 0x12b2 <__fp_round+0x18>
    12ae:	60 ff       	sbrs	r22, 0
    12b0:	04 c0       	rjmp	.+8      	; 0x12ba <__fp_round+0x20>
    12b2:	6f 5f       	subi	r22, 0xFF	; 255
    12b4:	7f 4f       	sbci	r23, 0xFF	; 255
    12b6:	8f 4f       	sbci	r24, 0xFF	; 255
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	08 95       	ret

000012bc <__fp_split3>:
    12bc:	57 fd       	sbrc	r21, 7
    12be:	90 58       	subi	r25, 0x80	; 128
    12c0:	44 0f       	add	r20, r20
    12c2:	55 1f       	adc	r21, r21
    12c4:	59 f0       	breq	.+22     	; 0x12dc <__fp_splitA+0x10>
    12c6:	5f 3f       	cpi	r21, 0xFF	; 255
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <__fp_splitA+0x1a>
    12ca:	47 95       	ror	r20

000012cc <__fp_splitA>:
    12cc:	88 0f       	add	r24, r24
    12ce:	97 fb       	bst	r25, 7
    12d0:	99 1f       	adc	r25, r25
    12d2:	61 f0       	breq	.+24     	; 0x12ec <__fp_splitA+0x20>
    12d4:	9f 3f       	cpi	r25, 0xFF	; 255
    12d6:	79 f0       	breq	.+30     	; 0x12f6 <__fp_splitA+0x2a>
    12d8:	87 95       	ror	r24
    12da:	08 95       	ret
    12dc:	12 16       	cp	r1, r18
    12de:	13 06       	cpc	r1, r19
    12e0:	14 06       	cpc	r1, r20
    12e2:	55 1f       	adc	r21, r21
    12e4:	f2 cf       	rjmp	.-28     	; 0x12ca <__fp_split3+0xe>
    12e6:	46 95       	lsr	r20
    12e8:	f1 df       	rcall	.-30     	; 0x12cc <__fp_splitA>
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <__fp_splitA+0x30>
    12ec:	16 16       	cp	r1, r22
    12ee:	17 06       	cpc	r1, r23
    12f0:	18 06       	cpc	r1, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	f1 cf       	rjmp	.-30     	; 0x12d8 <__fp_splitA+0xc>
    12f6:	86 95       	lsr	r24
    12f8:	71 05       	cpc	r23, r1
    12fa:	61 05       	cpc	r22, r1
    12fc:	08 94       	sec
    12fe:	08 95       	ret

00001300 <__fp_zero>:
    1300:	e8 94       	clt

00001302 <__fp_szero>:
    1302:	bb 27       	eor	r27, r27
    1304:	66 27       	eor	r22, r22
    1306:	77 27       	eor	r23, r23
    1308:	cb 01       	movw	r24, r22
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret

0000130e <lrint>:
    130e:	de df       	rcall	.-68     	; 0x12cc <__fp_splitA>
    1310:	a8 f1       	brcs	.+106    	; 0x137c <lrint+0x6e>
    1312:	9e 57       	subi	r25, 0x7E	; 126
    1314:	a8 f1       	brcs	.+106    	; 0x1380 <lrint+0x72>
    1316:	98 51       	subi	r25, 0x18	; 24
    1318:	60 f0       	brcs	.+24     	; 0x1332 <lrint+0x24>
    131a:	39 f1       	breq	.+78     	; 0x136a <lrint+0x5c>
    131c:	98 30       	cpi	r25, 0x08	; 8
    131e:	70 f5       	brcc	.+92     	; 0x137c <lrint+0x6e>
    1320:	09 2e       	mov	r0, r25
    1322:	99 27       	eor	r25, r25
    1324:	66 0f       	add	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	d1 f7       	brne	.-12     	; 0x1324 <lrint+0x16>
    1330:	1c c0       	rjmp	.+56     	; 0x136a <lrint+0x5c>
    1332:	bb 27       	eor	r27, r27
    1334:	99 3f       	cpi	r25, 0xF9	; 249
    1336:	4c f4       	brge	.+18     	; 0x134a <lrint+0x3c>
    1338:	b1 11       	cpse	r27, r1
    133a:	b1 e0       	ldi	r27, 0x01	; 1
    133c:	b6 2b       	or	r27, r22
    133e:	67 2f       	mov	r22, r23
    1340:	78 2f       	mov	r23, r24
    1342:	88 27       	eor	r24, r24
    1344:	98 5f       	subi	r25, 0xF8	; 248
    1346:	b1 f7       	brne	.-20     	; 0x1334 <lrint+0x26>
    1348:	08 c0       	rjmp	.+16     	; 0x135a <lrint+0x4c>
    134a:	86 95       	lsr	r24
    134c:	77 95       	ror	r23
    134e:	67 95       	ror	r22
    1350:	b7 95       	ror	r27
    1352:	08 f4       	brcc	.+2      	; 0x1356 <lrint+0x48>
    1354:	b1 60       	ori	r27, 0x01	; 1
    1356:	93 95       	inc	r25
    1358:	c1 f7       	brne	.-16     	; 0x134a <lrint+0x3c>
    135a:	bb 0f       	add	r27, r27
    135c:	30 f4       	brcc	.+12     	; 0x136a <lrint+0x5c>
    135e:	11 f4       	brne	.+4      	; 0x1364 <lrint+0x56>
    1360:	60 ff       	sbrs	r22, 0
    1362:	03 c0       	rjmp	.+6      	; 0x136a <lrint+0x5c>
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	3e f4       	brtc	.+14     	; 0x137a <lrint+0x6c>
    136c:	90 95       	com	r25
    136e:	80 95       	com	r24
    1370:	70 95       	com	r23
    1372:	61 95       	neg	r22
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	8f 4f       	sbci	r24, 0xFF	; 255
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	08 95       	ret
    137c:	68 94       	set
    137e:	c1 cf       	rjmp	.-126    	; 0x1302 <__fp_szero>
    1380:	bf cf       	rjmp	.-130    	; 0x1300 <__fp_zero>

00001382 <__mulsf3>:
    1382:	0b d0       	rcall	.+22     	; 0x139a <__mulsf3x>
    1384:	8a cf       	rjmp	.-236    	; 0x129a <__fp_round>
    1386:	7b df       	rcall	.-266    	; 0x127e <__fp_pscA>
    1388:	28 f0       	brcs	.+10     	; 0x1394 <__mulsf3+0x12>
    138a:	80 df       	rcall	.-256    	; 0x128c <__fp_pscB>
    138c:	18 f0       	brcs	.+6      	; 0x1394 <__mulsf3+0x12>
    138e:	95 23       	and	r25, r21
    1390:	09 f0       	breq	.+2      	; 0x1394 <__mulsf3+0x12>
    1392:	6c cf       	rjmp	.-296    	; 0x126c <__fp_inf>
    1394:	71 cf       	rjmp	.-286    	; 0x1278 <__fp_nan>
    1396:	11 24       	eor	r1, r1
    1398:	b4 cf       	rjmp	.-152    	; 0x1302 <__fp_szero>

0000139a <__mulsf3x>:
    139a:	90 df       	rcall	.-224    	; 0x12bc <__fp_split3>
    139c:	a0 f3       	brcs	.-24     	; 0x1386 <__mulsf3+0x4>

0000139e <__mulsf3_pse>:
    139e:	95 9f       	mul	r25, r21
    13a0:	d1 f3       	breq	.-12     	; 0x1396 <__mulsf3+0x14>
    13a2:	95 0f       	add	r25, r21
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	55 1f       	adc	r21, r21
    13a8:	62 9f       	mul	r22, r18
    13aa:	f0 01       	movw	r30, r0
    13ac:	72 9f       	mul	r23, r18
    13ae:	bb 27       	eor	r27, r27
    13b0:	f0 0d       	add	r31, r0
    13b2:	b1 1d       	adc	r27, r1
    13b4:	63 9f       	mul	r22, r19
    13b6:	aa 27       	eor	r26, r26
    13b8:	f0 0d       	add	r31, r0
    13ba:	b1 1d       	adc	r27, r1
    13bc:	aa 1f       	adc	r26, r26
    13be:	64 9f       	mul	r22, r20
    13c0:	66 27       	eor	r22, r22
    13c2:	b0 0d       	add	r27, r0
    13c4:	a1 1d       	adc	r26, r1
    13c6:	66 1f       	adc	r22, r22
    13c8:	82 9f       	mul	r24, r18
    13ca:	22 27       	eor	r18, r18
    13cc:	b0 0d       	add	r27, r0
    13ce:	a1 1d       	adc	r26, r1
    13d0:	62 1f       	adc	r22, r18
    13d2:	73 9f       	mul	r23, r19
    13d4:	b0 0d       	add	r27, r0
    13d6:	a1 1d       	adc	r26, r1
    13d8:	62 1f       	adc	r22, r18
    13da:	83 9f       	mul	r24, r19
    13dc:	a0 0d       	add	r26, r0
    13de:	61 1d       	adc	r22, r1
    13e0:	22 1f       	adc	r18, r18
    13e2:	74 9f       	mul	r23, r20
    13e4:	33 27       	eor	r19, r19
    13e6:	a0 0d       	add	r26, r0
    13e8:	61 1d       	adc	r22, r1
    13ea:	23 1f       	adc	r18, r19
    13ec:	84 9f       	mul	r24, r20
    13ee:	60 0d       	add	r22, r0
    13f0:	21 1d       	adc	r18, r1
    13f2:	82 2f       	mov	r24, r18
    13f4:	76 2f       	mov	r23, r22
    13f6:	6a 2f       	mov	r22, r26
    13f8:	11 24       	eor	r1, r1
    13fa:	9f 57       	subi	r25, 0x7F	; 127
    13fc:	50 40       	sbci	r21, 0x00	; 0
    13fe:	8a f0       	brmi	.+34     	; 0x1422 <__mulsf3_pse+0x84>
    1400:	e1 f0       	breq	.+56     	; 0x143a <__mulsf3_pse+0x9c>
    1402:	88 23       	and	r24, r24
    1404:	4a f0       	brmi	.+18     	; 0x1418 <__mulsf3_pse+0x7a>
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	bb 1f       	adc	r27, r27
    140c:	66 1f       	adc	r22, r22
    140e:	77 1f       	adc	r23, r23
    1410:	88 1f       	adc	r24, r24
    1412:	91 50       	subi	r25, 0x01	; 1
    1414:	50 40       	sbci	r21, 0x00	; 0
    1416:	a9 f7       	brne	.-22     	; 0x1402 <__mulsf3_pse+0x64>
    1418:	9e 3f       	cpi	r25, 0xFE	; 254
    141a:	51 05       	cpc	r21, r1
    141c:	70 f0       	brcs	.+28     	; 0x143a <__mulsf3_pse+0x9c>
    141e:	26 cf       	rjmp	.-436    	; 0x126c <__fp_inf>
    1420:	70 cf       	rjmp	.-288    	; 0x1302 <__fp_szero>
    1422:	5f 3f       	cpi	r21, 0xFF	; 255
    1424:	ec f3       	brlt	.-6      	; 0x1420 <__mulsf3_pse+0x82>
    1426:	98 3e       	cpi	r25, 0xE8	; 232
    1428:	dc f3       	brlt	.-10     	; 0x1420 <__mulsf3_pse+0x82>
    142a:	86 95       	lsr	r24
    142c:	77 95       	ror	r23
    142e:	67 95       	ror	r22
    1430:	b7 95       	ror	r27
    1432:	f7 95       	ror	r31
    1434:	e7 95       	ror	r30
    1436:	9f 5f       	subi	r25, 0xFF	; 255
    1438:	c1 f7       	brne	.-16     	; 0x142a <__mulsf3_pse+0x8c>
    143a:	fe 2b       	or	r31, r30
    143c:	88 0f       	add	r24, r24
    143e:	91 1d       	adc	r25, r1
    1440:	96 95       	lsr	r25
    1442:	87 95       	ror	r24
    1444:	97 f9       	bld	r25, 7
    1446:	08 95       	ret

00001448 <__divmodsi4>:
    1448:	05 2e       	mov	r0, r21
    144a:	97 fb       	bst	r25, 7
    144c:	1e f4       	brtc	.+6      	; 0x1454 <__divmodsi4+0xc>
    144e:	00 94       	com	r0
    1450:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__negsi2>
    1454:	57 fd       	sbrc	r21, 7
    1456:	07 d0       	rcall	.+14     	; 0x1466 <__divmodsi4_neg2>
    1458:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__udivmodsi4>
    145c:	07 fc       	sbrc	r0, 7
    145e:	03 d0       	rcall	.+6      	; 0x1466 <__divmodsi4_neg2>
    1460:	4e f4       	brtc	.+18     	; 0x1474 <__divmodsi4_exit>
    1462:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__negsi2>

00001466 <__divmodsi4_neg2>:
    1466:	50 95       	com	r21
    1468:	40 95       	com	r20
    146a:	30 95       	com	r19
    146c:	21 95       	neg	r18
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	4f 4f       	sbci	r20, 0xFF	; 255
    1472:	5f 4f       	sbci	r21, 0xFF	; 255

00001474 <__divmodsi4_exit>:
    1474:	08 95       	ret

00001476 <__negsi2>:
    1476:	90 95       	com	r25
    1478:	80 95       	com	r24
    147a:	70 95       	com	r23
    147c:	61 95       	neg	r22
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	08 95       	ret

00001486 <__umulhisi3>:
    1486:	a2 9f       	mul	r26, r18
    1488:	b0 01       	movw	r22, r0
    148a:	b3 9f       	mul	r27, r19
    148c:	c0 01       	movw	r24, r0
    148e:	a3 9f       	mul	r26, r19
    1490:	70 0d       	add	r23, r0
    1492:	81 1d       	adc	r24, r1
    1494:	11 24       	eor	r1, r1
    1496:	91 1d       	adc	r25, r1
    1498:	b2 9f       	mul	r27, r18
    149a:	70 0d       	add	r23, r0
    149c:	81 1d       	adc	r24, r1
    149e:	11 24       	eor	r1, r1
    14a0:	91 1d       	adc	r25, r1
    14a2:	08 95       	ret

000014a4 <__udivmodsi4>:
    14a4:	a1 e2       	ldi	r26, 0x21	; 33
    14a6:	1a 2e       	mov	r1, r26
    14a8:	aa 1b       	sub	r26, r26
    14aa:	bb 1b       	sub	r27, r27
    14ac:	fd 01       	movw	r30, r26
    14ae:	0d c0       	rjmp	.+26     	; 0x14ca <__udivmodsi4_ep>

000014b0 <__udivmodsi4_loop>:
    14b0:	aa 1f       	adc	r26, r26
    14b2:	bb 1f       	adc	r27, r27
    14b4:	ee 1f       	adc	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	a2 17       	cp	r26, r18
    14ba:	b3 07       	cpc	r27, r19
    14bc:	e4 07       	cpc	r30, r20
    14be:	f5 07       	cpc	r31, r21
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <__udivmodsi4_ep>
    14c2:	a2 1b       	sub	r26, r18
    14c4:	b3 0b       	sbc	r27, r19
    14c6:	e4 0b       	sbc	r30, r20
    14c8:	f5 0b       	sbc	r31, r21

000014ca <__udivmodsi4_ep>:
    14ca:	66 1f       	adc	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	1a 94       	dec	r1
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <__udivmodsi4_loop>
    14d6:	60 95       	com	r22
    14d8:	70 95       	com	r23
    14da:	80 95       	com	r24
    14dc:	90 95       	com	r25
    14de:	9b 01       	movw	r18, r22
    14e0:	ac 01       	movw	r20, r24
    14e2:	bd 01       	movw	r22, r26
    14e4:	cf 01       	movw	r24, r30
    14e6:	08 95       	ret

000014e8 <_exit>:
    14e8:	f8 94       	cli

000014ea <__stop_program>:
    14ea:	ff cf       	rjmp	.-2      	; 0x14ea <__stop_program>
