
Test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000008a2  00000936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  0000093a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000606  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000272  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037a  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c7  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  70:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_28>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  7c:	3f 01       	movw	r6, r30
  7e:	5b 01       	movw	r10, r22
  80:	5b 01       	movw	r10, r22
  82:	5b 01       	movw	r10, r22
  84:	5b 01       	movw	r10, r22
  86:	5b 01       	movw	r10, r22
  88:	5b 01       	movw	r10, r22
  8a:	5b 01       	movw	r10, r22
  8c:	5b 01       	movw	r10, r22
  8e:	5b 01       	movw	r10, r22
  90:	5b 01       	movw	r10, r22
  92:	5b 01       	movw	r10, r22
  94:	5b 01       	movw	r10, r22
  96:	5b 01       	movw	r10, r22
  98:	5b 01       	movw	r10, r22
  9a:	5b 01       	movw	r10, r22
  9c:	5b 01       	movw	r10, r22
  9e:	5b 01       	movw	r10, r22
  a0:	58 01       	movw	r10, r16
  a2:	5b 01       	movw	r10, r22
  a4:	42 01       	movw	r8, r4
  a6:	5b 01       	movw	r10, r22
  a8:	5b 01       	movw	r10, r22
  aa:	5b 01       	movw	r10, r22
  ac:	5b 01       	movw	r10, r22
  ae:	5b 01       	movw	r10, r22
  b0:	5b 01       	movw	r10, r22
  b2:	5b 01       	movw	r10, r22
  b4:	5b 01       	movw	r10, r22
  b6:	5b 01       	movw	r10, r22
  b8:	5b 01       	movw	r10, r22
  ba:	5b 01       	movw	r10, r22
  bc:	5b 01       	movw	r10, r22
  be:	5b 01       	movw	r10, r22
  c0:	5b 01       	movw	r10, r22
  c2:	4d 01       	movw	r8, r26
  c4:	5b 01       	movw	r10, r22
  c6:	5b 01       	movw	r10, r22
  c8:	5b 01       	movw	r10, r22
  ca:	5b 01       	movw	r10, r22
  cc:	5b 01       	movw	r10, r22
  ce:	5b 01       	movw	r10, r22
  d0:	5b 01       	movw	r10, r22
  d2:	5b 01       	movw	r10, r22
  d4:	5b 01       	movw	r10, r22
  d6:	5b 01       	movw	r10, r22
  d8:	5b 01       	movw	r10, r22
  da:	5b 01       	movw	r10, r22
  dc:	5b 01       	movw	r10, r22
  de:	5b 01       	movw	r10, r22
  e0:	58 01       	movw	r10, r16
  e2:	5b 01       	movw	r10, r22
  e4:	42 01       	movw	r8, r4
  e6:	5b 01       	movw	r10, r22
  e8:	5b 01       	movw	r10, r22
  ea:	5b 01       	movw	r10, r22
  ec:	5b 01       	movw	r10, r22
  ee:	5b 01       	movw	r10, r22
  f0:	5b 01       	movw	r10, r22
  f2:	5b 01       	movw	r10, r22
  f4:	5b 01       	movw	r10, r22
  f6:	5b 01       	movw	r10, r22
  f8:	5b 01       	movw	r10, r22
  fa:	5b 01       	movw	r10, r22
  fc:	5b 01       	movw	r10, r22
  fe:	5b 01       	movw	r10, r22
 100:	5b 01       	movw	r10, r22
 102:	4d 01       	movw	r8, r26

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d8 e0       	ldi	r29, 0x08	; 8
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
 110:	11 e0       	ldi	r17, 0x01	; 1
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	e2 ea       	ldi	r30, 0xA2	; 162
 118:	f8 e0       	ldi	r31, 0x08	; 8
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
 11c:	05 90       	lpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a4 30       	cpi	r26, 0x04	; 4
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	a4 e0       	ldi	r26, 0x04	; 4
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	ae 30       	cpi	r26, 0x0E	; 14
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	0e 94 18 01 	call	0x230	; 0x230 <main>
 13a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <_exit>

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <initUSART1>:
		//TODO:: Please write your application code
	}
	
}

void initUSART1(int baud){
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	9c 01       	movw	r18, r24

	DDRD &= ~(1<<PORTD2);
 148:	52 98       	cbi	0x0a, 2	; 10
	
	
	//setting the UMSEL bit to 0 for asynchronous mode
	UCSR1C &= ~((1 << UMSEL10) | (1 << UMSEL11));
 14a:	ca ec       	ldi	r28, 0xCA	; 202
 14c:	d0 e0       	ldi	r29, 0x00	; 0
 14e:	88 81       	ld	r24, Y
 150:	8f 73       	andi	r24, 0x3F	; 63
 152:	88 83       	st	Y, r24

	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
 154:	e8 ec       	ldi	r30, 0xC8	; 200
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8d 7f       	andi	r24, 0xFD	; 253
 15c:	80 83       	st	Z, r24
	
	// Set baud rate
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
 15e:	c9 01       	movw	r24, r18
 160:	aa 27       	eor	r26, r26
 162:	97 fd       	sbrc	r25, 7
 164:	a0 95       	com	r26
 166:	ba 2f       	mov	r27, r26
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	aa 1f       	adc	r26, r26
 16e:	bb 1f       	adc	r27, r27
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	aa 1f       	adc	r26, r26
 176:	bb 1f       	adc	r27, r27
 178:	9c 01       	movw	r18, r24
 17a:	ad 01       	movw	r20, r26
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	44 1f       	adc	r20, r20
 182:	55 1f       	adc	r21, r21
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	44 1f       	adc	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	72 e1       	ldi	r23, 0x12	; 18
 190:	8a e7       	ldi	r24, 0x7A	; 122
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 08 04 	call	0x810	; 0x810 <__divmodsi4>
 198:	ca 01       	movw	r24, r20
 19a:	b9 01       	movw	r22, r18
 19c:	61 50       	subi	r22, 0x01	; 1
 19e:	71 09       	sbc	r23, r1
 1a0:	81 09       	sbc	r24, r1
 1a2:	91 09       	sbc	r25, r1
 1a4:	0e 94 97 02 	call	0x52e	; 0x52e <__floatsisf>
 1a8:	0e 94 23 03 	call	0x646	; 0x646 <lrint>
	UBRR1H = (unsigned char)(ubbr_>>8);
 1ac:	27 2f       	mov	r18, r23
 1ae:	33 27       	eor	r19, r19
 1b0:	27 fd       	sbrc	r18, 7
 1b2:	3a 95       	dec	r19
 1b4:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
 1b8:	60 93 cc 00 	sts	0x00CC, r22
	
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1);//|(1<<TXEN1);
 1bc:	e9 ec       	ldi	r30, 0xC9	; 201
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	80 83       	st	Z, r24
	
	//8 bit data
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
 1c4:	88 81       	ld	r24, Y
 1c6:	86 60       	ori	r24, 0x06	; 6
 1c8:	88 83       	st	Y, r24
	UCSR1B &= ~(1<<UCSZ12);
 1ca:	80 81       	ld	r24, Z
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	80 83       	st	Z, r24
	
	//1 stop bit
	UCSR1C&=~(1<<USBS1);
 1d0:	88 81       	ld	r24, Y
 1d2:	87 7f       	andi	r24, 0xF7	; 247
 1d4:	88 83       	st	Y, r24
	
	// Parity mode - none
	UCSR1C &= ~((1 << UPM10) | (1<<UPM11));
 1d6:	88 81       	ld	r24, Y
 1d8:	8f 7c       	andi	r24, 0xCF	; 207
 1da:	88 83       	st	Y, r24
	
	//Enable Receive Interrupt
	UCSR1B |= (1<<RXCIE1);
 1dc:	80 81       	ld	r24, Z
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	80 83       	st	Z, r24
	
	
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <getLastChar>:

char getLastChar(){
	char ret = '\0';
	
	
	if(rxBuffer[rxReadPos].pack_no != -1){
 1e8:	e0 91 07 01 	lds	r30, 0x0107
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	e8 5f       	subi	r30, 0xF8	; 248
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	81 81       	ldd	r24, Z+1	; 0x01
		// read the character from buffer
		ret = rxBuffer[rxReadPos].data;
 1f8:	e0 91 07 01 	lds	r30, 0x0107
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e8 5f       	subi	r30, 0xF8	; 248
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	80 81       	ld	r24, Z
	}
	

	
	// clear the character that was read
	rxBuffer[rxReadPos].data = '\0';
 208:	e0 91 07 01 	lds	r30, 0x0107
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e8 5f       	subi	r30, 0xF8	; 248
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	10 82       	st	Z, r1
	
	//increment position from which to read, if it reached the end set the position to start
	rxReadPos++;
 218:	90 91 07 01 	lds	r25, 0x0107
 21c:	9f 5f       	subi	r25, 0xFF	; 255
 21e:	90 93 07 01 	sts	0x0107, r25
	if(rxReadPos >= RX_BUFFER_SIZE){
 222:	90 91 07 01 	lds	r25, 0x0107
 226:	93 30       	cpi	r25, 0x03	; 3
 228:	10 f0       	brcs	.+4      	; 0x22e <getLastChar+0x46>
		rxReadPos = 0;
 22a:	10 92 07 01 	sts	0x0107, r1
	}
	
	return ret;
}
 22e:	08 95       	ret

00000230 <main>:
int enableRight = 1;
int enableLeft = 1;


int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	
	initUSART1(9600);
 23a:	80 e8       	ldi	r24, 0x80	; 128
 23c:	95 e2       	ldi	r25, 0x25	; 37
 23e:	0e 94 a1 00 	call	0x142	; 0x142 <initUSART1>
	initTimer0();
 242:	0e 94 cf 03 	call	0x79e	; 0x79e <initTimer0>
	initTimer2();
 246:	0e 94 e6 03 	call	0x7cc	; 0x7cc <initTimer2>
	PORTA |= (1<<PORTA0);
	
	DDRA= (1<<PORTA1);
	PORTA &= ~(1<<PORTA1);
*/
	LED_CMD_DDR &= ~(1<<LED_CMD_PINx);
 24a:	21 98       	cbi	0x04, 1	; 4
	
	
	
	//char data;
	
	sei();
 24c:	78 94       	sei
							*/
							//changePwm0A(0);
						
						}
						if(enableRight){
							changePwm_MotorRF(c-'0');
 24e:	0f 2e       	mov	r0, r31
 250:	f3 eb       	ldi	r31, 0xB3	; 179
 252:	ef 2e       	mov	r14, r31
 254:	f1 2c       	mov	r15, r1
 256:	f0 2d       	mov	r31, r0
							changePwm_MotorRB(c-'0');
 258:	04 eb       	ldi	r16, 0xB4	; 180
 25a:	10 e0       	ldi	r17, 0x00	; 0
		
		
		*/
		
		//consume the buffer
		volatile	  char c = getLastChar();
 25c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <getLastChar>
 260:	89 83       	std	Y+1, r24	; 0x01
		if(c != '\0'){
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	88 23       	and	r24, r24
 266:	d1 f3       	breq	.-12     	; 0x25c <main+0x2c>
			switch(c){
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	f0 97       	sbiw	r30, 0x30	; 48
 270:	e4 34       	cpi	r30, 0x44	; 68
 272:	f1 05       	cpc	r31, r1
 274:	00 f5       	brcc	.+64     	; 0x2b6 <main+0x86>
 276:	e2 5c       	subi	r30, 0xC2	; 194
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	0c 94 27 04 	jmp	0x84e	; 0x84e <__tablejump2__>
				case '0':
					breakAll();
 27e:	0e 94 c0 03 	call	0x780	; 0x780 <breakAll>
					changePwm_MotorRF(0);
					changePwm_MotorRB(0);
					*/
					//changePwm0A(0);
					//changePwm0B(0);
					break;
 282:	ec cf       	rjmp	.-40     	; 0x25c <main+0x2c>
				case 'D':
				case 'd':
					enableRight ^= 1;
 284:	80 91 02 01 	lds	r24, 0x0102
 288:	90 91 03 01 	lds	r25, 0x0103
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	82 27       	eor	r24, r18
 290:	90 93 03 01 	sts	0x0103, r25
 294:	80 93 02 01 	sts	0x0102, r24
					break;
 298:	e1 cf       	rjmp	.-62     	; 0x25c <main+0x2c>
				case 'S':
				case 's':
					enableLeft ^= 1;
 29a:	80 91 00 01 	lds	r24, 0x0100
 29e:	90 91 01 01 	lds	r25, 0x0101
 2a2:	e1 e0       	ldi	r30, 0x01	; 1
 2a4:	8e 27       	eor	r24, r30
 2a6:	90 93 01 01 	sts	0x0101, r25
 2aa:	80 93 00 01 	sts	0x0100, r24
					break;
 2ae:	d6 cf       	rjmp	.-84     	; 0x25c <main+0x2c>
				case 'b':
				case 'B'://change direction
					PINA |= (1<<PORTA0);
 2b0:	00 9a       	sbi	0x00, 0	; 0
					PINA |= (1<<PORTA1);
 2b2:	01 9a       	sbi	0x00, 1	; 0
					break;
 2b4:	d3 cf       	rjmp	.-90     	; 0x25c <main+0x2c>
				default:
					if(isdigit(c)){
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	c0 97       	sbiw	r24, 0x30	; 48
 2bc:	0a 97       	sbiw	r24, 0x0a	; 10
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <main+0x92>
 2c0:	69 c0       	rjmp	.+210    	; 0x394 <main+0x164>
					
						if(enableLeft){
 2c2:	80 91 00 01 	lds	r24, 0x0100
 2c6:	90 91 01 01 	lds	r25, 0x0101
 2ca:	89 2b       	or	r24, r25
 2cc:	59 f1       	breq	.+86     	; 0x324 <main+0xf4>
							changePwm_MotorLF(c-'0');
 2ce:	69 81       	ldd	r22, Y+1	; 0x01
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 97 02 	call	0x52e	; 0x52e <__floatsisf>
 2da:	2f e8       	ldi	r18, 0x8F	; 143
 2dc:	32 ec       	ldi	r19, 0xC2	; 194
 2de:	45 ef       	ldi	r20, 0xF5	; 245
 2e0:	5e e3       	ldi	r21, 0x3E	; 62
 2e2:	0e 94 04 02 	call	0x408	; 0x408 <__subsf3>
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	4f e7       	ldi	r20, 0x7F	; 127
 2ec:	53 e4       	ldi	r21, 0x43	; 67
 2ee:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__mulsf3>
 2f2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 2f6:	67 bd       	out	0x27, r22	; 39
							changePwm_MotorLB(c-'0');
 2f8:	69 81       	ldd	r22, Y+1	; 0x01
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 97 02 	call	0x52e	; 0x52e <__floatsisf>
 304:	2f e8       	ldi	r18, 0x8F	; 143
 306:	32 ec       	ldi	r19, 0xC2	; 194
 308:	45 ef       	ldi	r20, 0xF5	; 245
 30a:	5e e3       	ldi	r21, 0x3E	; 62
 30c:	0e 94 04 02 	call	0x408	; 0x408 <__subsf3>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	4f e7       	ldi	r20, 0x7F	; 127
 316:	53 e4       	ldi	r21, 0x43	; 67
 318:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__mulsf3>
 31c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 320:	68 bd       	out	0x28, r22	; 40
 322:	02 c0       	rjmp	.+4      	; 0x328 <main+0xf8>
							//changePwm0A(c-'0');
							}else{
								breakLeft();
 324:	0e 94 c7 03 	call	0x78e	; 0x78e <breakLeft>
							changePwm_MotorLB(0);
							*/
							//changePwm0A(0);
						
						}
						if(enableRight){
 328:	80 91 02 01 	lds	r24, 0x0102
 32c:	90 91 03 01 	lds	r25, 0x0103
 330:	89 2b       	or	r24, r25
 332:	69 f1       	breq	.+90     	; 0x38e <main+0x15e>
							changePwm_MotorRF(c-'0');
 334:	69 81       	ldd	r22, Y+1	; 0x01
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 97 02 	call	0x52e	; 0x52e <__floatsisf>
 340:	2f e8       	ldi	r18, 0x8F	; 143
 342:	32 ec       	ldi	r19, 0xC2	; 194
 344:	45 ef       	ldi	r20, 0xF5	; 245
 346:	5e e3       	ldi	r21, 0x3E	; 62
 348:	0e 94 04 02 	call	0x408	; 0x408 <__subsf3>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	4f e7       	ldi	r20, 0x7F	; 127
 352:	53 e4       	ldi	r21, 0x43	; 67
 354:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__mulsf3>
 358:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 35c:	f7 01       	movw	r30, r14
 35e:	60 83       	st	Z, r22
							changePwm_MotorRB(c-'0');
 360:	69 81       	ldd	r22, Y+1	; 0x01
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 97 02 	call	0x52e	; 0x52e <__floatsisf>
 36c:	2f e8       	ldi	r18, 0x8F	; 143
 36e:	32 ec       	ldi	r19, 0xC2	; 194
 370:	45 ef       	ldi	r20, 0xF5	; 245
 372:	5e e3       	ldi	r21, 0x3E	; 62
 374:	0e 94 04 02 	call	0x408	; 0x408 <__subsf3>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	4f e7       	ldi	r20, 0x7F	; 127
 37e:	53 e4       	ldi	r21, 0x43	; 67
 380:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__mulsf3>
 384:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fixunssfsi>
 388:	f8 01       	movw	r30, r16
 38a:	60 83       	st	Z, r22
 38c:	67 cf       	rjmp	.-306    	; 0x25c <main+0x2c>
							//changePwm0B(c-'0');
						}
						else{
							breakRight();
 38e:	0e 94 ca 03 	call	0x794	; 0x794 <breakRight>
 392:	64 cf       	rjmp	.-312    	; 0x25c <main+0x2c>
						
						}
					
					
						}else{
							breakAll();
 394:	0e 94 c0 03 	call	0x780	; 0x780 <breakAll>
 398:	61 cf       	rjmp	.-318    	; 0x25c <main+0x2c>

0000039a <__vector_28>:
	}
	
	return ret;
}

ISR(USART1_RX_vect){
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
	
	rxBuffer[rxWritePos].data = UDR1;
 3ac:	e0 91 06 01 	lds	r30, 0x0106
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 91 ce 00 	lds	r24, 0x00CE
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	e8 5f       	subi	r30, 0xF8	; 248
 3bc:	fe 4f       	sbci	r31, 0xFE	; 254
 3be:	80 83       	st	Z, r24
	rxBuffer[rxWritePos].pack_no = 1;
 3c0:	e0 91 06 01 	lds	r30, 0x0106
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	e8 5f       	subi	r30, 0xF8	; 248
 3cc:	fe 4f       	sbci	r31, 0xFE	; 254
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	81 83       	std	Z+1, r24	; 0x01
	rxWritePos++;
 3d2:	80 91 06 01 	lds	r24, 0x0106
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	80 93 06 01 	sts	0x0106, r24
	
	read =1;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 05 01 	sts	0x0105, r25
 3e4:	80 93 04 01 	sts	0x0104, r24
	if(rxWritePos>=RX_BUFFER_SIZE){
 3e8:	80 91 06 01 	lds	r24, 0x0106
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	10 f0       	brcs	.+4      	; 0x3f4 <__vector_28+0x5a>
		rxWritePos = 0;
 3f0:	10 92 06 01 	sts	0x0106, r1
		
	}
	
	LED_CMD_PIN |= (1<<LED_CMD_PINx);
 3f4:	19 9a       	sbi	0x03, 1	; 3
	
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <__subsf3>:
 408:	50 58       	subi	r21, 0x80	; 128

0000040a <__addsf3>:
 40a:	bb 27       	eor	r27, r27
 40c:	aa 27       	eor	r26, r26
 40e:	0e d0       	rcall	.+28     	; 0x42c <__addsf3x>
 410:	e0 c0       	rjmp	.+448    	; 0x5d2 <__fp_round>
 412:	d1 d0       	rcall	.+418    	; 0x5b6 <__fp_pscA>
 414:	30 f0       	brcs	.+12     	; 0x422 <__addsf3+0x18>
 416:	d6 d0       	rcall	.+428    	; 0x5c4 <__fp_pscB>
 418:	20 f0       	brcs	.+8      	; 0x422 <__addsf3+0x18>
 41a:	31 f4       	brne	.+12     	; 0x428 <__addsf3+0x1e>
 41c:	9f 3f       	cpi	r25, 0xFF	; 255
 41e:	11 f4       	brne	.+4      	; 0x424 <__addsf3+0x1a>
 420:	1e f4       	brtc	.+6      	; 0x428 <__addsf3+0x1e>
 422:	c6 c0       	rjmp	.+396    	; 0x5b0 <__fp_nan>
 424:	0e f4       	brtc	.+2      	; 0x428 <__addsf3+0x1e>
 426:	e0 95       	com	r30
 428:	e7 fb       	bst	r30, 7
 42a:	bc c0       	rjmp	.+376    	; 0x5a4 <__fp_inf>

0000042c <__addsf3x>:
 42c:	e9 2f       	mov	r30, r25
 42e:	e2 d0       	rcall	.+452    	; 0x5f4 <__fp_split3>
 430:	80 f3       	brcs	.-32     	; 0x412 <__addsf3+0x8>
 432:	ba 17       	cp	r27, r26
 434:	62 07       	cpc	r22, r18
 436:	73 07       	cpc	r23, r19
 438:	84 07       	cpc	r24, r20
 43a:	95 07       	cpc	r25, r21
 43c:	18 f0       	brcs	.+6      	; 0x444 <__addsf3x+0x18>
 43e:	71 f4       	brne	.+28     	; 0x45c <__addsf3x+0x30>
 440:	9e f5       	brtc	.+102    	; 0x4a8 <__addsf3x+0x7c>
 442:	fa c0       	rjmp	.+500    	; 0x638 <__fp_zero>
 444:	0e f4       	brtc	.+2      	; 0x448 <__addsf3x+0x1c>
 446:	e0 95       	com	r30
 448:	0b 2e       	mov	r0, r27
 44a:	ba 2f       	mov	r27, r26
 44c:	a0 2d       	mov	r26, r0
 44e:	0b 01       	movw	r0, r22
 450:	b9 01       	movw	r22, r18
 452:	90 01       	movw	r18, r0
 454:	0c 01       	movw	r0, r24
 456:	ca 01       	movw	r24, r20
 458:	a0 01       	movw	r20, r0
 45a:	11 24       	eor	r1, r1
 45c:	ff 27       	eor	r31, r31
 45e:	59 1b       	sub	r21, r25
 460:	99 f0       	breq	.+38     	; 0x488 <__addsf3x+0x5c>
 462:	59 3f       	cpi	r21, 0xF9	; 249
 464:	50 f4       	brcc	.+20     	; 0x47a <__addsf3x+0x4e>
 466:	50 3e       	cpi	r21, 0xE0	; 224
 468:	68 f1       	brcs	.+90     	; 0x4c4 <__addsf3x+0x98>
 46a:	1a 16       	cp	r1, r26
 46c:	f0 40       	sbci	r31, 0x00	; 0
 46e:	a2 2f       	mov	r26, r18
 470:	23 2f       	mov	r18, r19
 472:	34 2f       	mov	r19, r20
 474:	44 27       	eor	r20, r20
 476:	58 5f       	subi	r21, 0xF8	; 248
 478:	f3 cf       	rjmp	.-26     	; 0x460 <__addsf3x+0x34>
 47a:	46 95       	lsr	r20
 47c:	37 95       	ror	r19
 47e:	27 95       	ror	r18
 480:	a7 95       	ror	r26
 482:	f0 40       	sbci	r31, 0x00	; 0
 484:	53 95       	inc	r21
 486:	c9 f7       	brne	.-14     	; 0x47a <__addsf3x+0x4e>
 488:	7e f4       	brtc	.+30     	; 0x4a8 <__addsf3x+0x7c>
 48a:	1f 16       	cp	r1, r31
 48c:	ba 0b       	sbc	r27, r26
 48e:	62 0b       	sbc	r22, r18
 490:	73 0b       	sbc	r23, r19
 492:	84 0b       	sbc	r24, r20
 494:	ba f0       	brmi	.+46     	; 0x4c4 <__addsf3x+0x98>
 496:	91 50       	subi	r25, 0x01	; 1
 498:	a1 f0       	breq	.+40     	; 0x4c2 <__addsf3x+0x96>
 49a:	ff 0f       	add	r31, r31
 49c:	bb 1f       	adc	r27, r27
 49e:	66 1f       	adc	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	c2 f7       	brpl	.-16     	; 0x496 <__addsf3x+0x6a>
 4a6:	0e c0       	rjmp	.+28     	; 0x4c4 <__addsf3x+0x98>
 4a8:	ba 0f       	add	r27, r26
 4aa:	62 1f       	adc	r22, r18
 4ac:	73 1f       	adc	r23, r19
 4ae:	84 1f       	adc	r24, r20
 4b0:	48 f4       	brcc	.+18     	; 0x4c4 <__addsf3x+0x98>
 4b2:	87 95       	ror	r24
 4b4:	77 95       	ror	r23
 4b6:	67 95       	ror	r22
 4b8:	b7 95       	ror	r27
 4ba:	f7 95       	ror	r31
 4bc:	9e 3f       	cpi	r25, 0xFE	; 254
 4be:	08 f0       	brcs	.+2      	; 0x4c2 <__addsf3x+0x96>
 4c0:	b3 cf       	rjmp	.-154    	; 0x428 <__addsf3+0x1e>
 4c2:	93 95       	inc	r25
 4c4:	88 0f       	add	r24, r24
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <__addsf3x+0x9e>
 4c8:	99 27       	eor	r25, r25
 4ca:	ee 0f       	add	r30, r30
 4cc:	97 95       	ror	r25
 4ce:	87 95       	ror	r24
 4d0:	08 95       	ret

000004d2 <__fixunssfsi>:
 4d2:	98 d0       	rcall	.+304    	; 0x604 <__fp_splitA>
 4d4:	88 f0       	brcs	.+34     	; 0x4f8 <__fixunssfsi+0x26>
 4d6:	9f 57       	subi	r25, 0x7F	; 127
 4d8:	90 f0       	brcs	.+36     	; 0x4fe <__fixunssfsi+0x2c>
 4da:	b9 2f       	mov	r27, r25
 4dc:	99 27       	eor	r25, r25
 4de:	b7 51       	subi	r27, 0x17	; 23
 4e0:	a0 f0       	brcs	.+40     	; 0x50a <__fixunssfsi+0x38>
 4e2:	d1 f0       	breq	.+52     	; 0x518 <__fixunssfsi+0x46>
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	88 1f       	adc	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	1a f0       	brmi	.+6      	; 0x4f4 <__fixunssfsi+0x22>
 4ee:	ba 95       	dec	r27
 4f0:	c9 f7       	brne	.-14     	; 0x4e4 <__fixunssfsi+0x12>
 4f2:	12 c0       	rjmp	.+36     	; 0x518 <__fixunssfsi+0x46>
 4f4:	b1 30       	cpi	r27, 0x01	; 1
 4f6:	81 f0       	breq	.+32     	; 0x518 <__fixunssfsi+0x46>
 4f8:	9f d0       	rcall	.+318    	; 0x638 <__fp_zero>
 4fa:	b1 e0       	ldi	r27, 0x01	; 1
 4fc:	08 95       	ret
 4fe:	9c c0       	rjmp	.+312    	; 0x638 <__fp_zero>
 500:	67 2f       	mov	r22, r23
 502:	78 2f       	mov	r23, r24
 504:	88 27       	eor	r24, r24
 506:	b8 5f       	subi	r27, 0xF8	; 248
 508:	39 f0       	breq	.+14     	; 0x518 <__fixunssfsi+0x46>
 50a:	b9 3f       	cpi	r27, 0xF9	; 249
 50c:	cc f3       	brlt	.-14     	; 0x500 <__fixunssfsi+0x2e>
 50e:	86 95       	lsr	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b3 95       	inc	r27
 516:	d9 f7       	brne	.-10     	; 0x50e <__fixunssfsi+0x3c>
 518:	3e f4       	brtc	.+14     	; 0x528 <__fixunssfsi+0x56>
 51a:	90 95       	com	r25
 51c:	80 95       	com	r24
 51e:	70 95       	com	r23
 520:	61 95       	neg	r22
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8f 4f       	sbci	r24, 0xFF	; 255
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	08 95       	ret

0000052a <__floatunsisf>:
 52a:	e8 94       	clt
 52c:	09 c0       	rjmp	.+18     	; 0x540 <__floatsisf+0x12>

0000052e <__floatsisf>:
 52e:	97 fb       	bst	r25, 7
 530:	3e f4       	brtc	.+14     	; 0x540 <__floatsisf+0x12>
 532:	90 95       	com	r25
 534:	80 95       	com	r24
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	99 23       	and	r25, r25
 542:	a9 f0       	breq	.+42     	; 0x56e <__floatsisf+0x40>
 544:	f9 2f       	mov	r31, r25
 546:	96 e9       	ldi	r25, 0x96	; 150
 548:	bb 27       	eor	r27, r27
 54a:	93 95       	inc	r25
 54c:	f6 95       	lsr	r31
 54e:	87 95       	ror	r24
 550:	77 95       	ror	r23
 552:	67 95       	ror	r22
 554:	b7 95       	ror	r27
 556:	f1 11       	cpse	r31, r1
 558:	f8 cf       	rjmp	.-16     	; 0x54a <__floatsisf+0x1c>
 55a:	fa f4       	brpl	.+62     	; 0x59a <__floatsisf+0x6c>
 55c:	bb 0f       	add	r27, r27
 55e:	11 f4       	brne	.+4      	; 0x564 <__floatsisf+0x36>
 560:	60 ff       	sbrs	r22, 0
 562:	1b c0       	rjmp	.+54     	; 0x59a <__floatsisf+0x6c>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	16 c0       	rjmp	.+44     	; 0x59a <__floatsisf+0x6c>
 56e:	88 23       	and	r24, r24
 570:	11 f0       	breq	.+4      	; 0x576 <__floatsisf+0x48>
 572:	96 e9       	ldi	r25, 0x96	; 150
 574:	11 c0       	rjmp	.+34     	; 0x598 <__floatsisf+0x6a>
 576:	77 23       	and	r23, r23
 578:	21 f0       	breq	.+8      	; 0x582 <__floatsisf+0x54>
 57a:	9e e8       	ldi	r25, 0x8E	; 142
 57c:	87 2f       	mov	r24, r23
 57e:	76 2f       	mov	r23, r22
 580:	05 c0       	rjmp	.+10     	; 0x58c <__floatsisf+0x5e>
 582:	66 23       	and	r22, r22
 584:	71 f0       	breq	.+28     	; 0x5a2 <__floatsisf+0x74>
 586:	96 e8       	ldi	r25, 0x86	; 134
 588:	86 2f       	mov	r24, r22
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	2a f0       	brmi	.+10     	; 0x59a <__floatsisf+0x6c>
 590:	9a 95       	dec	r25
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	da f7       	brpl	.-10     	; 0x590 <__floatsisf+0x62>
 59a:	88 0f       	add	r24, r24
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	97 f9       	bld	r25, 7
 5a2:	08 95       	ret

000005a4 <__fp_inf>:
 5a4:	97 f9       	bld	r25, 7
 5a6:	9f 67       	ori	r25, 0x7F	; 127
 5a8:	80 e8       	ldi	r24, 0x80	; 128
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	08 95       	ret

000005b0 <__fp_nan>:
 5b0:	9f ef       	ldi	r25, 0xFF	; 255
 5b2:	80 ec       	ldi	r24, 0xC0	; 192
 5b4:	08 95       	ret

000005b6 <__fp_pscA>:
 5b6:	00 24       	eor	r0, r0
 5b8:	0a 94       	dec	r0
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	18 06       	cpc	r1, r24
 5c0:	09 06       	cpc	r0, r25
 5c2:	08 95       	ret

000005c4 <__fp_pscB>:
 5c4:	00 24       	eor	r0, r0
 5c6:	0a 94       	dec	r0
 5c8:	12 16       	cp	r1, r18
 5ca:	13 06       	cpc	r1, r19
 5cc:	14 06       	cpc	r1, r20
 5ce:	05 06       	cpc	r0, r21
 5d0:	08 95       	ret

000005d2 <__fp_round>:
 5d2:	09 2e       	mov	r0, r25
 5d4:	03 94       	inc	r0
 5d6:	00 0c       	add	r0, r0
 5d8:	11 f4       	brne	.+4      	; 0x5de <__fp_round+0xc>
 5da:	88 23       	and	r24, r24
 5dc:	52 f0       	brmi	.+20     	; 0x5f2 <__fp_round+0x20>
 5de:	bb 0f       	add	r27, r27
 5e0:	40 f4       	brcc	.+16     	; 0x5f2 <__fp_round+0x20>
 5e2:	bf 2b       	or	r27, r31
 5e4:	11 f4       	brne	.+4      	; 0x5ea <__fp_round+0x18>
 5e6:	60 ff       	sbrs	r22, 0
 5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <__fp_round+0x20>
 5ea:	6f 5f       	subi	r22, 0xFF	; 255
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	08 95       	ret

000005f4 <__fp_split3>:
 5f4:	57 fd       	sbrc	r21, 7
 5f6:	90 58       	subi	r25, 0x80	; 128
 5f8:	44 0f       	add	r20, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	59 f0       	breq	.+22     	; 0x614 <__fp_splitA+0x10>
 5fe:	5f 3f       	cpi	r21, 0xFF	; 255
 600:	71 f0       	breq	.+28     	; 0x61e <__fp_splitA+0x1a>
 602:	47 95       	ror	r20

00000604 <__fp_splitA>:
 604:	88 0f       	add	r24, r24
 606:	97 fb       	bst	r25, 7
 608:	99 1f       	adc	r25, r25
 60a:	61 f0       	breq	.+24     	; 0x624 <__fp_splitA+0x20>
 60c:	9f 3f       	cpi	r25, 0xFF	; 255
 60e:	79 f0       	breq	.+30     	; 0x62e <__fp_splitA+0x2a>
 610:	87 95       	ror	r24
 612:	08 95       	ret
 614:	12 16       	cp	r1, r18
 616:	13 06       	cpc	r1, r19
 618:	14 06       	cpc	r1, r20
 61a:	55 1f       	adc	r21, r21
 61c:	f2 cf       	rjmp	.-28     	; 0x602 <__fp_split3+0xe>
 61e:	46 95       	lsr	r20
 620:	f1 df       	rcall	.-30     	; 0x604 <__fp_splitA>
 622:	08 c0       	rjmp	.+16     	; 0x634 <__fp_splitA+0x30>
 624:	16 16       	cp	r1, r22
 626:	17 06       	cpc	r1, r23
 628:	18 06       	cpc	r1, r24
 62a:	99 1f       	adc	r25, r25
 62c:	f1 cf       	rjmp	.-30     	; 0x610 <__fp_splitA+0xc>
 62e:	86 95       	lsr	r24
 630:	71 05       	cpc	r23, r1
 632:	61 05       	cpc	r22, r1
 634:	08 94       	sec
 636:	08 95       	ret

00000638 <__fp_zero>:
 638:	e8 94       	clt

0000063a <__fp_szero>:
 63a:	bb 27       	eor	r27, r27
 63c:	66 27       	eor	r22, r22
 63e:	77 27       	eor	r23, r23
 640:	cb 01       	movw	r24, r22
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <lrint>:
 646:	de df       	rcall	.-68     	; 0x604 <__fp_splitA>
 648:	a8 f1       	brcs	.+106    	; 0x6b4 <lrint+0x6e>
 64a:	9e 57       	subi	r25, 0x7E	; 126
 64c:	a8 f1       	brcs	.+106    	; 0x6b8 <lrint+0x72>
 64e:	98 51       	subi	r25, 0x18	; 24
 650:	60 f0       	brcs	.+24     	; 0x66a <lrint+0x24>
 652:	39 f1       	breq	.+78     	; 0x6a2 <lrint+0x5c>
 654:	98 30       	cpi	r25, 0x08	; 8
 656:	70 f5       	brcc	.+92     	; 0x6b4 <lrint+0x6e>
 658:	09 2e       	mov	r0, r25
 65a:	99 27       	eor	r25, r25
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	88 1f       	adc	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	0a 94       	dec	r0
 666:	d1 f7       	brne	.-12     	; 0x65c <lrint+0x16>
 668:	1c c0       	rjmp	.+56     	; 0x6a2 <lrint+0x5c>
 66a:	bb 27       	eor	r27, r27
 66c:	99 3f       	cpi	r25, 0xF9	; 249
 66e:	4c f4       	brge	.+18     	; 0x682 <lrint+0x3c>
 670:	b1 11       	cpse	r27, r1
 672:	b1 e0       	ldi	r27, 0x01	; 1
 674:	b6 2b       	or	r27, r22
 676:	67 2f       	mov	r22, r23
 678:	78 2f       	mov	r23, r24
 67a:	88 27       	eor	r24, r24
 67c:	98 5f       	subi	r25, 0xF8	; 248
 67e:	b1 f7       	brne	.-20     	; 0x66c <lrint+0x26>
 680:	08 c0       	rjmp	.+16     	; 0x692 <lrint+0x4c>
 682:	86 95       	lsr	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b7 95       	ror	r27
 68a:	08 f4       	brcc	.+2      	; 0x68e <lrint+0x48>
 68c:	b1 60       	ori	r27, 0x01	; 1
 68e:	93 95       	inc	r25
 690:	c1 f7       	brne	.-16     	; 0x682 <lrint+0x3c>
 692:	bb 0f       	add	r27, r27
 694:	30 f4       	brcc	.+12     	; 0x6a2 <lrint+0x5c>
 696:	11 f4       	brne	.+4      	; 0x69c <lrint+0x56>
 698:	60 ff       	sbrs	r22, 0
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <lrint+0x5c>
 69c:	6f 5f       	subi	r22, 0xFF	; 255
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	3e f4       	brtc	.+14     	; 0x6b2 <lrint+0x6c>
 6a4:	90 95       	com	r25
 6a6:	80 95       	com	r24
 6a8:	70 95       	com	r23
 6aa:	61 95       	neg	r22
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	08 95       	ret
 6b4:	68 94       	set
 6b6:	c1 cf       	rjmp	.-126    	; 0x63a <__fp_szero>
 6b8:	bf cf       	rjmp	.-130    	; 0x638 <__fp_zero>

000006ba <__mulsf3>:
 6ba:	0b d0       	rcall	.+22     	; 0x6d2 <__mulsf3x>
 6bc:	8a cf       	rjmp	.-236    	; 0x5d2 <__fp_round>
 6be:	7b df       	rcall	.-266    	; 0x5b6 <__fp_pscA>
 6c0:	28 f0       	brcs	.+10     	; 0x6cc <__mulsf3+0x12>
 6c2:	80 df       	rcall	.-256    	; 0x5c4 <__fp_pscB>
 6c4:	18 f0       	brcs	.+6      	; 0x6cc <__mulsf3+0x12>
 6c6:	95 23       	and	r25, r21
 6c8:	09 f0       	breq	.+2      	; 0x6cc <__mulsf3+0x12>
 6ca:	6c cf       	rjmp	.-296    	; 0x5a4 <__fp_inf>
 6cc:	71 cf       	rjmp	.-286    	; 0x5b0 <__fp_nan>
 6ce:	11 24       	eor	r1, r1
 6d0:	b4 cf       	rjmp	.-152    	; 0x63a <__fp_szero>

000006d2 <__mulsf3x>:
 6d2:	90 df       	rcall	.-224    	; 0x5f4 <__fp_split3>
 6d4:	a0 f3       	brcs	.-24     	; 0x6be <__mulsf3+0x4>

000006d6 <__mulsf3_pse>:
 6d6:	95 9f       	mul	r25, r21
 6d8:	d1 f3       	breq	.-12     	; 0x6ce <__mulsf3+0x14>
 6da:	95 0f       	add	r25, r21
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	55 1f       	adc	r21, r21
 6e0:	62 9f       	mul	r22, r18
 6e2:	f0 01       	movw	r30, r0
 6e4:	72 9f       	mul	r23, r18
 6e6:	bb 27       	eor	r27, r27
 6e8:	f0 0d       	add	r31, r0
 6ea:	b1 1d       	adc	r27, r1
 6ec:	63 9f       	mul	r22, r19
 6ee:	aa 27       	eor	r26, r26
 6f0:	f0 0d       	add	r31, r0
 6f2:	b1 1d       	adc	r27, r1
 6f4:	aa 1f       	adc	r26, r26
 6f6:	64 9f       	mul	r22, r20
 6f8:	66 27       	eor	r22, r22
 6fa:	b0 0d       	add	r27, r0
 6fc:	a1 1d       	adc	r26, r1
 6fe:	66 1f       	adc	r22, r22
 700:	82 9f       	mul	r24, r18
 702:	22 27       	eor	r18, r18
 704:	b0 0d       	add	r27, r0
 706:	a1 1d       	adc	r26, r1
 708:	62 1f       	adc	r22, r18
 70a:	73 9f       	mul	r23, r19
 70c:	b0 0d       	add	r27, r0
 70e:	a1 1d       	adc	r26, r1
 710:	62 1f       	adc	r22, r18
 712:	83 9f       	mul	r24, r19
 714:	a0 0d       	add	r26, r0
 716:	61 1d       	adc	r22, r1
 718:	22 1f       	adc	r18, r18
 71a:	74 9f       	mul	r23, r20
 71c:	33 27       	eor	r19, r19
 71e:	a0 0d       	add	r26, r0
 720:	61 1d       	adc	r22, r1
 722:	23 1f       	adc	r18, r19
 724:	84 9f       	mul	r24, r20
 726:	60 0d       	add	r22, r0
 728:	21 1d       	adc	r18, r1
 72a:	82 2f       	mov	r24, r18
 72c:	76 2f       	mov	r23, r22
 72e:	6a 2f       	mov	r22, r26
 730:	11 24       	eor	r1, r1
 732:	9f 57       	subi	r25, 0x7F	; 127
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	8a f0       	brmi	.+34     	; 0x75a <__mulsf3_pse+0x84>
 738:	e1 f0       	breq	.+56     	; 0x772 <__mulsf3_pse+0x9c>
 73a:	88 23       	and	r24, r24
 73c:	4a f0       	brmi	.+18     	; 0x750 <__mulsf3_pse+0x7a>
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	bb 1f       	adc	r27, r27
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	91 50       	subi	r25, 0x01	; 1
 74c:	50 40       	sbci	r21, 0x00	; 0
 74e:	a9 f7       	brne	.-22     	; 0x73a <__mulsf3_pse+0x64>
 750:	9e 3f       	cpi	r25, 0xFE	; 254
 752:	51 05       	cpc	r21, r1
 754:	70 f0       	brcs	.+28     	; 0x772 <__mulsf3_pse+0x9c>
 756:	26 cf       	rjmp	.-436    	; 0x5a4 <__fp_inf>
 758:	70 cf       	rjmp	.-288    	; 0x63a <__fp_szero>
 75a:	5f 3f       	cpi	r21, 0xFF	; 255
 75c:	ec f3       	brlt	.-6      	; 0x758 <__mulsf3_pse+0x82>
 75e:	98 3e       	cpi	r25, 0xE8	; 232
 760:	dc f3       	brlt	.-10     	; 0x758 <__mulsf3_pse+0x82>
 762:	86 95       	lsr	r24
 764:	77 95       	ror	r23
 766:	67 95       	ror	r22
 768:	b7 95       	ror	r27
 76a:	f7 95       	ror	r31
 76c:	e7 95       	ror	r30
 76e:	9f 5f       	subi	r25, 0xFF	; 255
 770:	c1 f7       	brne	.-16     	; 0x762 <__mulsf3_pse+0x8c>
 772:	fe 2b       	or	r31, r30
 774:	88 0f       	add	r24, r24
 776:	91 1d       	adc	r25, r1
 778:	96 95       	lsr	r25
 77a:	87 95       	ror	r24
 77c:	97 f9       	bld	r25, 7
 77e:	08 95       	ret

00000780 <breakAll>:
#include "io_definitions.h"
#include "PWM_lib.h"


void changePwm_MotorLF(duty){	
	OCR0A = ((duty/100.) * 255);
 780:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(duty){
 OCR0B = ((duty/100.) * 255);
 782:	18 bc       	out	0x28, r1	; 40
}

void changePwm_MotorRF(duty){
OCR2A = ((duty/100.) * 255);
 784:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(duty){
OCR2B = ((duty/100.) * 255);
 788:	10 92 b4 00 	sts	0x00B4, r1
 78c:	08 95       	ret

0000078e <breakLeft>:
#include "io_definitions.h"
#include "PWM_lib.h"


void changePwm_MotorLF(duty){	
	OCR0A = ((duty/100.) * 255);
 78e:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(duty){
 OCR0B = ((duty/100.) * 255);
 790:	18 bc       	out	0x28, r1	; 40
 792:	08 95       	ret

00000794 <breakRight>:
}

void changePwm_MotorRF(duty){
OCR2A = ((duty/100.) * 255);
 794:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(duty){
OCR2B = ((duty/100.) * 255);
 798:	10 92 b4 00 	sts	0x00B4, r1
 79c:	08 95       	ret

0000079e <initTimer0>:
void initTimer0(){
	
	//Pt portul OC0A
	// Setting the pwm pin to output!
	//pt OC0A
	PWM_MOTOR_LF_DDR |= (1<<PWM_MOTOR_LF_PINx);
 79e:	23 9a       	sbi	0x04, 3	; 4
	
	//pt OC0B
	PWM_MOTOR_LB_DDR |= (1<<PWM_MOTOR_LB_PINx);
 7a0:	24 9a       	sbi	0x04, 4	; 4
	
	// Clear on compare, set OC0A to Bottom (non-inverting mode)
	TCCR0A |= (1<< COM0A1);
 7a2:	84 b5       	in	r24, 0x24	; 36
 7a4:	80 68       	ori	r24, 0x80	; 128
 7a6:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
 7a8:	84 b5       	in	r24, 0x24	; 36
 7aa:	8f 7b       	andi	r24, 0xBF	; 191
 7ac:	84 bd       	out	0x24, r24	; 36
	
	//pt OC0B
	TCCR0A |= (1<< COM0B1);
 7ae:	84 b5       	in	r24, 0x24	; 36
 7b0:	80 62       	ori	r24, 0x20	; 32
 7b2:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
 7b4:	84 b5       	in	r24, 0x24	; 36
 7b6:	8f 7e       	andi	r24, 0xEF	; 239
 7b8:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
 7ba:	84 b5       	in	r24, 0x24	; 36
 7bc:	83 60       	ori	r24, 0x03	; 3
 7be:	84 bd       	out	0x24, r24	; 36
#include "io_definitions.h"
#include "PWM_lib.h"


void changePwm_MotorLF(duty){	
	OCR0A = ((duty/100.) * 255);
 7c0:	17 bc       	out	0x27, r1	; 39
}

void changePwm_MotorLB(duty){
 OCR0B = ((duty/100.) * 255);
 7c2:	18 bc       	out	0x28, r1	; 40
	// setez factorul de umplere
	changePwm_MotorLF(0);
	changePwm_MotorLB(0);
	
	// reset counter
	TCNT0 = 0;
 7c4:	16 bc       	out	0x26, r1	; 38
	//enable clk/64 (From prescaler)
	TCCR0B = (1<<CS00)|(1<<CS01);
 7c6:	83 e0       	ldi	r24, 0x03	; 3
 7c8:	85 bd       	out	0x25, r24	; 37
 7ca:	08 95       	ret

000007cc <initTimer2>:
void initTimer2(){
	
	//Pt portul OC2A
	// Setting the pwm pin to output!
	//pt OC2A
	PWM_MOTOR_RF_DDR |= (1<<PWM_MOTOR_RF_PINx);
 7cc:	57 9a       	sbi	0x0a, 7	; 10
	
	//pt OC2B
	PWM_MOTOR_RB_DDR |= (1<<PWM_MOTOR_RB_PINx);
 7ce:	56 9a       	sbi	0x0a, 6	; 10
	
	// Clear on compare, set OC2A to Bottom (non-inverting mode)
	TCCR2A |= (1<< COM2A1);
 7d0:	e0 eb       	ldi	r30, 0xB0	; 176
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	80 68       	ori	r24, 0x80	; 128
 7d8:	80 83       	st	Z, r24
	TCCR2A &= ~(1<<COM2A0);
 7da:	80 81       	ld	r24, Z
 7dc:	8f 7b       	andi	r24, 0xBF	; 191
 7de:	80 83       	st	Z, r24
	
	//pt OC2B
	TCCR0A |= (1<< COM2B1);
 7e0:	84 b5       	in	r24, 0x24	; 36
 7e2:	80 62       	ori	r24, 0x20	; 32
 7e4:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM2B0);
 7e6:	84 b5       	in	r24, 0x24	; 36
 7e8:	8f 7e       	andi	r24, 0xEF	; 239
 7ea:	84 bd       	out	0x24, r24	; 36
	
	// Set as Fast PWM (TOP = 0xFF, Update of OCRx at BOTTOM, TOV flag set at MAX)
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
 7ec:	80 81       	ld	r24, Z
 7ee:	83 60       	ori	r24, 0x03	; 3
 7f0:	80 83       	st	Z, r24
void changePwm_MotorLB(duty){
 OCR0B = ((duty/100.) * 255);
}

void changePwm_MotorRF(duty){
OCR2A = ((duty/100.) * 255);
 7f2:	10 92 b3 00 	sts	0x00B3, r1
}

void changePwm_MotorRB(duty){
OCR2B = ((duty/100.) * 255);
 7f6:	10 92 b4 00 	sts	0x00B4, r1
	// setez factorul de umplere
	changePwm_MotorRF(0);
	changePwm_MotorRB(0);

	// reset counter
	TCNT2 = 0;
 7fa:	10 92 b2 00 	sts	0x00B2, r1
	//enable clk/64 (From prescaler)
	TCCR2B &= ~((1<<CS20)|(1<<CS21));
 7fe:	e1 eb       	ldi	r30, 0xB1	; 177
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	8c 7f       	andi	r24, 0xFC	; 252
 806:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
 808:	80 81       	ld	r24, Z
 80a:	84 60       	ori	r24, 0x04	; 4
 80c:	80 83       	st	Z, r24
 80e:	08 95       	ret

00000810 <__divmodsi4>:
 810:	05 2e       	mov	r0, r21
 812:	97 fb       	bst	r25, 7
 814:	1e f4       	brtc	.+6      	; 0x81c <__divmodsi4+0xc>
 816:	00 94       	com	r0
 818:	0e 94 1f 04 	call	0x83e	; 0x83e <__negsi2>
 81c:	57 fd       	sbrc	r21, 7
 81e:	07 d0       	rcall	.+14     	; 0x82e <__divmodsi4_neg2>
 820:	0e 94 2d 04 	call	0x85a	; 0x85a <__udivmodsi4>
 824:	07 fc       	sbrc	r0, 7
 826:	03 d0       	rcall	.+6      	; 0x82e <__divmodsi4_neg2>
 828:	4e f4       	brtc	.+18     	; 0x83c <__divmodsi4_exit>
 82a:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__negsi2>

0000082e <__divmodsi4_neg2>:
 82e:	50 95       	com	r21
 830:	40 95       	com	r20
 832:	30 95       	com	r19
 834:	21 95       	neg	r18
 836:	3f 4f       	sbci	r19, 0xFF	; 255
 838:	4f 4f       	sbci	r20, 0xFF	; 255
 83a:	5f 4f       	sbci	r21, 0xFF	; 255

0000083c <__divmodsi4_exit>:
 83c:	08 95       	ret

0000083e <__negsi2>:
 83e:	90 95       	com	r25
 840:	80 95       	com	r24
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	08 95       	ret

0000084e <__tablejump2__>:
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31

00000852 <__tablejump__>:
 852:	05 90       	lpm	r0, Z+
 854:	f4 91       	lpm	r31, Z
 856:	e0 2d       	mov	r30, r0
 858:	09 94       	ijmp

0000085a <__udivmodsi4>:
 85a:	a1 e2       	ldi	r26, 0x21	; 33
 85c:	1a 2e       	mov	r1, r26
 85e:	aa 1b       	sub	r26, r26
 860:	bb 1b       	sub	r27, r27
 862:	fd 01       	movw	r30, r26
 864:	0d c0       	rjmp	.+26     	; 0x880 <__udivmodsi4_ep>

00000866 <__udivmodsi4_loop>:
 866:	aa 1f       	adc	r26, r26
 868:	bb 1f       	adc	r27, r27
 86a:	ee 1f       	adc	r30, r30
 86c:	ff 1f       	adc	r31, r31
 86e:	a2 17       	cp	r26, r18
 870:	b3 07       	cpc	r27, r19
 872:	e4 07       	cpc	r30, r20
 874:	f5 07       	cpc	r31, r21
 876:	20 f0       	brcs	.+8      	; 0x880 <__udivmodsi4_ep>
 878:	a2 1b       	sub	r26, r18
 87a:	b3 0b       	sbc	r27, r19
 87c:	e4 0b       	sbc	r30, r20
 87e:	f5 0b       	sbc	r31, r21

00000880 <__udivmodsi4_ep>:
 880:	66 1f       	adc	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	1a 94       	dec	r1
 88a:	69 f7       	brne	.-38     	; 0x866 <__udivmodsi4_loop>
 88c:	60 95       	com	r22
 88e:	70 95       	com	r23
 890:	80 95       	com	r24
 892:	90 95       	com	r25
 894:	9b 01       	movw	r18, r22
 896:	ac 01       	movw	r20, r24
 898:	bd 01       	movw	r22, r26
 89a:	cf 01       	movw	r24, r30
 89c:	08 95       	ret

0000089e <_exit>:
 89e:	f8 94       	cli

000008a0 <__stop_program>:
 8a0:	ff cf       	rjmp	.-2      	; 0x8a0 <__stop_program>
