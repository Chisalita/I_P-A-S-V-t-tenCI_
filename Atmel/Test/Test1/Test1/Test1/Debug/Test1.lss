
Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000183  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000124  00000000  00000000  00000415  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000158  00000000  00000000  00000539  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018f  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000013  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:

int main(void)
{
	
	int baud = 9600;
	UCSR1C &= ~(1 << UMSEL10); //setting the UMSEL bit to 0 for asynchronous mode
  94:	ca ec       	ldi	r28, 0xCA	; 202
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	88 81       	ld	r24, Y
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	88 83       	st	Y, r24
	UCSR1C &= ~(1 << UMSEL11); //setting the UMSEL bit to 0 for asynchronous mode
  9e:	88 81       	ld	r24, Y
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	88 83       	st	Y, r24
	int ubbr_ = lrint(( (F_CPU) / (16L * baud) ) - 1L);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	8c e4       	ldi	r24, 0x4C	; 76
  aa:	92 e4       	ldi	r25, 0x42	; 66
  ac:	0e 94 92 00 	call	0x124	; 0x124 <lrint>
	//UBBR = ubbr_;
	
	
	//UCSR0A = (1 << U2X0); //setting the U2X bit to 1 for double speed asynchronous
	
	UCSR1A &= ~(1 << U2X1); //setting the U2X bit to 0 for normal speed asynchronous
  b0:	e8 ec       	ldi	r30, 0xC8	; 200
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	20 81       	ld	r18, Z
  b6:	2d 7f       	andi	r18, 0xFD	; 253
  b8:	20 83       	st	Z, r18
	
	// Set baud rate
	UBRR1H = (unsigned char)(ubbr_>>8);
  ba:	27 2f       	mov	r18, r23
  bc:	33 27       	eor	r19, r19
  be:	27 fd       	sbrc	r18, 7
  c0:	3a 95       	dec	r19
  c2:	20 93 cd 00 	sts	0x00CD, r18
	UBRR1L = (unsigned char)ubbr_;
  c6:	60 93 cc 00 	sts	0x00CC, r22
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	80 93 c9 00 	sts	0x00C9, r24
	// Set frame format: 8data, 2stop bit
	/////////UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	UCSR1C |= (3<<UCSZ10);
  d0:	88 81       	ld	r24, Y
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	88 83       	st	Y, r24
	UCSR1C&=~(1<<USBS1);
  d6:	88 81       	ld	r24, Y
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	88 83       	st	Y, r24
	
	// Pairity mode - none
	
	UCSR1C &= ~(1 << UPM10);
  dc:	88 81       	ld	r24, Y
  de:	8f 7e       	andi	r24, 0xEF	; 239
  e0:	88 83       	st	Y, r24
	UCSR1C &= ~(1 << UPM11);
  e2:	88 81       	ld	r24, Y
  e4:	8f 7d       	andi	r24, 0xDF	; 223
  e6:	88 83       	st	Y, r24
	
	
	
	
	DDRA= (1<<5);
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	81 b9       	out	0x01, r24	; 1
	asm("NOP");
  ec:	00 00       	nop
	PINA=(1<<5);
  ee:	80 b9       	out	0x00, r24	; 0
	asm("NOP");
  f0:	00 00       	nop
	while(1)
	{
		
		//Recive
		while(! (UCSR1A & (1<<RXC1)));
		data = UDR1;
  f2:	ae ec       	ldi	r26, 0xCE	; 206
  f4:	b0 e0       	ldi	r27, 0x00	; 0
		//data+='0';
		//Transmit
		while(!(UCSR1A &(1<<UDRE1)));
		UDR1 = data;
		
		PINA=(1<<5);
  f6:	20 e2       	ldi	r18, 0x20	; 32
	
	while(1)
	{
		
		//Recive
		while(! (UCSR1A & (1<<RXC1)));
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	ec f7       	brge	.-6      	; 0xf8 <main+0x64>
		data = UDR1;
  fe:	9c 91       	ld	r25, X
		//data+='0';
		//Transmit
		while(!(UCSR1A &(1<<UDRE1)));
 100:	80 81       	ld	r24, Z
 102:	85 ff       	sbrs	r24, 5
 104:	fd cf       	rjmp	.-6      	; 0x100 <main+0x6c>
		UDR1 = data;
 106:	9c 93       	st	X, r25
		
		PINA=(1<<5);
 108:	20 b9       	out	0x00, r18	; 0
		asm("NOP");
 10a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	3f e3       	ldi	r19, 0x3F	; 63
 10e:	82 e4       	ldi	r24, 0x42	; 66
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	31 50       	subi	r19, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x7e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x88>
 11c:	00 00       	nop
		_delay_ms(5000);
		PINA&=~(0x10);
 11e:	04 98       	cbi	0x00, 4	; 0
		asm("NOP");
 120:	00 00       	nop
		
		//TODO:: Please write your application code
	}
 122:	ea cf       	rjmp	.-44     	; 0xf8 <main+0x64>

00000124 <lrint>:
 124:	41 d0       	rcall	.+130    	; 0x1a8 <__fp_splitA>
 126:	a8 f1       	brcs	.+106    	; 0x192 <lrint+0x6e>
 128:	9e 57       	subi	r25, 0x7E	; 126
 12a:	a8 f1       	brcs	.+106    	; 0x196 <lrint+0x72>
 12c:	98 51       	subi	r25, 0x18	; 24
 12e:	60 f0       	brcs	.+24     	; 0x148 <lrint+0x24>
 130:	39 f1       	breq	.+78     	; 0x180 <lrint+0x5c>
 132:	98 30       	cpi	r25, 0x08	; 8
 134:	70 f5       	brcc	.+92     	; 0x192 <lrint+0x6e>
 136:	09 2e       	mov	r0, r25
 138:	99 27       	eor	r25, r25
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	88 1f       	adc	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	d1 f7       	brne	.-12     	; 0x13a <lrint+0x16>
 146:	1c c0       	rjmp	.+56     	; 0x180 <lrint+0x5c>
 148:	bb 27       	eor	r27, r27
 14a:	99 3f       	cpi	r25, 0xF9	; 249
 14c:	4c f4       	brge	.+18     	; 0x160 <lrint+0x3c>
 14e:	b1 11       	cpse	r27, r1
 150:	b1 e0       	ldi	r27, 0x01	; 1
 152:	b6 2b       	or	r27, r22
 154:	67 2f       	mov	r22, r23
 156:	78 2f       	mov	r23, r24
 158:	88 27       	eor	r24, r24
 15a:	98 5f       	subi	r25, 0xF8	; 248
 15c:	b1 f7       	brne	.-20     	; 0x14a <lrint+0x26>
 15e:	08 c0       	rjmp	.+16     	; 0x170 <lrint+0x4c>
 160:	86 95       	lsr	r24
 162:	77 95       	ror	r23
 164:	67 95       	ror	r22
 166:	b7 95       	ror	r27
 168:	08 f4       	brcc	.+2      	; 0x16c <lrint+0x48>
 16a:	b1 60       	ori	r27, 0x01	; 1
 16c:	93 95       	inc	r25
 16e:	c1 f7       	brne	.-16     	; 0x160 <lrint+0x3c>
 170:	bb 0f       	add	r27, r27
 172:	30 f4       	brcc	.+12     	; 0x180 <lrint+0x5c>
 174:	11 f4       	brne	.+4      	; 0x17a <lrint+0x56>
 176:	60 ff       	sbrs	r22, 0
 178:	03 c0       	rjmp	.+6      	; 0x180 <lrint+0x5c>
 17a:	6f 5f       	subi	r22, 0xFF	; 255
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	8f 4f       	sbci	r24, 0xFF	; 255
 180:	3e f4       	brtc	.+14     	; 0x190 <lrint+0x6c>
 182:	90 95       	com	r25
 184:	80 95       	com	r24
 186:	70 95       	com	r23
 188:	61 95       	neg	r22
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
 18c:	8f 4f       	sbci	r24, 0xFF	; 255
 18e:	9f 4f       	sbci	r25, 0xFF	; 255
 190:	08 95       	ret
 192:	68 94       	set
 194:	24 c0       	rjmp	.+72     	; 0x1de <__fp_szero>
 196:	22 c0       	rjmp	.+68     	; 0x1dc <__fp_zero>

00000198 <__fp_split3>:
 198:	57 fd       	sbrc	r21, 7
 19a:	90 58       	subi	r25, 0x80	; 128
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <__fp_splitA+0x10>
 1a2:	5f 3f       	cpi	r21, 0xFF	; 255
 1a4:	71 f0       	breq	.+28     	; 0x1c2 <__fp_splitA+0x1a>
 1a6:	47 95       	ror	r20

000001a8 <__fp_splitA>:
 1a8:	88 0f       	add	r24, r24
 1aa:	97 fb       	bst	r25, 7
 1ac:	99 1f       	adc	r25, r25
 1ae:	61 f0       	breq	.+24     	; 0x1c8 <__fp_splitA+0x20>
 1b0:	9f 3f       	cpi	r25, 0xFF	; 255
 1b2:	79 f0       	breq	.+30     	; 0x1d2 <__fp_splitA+0x2a>
 1b4:	87 95       	ror	r24
 1b6:	08 95       	ret
 1b8:	12 16       	cp	r1, r18
 1ba:	13 06       	cpc	r1, r19
 1bc:	14 06       	cpc	r1, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	f2 cf       	rjmp	.-28     	; 0x1a6 <__fp_split3+0xe>
 1c2:	46 95       	lsr	r20
 1c4:	f1 df       	rcall	.-30     	; 0x1a8 <__fp_splitA>
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <__fp_splitA+0x30>
 1c8:	16 16       	cp	r1, r22
 1ca:	17 06       	cpc	r1, r23
 1cc:	18 06       	cpc	r1, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	f1 cf       	rjmp	.-30     	; 0x1b4 <__fp_splitA+0xc>
 1d2:	86 95       	lsr	r24
 1d4:	71 05       	cpc	r23, r1
 1d6:	61 05       	cpc	r22, r1
 1d8:	08 94       	sec
 1da:	08 95       	ret

000001dc <__fp_zero>:
 1dc:	e8 94       	clt

000001de <__fp_szero>:
 1de:	bb 27       	eor	r27, r27
 1e0:	66 27       	eor	r22, r22
 1e2:	77 27       	eor	r23, r23
 1e4:	cb 01       	movw	r24, r22
 1e6:	97 f9       	bld	r25, 7
 1e8:	08 95       	ret

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
